
data-logging-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010094  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08010294  08010294  00020294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010858  08010858  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08010858  08010858  00020858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010860  08010860  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010860  08010860  00020860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010864  08010864  00020864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08010868  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000073b8  200000f0  08010954  000300f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200074a8  08010954  000374a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b041  00000000  00000000  0003011a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cf0  00000000  00000000  0005b15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  00060e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b10  00000000  00000000  00062c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f108  00000000  00000000  00064720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026142  00000000  00000000  00093828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001111e6  00000000  00000000  000b996a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cab50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e68  00000000  00000000  001caba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000f0 	.word	0x200000f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801027c 	.word	0x0801027c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000f4 	.word	0x200000f4
 800023c:	0801027c 	.word	0x0801027c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b96e 	b.w	800095c <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468c      	mov	ip, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f040 8083 	bne.w	80007ae <__udivmoddi4+0x116>
 80006a8:	428a      	cmp	r2, r1
 80006aa:	4617      	mov	r7, r2
 80006ac:	d947      	bls.n	800073e <__udivmoddi4+0xa6>
 80006ae:	fab2 f282 	clz	r2, r2
 80006b2:	b142      	cbz	r2, 80006c6 <__udivmoddi4+0x2e>
 80006b4:	f1c2 0020 	rsb	r0, r2, #32
 80006b8:	fa24 f000 	lsr.w	r0, r4, r0
 80006bc:	4091      	lsls	r1, r2
 80006be:	4097      	lsls	r7, r2
 80006c0:	ea40 0c01 	orr.w	ip, r0, r1
 80006c4:	4094      	lsls	r4, r2
 80006c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006ca:	0c23      	lsrs	r3, r4, #16
 80006cc:	fbbc f6f8 	udiv	r6, ip, r8
 80006d0:	fa1f fe87 	uxth.w	lr, r7
 80006d4:	fb08 c116 	mls	r1, r8, r6, ip
 80006d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006dc:	fb06 f10e 	mul.w	r1, r6, lr
 80006e0:	4299      	cmp	r1, r3
 80006e2:	d909      	bls.n	80006f8 <__udivmoddi4+0x60>
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006ea:	f080 8119 	bcs.w	8000920 <__udivmoddi4+0x288>
 80006ee:	4299      	cmp	r1, r3
 80006f0:	f240 8116 	bls.w	8000920 <__udivmoddi4+0x288>
 80006f4:	3e02      	subs	r6, #2
 80006f6:	443b      	add	r3, r7
 80006f8:	1a5b      	subs	r3, r3, r1
 80006fa:	b2a4      	uxth	r4, r4
 80006fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000700:	fb08 3310 	mls	r3, r8, r0, r3
 8000704:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000708:	fb00 fe0e 	mul.w	lr, r0, lr
 800070c:	45a6      	cmp	lr, r4
 800070e:	d909      	bls.n	8000724 <__udivmoddi4+0x8c>
 8000710:	193c      	adds	r4, r7, r4
 8000712:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000716:	f080 8105 	bcs.w	8000924 <__udivmoddi4+0x28c>
 800071a:	45a6      	cmp	lr, r4
 800071c:	f240 8102 	bls.w	8000924 <__udivmoddi4+0x28c>
 8000720:	3802      	subs	r0, #2
 8000722:	443c      	add	r4, r7
 8000724:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000728:	eba4 040e 	sub.w	r4, r4, lr
 800072c:	2600      	movs	r6, #0
 800072e:	b11d      	cbz	r5, 8000738 <__udivmoddi4+0xa0>
 8000730:	40d4      	lsrs	r4, r2
 8000732:	2300      	movs	r3, #0
 8000734:	e9c5 4300 	strd	r4, r3, [r5]
 8000738:	4631      	mov	r1, r6
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	b902      	cbnz	r2, 8000742 <__udivmoddi4+0xaa>
 8000740:	deff      	udf	#255	; 0xff
 8000742:	fab2 f282 	clz	r2, r2
 8000746:	2a00      	cmp	r2, #0
 8000748:	d150      	bne.n	80007ec <__udivmoddi4+0x154>
 800074a:	1bcb      	subs	r3, r1, r7
 800074c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000750:	fa1f f887 	uxth.w	r8, r7
 8000754:	2601      	movs	r6, #1
 8000756:	fbb3 fcfe 	udiv	ip, r3, lr
 800075a:	0c21      	lsrs	r1, r4, #16
 800075c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000760:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000764:	fb08 f30c 	mul.w	r3, r8, ip
 8000768:	428b      	cmp	r3, r1
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0xe4>
 800076c:	1879      	adds	r1, r7, r1
 800076e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0xe2>
 8000774:	428b      	cmp	r3, r1
 8000776:	f200 80e9 	bhi.w	800094c <__udivmoddi4+0x2b4>
 800077a:	4684      	mov	ip, r0
 800077c:	1ac9      	subs	r1, r1, r3
 800077e:	b2a3      	uxth	r3, r4
 8000780:	fbb1 f0fe 	udiv	r0, r1, lr
 8000784:	fb0e 1110 	mls	r1, lr, r0, r1
 8000788:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800078c:	fb08 f800 	mul.w	r8, r8, r0
 8000790:	45a0      	cmp	r8, r4
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x10c>
 8000794:	193c      	adds	r4, r7, r4
 8000796:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x10a>
 800079c:	45a0      	cmp	r8, r4
 800079e:	f200 80d9 	bhi.w	8000954 <__udivmoddi4+0x2bc>
 80007a2:	4618      	mov	r0, r3
 80007a4:	eba4 0408 	sub.w	r4, r4, r8
 80007a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007ac:	e7bf      	b.n	800072e <__udivmoddi4+0x96>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0x12e>
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	f000 80b1 	beq.w	800091a <__udivmoddi4+0x282>
 80007b8:	2600      	movs	r6, #0
 80007ba:	e9c5 0100 	strd	r0, r1, [r5]
 80007be:	4630      	mov	r0, r6
 80007c0:	4631      	mov	r1, r6
 80007c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c6:	fab3 f683 	clz	r6, r3
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d14a      	bne.n	8000864 <__udivmoddi4+0x1cc>
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d302      	bcc.n	80007d8 <__udivmoddi4+0x140>
 80007d2:	4282      	cmp	r2, r0
 80007d4:	f200 80b8 	bhi.w	8000948 <__udivmoddi4+0x2b0>
 80007d8:	1a84      	subs	r4, r0, r2
 80007da:	eb61 0103 	sbc.w	r1, r1, r3
 80007de:	2001      	movs	r0, #1
 80007e0:	468c      	mov	ip, r1
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d0a8      	beq.n	8000738 <__udivmoddi4+0xa0>
 80007e6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ea:	e7a5      	b.n	8000738 <__udivmoddi4+0xa0>
 80007ec:	f1c2 0320 	rsb	r3, r2, #32
 80007f0:	fa20 f603 	lsr.w	r6, r0, r3
 80007f4:	4097      	lsls	r7, r2
 80007f6:	fa01 f002 	lsl.w	r0, r1, r2
 80007fa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fe:	40d9      	lsrs	r1, r3
 8000800:	4330      	orrs	r0, r6
 8000802:	0c03      	lsrs	r3, r0, #16
 8000804:	fbb1 f6fe 	udiv	r6, r1, lr
 8000808:	fa1f f887 	uxth.w	r8, r7
 800080c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000810:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000814:	fb06 f108 	mul.w	r1, r6, r8
 8000818:	4299      	cmp	r1, r3
 800081a:	fa04 f402 	lsl.w	r4, r4, r2
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x19c>
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000826:	f080 808d 	bcs.w	8000944 <__udivmoddi4+0x2ac>
 800082a:	4299      	cmp	r1, r3
 800082c:	f240 808a 	bls.w	8000944 <__udivmoddi4+0x2ac>
 8000830:	3e02      	subs	r6, #2
 8000832:	443b      	add	r3, r7
 8000834:	1a5b      	subs	r3, r3, r1
 8000836:	b281      	uxth	r1, r0
 8000838:	fbb3 f0fe 	udiv	r0, r3, lr
 800083c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000840:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000844:	fb00 f308 	mul.w	r3, r0, r8
 8000848:	428b      	cmp	r3, r1
 800084a:	d907      	bls.n	800085c <__udivmoddi4+0x1c4>
 800084c:	1879      	adds	r1, r7, r1
 800084e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000852:	d273      	bcs.n	800093c <__udivmoddi4+0x2a4>
 8000854:	428b      	cmp	r3, r1
 8000856:	d971      	bls.n	800093c <__udivmoddi4+0x2a4>
 8000858:	3802      	subs	r0, #2
 800085a:	4439      	add	r1, r7
 800085c:	1acb      	subs	r3, r1, r3
 800085e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000862:	e778      	b.n	8000756 <__udivmoddi4+0xbe>
 8000864:	f1c6 0c20 	rsb	ip, r6, #32
 8000868:	fa03 f406 	lsl.w	r4, r3, r6
 800086c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000870:	431c      	orrs	r4, r3
 8000872:	fa20 f70c 	lsr.w	r7, r0, ip
 8000876:	fa01 f306 	lsl.w	r3, r1, r6
 800087a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800087e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000882:	431f      	orrs	r7, r3
 8000884:	0c3b      	lsrs	r3, r7, #16
 8000886:	fbb1 f9fe 	udiv	r9, r1, lr
 800088a:	fa1f f884 	uxth.w	r8, r4
 800088e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000892:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000896:	fb09 fa08 	mul.w	sl, r9, r8
 800089a:	458a      	cmp	sl, r1
 800089c:	fa02 f206 	lsl.w	r2, r2, r6
 80008a0:	fa00 f306 	lsl.w	r3, r0, r6
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x220>
 80008a6:	1861      	adds	r1, r4, r1
 80008a8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80008ac:	d248      	bcs.n	8000940 <__udivmoddi4+0x2a8>
 80008ae:	458a      	cmp	sl, r1
 80008b0:	d946      	bls.n	8000940 <__udivmoddi4+0x2a8>
 80008b2:	f1a9 0902 	sub.w	r9, r9, #2
 80008b6:	4421      	add	r1, r4
 80008b8:	eba1 010a 	sub.w	r1, r1, sl
 80008bc:	b2bf      	uxth	r7, r7
 80008be:	fbb1 f0fe 	udiv	r0, r1, lr
 80008c2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008c6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008ca:	fb00 f808 	mul.w	r8, r0, r8
 80008ce:	45b8      	cmp	r8, r7
 80008d0:	d907      	bls.n	80008e2 <__udivmoddi4+0x24a>
 80008d2:	19e7      	adds	r7, r4, r7
 80008d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008d8:	d22e      	bcs.n	8000938 <__udivmoddi4+0x2a0>
 80008da:	45b8      	cmp	r8, r7
 80008dc:	d92c      	bls.n	8000938 <__udivmoddi4+0x2a0>
 80008de:	3802      	subs	r0, #2
 80008e0:	4427      	add	r7, r4
 80008e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008e6:	eba7 0708 	sub.w	r7, r7, r8
 80008ea:	fba0 8902 	umull	r8, r9, r0, r2
 80008ee:	454f      	cmp	r7, r9
 80008f0:	46c6      	mov	lr, r8
 80008f2:	4649      	mov	r1, r9
 80008f4:	d31a      	bcc.n	800092c <__udivmoddi4+0x294>
 80008f6:	d017      	beq.n	8000928 <__udivmoddi4+0x290>
 80008f8:	b15d      	cbz	r5, 8000912 <__udivmoddi4+0x27a>
 80008fa:	ebb3 020e 	subs.w	r2, r3, lr
 80008fe:	eb67 0701 	sbc.w	r7, r7, r1
 8000902:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000906:	40f2      	lsrs	r2, r6
 8000908:	ea4c 0202 	orr.w	r2, ip, r2
 800090c:	40f7      	lsrs	r7, r6
 800090e:	e9c5 2700 	strd	r2, r7, [r5]
 8000912:	2600      	movs	r6, #0
 8000914:	4631      	mov	r1, r6
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	462e      	mov	r6, r5
 800091c:	4628      	mov	r0, r5
 800091e:	e70b      	b.n	8000738 <__udivmoddi4+0xa0>
 8000920:	4606      	mov	r6, r0
 8000922:	e6e9      	b.n	80006f8 <__udivmoddi4+0x60>
 8000924:	4618      	mov	r0, r3
 8000926:	e6fd      	b.n	8000724 <__udivmoddi4+0x8c>
 8000928:	4543      	cmp	r3, r8
 800092a:	d2e5      	bcs.n	80008f8 <__udivmoddi4+0x260>
 800092c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000930:	eb69 0104 	sbc.w	r1, r9, r4
 8000934:	3801      	subs	r0, #1
 8000936:	e7df      	b.n	80008f8 <__udivmoddi4+0x260>
 8000938:	4608      	mov	r0, r1
 800093a:	e7d2      	b.n	80008e2 <__udivmoddi4+0x24a>
 800093c:	4660      	mov	r0, ip
 800093e:	e78d      	b.n	800085c <__udivmoddi4+0x1c4>
 8000940:	4681      	mov	r9, r0
 8000942:	e7b9      	b.n	80008b8 <__udivmoddi4+0x220>
 8000944:	4666      	mov	r6, ip
 8000946:	e775      	b.n	8000834 <__udivmoddi4+0x19c>
 8000948:	4630      	mov	r0, r6
 800094a:	e74a      	b.n	80007e2 <__udivmoddi4+0x14a>
 800094c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000950:	4439      	add	r1, r7
 8000952:	e713      	b.n	800077c <__udivmoddi4+0xe4>
 8000954:	3802      	subs	r0, #2
 8000956:	443c      	add	r4, r7
 8000958:	e724      	b.n	80007a4 <__udivmoddi4+0x10c>
 800095a:	bf00      	nop

0800095c <__aeabi_idiv0>:
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <dlm_init>:

// dlm_init
//  This function will handle power-on behavior, all completely TBD
//  according to everything else the module does
void dlm_init(CAN_HandleTypeDef* hcan_ptr1, CAN_HandleTypeDef* hcan_ptr2)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
    // init GopherCAN
	dlm_hcan1 = hcan_ptr1;
 800096a:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <dlm_init+0x88>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6013      	str	r3, [r2, #0]
	dlm_hcan2 = hcan_ptr2;
 8000970:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <dlm_init+0x8c>)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	6013      	str	r3, [r2, #0]

	// initialize CAN
	// NOTE: CAN will also need to be added in CubeMX and code must be generated
	// Check the STM_CAN repo for the file "Fxxx CAN Config Settings.pptx" for the correct settings
	if (init_can(dlm_hcan1, DLM_ID, BXTYPE_MASTER)
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <dlm_init+0x88>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2200      	movs	r2, #0
 800097c:	2101      	movs	r1, #1
 800097e:	4618      	mov	r0, r3
 8000980:	f00d ff54 	bl	800e82c <init_can>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d109      	bne.n	800099e <dlm_init+0x3e>
			|| init_can(dlm_hcan2, DLM_ID, BXTYPE_SLAVE))
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <dlm_init+0x8c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2201      	movs	r2, #1
 8000990:	2101      	movs	r1, #1
 8000992:	4618      	mov	r0, r3
 8000994:	f00d ff4a 	bl	800e82c <init_can>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d000      	beq.n	80009a0 <dlm_init+0x40>
	{
		// an error has occurred, stay here
		while (1);
 800099e:	e7fe      	b.n	800099e <dlm_init+0x3e>
	}

	// Declare which bus is which using define_can_bus
	define_can_bus(dlm_hcan2, GCAN0, 0);
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <dlm_init+0x8c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00e fd5b 	bl	800f464 <define_can_bus>
	define_can_bus(dlm_hcan1, GCAN1, 1);
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <dlm_init+0x88>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2201      	movs	r2, #1
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f00e fd54 	bl	800f464 <define_can_bus>

	// enable the tester variables
	set_all_params_state(TRUE);
 80009bc:	2001      	movs	r0, #1
 80009be:	f00d ffed 	bl	800e99c <set_all_params_state>

	// use the RTC to generate the filename
	generate_filename(dlm_file_name);
 80009c2:	480b      	ldr	r0, [pc, #44]	; (80009f0 <dlm_init+0x90>)
 80009c4:	f000 fb8c 	bl	80010e0 <generate_filename>

	// init the main tasks of the DLM
	manage_logging_session_init(dlm_file_name);
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <dlm_init+0x90>)
 80009ca:	f000 fb75 	bl	80010b8 <manage_logging_session_init>
    manage_data_aquisition_init(&ram_data);
 80009ce:	4809      	ldr	r0, [pc, #36]	; (80009f4 <dlm_init+0x94>)
 80009d0:	f000 f850 	bl	8000a74 <manage_data_aquisition_init>
    move_ram_data_to_storage_init(&ram_data, dlm_file_name);
 80009d4:	4906      	ldr	r1, [pc, #24]	; (80009f0 <dlm_init+0x90>)
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <dlm_init+0x94>)
 80009d8:	f000 fbfe 	bl	80011d8 <move_ram_data_to_storage_init>

    // in REV1 we will start the logging session right away
    begin_logging_session();
 80009dc:	f000 f82a 	bl	8000a34 <begin_logging_session>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200043a8 	.word	0x200043a8
 80009ec:	20004340 	.word	0x20004340
 80009f0:	20004344 	.word	0x20004344
 80009f4:	2000010c 	.word	0x2000010c

080009f8 <manage_data_aquisition>:
//
// Call FRQ:
//  This function will need to be called at the maximum parameter
//  request rate the DLM should support.
void manage_data_aquisition()
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	if (logging_status != LOGGING_ACTIVE)
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <manage_data_aquisition+0x1c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d104      	bne.n	8000a0e <manage_data_aquisition+0x16>
	{
		return;
	}

    request_all_buckets();
 8000a04:	f000 f9b0 	bl	8000d68 <request_all_buckets>
    store_new_data();
 8000a08:	f000 fa00 	bl	8000e0c <store_new_data>
 8000a0c:	e000      	b.n	8000a10 <manage_data_aquisition+0x18>
		return;
 8000a0e:	bf00      	nop
}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000118 	.word	0x20000118

08000a18 <move_ram_data_to_storage>:
//  involve many factors including:
//   - the max amount of lost data that we are willing to take
//   - the size of the RAM buffer and how long that will take to fill up
//   - how many write cycles to the persistent storage we are ok giving up
void move_ram_data_to_storage()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	if (logging_status != LOGGING_ACTIVE)
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <move_ram_data_to_storage+0x18>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d102      	bne.n	8000a2a <move_ram_data_to_storage+0x12>
		return;
	}

    // TODO Use some logic to determine when the best time is to write to storage. Right
	// now it just writes every 2 seconds
	write_data_and_handle_errors();
 8000a24:	f000 fbf2 	bl	800120c <write_data_and_handle_errors>
 8000a28:	e000      	b.n	8000a2c <move_ram_data_to_storage+0x14>
		return;
 8000a2a:	bf00      	nop
}
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000118 	.word	0x20000118

08000a34 <begin_logging_session>:
//  logging session
//
// Call FRQ:
//  at the beginning of each logging session
void begin_logging_session()
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	logging_status = LOGGING_ACTIVE;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <begin_logging_session+0x14>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	20000118 	.word	0x20000118

08000a4c <can_service_loop>:
//  if it has been received
//
// Call FRQ:
//  100us because we can
void can_service_loop()
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	//service_can_rx_hardware(dlm_hcan1, CAN_RX_FIFO1);
	//service_can_rx_hardware(dlm_hcan2, CAN_RX_FIFO0);
	//service_can_rx_hardware(dlm_hcan2, CAN_RX_FIFO1);

	// handle each RX message in the buffer
	if (service_can_rx_buffer())
 8000a50:	f00e fa4a 	bl	800eee8 <service_can_rx_buffer>
	{
		// an error has occurred
	}

	service_can_tx_hardware(dlm_hcan1);
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <can_service_loop+0x20>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00e f99d 	bl	800ed98 <service_can_tx_hardware>
	service_can_tx_hardware(dlm_hcan2);
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <can_service_loop+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00e f998 	bl	800ed98 <service_can_tx_hardware>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200043a8 	.word	0x200043a8
 8000a70:	20004340 	.word	0x20004340

08000a74 <manage_data_aquisition_init>:

// manage_data_aquisition_init
//  Assign the pointer to the head node, set up the CAN commands, and tell the DAMs to start
//  defining their buckets
void manage_data_aquisition_init(DATA_INFO_NODE* ram_data)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af04      	add	r7, sp, #16
 8000a7a:	6078      	str	r0, [r7, #4]
    ram_data_head = ram_data;
 8000a7c:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <manage_data_aquisition_init+0x54>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]

    // Add the correct CAN command functions
    add_custom_can_func(SET_BUCKET_SIZE, &set_bucket_size, TRUE, NULL);
 8000a82:	2300      	movs	r3, #0
 8000a84:	2201      	movs	r2, #1
 8000a86:	4911      	ldr	r1, [pc, #68]	; (8000acc <manage_data_aquisition_init+0x58>)
 8000a88:	2004      	movs	r0, #4
 8000a8a:	f00e f955 	bl	800ed38 <add_custom_can_func>
    add_custom_can_func(ADD_PARAM_TO_BUCKET, &add_param_to_bucket, TRUE, NULL);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2201      	movs	r2, #1
 8000a92:	490f      	ldr	r1, [pc, #60]	; (8000ad0 <manage_data_aquisition_init+0x5c>)
 8000a94:	2005      	movs	r0, #5
 8000a96:	f00e f94f 	bl	800ed38 <add_custom_can_func>
    add_custom_can_func(ASSIGN_BUCKET_TO_FRQ, &assign_bucket_to_frq, TRUE, NULL);
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	490d      	ldr	r1, [pc, #52]	; (8000ad4 <manage_data_aquisition_init+0x60>)
 8000aa0:	2006      	movs	r0, #6
 8000aa2:	f00e f949 	bl	800ed38 <add_custom_can_func>

    // Send CAN commands to all modules (specifically to the DAMs) that
    // this module is ready to be interacted with to add buckets
    send_can_command(PRIO_HIGH, ALL_MODULES_ID, SEND_BUCKET_PARAMS, 0, 0, 0, 0);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9302      	str	r3, [sp, #8]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f00d ffd9 	bl	800ea70 <send_can_command>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200043ac 	.word	0x200043ac
 8000acc:	08000ad9 	.word	0x08000ad9
 8000ad0:	08000be5 	.word	0x08000be5
 8000ad4:	08000d01 	.word	0x08000d01

08000ad8 <set_bucket_size>:
//  function that will handle the SET_BUCKET_SIZE command from the DAM. This
//  will search for the bucket in the LL with the correct ID, or create a new
//  one if it does not exsist
void set_bucket_size(U8 sending_dam, void* UNUSED,
    U8 bucket_id, U8 num_of_params, U8 UNUSED2, U8 UNUSED3)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af04      	add	r7, sp, #16
 8000ade:	6039      	str	r1, [r7, #0]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	71bb      	strb	r3, [r7, #6]
 8000aec:	4613      	mov	r3, r2
 8000aee:	717b      	strb	r3, [r7, #5]
    BUCKET_NODE* above_bucket_node = &bucket_list_head;
 8000af0:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <set_bucket_size+0x104>)
 8000af2:	60fb      	str	r3, [r7, #12]
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8000af4:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <set_bucket_size+0x104>)
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	60bb      	str	r3, [r7, #8]

    // check if there exists a bucket with this ID on this DAM in the bucket list
    while (bucket_node != NULL)
 8000afa:	e00e      	b.n	8000b1a <set_bucket_size+0x42>
    {
        if ((bucket_node->bucket.dam_id == sending_dam)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	79fa      	ldrb	r2, [r7, #7]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d104      	bne.n	8000b10 <set_bucket_size+0x38>
            && (bucket_node->bucket.bucket_id == bucket_id))
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	79ba      	ldrb	r2, [r7, #6]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d008      	beq.n	8000b22 <set_bucket_size+0x4a>
            // This is the correct bucket. Move on to the next step
            break;
        }

        // this is not the correct bucket. Try the next one
        above_bucket_node = bucket_node;
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60fb      	str	r3, [r7, #12]
        bucket_node = bucket_node->next;
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	60bb      	str	r3, [r7, #8]
    while (bucket_node != NULL)
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1ed      	bne.n	8000afc <set_bucket_size+0x24>
 8000b20:	e000      	b.n	8000b24 <set_bucket_size+0x4c>
            break;
 8000b22:	bf00      	nop
    }

    // if the bucket does not exist, make a new one and use it
    if (bucket_node == NULL)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d12c      	bne.n	8000b84 <set_bucket_size+0xac>
    {
        bucket_node = (BUCKET_NODE*)malloc(sizeof(BUCKET_NODE));
 8000b2a:	2014      	movs	r0, #20
 8000b2c:	f00e ff48 	bl	800f9c0 <malloc>
 8000b30:	4603      	mov	r3, r0
 8000b32:	60bb      	str	r3, [r7, #8]

        // test if malloc failed
        if (bucket_node == NULL)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10f      	bne.n	8000b5a <set_bucket_size+0x82>
        {
            // resend the command to restart the sequence and note the error
            send_can_command(PRIO_HIGH, sending_dam, SEND_BUCKET_PARAMS, 0, 0, 0, 0);
 8000b3a:	79f9      	ldrb	r1, [r7, #7]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9302      	str	r3, [sp, #8]
 8000b40:	2300      	movs	r3, #0
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	2300      	movs	r3, #0
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f00d ff8f 	bl	800ea70 <send_can_command>
            last_mda_error = MDA_MALLOC_ERROR;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <set_bucket_size+0x108>)
 8000b54:	22ff      	movs	r2, #255	; 0xff
 8000b56:	701a      	strb	r2, [r3, #0]
            return;
 8000b58:	e03c      	b.n	8000bd4 <set_bucket_size+0xfc>
        }

        // this is needed to make sure the list knows to stop at the end
        bucket_node->next = NULL;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
        bucket_node->bucket.param_ids = NULL;
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]

        // set the details of this new bucket
        bucket_node->bucket.dam_id = sending_dam;
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	79fa      	ldrb	r2, [r7, #7]
 8000b6a:	701a      	strb	r2, [r3, #0]
        bucket_node->bucket.bucket_id = bucket_id;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	79ba      	ldrb	r2, [r7, #6]
 8000b70:	705a      	strb	r2, [r3, #1]

        // Disable this bucket by setting the ms_between_requests to 0
        bucket_node->bucket.ms_between_requests = 0;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2200      	movs	r2, #0
 8000b76:	805a      	strh	r2, [r3, #2]
        bucket_node->bucket.last_request = 0;
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]

        // set the above node to this new node
        above_bucket_node->next = bucket_node;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	68ba      	ldr	r2, [r7, #8]
 8000b82:	611a      	str	r2, [r3, #16]
    }

    // set the number of parameters in this bucket. No parameters have been added yet
    bucket_node->bucket.params_added = 0;
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2200      	movs	r2, #0
 8000b88:	725a      	strb	r2, [r3, #9]
    bucket_node->bucket.num_of_params = num_of_params;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	797a      	ldrb	r2, [r7, #5]
 8000b8e:	721a      	strb	r2, [r3, #8]

    // free any memory that may have been used for the old parameter array
    free(bucket_node->bucket.param_ids);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f00e ff1b 	bl	800f9d0 <free>

    // malloc some memory for the new parameter array
    bucket_node->bucket.param_ids = (BUCKET_PARAM_INFO*)malloc(num_of_params * sizeof(BUCKET_PARAM_INFO));
 8000b9a:	797b      	ldrb	r3, [r7, #5]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00e ff0e 	bl	800f9c0 <malloc>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60da      	str	r2, [r3, #12]

    // test if the malloc failed
    if (bucket_node->bucket.param_ids == NULL)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10f      	bne.n	8000bd4 <set_bucket_size+0xfc>
	{
		// resend the command to restart the sequence and note the error
		send_can_command(PRIO_HIGH, sending_dam, SEND_BUCKET_PARAMS, 0, 0, 0, 0);
 8000bb4:	79f9      	ldrb	r1, [r7, #7]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9302      	str	r3, [sp, #8]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f00d ff52 	bl	800ea70 <send_can_command>
		last_mda_error = MDA_MALLOC_ERROR;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <set_bucket_size+0x108>)
 8000bce:	22ff      	movs	r2, #255	; 0xff
 8000bd0:	701a      	strb	r2, [r3, #0]
		return;
 8000bd2:	bf00      	nop
	}
}
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000011c 	.word	0x2000011c
 8000be0:	20000130 	.word	0x20000130

08000be4 <add_param_to_bucket>:
//  This function is a CAN command, designed to be activated by the DAM. When
//  called, this will add the param inputted to the correct bucket with the assosiated
//  DAM included. Built to handle a general amount of DAMs, params, and buckets
void add_param_to_bucket(U8 sending_dam, void* UNUSED,
	U8 bucket_id, U8 param_id_msb, U8 param_id_lsb, U8 UNUSED3)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af04      	add	r7, sp, #16
 8000bea:	6039      	str	r1, [r7, #0]
 8000bec:	4611      	mov	r1, r2
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	71bb      	strb	r3, [r7, #6]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	717b      	strb	r3, [r7, #5]
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8000bfc:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <add_param_to_bucket+0x118>)
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	617b      	str	r3, [r7, #20]
    BUCKET_PARAM_INFO* param_array;
    U16 param_id;
    U8 c;

    // create the param_id from the two 8-bit chunks
    param_id = (param_id_msb << BITS_IN_BYTE) | param_id_lsb;
 8000c02:	797b      	ldrb	r3, [r7, #5]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	823b      	strh	r3, [r7, #16]

    // check if there exists a bucket with this ID on this DAM in the bucket list
    while (bucket_node != NULL)
 8000c14:	e00c      	b.n	8000c30 <add_param_to_bucket+0x4c>
    {
        if ((bucket_node->bucket.dam_id == sending_dam)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d104      	bne.n	8000c2a <add_param_to_bucket+0x46>
            && (bucket_node->bucket.bucket_id == bucket_id))
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	785b      	ldrb	r3, [r3, #1]
 8000c24:	79ba      	ldrb	r2, [r7, #6]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d006      	beq.n	8000c38 <add_param_to_bucket+0x54>
            // This is the correct bucket. Move on to the next step
            break;
        }

        // this is not the correct bucket. Try the next one
        bucket_node = bucket_node->next;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	617b      	str	r3, [r7, #20]
    while (bucket_node != NULL)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1ef      	bne.n	8000c16 <add_param_to_bucket+0x32>
 8000c36:	e000      	b.n	8000c3a <add_param_to_bucket+0x56>
            break;
 8000c38:	bf00      	nop
    }

    // if the bucket does not exist, resend SEND_BUCKET_PARAMS to ask the DAM
    // to start the process over again
    if (bucket_node == NULL)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10c      	bne.n	8000c5a <add_param_to_bucket+0x76>
    {
        // there may be some repeats when this is sent, but that is ok
        send_can_command(PRIO_HIGH, sending_dam, SEND_BUCKET_PARAMS, 0, 0, 0, 0);
 8000c40:	79f9      	ldrb	r1, [r7, #7]
 8000c42:	2300      	movs	r3, #0
 8000c44:	9302      	str	r3, [sp, #8]
 8000c46:	2300      	movs	r3, #0
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	2203      	movs	r2, #3
 8000c52:	2000      	movs	r0, #0
 8000c54:	f00d ff0c 	bl	800ea70 <send_can_command>
        return;
 8000c58:	e04d      	b.n	8000cf6 <add_param_to_bucket+0x112>
    }

    // check if this bucket is already full. If it is, tell the DAM this bucket is ready
    // without adding the sent parameter
    if (bucket_node->bucket.params_added == bucket_node->bucket.num_of_params)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	7a5a      	ldrb	r2, [r3, #9]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	7a1b      	ldrb	r3, [r3, #8]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d10b      	bne.n	8000c7e <add_param_to_bucket+0x9a>
	{
		send_can_command(PRIO_HIGH, sending_dam, BUCKET_OK, bucket_id, 0, 0, 0);
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	79f9      	ldrb	r1, [r7, #7]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	9202      	str	r2, [sp, #8]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	9201      	str	r2, [sp, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	9200      	str	r2, [sp, #0]
 8000c76:	2207      	movs	r2, #7
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f00d fef9 	bl	800ea70 <send_can_command>
	}

    // get a pointer to the location of the parameter array
    param_array = bucket_node->bucket.param_ids;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	60fb      	str	r3, [r7, #12]

    // Check to make sure this parameter is not already in the list. Do not add it
    // if it is
    for (c = 0; c < bucket_node->bucket.params_added; c++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	74fb      	strb	r3, [r7, #19]
 8000c88:	e00a      	b.n	8000ca0 <add_param_to_bucket+0xbc>
    {
        if (param_array[c].parameter == param_id)
 8000c8a:	7cfb      	ldrb	r3, [r7, #19]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4413      	add	r3, r2
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	8a3a      	ldrh	r2, [r7, #16]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d02c      	beq.n	8000cf4 <add_param_to_bucket+0x110>
    for (c = 0; c < bucket_node->bucket.params_added; c++)
 8000c9a:	7cfb      	ldrb	r3, [r7, #19]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	74fb      	strb	r3, [r7, #19]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	7a5b      	ldrb	r3, [r3, #9]
 8000ca4:	7cfa      	ldrb	r2, [r7, #19]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d3ef      	bcc.n	8000c8a <add_param_to_bucket+0xa6>
            return;
        }
    }

    // set the details of the param_node in the first open spot of the array
    param_array[c].parameter = param_id;
 8000caa:	7cfb      	ldrb	r3, [r7, #19]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	8a3a      	ldrh	r2, [r7, #16]
 8000cb4:	801a      	strh	r2, [r3, #0]
    param_array[c].pending_responce = FALSE;
 8000cb6:	7cfb      	ldrb	r3, [r7, #19]
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	709a      	strb	r2, [r3, #2]

    // increase the number of parameters added to this bucket
    bucket_node->bucket.params_added++;
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	7a5b      	ldrb	r3, [r3, #9]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	725a      	strb	r2, [r3, #9]

    // if the number of params in this bucket is equal to the desired
    // size, send a BUCKET_OK command to the correct DAM
    if (bucket_node->bucket.params_added == bucket_node->bucket.num_of_params)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	7a5a      	ldrb	r2, [r3, #9]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	7a1b      	ldrb	r3, [r3, #8]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d10d      	bne.n	8000cf6 <add_param_to_bucket+0x112>
    {
        send_can_command(PRIO_HIGH, sending_dam, BUCKET_OK, bucket_id, 0, 0, 0);
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	79f9      	ldrb	r1, [r7, #7]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	9202      	str	r2, [sp, #8]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	9201      	str	r2, [sp, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	9200      	str	r2, [sp, #0]
 8000cea:	2207      	movs	r2, #7
 8000cec:	2000      	movs	r0, #0
 8000cee:	f00d febf 	bl	800ea70 <send_can_command>
 8000cf2:	e000      	b.n	8000cf6 <add_param_to_bucket+0x112>
            return;
 8000cf4:	bf00      	nop
    }
}
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000011c 	.word	0x2000011c

08000d00 <assign_bucket_to_frq>:
// assign_bucket_to_frq
//  This will take the inputed DAM and bucket ID and set the time to wait between each request
//  in ms. Designed to be called as a CAN command coming from a DAM
void assign_bucket_to_frq(U8 sending_dam, void* UNUSED,
    U8 bucket_id, U8 ms_between_requests_msb, U8 ms_between_requests_lsb, U8 UNUSED3)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6039      	str	r1, [r7, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	460b      	mov	r3, r1
 8000d12:	71bb      	strb	r3, [r7, #6]
 8000d14:	4613      	mov	r3, r2
 8000d16:	717b      	strb	r3, [r7, #5]
	// Skip the head node when searching
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <assign_bucket_to_frq+0x64>)
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	60fb      	str	r3, [r7, #12]
    U16 ms_between_requests;

    // create the U16 for ms_between_requests out of the 2 U8s
    ms_between_requests = (ms_between_requests_msb << BITS_IN_BYTE) | ms_between_requests_lsb;
 8000d1e:	797b      	ldrb	r3, [r7, #5]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	7e3b      	ldrb	r3, [r7, #24]
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	817b      	strh	r3, [r7, #10]

    // check if there exists a bucket with this ID on this DAM in the bucket list
    while (bucket_node != NULL)
 8000d2e:	e010      	b.n	8000d52 <assign_bucket_to_frq+0x52>
    {
        if ((bucket_node->bucket.dam_id == sending_dam)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d108      	bne.n	8000d4c <assign_bucket_to_frq+0x4c>
            && (bucket_node->bucket.bucket_id == bucket_id))
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	785b      	ldrb	r3, [r3, #1]
 8000d3e:	79ba      	ldrb	r2, [r7, #6]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d103      	bne.n	8000d4c <assign_bucket_to_frq+0x4c>
        {
            // This is the correct bucket. Assign the ms_between_request variable in the struct as needed
            bucket_node->bucket.ms_between_requests = ms_between_requests;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	897a      	ldrh	r2, [r7, #10]
 8000d48:	805a      	strh	r2, [r3, #2]
            return;
 8000d4a:	e005      	b.n	8000d58 <assign_bucket_to_frq+0x58>
        }

        // this is not the correct bucket. Try the next one
        bucket_node = bucket_node->next;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	60fb      	str	r3, [r7, #12]
    while (bucket_node != NULL)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1eb      	bne.n	8000d30 <assign_bucket_to_frq+0x30>
    }

    // The correct bucket was not found. Return
}
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	2000011c 	.word	0x2000011c

08000d68 <request_all_buckets>:

// request_all_buckets
//  Function to run through the list of buckets and checks if they need to be requested. If they do,
//  request it
void request_all_buckets()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af04      	add	r7, sp, #16
	// Skip the head node
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <request_all_buckets+0x9c>)
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	60fb      	str	r3, [r7, #12]
    BUCKET_PARAM_INFO* param_array;
    U8 c;

    while(bucket_node != NULL)
 8000d74:	e03d      	b.n	8000df2 <request_all_buckets+0x8a>
    {
        // check if it is the correct time to send a new message. 0ms between requests means the
        // bucket is not fully initialized
        if ((bucket_node->bucket.ms_between_requests != 0)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	885b      	ldrh	r3, [r3, #2]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d036      	beq.n	8000dec <request_all_buckets+0x84>
            && (HAL_GetTick() >= bucket_node->bucket.last_request + bucket_node->bucket.ms_between_requests))
 8000d7e:	f001 fb17 	bl	80023b0 <HAL_GetTick>
 8000d82:	4601      	mov	r1, r0
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	8852      	ldrh	r2, [r2, #2]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d32c      	bcc.n	8000dec <request_all_buckets+0x84>
        {
            // send the command to request the bucket
            if (send_can_command(PRIO_HIGH, bucket_node->bucket.dam_id,
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	7819      	ldrb	r1, [r3, #0]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	9202      	str	r2, [sp, #8]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	9201      	str	r2, [sp, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	9200      	str	r2, [sp, #0]
 8000da6:	2208      	movs	r2, #8
 8000da8:	2000      	movs	r0, #0
 8000daa:	f00d fe61 	bl	800ea70 <send_can_command>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <request_all_buckets+0x52>
                REQUEST_BUCKET, bucket_node->bucket.bucket_id, 0, 0, 0) != CAN_SUCCESS)
            {
                // set the last error variable to note the CAN error
                last_mda_error = MDA_CAN_ERROR;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <request_all_buckets+0xa0>)
 8000db6:	22fe      	movs	r2, #254	; 0xfe
 8000db8:	701a      	strb	r2, [r3, #0]
            }

            // set the pending response flag for each parameter in this bucket to true
            param_array = bucket_node->bucket.param_ids;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	60bb      	str	r3, [r7, #8]
            for (c = 0; c < bucket_node->bucket.params_added; c++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	e008      	b.n	8000dd8 <request_all_buckets+0x70>
            {
            	param_array->pending_responce = TRUE;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	709a      	strb	r2, [r3, #2]
            	param_array++;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	3304      	adds	r3, #4
 8000dd0:	60bb      	str	r3, [r7, #8]
            for (c = 0; c < bucket_node->bucket.params_added; c++)
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	7a5b      	ldrb	r3, [r3, #9]
 8000ddc:	79fa      	ldrb	r2, [r7, #7]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d3f1      	bcc.n	8000dc6 <request_all_buckets+0x5e>
            }

            // update the last request tick
            bucket_node->bucket.last_request = HAL_GetTick();
 8000de2:	f001 fae5 	bl	80023b0 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	605a      	str	r2, [r3, #4]
        }

        // move on to the next bucket
        bucket_node = bucket_node->next;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	60fb      	str	r3, [r7, #12]
    while(bucket_node != NULL)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1be      	bne.n	8000d76 <request_all_buckets+0xe>
    }

    // done with requesting the buckets
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000011c 	.word	0x2000011c
 8000e08:	20000130 	.word	0x20000130

08000e0c <store_new_data>:
// store_new_data
//  Function to figure out what data stored in the GopherCAN parameters is new
//  based on data in the bucket linked list. If it deturmines the data is new,
//  store that data to the data ring buffer
void store_new_data()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
	// Skip the head node
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <store_new_data+0x94>)
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	60fb      	str	r3, [r7, #12]
    CAN_INFO_STRUCT* param_info;
    U8 c;

    // For each parameter in each bucket, check if the last time it was
    // received is sooner than its bucket was requested and has not been already written
    while (bucket_node != NULL)
 8000e18:	e03c      	b.n	8000e94 <store_new_data+0x88>
    {
        param_array = bucket_node->bucket.param_ids;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	60bb      	str	r3, [r7, #8]

        // run through each parameter in the bucket
        for (c = 0; c < bucket_node->bucket.params_added; c++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	71fb      	strb	r3, [r7, #7]
 8000e24:	e02e      	b.n	8000e84 <store_new_data+0x78>
        {
            // get the CAN_INFO_STRUCT related to this parameter. Data stores the parameter ID in the node struct
            param_info = (CAN_INFO_STRUCT*)(all_parameter_structs[param_array->parameter]);
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <store_new_data+0x98>)
 8000e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e32:	603b      	str	r3, [r7, #0]

            // if the parameter is pending an update and the last RX of the param is after the
            // request was sent, it needs to be added to RAM
            if (param_array->pending_responce == TRUE
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	789b      	ldrb	r3, [r3, #2]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d11d      	bne.n	8000e78 <store_new_data+0x6c>
                && param_info->last_rx >= bucket_node->bucket.last_request)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d317      	bcc.n	8000e78 <store_new_data+0x6c>
            {
                // add the param data to RAM
                if (add_param_to_ram(param_array, bucket_node))
 8000e48:	68f9      	ldr	r1, [r7, #12]
 8000e4a:	68b8      	ldr	r0, [r7, #8]
 8000e4c:	f000 f830 	bl	8000eb0 <add_param_to_ram>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d008      	beq.n	8000e68 <store_new_data+0x5c>
                {
                	last_mda_error = MDA_MALLOC_ERROR;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <store_new_data+0x9c>)
 8000e58:	22ff      	movs	r2, #255	; 0xff
 8000e5a:	701a      	strb	r2, [r3, #0]

                	// for now, turn on the onboard LED (ld2, blue)
                	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	4812      	ldr	r0, [pc, #72]	; (8000eac <store_new_data+0xa0>)
 8000e62:	f002 fff5 	bl	8003e50 <HAL_GPIO_WritePin>
                	return;
 8000e66:	e018      	b.n	8000e9a <store_new_data+0x8e>
                }

                // adding the parameter was successful. Turn off the malloc failure LED
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	480f      	ldr	r0, [pc, #60]	; (8000eac <store_new_data+0xa0>)
 8000e6e:	f002 ffef 	bl	8003e50 <HAL_GPIO_WritePin>

                // disable the pending responce flag
                param_array->pending_responce = FALSE;
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2200      	movs	r2, #0
 8000e76:	709a      	strb	r2, [r3, #2]
            }

            // move on to the next parameter
            param_array++;
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	60bb      	str	r3, [r7, #8]
        for (c = 0; c < bucket_node->bucket.params_added; c++)
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	3301      	adds	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	7a5b      	ldrb	r3, [r3, #9]
 8000e88:	79fa      	ldrb	r2, [r7, #7]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3cb      	bcc.n	8000e26 <store_new_data+0x1a>
        }
        
        // move on to the next bucket
        bucket_node = bucket_node->next;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	60fb      	str	r3, [r7, #12]
    while (bucket_node != NULL)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1bf      	bne.n	8000e1a <store_new_data+0xe>
    }
}
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000011c 	.word	0x2000011c
 8000ea4:	2000001c 	.word	0x2000001c
 8000ea8:	20000130 	.word	0x20000130
 8000eac:	40020400 	.word	0x40020400

08000eb0 <add_param_to_ram>:


// add_param_to_ram
//  Function to add the data of a specific parameter to the RAM buffer
S8 add_param_to_ram(BUCKET_PARAM_INFO* param_info, BUCKET_NODE* bucket_node)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
    //  The size of the data can be obtained using the lookup table in GopherCAN

    DATA_INFO_NODE* data_node;
    CAN_INFO_STRUCT* can_param_struct;

    can_param_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[param_info->parameter]);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b79      	ldr	r3, [pc, #484]	; (80010a8 <add_param_to_ram+0x1f8>)
 8000ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30

    // Choose the correct type of data node based on the parameter data type, then malloc the memory needed
    switch (parameter_data_types[param_info->parameter])
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b77      	ldr	r3, [pc, #476]	; (80010ac <add_param_to_ram+0x1fc>)
 8000ed0:	5c9b      	ldrb	r3, [r3, r2]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	f200 80bd 	bhi.w	8001054 <add_param_to_ram+0x1a4>
 8000eda:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <add_param_to_ram+0x30>)
 8000edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee0:	08000f05 	.word	0x08000f05
 8000ee4:	08000f29 	.word	0x08000f29
 8000ee8:	08000f4d 	.word	0x08000f4d
 8000eec:	08000f71 	.word	0x08000f71
 8000ef0:	08000f99 	.word	0x08000f99
 8000ef4:	08000fbf 	.word	0x08000fbf
 8000ef8:	08000fe5 	.word	0x08000fe5
 8000efc:	08001009 	.word	0x08001009
 8000f00:	08001031 	.word	0x08001031
	{
	case UNSIGNED8: ;
        U8_DATA_NODE* u8_data_node = (U8_DATA_NODE*)malloc(sizeof(U8_DATA_NODE));
 8000f04:	2010      	movs	r0, #16
 8000f06:	f00e fd5b 	bl	800f9c0 <malloc>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	60fb      	str	r3, [r7, #12]

        // check for malloc failure
        if (u8_data_node == NULL)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <add_param_to_ram+0x6a>
        {
            return DLM_MALLOC_ERROR;
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f18:	e0c2      	b.n	80010a0 <add_param_to_ram+0x1f0>
        }

		u8_data_node->data = ((U8_CAN_STRUCT*)(can_param_struct))->data;
 8000f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1c:	79da      	ldrb	r2, [r3, #7]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	731a      	strb	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u8_data_node;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000f26:	e098      	b.n	800105a <add_param_to_ram+0x1aa>

	case UNSIGNED16: ;
		U16_DATA_NODE* u16_data_node = (U16_DATA_NODE*)malloc(sizeof(U16_DATA_NODE));
 8000f28:	2010      	movs	r0, #16
 8000f2a:	f00e fd49 	bl	800f9c0 <malloc>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	613b      	str	r3, [r7, #16]

        // check for malloc failure
        if (u16_data_node == NULL)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <add_param_to_ram+0x8e>
        {
            return DLM_MALLOC_ERROR;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f3c:	e0b0      	b.n	80010a0 <add_param_to_ram+0x1f0>
        }

		u16_data_node->data = ((U16_CAN_STRUCT*)(can_param_struct))->data;
 8000f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f40:	891a      	ldrh	r2, [r3, #8]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	819a      	strh	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u16_data_node;
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000f4a:	e086      	b.n	800105a <add_param_to_ram+0x1aa>

	case UNSIGNED32: ;
		U32_DATA_NODE* u32_data_node = (U32_DATA_NODE*)malloc(sizeof(U32_DATA_NODE));
 8000f4c:	2010      	movs	r0, #16
 8000f4e:	f00e fd37 	bl	800f9c0 <malloc>
 8000f52:	4603      	mov	r3, r0
 8000f54:	617b      	str	r3, [r7, #20]

        // check for malloc failure
        if (u32_data_node == NULL)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <add_param_to_ram+0xb2>
        {
            return DLM_MALLOC_ERROR;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f60:	e09e      	b.n	80010a0 <add_param_to_ram+0x1f0>
        }

		u32_data_node->data = ((U32_CAN_STRUCT*)(can_param_struct))->data;
 8000f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u32_data_node;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000f6e:	e074      	b.n	800105a <add_param_to_ram+0x1aa>

	case UNSIGNED64: ;
		U64_DATA_NODE* u64_data_node = (U64_DATA_NODE*)malloc(sizeof(U64_DATA_NODE));
 8000f70:	2018      	movs	r0, #24
 8000f72:	f00e fd25 	bl	800f9c0 <malloc>
 8000f76:	4603      	mov	r3, r0
 8000f78:	61bb      	str	r3, [r7, #24]

        // check for malloc failure
        if (u64_data_node == NULL)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <add_param_to_ram+0xd6>
        {
            return DLM_MALLOC_ERROR;
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f84:	e08c      	b.n	80010a0 <add_param_to_ram+0x1f0>
        }

		u64_data_node->data = ((U64_CAN_STRUCT*)(can_param_struct))->data;
 8000f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f8c:	69b9      	ldr	r1, [r7, #24]
 8000f8e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        data_node = (DATA_INFO_NODE*)u64_data_node;
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000f96:	e060      	b.n	800105a <add_param_to_ram+0x1aa>

	case SIGNED8: ;
		S8_DATA_NODE* s8_data_node = (S8_DATA_NODE*)malloc(sizeof(S8_DATA_NODE));
 8000f98:	2010      	movs	r0, #16
 8000f9a:	f00e fd11 	bl	800f9c0 <malloc>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	61fb      	str	r3, [r7, #28]

        // check for malloc failure
        if (s8_data_node == NULL)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <add_param_to_ram+0xfe>
        {
            return DLM_MALLOC_ERROR;
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fac:	e078      	b.n	80010a0 <add_param_to_ram+0x1f0>
        }

		s8_data_node->data = ((S8_CAN_STRUCT*)(can_param_struct))->data;
 8000fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb0:	f993 2007 	ldrsb.w	r2, [r3, #7]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	731a      	strb	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s8_data_node;
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000fbc:	e04d      	b.n	800105a <add_param_to_ram+0x1aa>

	case SIGNED16: ;
		S16_DATA_NODE* s16_data_node = (S16_DATA_NODE*)malloc(sizeof(S16_DATA_NODE));
 8000fbe:	2010      	movs	r0, #16
 8000fc0:	f00e fcfe 	bl	800f9c0 <malloc>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	623b      	str	r3, [r7, #32]

        // check for malloc failure
        if (s16_data_node == NULL)
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <add_param_to_ram+0x124>
        {
            return DLM_MALLOC_ERROR;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd2:	e065      	b.n	80010a0 <add_param_to_ram+0x1f0>
        }

		s16_data_node->data = ((S16_CAN_STRUCT*)(can_param_struct))->data;
 8000fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	819a      	strh	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s16_data_node;
 8000fde:	6a3b      	ldr	r3, [r7, #32]
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000fe2:	e03a      	b.n	800105a <add_param_to_ram+0x1aa>

	case SIGNED32: ;
		S32_DATA_NODE* s32_data_node = (S32_DATA_NODE*)malloc(sizeof(S32_DATA_NODE));
 8000fe4:	2010      	movs	r0, #16
 8000fe6:	f00e fceb 	bl	800f9c0 <malloc>
 8000fea:	4603      	mov	r3, r0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24

        // check for malloc failure
        if (s32_data_node == NULL)
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <add_param_to_ram+0x14a>
        {
            return DLM_MALLOC_ERROR;
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff8:	e052      	b.n	80010a0 <add_param_to_ram+0x1f0>
        }

		s32_data_node->data = ((S32_CAN_STRUCT*)(can_param_struct))->data;
 8000ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s32_data_node;
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001006:	e028      	b.n	800105a <add_param_to_ram+0x1aa>

	case SIGNED64: ;
		S64_DATA_NODE* s64_data_node = (S64_DATA_NODE*)malloc(sizeof(S64_DATA_NODE));
 8001008:	2018      	movs	r0, #24
 800100a:	f00e fcd9 	bl	800f9c0 <malloc>
 800100e:	4603      	mov	r3, r0
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28

        // check for malloc failure
        if (s64_data_node == NULL)
 8001012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <add_param_to_ram+0x16e>
        {
            return DLM_MALLOC_ERROR;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101c:	e040      	b.n	80010a0 <add_param_to_ram+0x1f0>
        }

		s64_data_node->data = ((S64_CAN_STRUCT*)(can_param_struct))->data;
 800101e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001020:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001026:	e9c1 2304 	strd	r2, r3, [r1, #16]
        data_node = (DATA_INFO_NODE*)s64_data_node;
 800102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102c:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 800102e:	e014      	b.n	800105a <add_param_to_ram+0x1aa>

	case FLOATING: ;
		FLOAT_DATA_NODE* float_data_node = (FLOAT_DATA_NODE*)malloc(sizeof(FLOAT_DATA_NODE));
 8001030:	2010      	movs	r0, #16
 8001032:	f00e fcc5 	bl	800f9c0 <malloc>
 8001036:	4603      	mov	r3, r0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c

        // check for malloc failure
        if (float_data_node == NULL)
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <add_param_to_ram+0x196>
        {
            return DLM_MALLOC_ERROR;
 8001040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001044:	e02c      	b.n	80010a0 <add_param_to_ram+0x1f0>
        }

		float_data_node->data = ((FLOAT_CAN_STRUCT*)(can_param_struct))->data;
 8001046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104c:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)float_data_node;
 800104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001050:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001052:	e002      	b.n	800105a <add_param_to_ram+0x1aa>

	default:
		// the datatype is not found for some reason
        return DLM_DATATYPE_NOT_FOUND;
 8001054:	f06f 0301 	mvn.w	r3, #1
 8001058:	e022      	b.n	80010a0 <add_param_to_ram+0x1f0>
	}

    // set the time the data was taken as the time is was requested, as there is less
    // TX delay than RX delay
    data_node->data_time = bucket_node->bucket.last_request;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001060:	601a      	str	r2, [r3, #0]

    // the parameter id is stored in the data of the parameter node
    data_node->param = param_info->parameter;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	881a      	ldrh	r2, [r3, #0]
 8001066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001068:	809a      	strh	r2, [r3, #4]

    while (!get_mutex_lock(&ram_data_mutex))
 800106a:	e002      	b.n	8001072 <add_param_to_ram+0x1c2>
    {
    	osDelay(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f00a fd88 	bl	800bb82 <osDelay>
    while (!get_mutex_lock(&ram_data_mutex))
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <add_param_to_ram+0x200>)
 8001074:	f000 fb10 	bl	8001698 <get_mutex_lock>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f6      	beq.n	800106c <add_param_to_ram+0x1bc>
    }

    // DEBUG just trying shit at this point
    taskENTER_CRITICAL();
 800107e:	f00d f8c5 	bl	800e20c <vPortEnterCritical>

   	// add the new node to the front of the list, after the head node
   	data_node->next = ram_data_head->next;
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <add_param_to_ram+0x204>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108a:	609a      	str	r2, [r3, #8]
  	ram_data_head->next = data_node;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <add_param_to_ram+0x204>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001092:	609a      	str	r2, [r3, #8]

  	// DEBUG
  	taskEXIT_CRITICAL();
 8001094:	f00d f8ee 	bl	800e274 <vPortExitCritical>
    release_mutex(&ram_data_mutex);
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <add_param_to_ram+0x200>)
 800109a:	f000 fb12 	bl	80016c2 <release_mutex>

    return DLM_SUCCESS;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3738      	adds	r7, #56	; 0x38
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000001c 	.word	0x2000001c
 80010ac:	20000070 	.word	0x20000070
 80010b0:	20004428 	.word	0x20004428
 80010b4:	200043ac 	.word	0x200043ac

080010b8 <manage_logging_session_init>:

// manage_logging_session_init
//  Add the CAN commands needed to set the RTC time and date. All other RTC inits are
//  done in main
void manage_logging_session_init()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	// add the RTC setting CAN commands
	add_custom_can_func(SET_RTC_TIME, &set_rtc_time, TRUE, NULL);
 80010bc:	2300      	movs	r3, #0
 80010be:	2201      	movs	r2, #1
 80010c0:	4905      	ldr	r1, [pc, #20]	; (80010d8 <manage_logging_session_init+0x20>)
 80010c2:	2001      	movs	r0, #1
 80010c4:	f00d fe38 	bl	800ed38 <add_custom_can_func>
	add_custom_can_func(SET_RTC_DATE, &set_rtc_date, TRUE, NULL);
 80010c8:	2300      	movs	r3, #0
 80010ca:	2201      	movs	r2, #1
 80010cc:	4903      	ldr	r1, [pc, #12]	; (80010dc <manage_logging_session_init+0x24>)
 80010ce:	2002      	movs	r0, #2
 80010d0:	f00d fe32 	bl	800ed38 <add_custom_can_func>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	0800114d 	.word	0x0800114d
 80010dc:	08001195 	.word	0x08001195

080010e0 <generate_filename>:

// generate_filename
//  Use the RTC to build a filename from this exact time. Format is:
//  dlm_data_YYYYMMDD_HHMMSS.gdat
void generate_filename(char* filename)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	6078      	str	r0, [r7, #4]
	// get the date from the RTC
	HAL_RTC_GetTime(&hrtc, &curr_time, RTC_FORMAT_BIN);
 80010e8:	2200      	movs	r2, #0
 80010ea:	4914      	ldr	r1, [pc, #80]	; (800113c <generate_filename+0x5c>)
 80010ec:	4814      	ldr	r0, [pc, #80]	; (8001140 <generate_filename+0x60>)
 80010ee:	f004 f979 	bl	80053e4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &curr_date, RTC_FORMAT_BIN);
 80010f2:	2200      	movs	r2, #0
 80010f4:	4913      	ldr	r1, [pc, #76]	; (8001144 <generate_filename+0x64>)
 80010f6:	4812      	ldr	r0, [pc, #72]	; (8001140 <generate_filename+0x60>)
 80010f8:	f004 fa7a 	bl	80055f0 <HAL_RTC_GetDate>

	// generate the string with sprintf
	sprintf(filename, "/dlm_data_%04d%02d%02d_%02d%02d%02d.gdat", curr_date.Year + ZERO_YEAR, curr_date.Month, curr_date.Date,
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <generate_filename+0x64>)
 80010fe:	78db      	ldrb	r3, [r3, #3]
 8001100:	f203 72b2 	addw	r2, r3, #1970	; 0x7b2
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <generate_filename+0x64>)
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	461d      	mov	r5, r3
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <generate_filename+0x64>)
 800110c:	789b      	ldrb	r3, [r3, #2]
 800110e:	4619      	mov	r1, r3
			curr_time.Hours, curr_time.Minutes, curr_time.Seconds);
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <generate_filename+0x5c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
	sprintf(filename, "/dlm_data_%04d%02d%02d_%02d%02d%02d.gdat", curr_date.Year + ZERO_YEAR, curr_date.Month, curr_date.Date,
 8001114:	4618      	mov	r0, r3
			curr_time.Hours, curr_time.Minutes, curr_time.Seconds);
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <generate_filename+0x5c>)
 8001118:	785b      	ldrb	r3, [r3, #1]
	sprintf(filename, "/dlm_data_%04d%02d%02d_%02d%02d%02d.gdat", curr_date.Year + ZERO_YEAR, curr_date.Month, curr_date.Date,
 800111a:	461c      	mov	r4, r3
			curr_time.Hours, curr_time.Minutes, curr_time.Seconds);
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <generate_filename+0x5c>)
 800111e:	789b      	ldrb	r3, [r3, #2]
	sprintf(filename, "/dlm_data_%04d%02d%02d_%02d%02d%02d.gdat", curr_date.Year + ZERO_YEAR, curr_date.Month, curr_date.Date,
 8001120:	9303      	str	r3, [sp, #12]
 8001122:	9402      	str	r4, [sp, #8]
 8001124:	9001      	str	r0, [sp, #4]
 8001126:	9100      	str	r1, [sp, #0]
 8001128:	462b      	mov	r3, r5
 800112a:	4907      	ldr	r1, [pc, #28]	; (8001148 <generate_filename+0x68>)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f00e fd27 	bl	800fb80 <siprintf>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bdb0      	pop	{r4, r5, r7, pc}
 800113a:	bf00      	nop
 800113c:	20000134 	.word	0x20000134
 8001140:	200044dc 	.word	0x200044dc
 8001144:	2000014c 	.word	0x2000014c
 8001148:	08010294 	.word	0x08010294

0800114c <set_rtc_time>:

// set_rtc_time
//  pass in the hours, minutes, and seconds to set the RTC time. This is in 24 hour format
void set_rtc_time(U8 sending_module, void* UNUSED,
	    U8 hour, U8 minute, U8 second, U8 UNUSED3)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6039      	str	r1, [r7, #0]
 8001154:	4611      	mov	r1, r2
 8001156:	461a      	mov	r2, r3
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	460b      	mov	r3, r1
 800115e:	71bb      	strb	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef time;

	time.Hours = hour;
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	723b      	strb	r3, [r7, #8]
	time.Minutes = minute;
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	727b      	strb	r3, [r7, #9]
	time.Seconds = second;
 800116c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001170:	72bb      	strb	r3, [r7, #10]
	time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
	time.StoreOperation = RTC_STOREOPERATION_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <set_rtc_time+0x44>)
 8001184:	f004 f870 	bl	8005268 <HAL_RTC_SetTime>
}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200044dc 	.word	0x200044dc

08001194 <set_rtc_date>:
// set_rtc_date
//  pass in the year, month, date, and day of week to set the RTC date. Year is number of years since 1970.
//  For weekday, mon = 1, teus = 2, ..., sun = 7
void set_rtc_date(U8 sending_module, void* UNUSED,
	    U8 year, U8 month, U8 day, U8 weekday)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6039      	str	r1, [r7, #0]
 800119c:	4611      	mov	r1, r2
 800119e:	461a      	mov	r2, r3
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	460b      	mov	r3, r1
 80011a6:	71bb      	strb	r3, [r7, #6]
 80011a8:	4613      	mov	r3, r2
 80011aa:	717b      	strb	r3, [r7, #5]
	RTC_DateTypeDef date;

	date.WeekDay = weekday;
 80011ac:	7f3b      	ldrb	r3, [r7, #28]
 80011ae:	733b      	strb	r3, [r7, #12]
	date.Month = month;
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	737b      	strb	r3, [r7, #13]
	date.Date = day;
 80011b4:	7e3b      	ldrb	r3, [r7, #24]
 80011b6:	73bb      	strb	r3, [r7, #14]
	date.Year = year;
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	73fb      	strb	r3, [r7, #15]

	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <set_rtc_date+0x40>)
 80011c6:	f004 f96b 	bl	80054a0 <HAL_RTC_SetDate>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200044dc 	.word	0x200044dc

080011d8 <move_ram_data_to_storage_init>:

// move_ram_data_to_storage_init
//  This function sets the local pointers to the correct values. Mounting the SD card is handled in the
//  writing data loop
void move_ram_data_to_storage_init(DATA_INFO_NODE* storage_ptr, const char* filename)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
    ram_data_head_ptr = storage_ptr;
 80011e2:	4a07      	ldr	r2, [pc, #28]	; (8001200 <move_ram_data_to_storage_init+0x28>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6013      	str	r3, [r2, #0]
    orig_actual_file_name = filename;
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <move_ram_data_to_storage_init+0x2c>)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	6013      	str	r3, [r2, #0]

    // toggle the LED once to note the init
    HAL_GPIO_TogglePin(GPIOB, LED1_sd_write_Pin);
 80011ee:	2101      	movs	r1, #1
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <move_ram_data_to_storage_init+0x30>)
 80011f2:	f002 fe46 	bl	8003e82 <HAL_GPIO_TogglePin>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200043b0 	.word	0x200043b0
 8001204:	20004420 	.word	0x20004420
 8001208:	40020400 	.word	0x40020400

0800120c <write_data_and_handle_errors>:

// write_data_and_handle_errors
//  this function will check if the SD card is mounted, make the file if needed,
//  call write_data_to_storage, and handle file errors by unmounting the SD card
S8 write_data_and_handle_errors()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	S8 error_code = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]

	// check if the SD card is mounted
	if (sd_status != SD_MOUNTED)
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <write_data_and_handle_errors+0xb0>)
 8001218:	f993 3000 	ldrsb.w	r3, [r3]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d017      	beq.n	8001250 <write_data_and_handle_errors+0x44>
	{
		// try again to mount the SD card. If it fails, return
		if (mount_sd_card())
 8001220:	f000 f990 	bl	8001544 <mount_sd_card>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <write_data_and_handle_errors+0x24>
		{
			return SD_MOUNTING_ERROR;
 800122a:	f06f 0301 	mvn.w	r3, #1
 800122e:	e040      	b.n	80012b2 <write_data_and_handle_errors+0xa6>
		}

		// if the code reaches this point, the SD should be mounted with a new file made. Create
		// a new file for the log file
		if (create_new_file(orig_actual_file_name))
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <write_data_and_handle_errors+0xb4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f9cd 	bl	80015d4 <create_new_file>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <write_data_and_handle_errors+0x44>
		{
			// there was an error creating the file. Unmount and return
			f_mount(NULL, SDPath, 1);
 8001240:	2201      	movs	r2, #1
 8001242:	4920      	ldr	r1, [pc, #128]	; (80012c4 <write_data_and_handle_errors+0xb8>)
 8001244:	2000      	movs	r0, #0
 8001246:	f009 fabb 	bl	800a7c0 <f_mount>
			return FILE_ERROR;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800124e:	e030      	b.n	80012b2 <write_data_and_handle_errors+0xa6>
		}
	}

	// now try to write to the file
	error_code = write_data_to_storage();
 8001250:	f000 f840 	bl	80012d4 <write_data_to_storage>
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]

	// if a file operation fails, unmount and try remounting
	if (error_code == FILE_ERROR)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001260:	d117      	bne.n	8001292 <write_data_and_handle_errors+0x86>
	{
		// note this error and check if too many in a row have occurred
		error_counter++;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <write_data_and_handle_errors+0xbc>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <write_data_and_handle_errors+0xbc>)
 800126c:	701a      	strb	r2, [r3, #0]

		if (error_counter >= MAX_NUM_OF_ERRORS)
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <write_data_and_handle_errors+0xbc>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b09      	cmp	r3, #9
 8001274:	d90a      	bls.n	800128c <write_data_and_handle_errors+0x80>
		{
			// try to close the file. This probably wont work at this point, but the thought is nice
			f_close(&SDFile);
 8001276:	4815      	ldr	r0, [pc, #84]	; (80012cc <write_data_and_handle_errors+0xc0>)
 8001278:	f009 ffb5 	bl	800b1e6 <f_close>

			// unmount the SD card and try to mount it again next cycle
			// TODO remounting does not work at the moment, so this is basically giving up
			f_mount(NULL, SDPath, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	4911      	ldr	r1, [pc, #68]	; (80012c4 <write_data_and_handle_errors+0xb8>)
 8001280:	2000      	movs	r0, #0
 8001282:	f009 fa9d 	bl	800a7c0 <f_mount>
			sd_status = SD_NOT_MOUNTED;
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <write_data_and_handle_errors+0xb0>)
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	701a      	strb	r2, [r3, #0]
		}

		return FILE_ERROR;
 800128c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001290:	e00f      	b.n	80012b2 <write_data_and_handle_errors+0xa6>
	}

	// if the data buffer is empty, there is prob a CAN error
	if (error_code == EMPTY_DATA_BUFF)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	f113 0f05 	cmn.w	r3, #5
 800129a:	d102      	bne.n	80012a2 <write_data_and_handle_errors+0x96>
	{
		// TODO handle this in some way, maybe reset the DAM-DLM init process, or tell the PDM to reset the DAMs
		return EMPTY_DATA_BUFF;
 800129c:	f06f 0304 	mvn.w	r3, #4
 80012a0:	e007      	b.n	80012b2 <write_data_and_handle_errors+0xa6>
	}

	// toggle the onboard LED every successful file write and reset the error counter
	HAL_GPIO_TogglePin(GPIOB, LED1_sd_write_Pin);
 80012a2:	2101      	movs	r1, #1
 80012a4:	480a      	ldr	r0, [pc, #40]	; (80012d0 <write_data_and_handle_errors+0xc4>)
 80012a6:	f002 fdec 	bl	8003e82 <HAL_GPIO_TogglePin>
	error_counter = 0;
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <write_data_and_handle_errors+0xbc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]

	return RAM_SUCCESS;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20004420 	.word	0x20004420
 80012c4:	20004640 	.word	0x20004640
 80012c8:	20000151 	.word	0x20000151
 80012cc:	20004644 	.word	0x20004644
 80012d0:	40020400 	.word	0x40020400

080012d4 <write_data_to_storage>:
//  Function to run through each data node in the ram_data linked list while adding the data
//  to the SD card and deleting the node from the list. This function does not need to be thread
//  safe as the STM32 is single threaded (except for RX and TX interrupts, which only affect
//  the CAN buffers)
S8 write_data_to_storage()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
	FRESULT fresult;
    DATA_INFO_NODE* data_node_above = ram_data_head_ptr;
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <write_data_to_storage+0xac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
    DATA_INFO_NODE* data_node = ram_data_head_ptr->next;
 80012e0:	4b27      	ldr	r3, [pc, #156]	; (8001380 <write_data_to_storage+0xac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	617b      	str	r3, [r7, #20]
    U8 data_point_str[DATA_POINT_STORAGE_SIZE];

    // check to make sure there is at least one datapoint
    if (data_node == NULL)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d132      	bne.n	8001354 <write_data_to_storage+0x80>
    {
    	return EMPTY_DATA_BUFF;
 80012ee:	f06f 0304 	mvn.w	r3, #4
 80012f2:	e041      	b.n	8001378 <write_data_to_storage+0xa4>
    while (data_node != NULL)
    {
    	// get the mutex. It may not be needed for any nodes but the first data node after the head
    	while (!get_mutex_lock(&ram_data_mutex))
    	{
    		osDelay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f00a fc44 	bl	800bb82 <osDelay>
    	while (!get_mutex_lock(&ram_data_mutex))
 80012fa:	4822      	ldr	r0, [pc, #136]	; (8001384 <write_data_to_storage+0xb0>)
 80012fc:	f000 f9cc 	bl	8001698 <get_mutex_lock>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f6      	beq.n	80012f4 <write_data_to_storage+0x20>
    	}

    	// Dont run any other tasks while modifying the RAM buffer
    	taskENTER_CRITICAL();
 8001306:	f00c ff81 	bl	800e20c <vPortEnterCritical>

		// build the data string for this node
		build_data_string(data_point_str, data_node);
 800130a:	463b      	mov	r3, r7
 800130c:	6979      	ldr	r1, [r7, #20]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f840 	bl	8001394 <build_data_string>

		// remove the pointer from the LL
		data_node_above->next = data_node->next;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]

		// free the memory for this node, stdlib is smart enough to know how much memory was
		// originally malloced
		free(data_node);
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f00e fb57 	bl	800f9d0 <free>

		// move on to the next data node
		data_node = data_node_above->next;
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	617b      	str	r3, [r7, #20]

		taskEXIT_CRITICAL();
 8001328:	f00c ffa4 	bl	800e274 <vPortExitCritical>
    	release_mutex(&ram_data_mutex);
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <write_data_to_storage+0xb0>)
 800132e:	f000 f9c8 	bl	80016c2 <release_mutex>

        // append the file with this new string
        if ((fresult = f_write(&SDFile, data_point_str, DATA_POINT_STORAGE_SIZE, (UINT*)(&bytes_written))) != FR_OK)
 8001332:	4639      	mov	r1, r7
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <write_data_to_storage+0xb4>)
 8001336:	220e      	movs	r2, #14
 8001338:	4814      	ldr	r0, [pc, #80]	; (800138c <write_data_to_storage+0xb8>)
 800133a:	f009 fd08 	bl	800ad4e <f_write>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <write_data_to_storage+0x80>
        {
        	file_error_code = fresult;
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <write_data_to_storage+0xbc>)
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	7013      	strb	r3, [r2, #0]
        	return FILE_ERROR;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001352:	e011      	b.n	8001378 <write_data_to_storage+0xa4>
    while (data_node != NULL)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1cf      	bne.n	80012fa <write_data_to_storage+0x26>
        }
    }

    // sync the file. this replaces opening and closing the file
    fresult = f_sync(&SDFile);
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <write_data_to_storage+0xb8>)
 800135c:	f009 feba 	bl	800b0d4 <f_sync>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]

    if (fresult != FR_OK)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <write_data_to_storage+0xa2>
	{
		file_error_code = fresult;
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <write_data_to_storage+0xbc>)
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	7013      	strb	r3, [r2, #0]
		return FILE_ERROR;
 8001370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001374:	e000      	b.n	8001378 <write_data_to_storage+0xa4>
	}

    // everything worked. Return
    return RAM_SUCCESS;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200043b0 	.word	0x200043b0
 8001384:	20004428 	.word	0x20004428
 8001388:	20004424 	.word	0x20004424
 800138c:	20004644 	.word	0x20004644
 8001390:	20000150 	.word	0x20000150

08001394 <build_data_string>:
//  data point will be stored as a 16bit parameter id, 32bit time value representing
//  the ms from DLM startup, and 64bit double for the data value. This string is returned
//  in U8* data_str. This must have 14B of memory available, or else bad things will happen.
//  This function will also remove the data node from the LL
void build_data_string(U8 data_str[], DATA_INFO_NODE* data_node)
{
 8001394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    DPF_CONVERTER data_union;
    U8 c;

    // write the parameter to the first 2 bytes
    for (c = 0; c < STORAGE_PARAM_SIZE; c++)
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
 80013a2:	e010      	b.n	80013c6 <build_data_string+0x32>
    {
        data_str[c] = (U8)(data_node->param >> (((STORAGE_PARAM_SIZE - 1) - c) * BITS_IN_BYTE));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	889b      	ldrh	r3, [r3, #4]
 80013a8:	461a      	mov	r2, r3
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	f1c3 0301 	rsb	r3, r3, #1
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	fa42 f103 	asr.w	r1, r2, r3
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2ca      	uxtb	r2, r1
 80013be:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < STORAGE_PARAM_SIZE; c++)
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	3301      	adds	r3, #1
 80013c4:	75fb      	strb	r3, [r7, #23]
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d9eb      	bls.n	80013a4 <build_data_string+0x10>
    }

    // write the timestamp to the next 4 bytes
    for (c = 0; c < TIMESTAMP_SIZE; c++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	75fb      	strb	r3, [r7, #23]
 80013d0:	e010      	b.n	80013f4 <build_data_string+0x60>
    {
        data_str[c + STORAGE_PARAM_SIZE] = (U8)(data_node->data_time >> (((TIMESTAMP_SIZE - 1) - c) * BITS_IN_BYTE));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	f1c3 0303 	rsb	r3, r3, #3
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	fa22 f103 	lsr.w	r1, r2, r3
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	3302      	adds	r3, #2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < TIMESTAMP_SIZE; c++)
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	3301      	adds	r3, #1
 80013f2:	75fb      	strb	r3, [r7, #23]
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d9eb      	bls.n	80013d2 <build_data_string+0x3e>
    }

    // write the double of the data to the last 8 bytes
    data_union.d = convert_data_to_dpf(data_node);
 80013fa:	6838      	ldr	r0, [r7, #0]
 80013fc:	f000 f82c 	bl	8001458 <convert_data_to_dpf>
 8001400:	eeb0 7b40 	vmov.f64	d7, d0
 8001404:	ed87 7b02 	vstr	d7, [r7, #8]
    for (c = 0; c < DATA_SIZE; c++)
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]
 800140c:	e01c      	b.n	8001448 <build_data_string+0xb4>
    {
        data_str[c + STORAGE_PARAM_SIZE + TIMESTAMP_SIZE] = (U8)(data_union.u64 >> (((DATA_SIZE - 1) - c) * BITS_IN_BYTE));
 800140e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001412:	7df9      	ldrb	r1, [r7, #23]
 8001414:	f1c1 0107 	rsb	r1, r1, #7
 8001418:	00c9      	lsls	r1, r1, #3
 800141a:	f1c1 0620 	rsb	r6, r1, #32
 800141e:	f1a1 0020 	sub.w	r0, r1, #32
 8001422:	fa22 f401 	lsr.w	r4, r2, r1
 8001426:	fa03 f606 	lsl.w	r6, r3, r6
 800142a:	4334      	orrs	r4, r6
 800142c:	fa23 f000 	lsr.w	r0, r3, r0
 8001430:	4304      	orrs	r4, r0
 8001432:	fa23 f501 	lsr.w	r5, r3, r1
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	3306      	adds	r3, #6
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	b2e2      	uxtb	r2, r4
 8001440:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < DATA_SIZE; c++)
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	3301      	adds	r3, #1
 8001446:	75fb      	strb	r3, [r7, #23]
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2b07      	cmp	r3, #7
 800144c:	d9df      	bls.n	800140e <build_data_string+0x7a>
    }
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001458 <convert_data_to_dpf>:
// convert_data_to_dpf
//  Function to take in a data node, get the data stored in it, and return
//  the double precision float representation of that value to be stored on
//  the external SD card
double convert_data_to_dpf(DATA_INFO_NODE* data_node)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    // switch to get the data out of the data_node
    switch (parameter_data_types[data_node->param])
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	889b      	ldrh	r3, [r3, #4]
 8001464:	461a      	mov	r2, r3
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <convert_data_to_dpf+0xe8>)
 8001468:	5c9b      	ldrb	r3, [r3, r2]
 800146a:	3b01      	subs	r3, #1
 800146c:	2b08      	cmp	r3, #8
 800146e:	d85b      	bhi.n	8001528 <convert_data_to_dpf+0xd0>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <convert_data_to_dpf+0x20>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	0800149d 	.word	0x0800149d
 800147c:	080014ab 	.word	0x080014ab
 8001480:	080014b9 	.word	0x080014b9
 8001484:	080014c7 	.word	0x080014c7
 8001488:	080014db 	.word	0x080014db
 800148c:	080014eb 	.word	0x080014eb
 8001490:	080014fb 	.word	0x080014fb
 8001494:	08001509 	.word	0x08001509
 8001498:	0800151d 	.word	0x0800151d
	{
	case UNSIGNED8:
		return (double)(((U8_DATA_NODE*)data_node)->data);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7b1b      	ldrb	r3, [r3, #12]
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80014a8:	e040      	b.n	800152c <convert_data_to_dpf+0xd4>

	case UNSIGNED16:
		return (double)(((U16_DATA_NODE*)data_node)->data);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	899b      	ldrh	r3, [r3, #12]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80014b6:	e039      	b.n	800152c <convert_data_to_dpf+0xd4>

	case UNSIGNED32:
		return (double)(((U32_DATA_NODE*)data_node)->data);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80014c4:	e032      	b.n	800152c <convert_data_to_dpf+0xd4>

	case UNSIGNED64:
		return (double)(((U64_DATA_NODE*)data_node)->data);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff f894 	bl	80005fc <__aeabi_ul2d>
 80014d4:	ec41 0b17 	vmov	d7, r0, r1
 80014d8:	e028      	b.n	800152c <convert_data_to_dpf+0xd4>

	case SIGNED8:
		return (double)(((S8_DATA_NODE*)data_node)->data);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014e8:	e020      	b.n	800152c <convert_data_to_dpf+0xd4>

	case SIGNED16:
		return (double)(((S16_DATA_NODE*)data_node)->data);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014f8:	e018      	b.n	800152c <convert_data_to_dpf+0xd4>

	case SIGNED32:
		return (double)(((S32_DATA_NODE*)data_node)->data);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001506:	e011      	b.n	800152c <convert_data_to_dpf+0xd4>

	case SIGNED64:
		return (double)(((S64_DATA_NODE*)data_node)->data);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff f87b 	bl	800060c <__aeabi_l2d>
 8001516:	ec41 0b17 	vmov	d7, r0, r1
 800151a:	e007      	b.n	800152c <convert_data_to_dpf+0xd4>

	case FLOATING:
		return (double)(((FLOAT_DATA_NODE*)data_node)->data);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001522:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001526:	e001      	b.n	800152c <convert_data_to_dpf+0xd4>

	default:
        // Something went wrong, just write 0 to data
		return 0;
 8001528:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8001538 <convert_data_to_dpf+0xe0>
	}

    // this coude should not be reached, this is to make the compiler happy
    return 0;
}
 800152c:	eeb0 0b47 	vmov.f64	d0, d7
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
	...
 8001540:	20000070 	.word	0x20000070

08001544 <mount_sd_card>:


// mount_sd_card
//  this function will try to mount the SD card
S8 mount_sd_card()
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
	FRESULT fresult;

	// check if the SD card is even inserted using the GPIOpin
	if (HAL_GPIO_ReadPin(SD_Detected_GPIO_Port, SD_Detected_Pin) == GPIO_PIN_RESET)
 800154a:	2104      	movs	r1, #4
 800154c:	481c      	ldr	r0, [pc, #112]	; (80015c0 <mount_sd_card+0x7c>)
 800154e:	f002 fc67 	bl	8003e20 <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <mount_sd_card+0x20>
	{
		// the SD is not inserted. Do not try to mount as it can cause a hardfault
		sd_status = SD_NOT_INSERTED;
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <mount_sd_card+0x80>)
 800155a:	22fd      	movs	r2, #253	; 0xfd
 800155c:	701a      	strb	r2, [r3, #0]
		return SD_NOT_INSERTED;
 800155e:	f06f 0302 	mvn.w	r3, #2
 8001562:	e029      	b.n	80015b8 <mount_sd_card+0x74>
		// This logic replaces the FATfs logic for checking the SD card, that is why there is a warning
		// when auto-generating code for SD
	}

	// attempt to mount the card
	fresult = f_mount(&SDFatFS, SDPath, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	4918      	ldr	r1, [pc, #96]	; (80015c8 <mount_sd_card+0x84>)
 8001568:	4818      	ldr	r0, [pc, #96]	; (80015cc <mount_sd_card+0x88>)
 800156a:	f009 f929 	bl	800a7c0 <f_mount>
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]

	// check if the error is FR_DISK_ERR
	if (fresult == FR_DISK_ERR || fresult == FR_NOT_READY)
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d002      	beq.n	800157e <mount_sd_card+0x3a>
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d109      	bne.n	8001592 <mount_sd_card+0x4e>
	{
		file_error_code = fresult;
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <mount_sd_card+0x8c>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	7013      	strb	r3, [r2, #0]
		sd_status = SD_NOT_MOUNTED;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <mount_sd_card+0x80>)
 8001586:	22ff      	movs	r2, #255	; 0xff
 8001588:	701a      	strb	r2, [r3, #0]
		return sd_status;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <mount_sd_card+0x80>)
 800158c:	f993 3000 	ldrsb.w	r3, [r3]
 8001590:	e012      	b.n	80015b8 <mount_sd_card+0x74>
	}

	// check if another error has occurred
	else if (fresult != FR_OK)
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d009      	beq.n	80015ac <mount_sd_card+0x68>
	{
		file_error_code = fresult;
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <mount_sd_card+0x8c>)
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	7013      	strb	r3, [r2, #0]
		sd_status = SD_MOUNTING_ERROR;
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <mount_sd_card+0x80>)
 80015a0:	22fe      	movs	r2, #254	; 0xfe
 80015a2:	701a      	strb	r2, [r3, #0]
		return sd_status;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <mount_sd_card+0x80>)
 80015a6:	f993 3000 	ldrsb.w	r3, [r3]
 80015aa:	e005      	b.n	80015b8 <mount_sd_card+0x74>
	}

	// the mounting worked
	sd_status = SD_MOUNTED;
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <mount_sd_card+0x80>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
	return sd_status;
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <mount_sd_card+0x80>)
 80015b4:	f993 3000 	ldrsb.w	r3, [r3]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021800 	.word	0x40021800
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20004640 	.word	0x20004640
 80015cc:	20005674 	.word	0x20005674
 80015d0:	20000150 	.word	0x20000150

080015d4 <create_new_file>:

// create_new_file
//  this function will create a new file for the DLM to write to, appending numbers to the end
//  of the file name if needed. This function will modify actual_file_name as needed
S8 create_new_file(const char* filename)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	FRESULT fresult;
	U16 append_val = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	82bb      	strh	r3, [r7, #20]
	char append_str[MAX_APPEND_SIZE];

	// check if the filename is too long
	if (strlen(filename) >= MAX_FILENAME_SIZE)
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7fe fe2d 	bl	8000240 <strlen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b63      	cmp	r3, #99	; 0x63
 80015ea:	d902      	bls.n	80015f2 <create_new_file+0x1e>
	{
		return FILENAME_TOO_LONG;
 80015ec:	f06f 0303 	mvn.w	r3, #3
 80015f0:	e044      	b.n	800167c <create_new_file+0xa8>
	}

	// copy the original filename to actual_file_name so it can be modified
	strcpy(actual_file_name, filename);
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4823      	ldr	r0, [pc, #140]	; (8001684 <create_new_file+0xb0>)
 80015f6:	f00e faf2 	bl	800fbde <strcpy>

	// try to open the file
	fresult = f_open(&SDFile, actual_file_name, FA_CREATE_NEW|FA_WRITE);
 80015fa:	2206      	movs	r2, #6
 80015fc:	4921      	ldr	r1, [pc, #132]	; (8001684 <create_new_file+0xb0>)
 80015fe:	4822      	ldr	r0, [pc, #136]	; (8001688 <create_new_file+0xb4>)
 8001600:	f009 f942 	bl	800a888 <f_open>
 8001604:	4603      	mov	r3, r0
 8001606:	75fb      	strb	r3, [r7, #23]

	// if this filename is already taken, append a number on it and try again until it works
	while (fresult == FR_EXIST)
 8001608:	e026      	b.n	8001658 <create_new_file+0x84>
	{
		// TODO this adds a number after the file type, not after the name
		append_val++;
 800160a:	8abb      	ldrh	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	82bb      	strh	r3, [r7, #20]

		// revert actual_file_name to the target filename
		strcpy(actual_file_name, filename);
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	481c      	ldr	r0, [pc, #112]	; (8001684 <create_new_file+0xb0>)
 8001614:	f00e fae3 	bl	800fbde <strcpy>

		// build the string we want to append to the actual_file_name
		sprintf(append_str, "%i", append_val);
 8001618:	8aba      	ldrh	r2, [r7, #20]
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	491b      	ldr	r1, [pc, #108]	; (800168c <create_new_file+0xb8>)
 8001620:	4618      	mov	r0, r3
 8001622:	f00e faad 	bl	800fb80 <siprintf>

		// put a number on the actual_file_name, then try again
		strcat(actual_file_name, append_str);
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	4619      	mov	r1, r3
 800162c:	4815      	ldr	r0, [pc, #84]	; (8001684 <create_new_file+0xb0>)
 800162e:	f00e fac7 	bl	800fbc0 <strcat>
		fresult = f_open(&SDFile, actual_file_name, FA_CREATE_NEW|FA_WRITE);
 8001632:	2206      	movs	r2, #6
 8001634:	4913      	ldr	r1, [pc, #76]	; (8001684 <create_new_file+0xb0>)
 8001636:	4814      	ldr	r0, [pc, #80]	; (8001688 <create_new_file+0xb4>)
 8001638:	f009 f926 	bl	800a888 <f_open>
 800163c:	4603      	mov	r3, r0
 800163e:	75fb      	strb	r3, [r7, #23]

		// if append_val gets unreasonably large, just delete the file with that large of
		// a number at the end
		if (append_val >= MAX_APPEND_NUM)
 8001640:	8abb      	ldrh	r3, [r7, #20]
 8001642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001646:	4293      	cmp	r3, r2
 8001648:	d106      	bne.n	8001658 <create_new_file+0x84>
		{
			fresult = f_open(&SDFile, actual_file_name, FA_CREATE_ALWAYS|FA_WRITE);
 800164a:	220a      	movs	r2, #10
 800164c:	490d      	ldr	r1, [pc, #52]	; (8001684 <create_new_file+0xb0>)
 800164e:	480e      	ldr	r0, [pc, #56]	; (8001688 <create_new_file+0xb4>)
 8001650:	f009 f91a 	bl	800a888 <f_open>
 8001654:	4603      	mov	r3, r0
 8001656:	75fb      	strb	r3, [r7, #23]
	while (fresult == FR_EXIST)
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b08      	cmp	r3, #8
 800165c:	d0d5      	beq.n	800160a <create_new_file+0x36>
		}
	}

	// check to make sure there wasn't an error
	if (fresult != FR_OK)
 800165e:	7dfb      	ldrb	r3, [r7, #23]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <create_new_file+0x9c>
	{
		file_error_code = fresult;
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <create_new_file+0xbc>)
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	7013      	strb	r3, [r2, #0]
		return FILE_ERROR;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800166e:	e005      	b.n	800167c <create_new_file+0xa8>
	}

	// add the metadata to the first line. Right now it is just the filename
	f_printf(&SDFile, "%s:\n", actual_file_name);
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <create_new_file+0xb0>)
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <create_new_file+0xc0>)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <create_new_file+0xb4>)
 8001676:	f009 fe5d 	bl	800b334 <f_printf>

	// everything worked. Return
	return RAM_SUCCESS;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200043b4 	.word	0x200043b4
 8001688:	20004644 	.word	0x20004644
 800168c:	080102c0 	.word	0x080102c0
 8001690:	20000150 	.word	0x20000150
 8001694:	080102c4 	.word	0x080102c4

08001698 <get_mutex_lock>:


// get_mutex_lock
//  Returns true and sets the mutex as not available if the mutex was previously available
boolean get_mutex_lock(volatile DLM_MUTEX* mutex)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	if(*mutex == MUTEX_UNLOCKED)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d104      	bne.n	80016b4 <get_mutex_lock+0x1c>
	{
		// set the mutex state to locked
		*mutex = MUTEX_LOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <get_mutex_lock+0x1e>
	}

	// the mutex is not available
	return FALSE;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <release_mutex>:


// release_muted
//  releases the mutex so other functions can use it
void release_mutex(volatile DLM_MUTEX* mutex)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	*mutex = MUTEX_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4a07      	ldr	r2, [pc, #28]	; (8001708 <vApplicationGetIdleTaskMemory+0x2c>)
 80016ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <vApplicationGetIdleTaskMemory+0x30>)
 80016f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	20000154 	.word	0x20000154
 800170c:	200001a8 	.word	0x200001a8

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b096      	sub	sp, #88	; 0x58
 8001714:	af00      	add	r7, sp, #0
int main(void)
 8001716:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800171a:	657b      	str	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171c:	f000 fe27 	bl	800236e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001720:	f000 f85c 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001724:	f000 fa34 	bl	8001b90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001728:	f000 fa0c 	bl	8001b44 <MX_DMA_Init>
  MX_CAN1_Init();
 800172c:	f000 f8f2 	bl	8001914 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001730:	f000 f926 	bl	8001980 <MX_CAN2_Init>
  MX_SDMMC1_SD_Init();
 8001734:	f000 f9e6 	bl	8001b04 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001738:	f006 fbb8 	bl	8007eac <MX_FATFS_Init>
  MX_RTC_Init();
 800173c:	f000 f956 	bl	80019ec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  dlm_init(&hcan1, &hcan2);
 8001740:	491e      	ldr	r1, [pc, #120]	; (80017bc <main+0xac>)
 8001742:	481f      	ldr	r0, [pc, #124]	; (80017c0 <main+0xb0>)
 8001744:	f7ff f90c 	bl	8000960 <dlm_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of can_loop_task */
  osThreadDef(can_loop_task, can_loop, osPriorityHigh, 0, 512);
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <main+0xb4>)
 800174a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800174e:	461d      	mov	r5, r3
 8001750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  can_loop_taskHandle = osThreadCreate(osThread(can_loop_task), NULL);
 800175c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f00a f9c1 	bl	800baea <osThreadCreate>
 8001768:	4603      	mov	r3, r0
 800176a:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <main+0xb8>)
 800176c:	6013      	str	r3, [r2, #0]

  /* definition and creation of dlm_manage_data */
  osThreadDef(dlm_manage_data, dlm_main, osPriorityNormal, 0, 512);
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <main+0xbc>)
 8001770:	f107 041c 	add.w	r4, r7, #28
 8001774:	461d      	mov	r5, r3
 8001776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800177a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800177e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dlm_manage_dataHandle = osThreadCreate(osThread(dlm_manage_data), NULL);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f00a f9ae 	bl	800baea <osThreadCreate>
 800178e:	4603      	mov	r3, r0
 8001790:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <main+0xc0>)
 8001792:	6013      	str	r3, [r2, #0]

  /* definition and creation of move_ram_to_sd_ */
  osThreadDef(move_ram_to_sd_, move_ram_to_sd, osPriorityNormal, 0, 1024);
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <main+0xc4>)
 8001796:	463c      	mov	r4, r7
 8001798:	461d      	mov	r5, r3
 800179a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  move_ram_to_sd_Handle = osThreadCreate(osThread(move_ram_to_sd_), NULL);
 80017a6:	463b      	mov	r3, r7
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00a f99d 	bl	800baea <osThreadCreate>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <main+0xc8>)
 80017b4:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017b6:	f00a f975 	bl	800baa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80017ba:	e7fe      	b.n	80017ba <main+0xaa>
 80017bc:	200044b4 	.word	0x200044b4
 80017c0:	20004564 	.word	0x20004564
 80017c4:	080102fc 	.word	0x080102fc
 80017c8:	20004560 	.word	0x20004560
 80017cc:	08010318 	.word	0x08010318
 80017d0:	2000455c 	.word	0x2000455c
 80017d4:	08010334 	.word	0x08010334
 80017d8:	2000442c 	.word	0x2000442c

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0b8      	sub	sp, #224	; 0xe0
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017e6:	2234      	movs	r2, #52	; 0x34
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00e f906 	bl	800f9fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	2290      	movs	r2, #144	; 0x90
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f00e f8f7 	bl	800f9fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <SystemClock_Config+0x12c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <SystemClock_Config+0x12c>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <SystemClock_Config+0x12c>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <SystemClock_Config+0x130>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a38      	ldr	r2, [pc, #224]	; (800190c <SystemClock_Config+0x130>)
 800182c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <SystemClock_Config+0x130>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800183e:	230a      	movs	r3, #10
 8001840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001844:	2301      	movs	r3, #1
 8001846:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184a:	2310      	movs	r3, #16
 800184c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001850:	2301      	movs	r3, #1
 8001852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001862:	2308      	movs	r3, #8
 8001864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001868:	23c0      	movs	r3, #192	; 0xc0
 800186a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800186e:	2302      	movs	r3, #2
 8001870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001874:	2308      	movs	r3, #8
 8001876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fb6a 	bl	8003f58 <HAL_RCC_OscConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800188a:	f000 fa19 	bl	8001cc0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800188e:	f002 fb13 	bl	8003eb8 <HAL_PWREx_EnableOverDrive>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001898:	f000 fa12 	bl	8001cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189c:	230f      	movs	r3, #15
 800189e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	2302      	movs	r3, #2
 80018a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80018be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018c2:	2106      	movs	r1, #6
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fdf5 	bl	80044b4 <HAL_RCC_ClockConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80018d0:	f000 f9f6 	bl	8001cc0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_SDMMC1
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <SystemClock_Config+0x134>)
 80018d6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f800 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x122>
  {
    Error_Handler();
 80018fa:	f000 f9e1 	bl	8001cc0 <Error_Handler>
  }
}
 80018fe:	bf00      	nop
 8001900:	37e0      	adds	r7, #224	; 0xe0
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000
 8001910:	00a00020 	.word	0x00a00020

08001914 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <MX_CAN1_Init+0x64>)
 800191a:	4a18      	ldr	r2, [pc, #96]	; (800197c <MX_CAN1_Init+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_CAN1_Init+0x64>)
 8001920:	2206      	movs	r2, #6
 8001922:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_CAN1_Init+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_CAN1_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_CAN1_Init+0x64>)
 8001932:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001936:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_CAN1_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_CAN1_Init+0x64>)
 8001940:	2200      	movs	r2, #0
 8001942:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_CAN1_Init+0x64>)
 8001946:	2201      	movs	r2, #1
 8001948:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_CAN1_Init+0x64>)
 800194c:	2201      	movs	r2, #1
 800194e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_CAN1_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <MX_CAN1_Init+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_CAN1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_CAN1_Init+0x64>)
 8001964:	f000 fd7c 	bl	8002460 <HAL_CAN_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800196e:	f000 f9a7 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20004564 	.word	0x20004564
 800197c:	40006400 	.word	0x40006400

08001980 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <MX_CAN2_Init+0x64>)
 8001986:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <MX_CAN2_Init+0x68>)
 8001988:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <MX_CAN2_Init+0x64>)
 800198c:	2206      	movs	r2, #6
 800198e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <MX_CAN2_Init+0x64>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <MX_CAN2_Init+0x64>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_CAN2_Init+0x64>)
 800199e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80019a2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_CAN2_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_CAN2_Init+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_CAN2_Init+0x64>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_CAN2_Init+0x64>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_CAN2_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_CAN2_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_CAN2_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_CAN2_Init+0x64>)
 80019d0:	f000 fd46 	bl	8002460 <HAL_CAN_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80019da:	f000 f971 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200044b4 	.word	0x200044b4
 80019e8:	40006800 	.word	0x40006800

080019ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	; 0x38
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	// TODO part of the bad solution
	RTC_TimeTypeDef old_time = {0};
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef old_date = {0};
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]
 8001a16:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001a18:	2300      	movs	r3, #0
 8001a1a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a1c:	4b37      	ldr	r3, [pc, #220]	; (8001afc <MX_RTC_Init+0x110>)
 8001a1e:	4a38      	ldr	r2, [pc, #224]	; (8001b00 <MX_RTC_Init+0x114>)
 8001a20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a22:	4b36      	ldr	r3, [pc, #216]	; (8001afc <MX_RTC_Init+0x110>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <MX_RTC_Init+0x110>)
 8001a2a:	227f      	movs	r2, #127	; 0x7f
 8001a2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a2e:	4b33      	ldr	r3, [pc, #204]	; (8001afc <MX_RTC_Init+0x110>)
 8001a30:	22ff      	movs	r2, #255	; 0xff
 8001a32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a34:	4b31      	ldr	r3, [pc, #196]	; (8001afc <MX_RTC_Init+0x110>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <MX_RTC_Init+0x110>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <MX_RTC_Init+0x110>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a46:	482d      	ldr	r0, [pc, #180]	; (8001afc <MX_RTC_Init+0x110>)
 8001a48:	f003 fb7c 	bl	8005144 <HAL_RTC_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001a52:	f000 f935 	bl	8001cc0 <Error_Handler>

  // TODO this is a dumb solution to the problem of the auto-gen code resetting the time and
  // date on every MCU reset

  // get the time and date stored before reseting
  HAL_RTC_GetTime(&hrtc, &old_time, RTC_FORMAT_BIN);
 8001a56:	f107 0320 	add.w	r3, r7, #32
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4827      	ldr	r0, [pc, #156]	; (8001afc <MX_RTC_Init+0x110>)
 8001a60:	f003 fcc0 	bl	80053e4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &old_date, RTC_FORMAT_BIN);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4823      	ldr	r0, [pc, #140]	; (8001afc <MX_RTC_Init+0x110>)
 8001a6e:	f003 fdbf 	bl	80055f0 <HAL_RTC_GetDate>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8001a72:	230c      	movs	r3, #12
 8001a74:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	481b      	ldr	r0, [pc, #108]	; (8001afc <MX_RTC_Init+0x110>)
 8001a8e:	f003 fbeb 	bl	8005268 <HAL_RTC_SetTime>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_RTC_Init+0xb0>
  {
    Error_Handler();
 8001a98:	f000 f912 	bl	8001cc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001a9c:	2306      	movs	r3, #6
 8001a9e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 10;
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 51;
 8001aa8:	2333      	movs	r3, #51	; 0x33
 8001aaa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4812      	ldr	r0, [pc, #72]	; (8001afc <MX_RTC_Init+0x110>)
 8001ab4:	f003 fcf4 	bl	80054a0 <HAL_RTC_SetDate>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001abe:	f000 f8ff 	bl	8001cc0 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */

  // TODO part of the bad solution

  // put the old time and date back to what it used to be
  if (HAL_RTC_SetTime(&hrtc, &old_time, RTC_FORMAT_BIN) != HAL_OK)
 8001ac2:	f107 0320 	add.w	r3, r7, #32
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480c      	ldr	r0, [pc, #48]	; (8001afc <MX_RTC_Init+0x110>)
 8001acc:	f003 fbcc 	bl	8005268 <HAL_RTC_SetTime>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_RTC_Init+0xee>
  {
	Error_Handler();
 8001ad6:	f000 f8f3 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_RTC_SetDate(&hrtc, &old_date, RTC_FORMAT_BIN) != HAL_OK)
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4806      	ldr	r0, [pc, #24]	; (8001afc <MX_RTC_Init+0x110>)
 8001ae4:	f003 fcdc 	bl	80054a0 <HAL_RTC_SetDate>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_RTC_Init+0x106>
  {
    Error_Handler();
 8001aee:	f000 f8e7 	bl	8001cc0 <Error_Handler>
  }

  /* USER CODE END RTC_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	3738      	adds	r7, #56	; 0x38
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200044dc 	.word	0x200044dc
 8001b00:	40002800 	.word	0x40002800

08001b04 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_SDMMC1_SD_Init+0x38>)
 8001b0a:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <MX_SDMMC1_SD_Init+0x3c>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_SDMMC1_SD_Init+0x38>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_SDMMC1_SD_Init+0x38>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_SDMMC1_SD_Init+0x38>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_SDMMC1_SD_Init+0x38>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <MX_SDMMC1_SD_Init+0x38>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <MX_SDMMC1_SD_Init+0x38>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	20004430 	.word	0x20004430
 8001b40:	40012c00 	.word	0x40012c00

08001b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <MX_DMA_Init+0x48>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <MX_DMA_Init+0x48>)
 8001b50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <MX_DMA_Init+0x48>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2105      	movs	r1, #5
 8001b66:	203b      	movs	r0, #59	; 0x3b
 8001b68:	f001 fbde 	bl	8003328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001b6c:	203b      	movs	r0, #59	; 0x3b
 8001b6e:	f001 fbf7 	bl	8003360 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2105      	movs	r1, #5
 8001b76:	2045      	movs	r0, #69	; 0x45
 8001b78:	f001 fbd6 	bl	8003328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001b7c:	2045      	movs	r0, #69	; 0x45
 8001b7e:	f001 fbef 	bl	8003360 <HAL_NVIC_EnableIRQ>

}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800

08001b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a23      	ldr	r2, [pc, #140]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001bf4:	f043 0308 	orr.w	r3, r3, #8
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_GPIO_Init+0xc0>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_sd_write_Pin|LED3_HARDFAULT_Pin|Malloc_failed_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <MX_GPIO_Init+0xc4>)
 8001c0e:	f002 f91f 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_sd_write_Pin LED3_HARDFAULT_Pin Malloc_failed_Pin */
  GPIO_InitStruct.Pin = LED1_sd_write_Pin|LED3_HARDFAULT_Pin|Malloc_failed_Pin;
 8001c12:	f244 0381 	movw	r3, #16513	; 0x4081
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480a      	ldr	r0, [pc, #40]	; (8001c54 <MX_GPIO_Init+0xc4>)
 8001c2c:	f001 ff4c 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detected_Pin */
  GPIO_InitStruct.Pin = SD_Detected_Pin;
 8001c30:	2304      	movs	r3, #4
 8001c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detected_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_GPIO_Init+0xc8>)
 8001c44:	f001 ff40 	bl	8003ac8 <HAL_GPIO_Init>

}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40021800 	.word	0x40021800

08001c5c <can_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_can_loop */
void can_loop(void const * argument)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  can_service_loop();
 8001c64:	f7fe fef2 	bl	8000a4c <can_service_loop>
    osDelay(1);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f009 ff8a 	bl	800bb82 <osDelay>
	  can_service_loop();
 8001c6e:	e7f9      	b.n	8001c64 <can_loop+0x8>

08001c70 <dlm_main>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dlm_main */
void dlm_main(void const * argument)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dlm_main */
  /* Infinite loop */
  for(;;)
  {
	  manage_data_aquisition();
 8001c78:	f7fe febe 	bl	80009f8 <manage_data_aquisition>
    osDelay(1);
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f009 ff80 	bl	800bb82 <osDelay>
	  manage_data_aquisition();
 8001c82:	e7f9      	b.n	8001c78 <dlm_main+0x8>

08001c84 <move_ram_to_sd>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_move_ram_to_sd */
void move_ram_to_sd(void const * argument)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN move_ram_to_sd */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(2000);
 8001c8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c90:	f009 ff77 	bl	800bb82 <osDelay>
	  move_ram_data_to_storage();
 8001c94:	f7fe fec0 	bl	8000a18 <move_ram_data_to_storage>
	  osDelay(2000);
 8001c98:	e7f8      	b.n	8001c8c <move_ram_to_sd+0x8>
	...

08001c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cae:	f000 fb6b 	bl	8002388 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40001000 	.word	0x40001000

08001cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <Error_Handler+0x8>
	...

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_MspInit+0x4c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	210f      	movs	r1, #15
 8001d06:	f06f 0001 	mvn.w	r0, #1
 8001d0a:	f001 fb0d 	bl	8003328 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a5b      	ldr	r2, [pc, #364]	; (8001ea8 <HAL_CAN_MspInit+0x18c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d14a      	bne.n	8001dd4 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <HAL_CAN_MspInit+0x190>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3301      	adds	r3, #1
 8001d44:	4a59      	ldr	r2, [pc, #356]	; (8001eac <HAL_CAN_MspInit+0x190>)
 8001d46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d48:	4b58      	ldr	r3, [pc, #352]	; (8001eac <HAL_CAN_MspInit+0x190>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d10b      	bne.n	8001d68 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d50:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a56      	ldr	r2, [pc, #344]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001d56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5c:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b51      	ldr	r3, [pc, #324]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a50      	ldr	r2, [pc, #320]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	6313      	str	r3, [r2, #48]	; 0x30
 8001d74:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d92:	2309      	movs	r3, #9
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4845      	ldr	r0, [pc, #276]	; (8001eb4 <HAL_CAN_MspInit+0x198>)
 8001d9e:	f001 fe93 	bl	8003ac8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2105      	movs	r1, #5
 8001da6:	2013      	movs	r0, #19
 8001da8:	f001 fabe 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001dac:	2013      	movs	r0, #19
 8001dae:	f001 fad7 	bl	8003360 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2105      	movs	r1, #5
 8001db6:	2014      	movs	r0, #20
 8001db8:	f001 fab6 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001dbc:	2014      	movs	r0, #20
 8001dbe:	f001 facf 	bl	8003360 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2105      	movs	r1, #5
 8001dc6:	2015      	movs	r0, #21
 8001dc8:	f001 faae 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001dcc:	2015      	movs	r0, #21
 8001dce:	f001 fac7 	bl	8003360 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001dd2:	e065      	b.n	8001ea0 <HAL_CAN_MspInit+0x184>
  else if(hcan->Instance==CAN2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a37      	ldr	r2, [pc, #220]	; (8001eb8 <HAL_CAN_MspInit+0x19c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d160      	bne.n	8001ea0 <HAL_CAN_MspInit+0x184>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001dde:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a33      	ldr	r2, [pc, #204]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001de4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001dfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001e0e:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_CAN_MspInit+0x190>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_CAN_MspInit+0x190>)
 8001e16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_CAN_MspInit+0x190>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10b      	bne.n	8001e38 <HAL_CAN_MspInit+0x11c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001e20:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001e26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	6313      	str	r3, [r2, #48]	; 0x30
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_CAN_MspInit+0x194>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e50:	2360      	movs	r3, #96	; 0x60
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001e60:	2309      	movs	r3, #9
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4812      	ldr	r0, [pc, #72]	; (8001eb4 <HAL_CAN_MspInit+0x198>)
 8001e6c:	f001 fe2c 	bl	8003ac8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2105      	movs	r1, #5
 8001e74:	203f      	movs	r0, #63	; 0x3f
 8001e76:	f001 fa57 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001e7a:	203f      	movs	r0, #63	; 0x3f
 8001e7c:	f001 fa70 	bl	8003360 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2105      	movs	r1, #5
 8001e84:	2040      	movs	r0, #64	; 0x40
 8001e86:	f001 fa4f 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001e8a:	2040      	movs	r0, #64	; 0x40
 8001e8c:	f001 fa68 	bl	8003360 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2105      	movs	r1, #5
 8001e94:	2041      	movs	r0, #65	; 0x41
 8001e96:	f001 fa47 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001e9a:	2041      	movs	r0, #65	; 0x41
 8001e9c:	f001 fa60 	bl	8003360 <HAL_NVIC_EnableIRQ>
}
 8001ea0:	bf00      	nop
 8001ea2:	3738      	adds	r7, #56	; 0x38
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40006400 	.word	0x40006400
 8001eac:	200005a8 	.word	0x200005a8
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40006800 	.word	0x40006800

08001ebc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_RTC_MspInit+0x2c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d105      	bne.n	8001eda <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_RTC_MspInit+0x30>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_RTC_MspInit+0x30>)
 8001ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40002800 	.word	0x40002800
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6e      	ldr	r2, [pc, #440]	; (80020c8 <HAL_SD_MspInit+0x1d8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	f040 80d6 	bne.w	80020c0 <HAL_SD_MspInit+0x1d0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f14:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <HAL_SD_MspInit+0x1dc>)
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	4a6c      	ldr	r2, [pc, #432]	; (80020cc <HAL_SD_MspInit+0x1dc>)
 8001f1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_SD_MspInit+0x1dc>)
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2c:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_SD_MspInit+0x1dc>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	4a66      	ldr	r2, [pc, #408]	; (80020cc <HAL_SD_MspInit+0x1dc>)
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	6313      	str	r3, [r2, #48]	; 0x30
 8001f38:	4b64      	ldr	r3, [pc, #400]	; (80020cc <HAL_SD_MspInit+0x1dc>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_SD_MspInit+0x1dc>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	4a60      	ldr	r2, [pc, #384]	; (80020cc <HAL_SD_MspInit+0x1dc>)
 8001f4a:	f043 0308 	orr.w	r3, r3, #8
 8001f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f50:	4b5e      	ldr	r3, [pc, #376]	; (80020cc <HAL_SD_MspInit+0x1dc>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001f5c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f6e:	230c      	movs	r3, #12
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4855      	ldr	r0, [pc, #340]	; (80020d0 <HAL_SD_MspInit+0x1e0>)
 8001f7a:	f001 fda5 	bl	8003ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f90:	230c      	movs	r3, #12
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	484d      	ldr	r0, [pc, #308]	; (80020d0 <HAL_SD_MspInit+0x1e0>)
 8001f9c:	f001 fd94 	bl	8003ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fb0:	230c      	movs	r3, #12
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4846      	ldr	r0, [pc, #280]	; (80020d4 <HAL_SD_MspInit+0x1e4>)
 8001fbc:	f001 fd84 	bl	8003ac8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8001fc0:	4b45      	ldr	r3, [pc, #276]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8001fc2:	4a46      	ldr	r2, [pc, #280]	; (80020dc <HAL_SD_MspInit+0x1ec>)
 8001fc4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001fc6:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8001fc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fcc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fce:	4b42      	ldr	r3, [pc, #264]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd4:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fda:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8001fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8001fe4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fe8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fea:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8001fec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ff0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001ff2:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ff8:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8001ffa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ffe:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8002002:	2204      	movs	r2, #4
 8002004:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8002008:	2203      	movs	r2, #3
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800200c:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 800200e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002014:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8002016:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800201c:	482e      	ldr	r0, [pc, #184]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 800201e:	f001 f9ad 	bl	800337c <HAL_DMA_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_SD_MspInit+0x13c>
    {
      Error_Handler();
 8002028:	f7ff fe4a 	bl	8001cc0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8002030:	63da      	str	r2, [r3, #60]	; 0x3c
 8002032:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <HAL_SD_MspInit+0x1e8>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 800203a:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_SD_MspInit+0x1f4>)
 800203c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800203e:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 8002040:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002044:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 8002054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002058:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800205a:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 800205c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002060:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 8002064:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002068:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 800206c:	2220      	movs	r2, #32
 800206e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 8002072:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002076:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 800207a:	2204      	movs	r2, #4
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 8002080:	2203      	movs	r2, #3
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 8002086:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 800208e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002094:	4812      	ldr	r0, [pc, #72]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 8002096:	f001 f971 	bl	800337c <HAL_DMA_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_SD_MspInit+0x1b4>
    {
      Error_Handler();
 80020a0:	f7ff fe0e 	bl	8001cc0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
 80020aa:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <HAL_SD_MspInit+0x1f0>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2105      	movs	r1, #5
 80020b4:	2031      	movs	r0, #49	; 0x31
 80020b6:	f001 f937 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80020ba:	2031      	movs	r0, #49	; 0x31
 80020bc:	f001 f950 	bl	8003360 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3728      	adds	r7, #40	; 0x28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020800 	.word	0x40020800
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	2000458c 	.word	0x2000458c
 80020dc:	40026458 	.word	0x40026458
 80020e0:	200044fc 	.word	0x200044fc
 80020e4:	400264a0 	.word	0x400264a0

080020e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	; 0x30
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	2036      	movs	r0, #54	; 0x36
 80020fe:	f001 f913 	bl	8003328 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002102:	2036      	movs	r0, #54	; 0x36
 8002104:	f001 f92c 	bl	8003360 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002108:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_InitTick+0xa0>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <HAL_InitTick+0xa0>)
 800210e:	f043 0310 	orr.w	r3, r3, #16
 8002112:	6413      	str	r3, [r2, #64]	; 0x40
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_InitTick+0xa0>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002120:	f107 0210 	add.w	r2, r7, #16
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f002 fbb0 	bl	8004890 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002130:	f002 fb9a 	bl	8004868 <HAL_RCC_GetPCLK1Freq>
 8002134:	4603      	mov	r3, r0
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	4a13      	ldr	r2, [pc, #76]	; (800218c <HAL_InitTick+0xa4>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0c9b      	lsrs	r3, r3, #18
 8002144:	3b01      	subs	r3, #1
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_InitTick+0xa8>)
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <HAL_InitTick+0xac>)
 800214c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_InitTick+0xa8>)
 8002150:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002154:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_InitTick+0xa8>)
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_InitTick+0xa8>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_InitTick+0xa8>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002168:	4809      	ldr	r0, [pc, #36]	; (8002190 <HAL_InitTick+0xa8>)
 800216a:	f004 fe4a 	bl	8006e02 <HAL_TIM_Base_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d104      	bne.n	800217e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002174:	4806      	ldr	r0, [pc, #24]	; (8002190 <HAL_InitTick+0xa8>)
 8002176:	f004 fea5 	bl	8006ec4 <HAL_TIM_Base_Start_IT>
 800217a:	4603      	mov	r3, r0
 800217c:	e000      	b.n	8002180 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	3730      	adds	r7, #48	; 0x30
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	431bde83 	.word	0x431bde83
 8002190:	200045ec 	.word	0x200045ec
 8002194:	40001000 	.word	0x40001000

08002198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800219c:	e7fe      	b.n	800219c <NMI_Handler+0x4>

0800219e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <HardFault_Handler+0x4>

080021a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <MemManage_Handler+0x4>

080021aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <CAN1_TX_IRQHandler+0x10>)
 80021ca:	f000 fe0c 	bl	8002de6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20004564 	.word	0x20004564

080021d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <CAN1_RX0_IRQHandler+0x10>)
 80021de:	f000 fe02 	bl	8002de6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20004564 	.word	0x20004564

080021ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <CAN1_RX1_IRQHandler+0x10>)
 80021f2:	f000 fdf8 	bl	8002de6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20004564 	.word	0x20004564

08002200 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <SDMMC1_IRQHandler+0x10>)
 8002206:	f003 fd53 	bl	8005cb0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20004430 	.word	0x20004430

08002214 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM6_DAC_IRQHandler+0x10>)
 800221a:	f004 fecb 	bl	8006fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200045ec 	.word	0x200045ec

08002228 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <DMA2_Stream3_IRQHandler+0x10>)
 800222e:	f001 f9d5 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	2000458c 	.word	0x2000458c

0800223c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <CAN2_TX_IRQHandler+0x10>)
 8002242:	f000 fdd0 	bl	8002de6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200044b4 	.word	0x200044b4

08002250 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <CAN2_RX0_IRQHandler+0x10>)
 8002256:	f000 fdc6 	bl	8002de6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200044b4 	.word	0x200044b4

08002264 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <CAN2_RX1_IRQHandler+0x10>)
 800226a:	f000 fdbc 	bl	8002de6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200044b4 	.word	0x200044b4

08002278 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <DMA2_Stream6_IRQHandler+0x10>)
 800227e:	f001 f9ad 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200044fc 	.word	0x200044fc

0800228c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <_sbrk+0x5c>)
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <_sbrk+0x60>)
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <_sbrk+0x64>)
 80022aa:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <_sbrk+0x68>)
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d207      	bcs.n	80022cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022bc:	f00d fb56 	bl	800f96c <__errno>
 80022c0:	4603      	mov	r3, r0
 80022c2:	220c      	movs	r2, #12
 80022c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ca:	e009      	b.n	80022e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <_sbrk+0x64>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_sbrk+0x64>)
 80022dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20080000 	.word	0x20080000
 80022ec:	00000400 	.word	0x00000400
 80022f0:	200005ac 	.word	0x200005ac
 80022f4:	200074a8 	.word	0x200074a8

080022f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <SystemInit+0x20>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <SystemInit+0x20>)
 8002304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800231c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002354 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002322:	490e      	ldr	r1, [pc, #56]	; (800235c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002324:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002338:	4c0b      	ldr	r4, [pc, #44]	; (8002368 <LoopFillZerobss+0x26>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002346:	f7ff ffd7 	bl	80022f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800234a:	f00d fb15 	bl	800f978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234e:	f7ff f9df 	bl	8001710 <main>
  bx  lr    
 8002352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002354:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800235c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002360:	08010868 	.word	0x08010868
  ldr r2, =_sbss
 8002364:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8002368:	200074a8 	.word	0x200074a8

0800236c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800236c:	e7fe      	b.n	800236c <ADC_IRQHandler>

0800236e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002372:	2003      	movs	r0, #3
 8002374:	f000 ffcd 	bl	8003312 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff feb5 	bl	80020e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800237e:	f7ff fca5 	bl	8001ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	20004638 	.word	0x20004638

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20004638 	.word	0x20004638

080023c8 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_SetTickFreq+0x48>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	79fa      	ldrb	r2, [r7, #7]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d012      	beq.n	8002406 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_SetTickFreq+0x48>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_SetTickFreq+0x48>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_SetTickFreq+0x4c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fe79 	bl	80020e8 <HAL_InitTick>
 80023f6:	4603      	mov	r3, r0
 80023f8:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8002400:	4a03      	ldr	r2, [pc, #12]	; (8002410 <HAL_SetTickFreq+0x48>)
 8002402:	7bbb      	ldrb	r3, [r7, #14]
 8002404:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000000c 	.word	0x2000000c
 8002414:	20000008 	.word	0x20000008

08002418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff ffc6 	bl	80023b0 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002430:	d005      	beq.n	800243e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_Delay+0x44>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800243e:	bf00      	nop
 8002440:	f7ff ffb6 	bl	80023b0 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d8f7      	bhi.n	8002440 <HAL_Delay+0x28>
  {
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000000c 	.word	0x2000000c

08002460 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e0ed      	b.n	800264e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff fc4c 	bl	8001d1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002494:	f7ff ff8c 	bl	80023b0 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800249a:	e012      	b.n	80024c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800249c:	f7ff ff88 	bl	80023b0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b0a      	cmp	r3, #10
 80024a8:	d90b      	bls.n	80024c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2205      	movs	r2, #5
 80024ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0c5      	b.n	800264e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0e5      	beq.n	800249c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0202 	bic.w	r2, r2, #2
 80024de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e0:	f7ff ff66 	bl	80023b0 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024e6:	e012      	b.n	800250e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024e8:	f7ff ff62 	bl	80023b0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b0a      	cmp	r3, #10
 80024f4:	d90b      	bls.n	800250e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2205      	movs	r2, #5
 8002506:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e09f      	b.n	800264e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e5      	bne.n	80024e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7e1b      	ldrb	r3, [r3, #24]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d108      	bne.n	8002536 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e007      	b.n	8002546 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7e5b      	ldrb	r3, [r3, #25]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d108      	bne.n	8002560 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e007      	b.n	8002570 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e9b      	ldrb	r3, [r3, #26]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d108      	bne.n	800258a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0220 	orr.w	r2, r2, #32
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e007      	b.n	800259a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0220 	bic.w	r2, r2, #32
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7edb      	ldrb	r3, [r3, #27]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0210 	bic.w	r2, r2, #16
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e007      	b.n	80025c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0210 	orr.w	r2, r2, #16
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7f1b      	ldrb	r3, [r3, #28]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e007      	b.n	80025ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0208 	bic.w	r2, r2, #8
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7f5b      	ldrb	r3, [r3, #29]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d108      	bne.n	8002608 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0204 	orr.w	r2, r2, #4
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e007      	b.n	8002618 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0204 	bic.w	r2, r2, #4
 8002616:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	ea42 0103 	orr.w	r1, r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	1e5a      	subs	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d003      	beq.n	800267e <HAL_CAN_ConfigFilter+0x26>
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b02      	cmp	r3, #2
 800267a:	f040 80c7 	bne.w	800280c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a69      	ldr	r2, [pc, #420]	; (8002828 <HAL_CAN_ConfigFilter+0x1d0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d001      	beq.n	800268c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_CAN_ConfigFilter+0x1d4>)
 800268a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	4a63      	ldr	r2, [pc, #396]	; (800282c <HAL_CAN_ConfigFilter+0x1d4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d111      	bne.n	80026c8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026aa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	431a      	orrs	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2201      	movs	r2, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d123      	bne.n	800273a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	401a      	ands	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002714:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3248      	adds	r2, #72	; 0x48
 800271a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800272e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002730:	6979      	ldr	r1, [r7, #20]
 8002732:	3348      	adds	r3, #72	; 0x48
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d122      	bne.n	8002788 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	431a      	orrs	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002762:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3248      	adds	r2, #72	; 0x48
 8002768:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800277c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800277e:	6979      	ldr	r1, [r7, #20]
 8002780:	3348      	adds	r3, #72	; 0x48
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	43db      	mvns	r3, r3
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80027a2:	e007      	b.n	80027b4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027ce:	e007      	b.n	80027e0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	431a      	orrs	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d107      	bne.n	80027f8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027fe:	f023 0201 	bic.w	r2, r3, #1
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e006      	b.n	800281a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
  }
}
 800281a:	4618      	mov	r0, r3
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40003400 	.word	0x40003400
 800282c:	40006400 	.word	0x40006400

08002830 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d12e      	bne.n	80028a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800285c:	f7ff fda8 	bl	80023b0 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002862:	e012      	b.n	800288a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002864:	f7ff fda4 	bl	80023b0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b0a      	cmp	r3, #10
 8002870:	d90b      	bls.n	800288a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2205      	movs	r2, #5
 8002882:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e012      	b.n	80028b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e5      	bne.n	8002864 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e006      	b.n	80028b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
  }
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028d6:	7ffb      	ldrb	r3, [r7, #31]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d003      	beq.n	80028e4 <HAL_CAN_AddTxMessage+0x2c>
 80028dc:	7ffb      	ldrb	r3, [r7, #31]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	f040 80b8 	bne.w	8002a54 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80a0 	beq.w	8002a44 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	0e1b      	lsrs	r3, r3, #24
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d907      	bls.n	8002924 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e09e      	b.n	8002a62 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002924:	2201      	movs	r2, #1
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	409a      	lsls	r2, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002940:	68f9      	ldr	r1, [r7, #12]
 8002942:	6809      	ldr	r1, [r1, #0]
 8002944:	431a      	orrs	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3318      	adds	r3, #24
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	440b      	add	r3, r1
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e00f      	b.n	8002972 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800295c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002966:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3318      	adds	r3, #24
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	440b      	add	r3, r1
 8002970:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3318      	adds	r3, #24
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	440b      	add	r3, r1
 8002982:	3304      	adds	r3, #4
 8002984:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	7d1b      	ldrb	r3, [r3, #20]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d111      	bne.n	80029b2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3318      	adds	r3, #24
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	4413      	add	r3, r2
 800299a:	3304      	adds	r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	6811      	ldr	r1, [r2, #0]
 80029a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3318      	adds	r3, #24
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	440b      	add	r3, r1
 80029ae:	3304      	adds	r3, #4
 80029b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3307      	adds	r3, #7
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	061a      	lsls	r2, r3, #24
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3306      	adds	r3, #6
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3305      	adds	r3, #5
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	4313      	orrs	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	3204      	adds	r2, #4
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	4610      	mov	r0, r2
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	6811      	ldr	r1, [r2, #0]
 80029da:	ea43 0200 	orr.w	r2, r3, r0
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	440b      	add	r3, r1
 80029e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3303      	adds	r3, #3
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	061a      	lsls	r2, r3, #24
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3302      	adds	r3, #2
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3301      	adds	r3, #1
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	4313      	orrs	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	7812      	ldrb	r2, [r2, #0]
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	6811      	ldr	r1, [r2, #0]
 8002a10:	ea43 0200 	orr.w	r2, r3, r0
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	440b      	add	r3, r1
 8002a1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3318      	adds	r3, #24
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	6811      	ldr	r1, [r2, #0]
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3318      	adds	r3, #24
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	440b      	add	r3, r1
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e00e      	b.n	8002a62 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e006      	b.n	8002a62 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a80:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a82:	7afb      	ldrb	r3, [r7, #11]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d002      	beq.n	8002a8e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d11d      	bne.n	8002aca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d003      	beq.n	8002afc <HAL_CAN_GetRxMessage+0x24>
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	f040 80f3 	bne.w	8002ce2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10e      	bne.n	8002b20 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d116      	bne.n	8002b3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0e7      	b.n	8002cf0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d107      	bne.n	8002b3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0d8      	b.n	8002cf0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	331b      	adds	r3, #27
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	4413      	add	r3, r2
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0204 	and.w	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10c      	bne.n	8002b76 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	331b      	adds	r3, #27
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	4413      	add	r3, r2
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0d5b      	lsrs	r3, r3, #21
 8002b6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e00b      	b.n	8002b8e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	331b      	adds	r3, #27
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	4413      	add	r3, r2
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	331b      	adds	r3, #27
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0202 	and.w	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	331b      	adds	r3, #27
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	4413      	add	r3, r2
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 020f 	and.w	r2, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	331b      	adds	r3, #27
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	331b      	adds	r3, #27
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0a1a      	lsrs	r2, r3, #8
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0c1a      	lsrs	r2, r3, #16
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	3302      	adds	r3, #2
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	0e1a      	lsrs	r2, r3, #24
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	3303      	adds	r3, #3
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	3304      	adds	r3, #4
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0a1a      	lsrs	r2, r3, #8
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	3305      	adds	r3, #5
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0c1a      	lsrs	r2, r3, #16
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	3306      	adds	r3, #6
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0e1a      	lsrs	r2, r3, #24
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	3307      	adds	r3, #7
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d108      	bne.n	8002cce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	e007      	b.n	8002cde <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0220 	orr.w	r2, r2, #32
 8002cdc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e006      	b.n	8002cf0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d10:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d12:	7afb      	ldrb	r3, [r7, #11]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d002      	beq.n	8002d1e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002d18:	7afb      	ldrb	r3, [r7, #11]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d10f      	bne.n	8002d3e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d106      	bne.n	8002d32 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e005      	b.n	8002d3e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d5c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d002      	beq.n	8002d6a <HAL_CAN_ActivateNotification+0x1e>
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d109      	bne.n	8002d7e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6959      	ldr	r1, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e006      	b.n	8002d8c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
  }
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d002      	beq.n	8002db6 <HAL_CAN_DeactivateNotification+0x1e>
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d10a      	bne.n	8002dcc <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6959      	ldr	r1, [r3, #20]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e006      	b.n	8002dda <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b08a      	sub	sp, #40	; 0x28
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d07c      	beq.n	8002f26 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d023      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f00c fb39 	bl	800f4c0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e4e:	e016      	b.n	8002e7e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
 8002e62:	e00c      	b.n	8002e7e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	e002      	b.n	8002e7e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f00c fb42 	bl	800f502 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d024      	beq.n	8002ed2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f00c fb1a 	bl	800f4d6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002ea2:	e016      	b.n	8002ed2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	e00c      	b.n	8002ed2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d004      	beq.n	8002ecc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eca:	e002      	b.n	8002ed2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f00c fb23 	bl	800f518 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d024      	beq.n	8002f26 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ee4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f00c fafb 	bl	800f4ec <HAL_CAN_TxMailbox2CompleteCallback>
 8002ef6:	e016      	b.n	8002f26 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0a:	e00c      	b.n	8002f26 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1e:	e002      	b.n	8002f26 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f00c fb04 	bl	800f52e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00c      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2210      	movs	r2, #16
 8002f48:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2208      	movs	r2, #8
 8002f64:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8f4 	bl	8003154 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f00b fd5b 	bl	800ea40 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00c      	beq.n	8002fae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2210      	movs	r2, #16
 8002fac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8cc 	bl	8003168 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f00b fd35 	bl	800ea58 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00b      	beq.n	8003010 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d006      	beq.n	8003010 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2210      	movs	r2, #16
 8003008:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8b6 	bl	800317c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d006      	beq.n	8003032 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2208      	movs	r2, #8
 800302a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f8af 	bl	8003190 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d07b      	beq.n	8003134 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d072      	beq.n	800312c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d043      	beq.n	800312c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d03e      	beq.n	800312c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030b4:	2b60      	cmp	r3, #96	; 0x60
 80030b6:	d02b      	beq.n	8003110 <HAL_CAN_IRQHandler+0x32a>
 80030b8:	2b60      	cmp	r3, #96	; 0x60
 80030ba:	d82e      	bhi.n	800311a <HAL_CAN_IRQHandler+0x334>
 80030bc:	2b50      	cmp	r3, #80	; 0x50
 80030be:	d022      	beq.n	8003106 <HAL_CAN_IRQHandler+0x320>
 80030c0:	2b50      	cmp	r3, #80	; 0x50
 80030c2:	d82a      	bhi.n	800311a <HAL_CAN_IRQHandler+0x334>
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d019      	beq.n	80030fc <HAL_CAN_IRQHandler+0x316>
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d826      	bhi.n	800311a <HAL_CAN_IRQHandler+0x334>
 80030cc:	2b30      	cmp	r3, #48	; 0x30
 80030ce:	d010      	beq.n	80030f2 <HAL_CAN_IRQHandler+0x30c>
 80030d0:	2b30      	cmp	r3, #48	; 0x30
 80030d2:	d822      	bhi.n	800311a <HAL_CAN_IRQHandler+0x334>
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d002      	beq.n	80030de <HAL_CAN_IRQHandler+0x2f8>
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d005      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030dc:	e01d      	b.n	800311a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	f043 0308 	orr.w	r3, r3, #8
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030e6:	e019      	b.n	800311c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	f043 0310 	orr.w	r3, r3, #16
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030f0:	e014      	b.n	800311c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	f043 0320 	orr.w	r3, r3, #32
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030fa:	e00f      	b.n	800311c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003104:	e00a      	b.n	800311c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800310e:	e005      	b.n	800311c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003118:	e000      	b.n	800311c <HAL_CAN_IRQHandler+0x336>
            break;
 800311a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800312a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2204      	movs	r2, #4
 8003132:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f82c 	bl	80031a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800314c:	bf00      	nop
 800314e:	3728      	adds	r7, #40	; 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <__NVIC_SetPriorityGrouping+0x40>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e6:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <__NVIC_SetPriorityGrouping+0x40>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00
 80031fc:	05fa0000 	.word	0x05fa0000

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db0b      	blt.n	8003246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4907      	ldr	r1, [pc, #28]	; (8003254 <__NVIC_EnableIRQ+0x38>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2001      	movs	r0, #1
 800323e:	fa00 f202 	lsl.w	r2, r0, r2
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100

08003258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003268:	2b00      	cmp	r3, #0
 800326a:	db0a      	blt.n	8003282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	490c      	ldr	r1, [pc, #48]	; (80032a4 <__NVIC_SetPriority+0x4c>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	440b      	add	r3, r1
 800327c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003280:	e00a      	b.n	8003298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4908      	ldr	r1, [pc, #32]	; (80032a8 <__NVIC_SetPriority+0x50>)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	3b04      	subs	r3, #4
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	440b      	add	r3, r1
 8003296:	761a      	strb	r2, [r3, #24]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000e100 	.word	0xe000e100
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	; 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f1c3 0307 	rsb	r3, r3, #7
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf28      	it	cs
 80032ca:	2304      	movcs	r3, #4
 80032cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d902      	bls.n	80032dc <NVIC_EncodePriority+0x30>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3b03      	subs	r3, #3
 80032da:	e000      	b.n	80032de <NVIC_EncodePriority+0x32>
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	401a      	ands	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	43d9      	mvns	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	4313      	orrs	r3, r2
         );
}
 8003306:	4618      	mov	r0, r3
 8003308:	3724      	adds	r7, #36	; 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ff4c 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800333a:	f7ff ff61 	bl	8003200 <__NVIC_GetPriorityGrouping>
 800333e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	6978      	ldr	r0, [r7, #20]
 8003346:	f7ff ffb1 	bl	80032ac <NVIC_EncodePriority>
 800334a:	4602      	mov	r2, r0
 800334c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ff80 	bl	8003258 <__NVIC_SetPriority>
}
 8003358:	bf00      	nop
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff54 	bl	800321c <__NVIC_EnableIRQ>
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff f812 	bl	80023b0 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e099      	b.n	80034cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b8:	e00f      	b.n	80033da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ba:	f7fe fff9 	bl	80023b0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d908      	bls.n	80033da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2203      	movs	r2, #3
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e078      	b.n	80034cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e8      	bne.n	80033ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <HAL_DMA_Init+0x158>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003406:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b04      	cmp	r3, #4
 8003432:	d107      	bne.n	8003444 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	4313      	orrs	r3, r2
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f023 0307 	bic.w	r3, r3, #7
 800345a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2b04      	cmp	r3, #4
 800346c:	d117      	bne.n	800349e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00e      	beq.n	800349e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 faa5 	bl	80039d0 <DMA_CheckFifoParam>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2240      	movs	r2, #64	; 0x40
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800349a:	2301      	movs	r3, #1
 800349c:	e016      	b.n	80034cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa5c 	bl	8003964 <DMA_CalcBaseAndBitshift>
 80034ac:	4603      	mov	r3, r0
 80034ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	223f      	movs	r2, #63	; 0x3f
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	e010803f 	.word	0xe010803f

080034d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_DMA_Start_IT+0x26>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e048      	b.n	8003590 <HAL_DMA_Start_IT+0xb8>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d137      	bne.n	8003582 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2202      	movs	r2, #2
 8003516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f9ee 	bl	8003908 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	223f      	movs	r2, #63	; 0x3f
 8003532:	409a      	lsls	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0216 	orr.w	r2, r2, #22
 8003546:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003556:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d007      	beq.n	8003570 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0208 	orr.w	r2, r2, #8
 800356e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e005      	b.n	800358e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800358a:	2302      	movs	r3, #2
 800358c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e00c      	b.n	80035d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2205      	movs	r2, #5
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80035e8:	4b92      	ldr	r3, [pc, #584]	; (8003834 <HAL_DMA_IRQHandler+0x258>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a92      	ldr	r2, [pc, #584]	; (8003838 <HAL_DMA_IRQHandler+0x25c>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0a9b      	lsrs	r3, r3, #10
 80035f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	2208      	movs	r2, #8
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01a      	beq.n	8003648 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2208      	movs	r2, #8
 8003636:	409a      	lsls	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	f043 0201 	orr.w	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2201      	movs	r2, #1
 800366c:	409a      	lsls	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	f043 0202 	orr.w	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	2204      	movs	r2, #4
 8003684:	409a      	lsls	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d012      	beq.n	80036b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	2204      	movs	r2, #4
 80036a2:	409a      	lsls	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	f043 0204 	orr.w	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	2210      	movs	r2, #16
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d043      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d03c      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d6:	2210      	movs	r2, #16
 80036d8:	409a      	lsls	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d018      	beq.n	800371e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d024      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
 800370a:	e01f      	b.n	800374c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e016      	b.n	800374c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0208 	bic.w	r2, r2, #8
 800373a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	2220      	movs	r2, #32
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 808e 	beq.w	800387a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8086 	beq.w	800387a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	2220      	movs	r2, #32
 8003774:	409a      	lsls	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b05      	cmp	r3, #5
 8003784:	d136      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0216 	bic.w	r2, r2, #22
 8003794:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x1da>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0208 	bic.w	r2, r2, #8
 80037c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	223f      	movs	r2, #63	; 0x3f
 80037cc:	409a      	lsls	r2, r3
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d07d      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
        }
        return;
 80037f2:	e078      	b.n	80038e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01c      	beq.n	800383c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d108      	bne.n	8003822 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	2b00      	cmp	r3, #0
 8003816:	d030      	beq.n	800387a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
 8003820:	e02b      	b.n	800387a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d027      	beq.n	800387a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
 8003832:	e022      	b.n	800387a <HAL_DMA_IRQHandler+0x29e>
 8003834:	20000004 	.word	0x20000004
 8003838:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0210 	bic.w	r2, r2, #16
 8003858:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	2b00      	cmp	r3, #0
 8003880:	d032      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d022      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2205      	movs	r2, #5
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3301      	adds	r3, #1
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d307      	bcc.n	80038c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f2      	bne.n	80038a6 <HAL_DMA_IRQHandler+0x2ca>
 80038c0:	e000      	b.n	80038c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038c2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
 80038e4:	e000      	b.n	80038e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80038e6:	bf00      	nop
    }
  }
}
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop

080038f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003924:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d108      	bne.n	8003948 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003946:	e007      	b.n	8003958 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	3b10      	subs	r3, #16
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <DMA_CalcBaseAndBitshift+0x60>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800397e:	4a12      	ldr	r2, [pc, #72]	; (80039c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d908      	bls.n	80039a4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <DMA_CalcBaseAndBitshift+0x68>)
 800399a:	4013      	ands	r3, r2
 800399c:	1d1a      	adds	r2, r3, #4
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	659a      	str	r2, [r3, #88]	; 0x58
 80039a2:	e006      	b.n	80039b2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <DMA_CalcBaseAndBitshift+0x68>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	aaaaaaab 	.word	0xaaaaaaab
 80039c8:	080103c8 	.word	0x080103c8
 80039cc:	fffffc00 	.word	0xfffffc00

080039d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11f      	bne.n	8003a2a <DMA_CheckFifoParam+0x5a>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d856      	bhi.n	8003a9e <DMA_CheckFifoParam+0xce>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <DMA_CheckFifoParam+0x28>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a09 	.word	0x08003a09
 80039fc:	08003a1b 	.word	0x08003a1b
 8003a00:	08003a09 	.word	0x08003a09
 8003a04:	08003a9f 	.word	0x08003a9f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d046      	beq.n	8003aa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a18:	e043      	b.n	8003aa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a22:	d140      	bne.n	8003aa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e03d      	b.n	8003aa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a32:	d121      	bne.n	8003a78 <DMA_CheckFifoParam+0xa8>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d837      	bhi.n	8003aaa <DMA_CheckFifoParam+0xda>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <DMA_CheckFifoParam+0x70>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a57 	.word	0x08003a57
 8003a48:	08003a51 	.word	0x08003a51
 8003a4c:	08003a69 	.word	0x08003a69
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	e030      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d025      	beq.n	8003aae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a66:	e022      	b.n	8003aae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a70:	d11f      	bne.n	8003ab2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a76:	e01c      	b.n	8003ab2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d903      	bls.n	8003a86 <DMA_CheckFifoParam+0xb6>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d003      	beq.n	8003a8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a84:	e018      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8a:	e015      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9c:	e00b      	b.n	8003ab6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e00a      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e008      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e006      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e004      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	e175      	b.n	8003dd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ae8:	2201      	movs	r2, #1
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	f040 8164 	bne.w	8003dce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d005      	beq.n	8003b1e <HAL_GPIO_Init+0x56>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d130      	bne.n	8003b80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	2203      	movs	r2, #3
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b54:	2201      	movs	r2, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 0201 	and.w	r2, r3, #1
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d017      	beq.n	8003bbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	2203      	movs	r2, #3
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d123      	bne.n	8003c10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	08da      	lsrs	r2, r3, #3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3208      	adds	r2, #8
 8003bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	220f      	movs	r2, #15
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	08da      	lsrs	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3208      	adds	r2, #8
 8003c0a:	69b9      	ldr	r1, [r7, #24]
 8003c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0203 	and.w	r2, r3, #3
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80be 	beq.w	8003dce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c52:	4b66      	ldr	r3, [pc, #408]	; (8003dec <HAL_GPIO_Init+0x324>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	4a65      	ldr	r2, [pc, #404]	; (8003dec <HAL_GPIO_Init+0x324>)
 8003c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_GPIO_Init+0x324>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c6a:	4a61      	ldr	r2, [pc, #388]	; (8003df0 <HAL_GPIO_Init+0x328>)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a58      	ldr	r2, [pc, #352]	; (8003df4 <HAL_GPIO_Init+0x32c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d037      	beq.n	8003d06 <HAL_GPIO_Init+0x23e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a57      	ldr	r2, [pc, #348]	; (8003df8 <HAL_GPIO_Init+0x330>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d031      	beq.n	8003d02 <HAL_GPIO_Init+0x23a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a56      	ldr	r2, [pc, #344]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d02b      	beq.n	8003cfe <HAL_GPIO_Init+0x236>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a55      	ldr	r2, [pc, #340]	; (8003e00 <HAL_GPIO_Init+0x338>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d025      	beq.n	8003cfa <HAL_GPIO_Init+0x232>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a54      	ldr	r2, [pc, #336]	; (8003e04 <HAL_GPIO_Init+0x33c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01f      	beq.n	8003cf6 <HAL_GPIO_Init+0x22e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a53      	ldr	r2, [pc, #332]	; (8003e08 <HAL_GPIO_Init+0x340>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d019      	beq.n	8003cf2 <HAL_GPIO_Init+0x22a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a52      	ldr	r2, [pc, #328]	; (8003e0c <HAL_GPIO_Init+0x344>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <HAL_GPIO_Init+0x226>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a51      	ldr	r2, [pc, #324]	; (8003e10 <HAL_GPIO_Init+0x348>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00d      	beq.n	8003cea <HAL_GPIO_Init+0x222>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a50      	ldr	r2, [pc, #320]	; (8003e14 <HAL_GPIO_Init+0x34c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d007      	beq.n	8003ce6 <HAL_GPIO_Init+0x21e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a4f      	ldr	r2, [pc, #316]	; (8003e18 <HAL_GPIO_Init+0x350>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_GPIO_Init+0x21a>
 8003cde:	2309      	movs	r3, #9
 8003ce0:	e012      	b.n	8003d08 <HAL_GPIO_Init+0x240>
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	e010      	b.n	8003d08 <HAL_GPIO_Init+0x240>
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	e00e      	b.n	8003d08 <HAL_GPIO_Init+0x240>
 8003cea:	2307      	movs	r3, #7
 8003cec:	e00c      	b.n	8003d08 <HAL_GPIO_Init+0x240>
 8003cee:	2306      	movs	r3, #6
 8003cf0:	e00a      	b.n	8003d08 <HAL_GPIO_Init+0x240>
 8003cf2:	2305      	movs	r3, #5
 8003cf4:	e008      	b.n	8003d08 <HAL_GPIO_Init+0x240>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	e006      	b.n	8003d08 <HAL_GPIO_Init+0x240>
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e004      	b.n	8003d08 <HAL_GPIO_Init+0x240>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e002      	b.n	8003d08 <HAL_GPIO_Init+0x240>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_GPIO_Init+0x240>
 8003d06:	2300      	movs	r3, #0
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	f002 0203 	and.w	r2, r2, #3
 8003d0e:	0092      	lsls	r2, r2, #2
 8003d10:	4093      	lsls	r3, r2
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d18:	4935      	ldr	r1, [pc, #212]	; (8003df0 <HAL_GPIO_Init+0x328>)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	3302      	adds	r3, #2
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d26:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <HAL_GPIO_Init+0x354>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d4a:	4a34      	ldr	r2, [pc, #208]	; (8003e1c <HAL_GPIO_Init+0x354>)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d50:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_GPIO_Init+0x354>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d74:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <HAL_GPIO_Init+0x354>)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d7a:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <HAL_GPIO_Init+0x354>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d9e:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <HAL_GPIO_Init+0x354>)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <HAL_GPIO_Init+0x354>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dc8:	4a14      	ldr	r2, [pc, #80]	; (8003e1c <HAL_GPIO_Init+0x354>)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b0f      	cmp	r3, #15
 8003dd8:	f67f ae86 	bls.w	8003ae8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	3724      	adds	r7, #36	; 0x24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40013800 	.word	0x40013800
 8003df4:	40020000 	.word	0x40020000
 8003df8:	40020400 	.word	0x40020400
 8003dfc:	40020800 	.word	0x40020800
 8003e00:	40020c00 	.word	0x40020c00
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40021400 	.word	0x40021400
 8003e0c:	40021800 	.word	0x40021800
 8003e10:	40021c00 	.word	0x40021c00
 8003e14:	40022000 	.word	0x40022000
 8003e18:	40022400 	.word	0x40022400
 8003e1c:	40013c00 	.word	0x40013c00

08003e20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	887b      	ldrh	r3, [r7, #2]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
 8003e3c:	e001      	b.n	8003e42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e60:	787b      	ldrb	r3, [r7, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e6c:	e003      	b.n	8003e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	041a      	lsls	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	619a      	str	r2, [r3, #24]
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b085      	sub	sp, #20
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e94:	887a      	ldrh	r2, [r7, #2]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	041a      	lsls	r2, r3, #16
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	43d9      	mvns	r1, r3
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	400b      	ands	r3, r1
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a22      	ldr	r2, [pc, #136]	; (8003f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eda:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee6:	f7fe fa63 	bl	80023b0 <HAL_GetTick>
 8003eea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003eec:	e009      	b.n	8003f02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eee:	f7fe fa5f 	bl	80023b0 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003efc:	d901      	bls.n	8003f02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e022      	b.n	8003f48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0e:	d1ee      	bne.n	8003eee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f1c:	f7fe fa48 	bl	80023b0 <HAL_GetTick>
 8003f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f22:	e009      	b.n	8003f38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f24:	f7fe fa44 	bl	80023b0 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f32:	d901      	bls.n	8003f38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e007      	b.n	8003f48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f44:	d1ee      	bne.n	8003f24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40007000 	.word	0x40007000

08003f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f60:	2300      	movs	r3, #0
 8003f62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e29b      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8087 	beq.w	800408a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f7c:	4b96      	ldr	r3, [pc, #600]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d00c      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f88:	4b93      	ldr	r3, [pc, #588]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d112      	bne.n	8003fba <HAL_RCC_OscConfig+0x62>
 8003f94:	4b90      	ldr	r3, [pc, #576]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa0:	d10b      	bne.n	8003fba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa2:	4b8d      	ldr	r3, [pc, #564]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d06c      	beq.n	8004088 <HAL_RCC_OscConfig+0x130>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d168      	bne.n	8004088 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e275      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x7a>
 8003fc4:	4b84      	ldr	r3, [pc, #528]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a83      	ldr	r2, [pc, #524]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e02e      	b.n	8004030 <HAL_RCC_OscConfig+0xd8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x9c>
 8003fda:	4b7f      	ldr	r3, [pc, #508]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a7e      	ldr	r2, [pc, #504]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b7c      	ldr	r3, [pc, #496]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7b      	ldr	r2, [pc, #492]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <HAL_RCC_OscConfig+0xd8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0xc0>
 8003ffe:	4b76      	ldr	r3, [pc, #472]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a75      	ldr	r2, [pc, #468]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b73      	ldr	r3, [pc, #460]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a72      	ldr	r2, [pc, #456]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0xd8>
 8004018:	4b6f      	ldr	r3, [pc, #444]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6e      	ldr	r2, [pc, #440]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b6c      	ldr	r3, [pc, #432]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a6b      	ldr	r2, [pc, #428]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fe f9ba 	bl	80023b0 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004040:	f7fe f9b6 	bl	80023b0 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e229      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0xe8>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fe f9a6 	bl	80023b0 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fe f9a2 	bl	80023b0 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e215      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	4b57      	ldr	r3, [pc, #348]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x110>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d069      	beq.n	800416a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004096:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b4d      	ldr	r3, [pc, #308]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d11c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x190>
 80040ae:	4b4a      	ldr	r3, [pc, #296]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d116      	bne.n	80040e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x17a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e1e9      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	493d      	ldr	r1, [pc, #244]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	e040      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d023      	beq.n	8004138 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f0:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a38      	ldr	r2, [pc, #224]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fe f958 	bl	80023b0 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004104:	f7fe f954 	bl	80023b0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e1c7      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004116:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4929      	ldr	r1, [pc, #164]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]
 8004136:	e018      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004138:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fe f934 	bl	80023b0 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414c:	f7fe f930 	bl	80023b0 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1a3      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d038      	beq.n	80041e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d019      	beq.n	80041b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417e:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7fe f911 	bl	80023b0 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004192:	f7fe f90d 	bl	80023b0 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e180      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80041a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x23a>
 80041b0:	e01a      	b.n	80041e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80041b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b6:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fe f8f7 	bl	80023b0 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fe f8f3 	bl	80023b0 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d903      	bls.n	80041dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e166      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
 80041d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041dc:	4b92      	ldr	r3, [pc, #584]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80041de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1ee      	bne.n	80041c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80a4 	beq.w	800433e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f6:	4b8c      	ldr	r3, [pc, #560]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10d      	bne.n	800421e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	4b89      	ldr	r3, [pc, #548]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a88      	ldr	r2, [pc, #544]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	; 0x40
 800420e:	4b86      	ldr	r3, [pc, #536]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421e:	4b83      	ldr	r3, [pc, #524]	; (800442c <HAL_RCC_OscConfig+0x4d4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d118      	bne.n	800425c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800422a:	4b80      	ldr	r3, [pc, #512]	; (800442c <HAL_RCC_OscConfig+0x4d4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7f      	ldr	r2, [pc, #508]	; (800442c <HAL_RCC_OscConfig+0x4d4>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004236:	f7fe f8bb 	bl	80023b0 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7fe f8b7 	bl	80023b0 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b64      	cmp	r3, #100	; 0x64
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e12a      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	4b76      	ldr	r3, [pc, #472]	; (800442c <HAL_RCC_OscConfig+0x4d4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d106      	bne.n	8004272 <HAL_RCC_OscConfig+0x31a>
 8004264:	4b70      	ldr	r3, [pc, #448]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a6f      	ldr	r2, [pc, #444]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	e02d      	b.n	80042ce <HAL_RCC_OscConfig+0x376>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x33c>
 800427a:	4b6b      	ldr	r3, [pc, #428]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a6a      	ldr	r2, [pc, #424]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	4b68      	ldr	r3, [pc, #416]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a67      	ldr	r2, [pc, #412]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
 8004292:	e01c      	b.n	80042ce <HAL_RCC_OscConfig+0x376>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b05      	cmp	r3, #5
 800429a:	d10c      	bne.n	80042b6 <HAL_RCC_OscConfig+0x35e>
 800429c:	4b62      	ldr	r3, [pc, #392]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	4a61      	ldr	r2, [pc, #388]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70
 80042a8:	4b5f      	ldr	r3, [pc, #380]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	4a5e      	ldr	r2, [pc, #376]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6713      	str	r3, [r2, #112]	; 0x70
 80042b4:	e00b      	b.n	80042ce <HAL_RCC_OscConfig+0x376>
 80042b6:	4b5c      	ldr	r3, [pc, #368]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a5b      	ldr	r2, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d015      	beq.n	8004302 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fe f86b 	bl	80023b0 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fe f867 	bl	80023b0 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e0d8      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f4:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ee      	beq.n	80042de <HAL_RCC_OscConfig+0x386>
 8004300:	e014      	b.n	800432c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7fe f855 	bl	80023b0 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fe f851 	bl	80023b0 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e0c2      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004320:	4b41      	ldr	r3, [pc, #260]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ee      	bne.n	800430a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4a3c      	ldr	r2, [pc, #240]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80ae 	beq.w	80044a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004348:	4b37      	ldr	r3, [pc, #220]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d06d      	beq.n	8004430 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d14b      	bne.n	80043f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b32      	ldr	r3, [pc, #200]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a31      	ldr	r2, [pc, #196]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fe f822 	bl	80023b0 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe f81e 	bl	80023b0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e091      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	4b29      	ldr	r3, [pc, #164]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	019b      	lsls	r3, r3, #6
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	085b      	lsrs	r3, r3, #1
 80043a6:	3b01      	subs	r3, #1
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	491b      	ldr	r1, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a18      	ldr	r2, [pc, #96]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd fff0 	bl	80023b0 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd ffec 	bl	80023b0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e05f      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x47c>
 80043f2:	e057      	b.n	80044a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0b      	ldr	r2, [pc, #44]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd ffd6 	bl	80023b0 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004408:	f7fd ffd2 	bl	80023b0 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e045      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b03      	ldr	r3, [pc, #12]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x4b0>
 8004426:	e03d      	b.n	80044a4 <HAL_RCC_OscConfig+0x54c>
 8004428:	40023800 	.word	0x40023800
 800442c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004430:	4b1f      	ldr	r3, [pc, #124]	; (80044b0 <HAL_RCC_OscConfig+0x558>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d030      	beq.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d129      	bne.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d122      	bne.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004460:	4013      	ands	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004466:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004468:	4293      	cmp	r3, r2
 800446a:	d119      	bne.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	3b01      	subs	r3, #1
 800447a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d10f      	bne.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800

080044b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0d0      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044cc:	4b6a      	ldr	r3, [pc, #424]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d910      	bls.n	80044fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b67      	ldr	r3, [pc, #412]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 020f 	bic.w	r2, r3, #15
 80044e2:	4965      	ldr	r1, [pc, #404]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b63      	ldr	r3, [pc, #396]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0b8      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004514:	4b59      	ldr	r3, [pc, #356]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a58      	ldr	r2, [pc, #352]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 800451a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800451e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800452c:	4b53      	ldr	r3, [pc, #332]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4a52      	ldr	r2, [pc, #328]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004536:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004538:	4b50      	ldr	r3, [pc, #320]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	494d      	ldr	r1, [pc, #308]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d040      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b47      	ldr	r3, [pc, #284]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d115      	bne.n	8004596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e07f      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004576:	4b41      	ldr	r3, [pc, #260]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e073      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004586:	4b3d      	ldr	r3, [pc, #244]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e06b      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004596:	4b39      	ldr	r3, [pc, #228]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f023 0203 	bic.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4936      	ldr	r1, [pc, #216]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a8:	f7fd ff02 	bl	80023b0 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b0:	f7fd fefe 	bl	80023b0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e053      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	4b2d      	ldr	r3, [pc, #180]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 020c 	and.w	r2, r3, #12
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d1eb      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d210      	bcs.n	8004608 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4b24      	ldr	r3, [pc, #144]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 020f 	bic.w	r2, r3, #15
 80045ee:	4922      	ldr	r1, [pc, #136]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	4b20      	ldr	r3, [pc, #128]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e032      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4916      	ldr	r1, [pc, #88]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	490e      	ldr	r1, [pc, #56]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004646:	f000 f821 	bl	800468c <HAL_RCC_GetSysClockFreq>
 800464a:	4602      	mov	r2, r0
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	490a      	ldr	r1, [pc, #40]	; (8004680 <HAL_RCC_ClockConfig+0x1cc>)
 8004658:	5ccb      	ldrb	r3, [r1, r3]
 800465a:	fa22 f303 	lsr.w	r3, r2, r3
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <HAL_RCC_ClockConfig+0x1d0>)
 8004660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_RCC_ClockConfig+0x1d4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd fd3e 	bl	80020e8 <HAL_InitTick>

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40023c00 	.word	0x40023c00
 800467c:	40023800 	.word	0x40023800
 8004680:	080103b0 	.word	0x080103b0
 8004684:	20000004 	.word	0x20000004
 8004688:	20000008 	.word	0x20000008

0800468c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800468c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	607b      	str	r3, [r7, #4]
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	2300      	movs	r3, #0
 800469e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a4:	4b67      	ldr	r3, [pc, #412]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d00d      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0x40>
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	f200 80bd 	bhi.w	8004830 <HAL_RCC_GetSysClockFreq+0x1a4>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0x34>
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046be:	e0b7      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c0:	4b61      	ldr	r3, [pc, #388]	; (8004848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046c2:	60bb      	str	r3, [r7, #8]
      break;
 80046c4:	e0b7      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046c6:	4b61      	ldr	r3, [pc, #388]	; (800484c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80046c8:	60bb      	str	r3, [r7, #8]
      break;
 80046ca:	e0b4      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046cc:	4b5d      	ldr	r3, [pc, #372]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046d6:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d04d      	beq.n	800477e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e2:	4b58      	ldr	r3, [pc, #352]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	461a      	mov	r2, r3
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046f2:	f04f 0100 	mov.w	r1, #0
 80046f6:	ea02 0800 	and.w	r8, r2, r0
 80046fa:	ea03 0901 	and.w	r9, r3, r1
 80046fe:	4640      	mov	r0, r8
 8004700:	4649      	mov	r1, r9
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	014b      	lsls	r3, r1, #5
 800470c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004710:	0142      	lsls	r2, r0, #5
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	ebb0 0008 	subs.w	r0, r0, r8
 800471a:	eb61 0109 	sbc.w	r1, r1, r9
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	018b      	lsls	r3, r1, #6
 8004728:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800472c:	0182      	lsls	r2, r0, #6
 800472e:	1a12      	subs	r2, r2, r0
 8004730:	eb63 0301 	sbc.w	r3, r3, r1
 8004734:	f04f 0000 	mov.w	r0, #0
 8004738:	f04f 0100 	mov.w	r1, #0
 800473c:	00d9      	lsls	r1, r3, #3
 800473e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004742:	00d0      	lsls	r0, r2, #3
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	eb12 0208 	adds.w	r2, r2, r8
 800474c:	eb43 0309 	adc.w	r3, r3, r9
 8004750:	f04f 0000 	mov.w	r0, #0
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	0259      	lsls	r1, r3, #9
 800475a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800475e:	0250      	lsls	r0, r2, #9
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4610      	mov	r0, r2
 8004766:	4619      	mov	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	461a      	mov	r2, r3
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	f7fb ff7a 	bl	8000668 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e04a      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477e:	4b31      	ldr	r3, [pc, #196]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	461a      	mov	r2, r3
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	ea02 0400 	and.w	r4, r2, r0
 8004796:	ea03 0501 	and.w	r5, r3, r1
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	014b      	lsls	r3, r1, #5
 80047a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047ac:	0142      	lsls	r2, r0, #5
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	1b00      	subs	r0, r0, r4
 80047b4:	eb61 0105 	sbc.w	r1, r1, r5
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	018b      	lsls	r3, r1, #6
 80047c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047c6:	0182      	lsls	r2, r0, #6
 80047c8:	1a12      	subs	r2, r2, r0
 80047ca:	eb63 0301 	sbc.w	r3, r3, r1
 80047ce:	f04f 0000 	mov.w	r0, #0
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	00d9      	lsls	r1, r3, #3
 80047d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047dc:	00d0      	lsls	r0, r2, #3
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	1912      	adds	r2, r2, r4
 80047e4:	eb45 0303 	adc.w	r3, r5, r3
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	0299      	lsls	r1, r3, #10
 80047f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047f6:	0290      	lsls	r0, r2, #10
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4610      	mov	r0, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	461a      	mov	r2, r3
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	f7fb ff2e 	bl	8000668 <__aeabi_uldivmod>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4613      	mov	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	3301      	adds	r3, #1
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	60bb      	str	r3, [r7, #8]
      break;
 800482e:	e002      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004832:	60bb      	str	r3, [r7, #8]
      break;
 8004834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004836:	68bb      	ldr	r3, [r7, #8]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	00f42400 	.word	0x00f42400
 800484c:	007a1200 	.word	0x007a1200

08004850 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <HAL_RCC_GetHCLKFreq+0x14>)
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20000004 	.word	0x20000004

08004868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800486c:	f7ff fff0 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	0a9b      	lsrs	r3, r3, #10
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4903      	ldr	r1, [pc, #12]	; (800488c <HAL_RCC_GetPCLK1Freq+0x24>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800
 800488c:	080103c0 	.word	0x080103c0

08004890 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	220f      	movs	r2, #15
 800489e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048a0:	4b12      	ldr	r3, [pc, #72]	; (80048ec <HAL_RCC_GetClockConfig+0x5c>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0203 	and.w	r2, r3, #3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <HAL_RCC_GetClockConfig+0x5c>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <HAL_RCC_GetClockConfig+0x5c>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_GetClockConfig+0x5c>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	08db      	lsrs	r3, r3, #3
 80048ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048d2:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <HAL_RCC_GetClockConfig+0x60>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 020f 	and.w	r2, r3, #15
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	601a      	str	r2, [r3, #0]
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40023c00 	.word	0x40023c00

080048f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d012      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800491c:	4b69      	ldr	r3, [pc, #420]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4a68      	ldr	r2, [pc, #416]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004922:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004926:	6093      	str	r3, [r2, #8]
 8004928:	4b66      	ldr	r3, [pc, #408]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004930:	4964      	ldr	r1, [pc, #400]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800493e:	2301      	movs	r3, #1
 8004940:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d017      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800494e:	4b5d      	ldr	r3, [pc, #372]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	4959      	ldr	r1, [pc, #356]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496c:	d101      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800496e:	2301      	movs	r3, #1
 8004970:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d017      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800498a:	4b4e      	ldr	r3, [pc, #312]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004990:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	494a      	ldr	r1, [pc, #296]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a8:	d101      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049aa:	2301      	movs	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80049c6:	2301      	movs	r3, #1
 80049c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 808b 	beq.w	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049d8:	4b3a      	ldr	r3, [pc, #232]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	4a39      	ldr	r2, [pc, #228]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e2:	6413      	str	r3, [r2, #64]	; 0x40
 80049e4:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049f0:	4b35      	ldr	r3, [pc, #212]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a34      	ldr	r2, [pc, #208]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fc:	f7fd fcd8 	bl	80023b0 <HAL_GetTick>
 8004a00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a04:	f7fd fcd4 	bl	80023b0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b64      	cmp	r3, #100	; 0x64
 8004a10:	d901      	bls.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e38f      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a16:	4b2c      	ldr	r3, [pc, #176]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a22:	4b28      	ldr	r3, [pc, #160]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d035      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d02e      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a40:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a56:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a68:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d114      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd fc9c 	bl	80023b0 <HAL_GetTick>
 8004a78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7fd fc98 	bl	80023b0 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e351      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a92:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0ee      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aaa:	d111      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ab8:	4b04      	ldr	r3, [pc, #16]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004aba:	400b      	ands	r3, r1
 8004abc:	4901      	ldr	r1, [pc, #4]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
 8004ac2:	e00b      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	0ffffcff 	.word	0x0ffffcff
 8004ad0:	4bb3      	ldr	r3, [pc, #716]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	4ab2      	ldr	r2, [pc, #712]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ada:	6093      	str	r3, [r2, #8]
 8004adc:	4bb0      	ldr	r3, [pc, #704]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ade:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae8:	49ad      	ldr	r1, [pc, #692]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d010      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004afa:	4ba9      	ldr	r3, [pc, #676]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b00:	4aa7      	ldr	r2, [pc, #668]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b0a:	4ba5      	ldr	r3, [pc, #660]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	49a2      	ldr	r1, [pc, #648]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b28:	4b9d      	ldr	r3, [pc, #628]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b36:	499a      	ldr	r1, [pc, #616]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b4a:	4b95      	ldr	r3, [pc, #596]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b58:	4991      	ldr	r1, [pc, #580]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b6c:	4b8c      	ldr	r3, [pc, #560]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7a:	4989      	ldr	r1, [pc, #548]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b8e:	4b84      	ldr	r3, [pc, #528]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4980      	ldr	r1, [pc, #512]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bb0:	4b7b      	ldr	r3, [pc, #492]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	f023 0203 	bic.w	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	4978      	ldr	r1, [pc, #480]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bd2:	4b73      	ldr	r3, [pc, #460]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd8:	f023 020c 	bic.w	r2, r3, #12
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be0:	496f      	ldr	r1, [pc, #444]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bf4:	4b6a      	ldr	r3, [pc, #424]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	4967      	ldr	r1, [pc, #412]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c16:	4b62      	ldr	r3, [pc, #392]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c24:	495e      	ldr	r1, [pc, #376]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c38:	4b59      	ldr	r3, [pc, #356]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	4956      	ldr	r1, [pc, #344]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c5a:	4b51      	ldr	r3, [pc, #324]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	494d      	ldr	r1, [pc, #308]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c7c:	4b48      	ldr	r3, [pc, #288]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8a:	4945      	ldr	r1, [pc, #276]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c9e:	4b40      	ldr	r3, [pc, #256]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cac:	493c      	ldr	r1, [pc, #240]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cc0:	4b37      	ldr	r3, [pc, #220]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cce:	4934      	ldr	r1, [pc, #208]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d011      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ce2:	4b2f      	ldr	r3, [pc, #188]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf0:	492b      	ldr	r1, [pc, #172]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d00:	d101      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d22:	4b1f      	ldr	r3, [pc, #124]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	491b      	ldr	r1, [pc, #108]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00b      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d44:	4b16      	ldr	r3, [pc, #88]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d54:	4912      	ldr	r1, [pc, #72]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d68:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d78:	4909      	ldr	r1, [pc, #36]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00f      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	e002      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	4986      	ldr	r1, [pc, #536]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004db8:	4b81      	ldr	r3, [pc, #516]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc8:	497d      	ldr	r1, [pc, #500]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d006      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80d6 	beq.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004de4:	4b76      	ldr	r3, [pc, #472]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a75      	ldr	r2, [pc, #468]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df0:	f7fd fade 	bl	80023b0 <HAL_GetTick>
 8004df4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004df8:	f7fd fada 	bl	80023b0 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e195      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e0a:	4b6d      	ldr	r3, [pc, #436]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d021      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d11d      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e2a:	4b65      	ldr	r3, [pc, #404]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e38:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3e:	0e1b      	lsrs	r3, r3, #24
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	019a      	lsls	r2, r3, #6
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	431a      	orrs	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	071b      	lsls	r3, r3, #28
 8004e5e:	4958      	ldr	r1, [pc, #352]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d004      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d02e      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e90:	d129      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e92:	4b4b      	ldr	r3, [pc, #300]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e98:	0c1b      	lsrs	r3, r3, #16
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ea0:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea6:	0f1b      	lsrs	r3, r3, #28
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	019a      	lsls	r2, r3, #6
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	041b      	lsls	r3, r3, #16
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	061b      	lsls	r3, r3, #24
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	071b      	lsls	r3, r3, #28
 8004ec6:	493e      	ldr	r1, [pc, #248]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ece:	4b3c      	ldr	r3, [pc, #240]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed4:	f023 021f 	bic.w	r2, r3, #31
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	3b01      	subs	r3, #1
 8004ede:	4938      	ldr	r1, [pc, #224]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01d      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ef2:	4b33      	ldr	r3, [pc, #204]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef8:	0e1b      	lsrs	r3, r3, #24
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f00:	4b2f      	ldr	r3, [pc, #188]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f06:	0f1b      	lsrs	r3, r3, #28
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	019a      	lsls	r2, r3, #6
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	061b      	lsls	r3, r3, #24
 8004f20:	431a      	orrs	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	071b      	lsls	r3, r3, #28
 8004f26:	4926      	ldr	r1, [pc, #152]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d011      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	019a      	lsls	r2, r3, #6
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	061b      	lsls	r3, r3, #24
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	071b      	lsls	r3, r3, #28
 8004f56:	491a      	ldr	r1, [pc, #104]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f5e:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6a:	f7fd fa21 	bl	80023b0 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f72:	f7fd fa1d 	bl	80023b0 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b64      	cmp	r3, #100	; 0x64
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e0d8      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	f040 80ce 	bne.w	8005134 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa4:	f7fd fa04 	bl	80023b0 <HAL_GetTick>
 8004fa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004faa:	e00b      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fac:	f7fd fa00 	bl	80023b0 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	; 0x64
 8004fb8:	d904      	bls.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e0bb      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004fbe:	bf00      	nop
 8004fc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fc4:	4b5e      	ldr	r3, [pc, #376]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd0:	d0ec      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02e      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d12a      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ffa:	4b51      	ldr	r3, [pc, #324]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005008:	4b4d      	ldr	r3, [pc, #308]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	0f1b      	lsrs	r3, r3, #28
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	019a      	lsls	r2, r3, #6
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	061b      	lsls	r3, r3, #24
 8005028:	431a      	orrs	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	071b      	lsls	r3, r3, #28
 800502e:	4944      	ldr	r1, [pc, #272]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005036:	4b42      	ldr	r3, [pc, #264]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	3b01      	subs	r3, #1
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	493d      	ldr	r1, [pc, #244]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d022      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005064:	d11d      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005066:	4b36      	ldr	r3, [pc, #216]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	0e1b      	lsrs	r3, r3, #24
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005074:	4b32      	ldr	r3, [pc, #200]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	0f1b      	lsrs	r3, r3, #28
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	019a      	lsls	r2, r3, #6
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	431a      	orrs	r2, r3
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	431a      	orrs	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	071b      	lsls	r3, r3, #28
 800509a:	4929      	ldr	r1, [pc, #164]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d028      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	0e1b      	lsrs	r3, r3, #24
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	019a      	lsls	r2, r3, #6
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	041b      	lsls	r3, r3, #16
 80050d4:	431a      	orrs	r2, r3
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	061b      	lsls	r3, r3, #24
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	071b      	lsls	r3, r3, #28
 80050e2:	4917      	ldr	r1, [pc, #92]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	4911      	ldr	r1, [pc, #68]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005100:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510c:	f7fd f950 	bl	80023b0 <HAL_GetTick>
 8005110:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005114:	f7fd f94c 	bl	80023b0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e007      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800512e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005132:	d1ef      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40023800 	.word	0x40023800

08005144 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e081      	b.n	800525a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	7f5b      	ldrb	r3, [r3, #29]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d105      	bne.n	800516c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fc fea8 	bl	8001ebc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	22ca      	movs	r2, #202	; 0xca
 8005178:	625a      	str	r2, [r3, #36]	; 0x24
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2253      	movs	r2, #83	; 0x53
 8005180:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 faac 	bl	80056e0 <RTC_EnterInitMode>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	22ff      	movs	r2, #255	; 0xff
 8005194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2204      	movs	r2, #4
 800519a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e05c      	b.n	800525a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6899      	ldr	r1, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <HAL_RTC_Init+0x120>)
 80051ac:	400b      	ands	r3, r1
 80051ae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6899      	ldr	r1, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68d2      	ldr	r2, [r2, #12]
 80051d6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6919      	ldr	r1, [r3, #16]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	041a      	lsls	r2, r3, #16
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051fa:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10e      	bne.n	8005228 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa40 	bl	8005690 <HAL_RTC_WaitForSynchro>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	22ff      	movs	r2, #255	; 0xff
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2204      	movs	r2, #4
 8005222:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e018      	b.n	800525a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0208 	bic.w	r2, r2, #8
 8005236:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	22ff      	movs	r2, #255	; 0xff
 8005250:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005258:	2300      	movs	r3, #0
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	ff8fffbf 	.word	0xff8fffbf

08005268 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005268:	b590      	push	{r4, r7, lr}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	7f1b      	ldrb	r3, [r3, #28]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_RTC_SetTime+0x1c>
 8005280:	2302      	movs	r3, #2
 8005282:	e0a8      	b.n	80053d6 <HAL_RTC_SetTime+0x16e>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2202      	movs	r2, #2
 800528e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d126      	bne.n	80052e4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2200      	movs	r2, #0
 80052a8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fa42 	bl	8005738 <RTC_ByteToBcd2>
 80052b4:	4603      	mov	r3, r0
 80052b6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fa3b 	bl	8005738 <RTC_ByteToBcd2>
 80052c2:	4603      	mov	r3, r0
 80052c4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80052c6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	789b      	ldrb	r3, [r3, #2]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fa33 	bl	8005738 <RTC_ByteToBcd2>
 80052d2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80052d4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	7b1b      	ldrb	r3, [r3, #12]
 80052dc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	e018      	b.n	8005316 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2200      	movs	r2, #0
 80052f6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005304:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800530a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	7b1b      	ldrb	r3, [r3, #12]
 8005310:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	22ca      	movs	r2, #202	; 0xca
 800531c:	625a      	str	r2, [r3, #36]	; 0x24
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2253      	movs	r2, #83	; 0x53
 8005324:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f9da 	bl	80056e0 <RTC_EnterInitMode>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	22ff      	movs	r2, #255	; 0xff
 8005338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2204      	movs	r2, #4
 800533e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e045      	b.n	80053d6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	6979      	ldr	r1, [r7, #20]
 8005350:	4b23      	ldr	r3, [pc, #140]	; (80053e0 <HAL_RTC_SetTime+0x178>)
 8005352:	400b      	ands	r3, r1
 8005354:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005364:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	431a      	orrs	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800538c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d111      	bne.n	80053c0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f977 	bl	8005690 <HAL_RTC_WaitForSynchro>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00b      	beq.n	80053c0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	22ff      	movs	r2, #255	; 0xff
 80053ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2204      	movs	r2, #4
 80053b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e00a      	b.n	80053d6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	22ff      	movs	r2, #255	; 0xff
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80053d4:	2300      	movs	r3, #0
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd90      	pop	{r4, r7, pc}
 80053de:	bf00      	nop
 80053e0:	007f7f7f 	.word	0x007f7f7f

080053e4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b22      	ldr	r3, [pc, #136]	; (800549c <HAL_RTC_GetTime+0xb8>)
 8005414:	4013      	ands	r3, r2
 8005416:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	0c1b      	lsrs	r3, r3, #16
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005422:	b2da      	uxtb	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005440:	b2da      	uxtb	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11a      	bne.n	8005492 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 f987 	bl	8005774 <RTC_Bcd2ToByte>
 8005466:	4603      	mov	r3, r0
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f97e 	bl	8005774 <RTC_Bcd2ToByte>
 8005478:	4603      	mov	r3, r0
 800547a:	461a      	mov	r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	789b      	ldrb	r3, [r3, #2]
 8005484:	4618      	mov	r0, r3
 8005486:	f000 f975 	bl	8005774 <RTC_Bcd2ToByte>
 800548a:	4603      	mov	r3, r0
 800548c:	461a      	mov	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	007f7f7f 	.word	0x007f7f7f

080054a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	7f1b      	ldrb	r3, [r3, #28]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_RTC_SetDate+0x1c>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e092      	b.n	80055e2 <HAL_RTC_SetDate+0x142>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2202      	movs	r2, #2
 80054c6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10e      	bne.n	80054ec <HAL_RTC_SetDate+0x4c>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d008      	beq.n	80054ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	f023 0310 	bic.w	r3, r3, #16
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	330a      	adds	r3, #10
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d11c      	bne.n	800552c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	78db      	ldrb	r3, [r3, #3]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f91e 	bl	8005738 <RTC_ByteToBcd2>
 80054fc:	4603      	mov	r3, r0
 80054fe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f917 	bl	8005738 <RTC_ByteToBcd2>
 800550a:	4603      	mov	r3, r0
 800550c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800550e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	789b      	ldrb	r3, [r3, #2]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 f90f 	bl	8005738 <RTC_ByteToBcd2>
 800551a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800551c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e00e      	b.n	800554a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	78db      	ldrb	r3, [r3, #3]
 8005530:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005538:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800553e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	22ca      	movs	r2, #202	; 0xca
 8005550:	625a      	str	r2, [r3, #36]	; 0x24
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2253      	movs	r2, #83	; 0x53
 8005558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f8c0 	bl	80056e0 <RTC_EnterInitMode>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00b      	beq.n	800557e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	22ff      	movs	r2, #255	; 0xff
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2204      	movs	r2, #4
 8005572:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e031      	b.n	80055e2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	6979      	ldr	r1, [r7, #20]
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <HAL_RTC_SetDate+0x14c>)
 8005586:	400b      	ands	r3, r1
 8005588:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005598:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 0320 	and.w	r3, r3, #32
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d111      	bne.n	80055cc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f871 	bl	8005690 <HAL_RTC_WaitForSynchro>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	22ff      	movs	r2, #255	; 0xff
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2204      	movs	r2, #4
 80055c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e00a      	b.n	80055e2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	22ff      	movs	r2, #255	; 0xff
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80055e0:	2300      	movs	r3, #0
  }
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd90      	pop	{r4, r7, pc}
 80055ea:	bf00      	nop
 80055ec:	00ffff3f 	.word	0x00ffff3f

080055f0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	4b21      	ldr	r3, [pc, #132]	; (800568c <HAL_RTC_GetDate+0x9c>)
 8005608:	4013      	ands	r3, r2
 800560a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	0c1b      	lsrs	r3, r3, #16
 8005610:	b2da      	uxtb	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800562e:	b2da      	uxtb	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	0b5b      	lsrs	r3, r3, #13
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	b2da      	uxtb	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d11a      	bne.n	8005680 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	78db      	ldrb	r3, [r3, #3]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f890 	bl	8005774 <RTC_Bcd2ToByte>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f887 	bl	8005774 <RTC_Bcd2ToByte>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	789b      	ldrb	r3, [r3, #2]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f87e 	bl	8005774 <RTC_Bcd2ToByte>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	00ffff3f 	.word	0x00ffff3f

08005690 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056ac:	f7fc fe80 	bl	80023b0 <HAL_GetTick>
 80056b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80056b2:	e009      	b.n	80056c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80056b4:	f7fc fe7c 	bl	80023b0 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056c2:	d901      	bls.n	80056c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e007      	b.n	80056d8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0ee      	beq.n	80056b4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d119      	bne.n	800572e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005702:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005704:	f7fc fe54 	bl	80023b0 <HAL_GetTick>
 8005708:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800570a:	e009      	b.n	8005720 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800570c:	f7fc fe50 	bl	80023b0 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800571a:	d901      	bls.n	8005720 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e007      	b.n	8005730 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0ee      	beq.n	800570c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005746:	e005      	b.n	8005754 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3301      	adds	r3, #1
 800574c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	3b0a      	subs	r3, #10
 8005752:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	2b09      	cmp	r3, #9
 8005758:	d8f6      	bhi.n	8005748 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	b2da      	uxtb	r2, r3
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	4313      	orrs	r3, r2
 8005766:	b2db      	uxtb	r3, r3
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	b2db      	uxtb	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	b2da      	uxtb	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	4413      	add	r3, r2
 80057a2:	b2db      	uxtb	r3, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e022      	b.n	8005808 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d105      	bne.n	80057da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7fc fb8b 	bl	8001ef0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2203      	movs	r2, #3
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f814 	bl	8005810 <HAL_SD_InitCard>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e00a      	b.n	8005808 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005810:	b5b0      	push	{r4, r5, r7, lr}
 8005812:	b08e      	sub	sp, #56	; 0x38
 8005814:	af04      	add	r7, sp, #16
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005818:	2300      	movs	r3, #0
 800581a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005828:	2300      	movs	r3, #0
 800582a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800582c:	2376      	movs	r3, #118	; 0x76
 800582e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681d      	ldr	r5, [r3, #0]
 8005834:	466c      	mov	r4, sp
 8005836:	f107 0314 	add.w	r3, r7, #20
 800583a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800583e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005842:	f107 0308 	add.w	r3, r7, #8
 8005846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005848:	4628      	mov	r0, r5
 800584a:	f001 fdb9 	bl	80073c0 <SDMMC_Init>
 800584e:	4603      	mov	r3, r0
 8005850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e059      	b.n	8005914 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800586e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f001 fded 	bl	8007454 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005888:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800588a:	2002      	movs	r0, #2
 800588c:	f7fc fdc4 	bl	8002418 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fff1 	bl	8006878 <SD_PowerON>
 8005896:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00b      	beq.n	80058b6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e02e      	b.n	8005914 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 ff12 	bl	80066e0 <SD_InitCard>
 80058bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00b      	beq.n	80058dc <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e01b      	b.n	8005914 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 fe47 	bl	8007578 <SDMMC_CmdBlockLength>
 80058ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00f      	beq.n	8005912 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a09      	ldr	r2, [pc, #36]	; (800591c <HAL_SD_InitCard+0x10c>)
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3728      	adds	r7, #40	; 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bdb0      	pop	{r4, r5, r7, pc}
 800591c:	004005ff 	.word	0x004005ff

08005920 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08c      	sub	sp, #48	; 0x30
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d107      	bne.n	8005948 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0c3      	b.n	8005ad0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	f040 80bc 	bne.w	8005ace <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800595c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	441a      	add	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005966:	429a      	cmp	r2, r3
 8005968:	d907      	bls.n	800597a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0aa      	b.n	8005ad0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2203      	movs	r2, #3
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2200      	movs	r2, #0
 8005988:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	4a4e      	ldr	r2, [pc, #312]	; (8005ad8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80059a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	4a4d      	ldr	r2, [pc, #308]	; (8005adc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80059a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	2200      	movs	r2, #0
 80059b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	2200      	movs	r2, #0
 80059b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3380      	adds	r3, #128	; 0x80
 80059e0:	4619      	mov	r1, r3
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	025b      	lsls	r3, r3, #9
 80059e8:	089b      	lsrs	r3, r3, #2
 80059ea:	f7fd fd75 	bl	80034d8 <HAL_DMA_Start_IT>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d017      	beq.n	8005a24 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005a02:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a35      	ldr	r2, [pc, #212]	; (8005ae0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e055      	b.n	8005ad0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0208 	orr.w	r2, r2, #8
 8005a32:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d002      	beq.n	8005a42 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	025b      	lsls	r3, r3, #9
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a46:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	025b      	lsls	r3, r3, #9
 8005a4c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005a4e:	2390      	movs	r3, #144	; 0x90
 8005a50:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a52:	2302      	movs	r3, #2
 8005a54:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f107 0210 	add.w	r2, r7, #16
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 fd59 	bl	8007520 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d90a      	bls.n	8005a8a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2282      	movs	r2, #130	; 0x82
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 fdbd 	bl	8007600 <SDMMC_CmdReadMultiBlock>
 8005a86:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005a88:	e009      	b.n	8005a9e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2281      	movs	r2, #129	; 0x81
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 fd90 	bl	80075bc <SDMMC_CmdReadSingleBlock>
 8005a9c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d012      	beq.n	8005aca <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a0d      	ldr	r2, [pc, #52]	; (8005ae0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e002      	b.n	8005ad0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e000      	b.n	8005ad0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005ace:	2302      	movs	r3, #2
  }
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3730      	adds	r7, #48	; 0x30
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	080064ef 	.word	0x080064ef
 8005adc:	08006561 	.word	0x08006561
 8005ae0:	004005ff 	.word	0x004005ff

08005ae4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08c      	sub	sp, #48	; 0x30
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d107      	bne.n	8005b0c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0c6      	b.n	8005c9a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	f040 80bf 	bne.w	8005c98 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d907      	bls.n	8005b3e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e0ad      	b.n	8005c9a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2203      	movs	r2, #3
 8005b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 021a 	orr.w	r2, r2, #26
 8005b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	4a50      	ldr	r2, [pc, #320]	; (8005ca4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	4a4f      	ldr	r2, [pc, #316]	; (8005ca8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005b6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	2200      	movs	r2, #0
 8005b74:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d002      	beq.n	8005b84 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	025b      	lsls	r3, r3, #9
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d90a      	bls.n	8005ba0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	22a0      	movs	r2, #160	; 0xa0
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 fd76 	bl	8007688 <SDMMC_CmdWriteMultiBlock>
 8005b9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b9e:	e009      	b.n	8005bb4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2290      	movs	r2, #144	; 0x90
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 fd49 	bl	8007644 <SDMMC_CmdWriteSingleBlock>
 8005bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d012      	beq.n	8005be0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a3b      	ldr	r2, [pc, #236]	; (8005cac <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e05c      	b.n	8005c9a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0208 	orr.w	r2, r2, #8
 8005bee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf4:	2240      	movs	r2, #64	; 0x40
 8005bf6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3380      	adds	r3, #128	; 0x80
 8005c20:	461a      	mov	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	025b      	lsls	r3, r3, #9
 8005c26:	089b      	lsrs	r3, r3, #2
 8005c28:	f7fd fc56 	bl	80034d8 <HAL_DMA_Start_IT>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01a      	beq.n	8005c68 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 021a 	bic.w	r2, r2, #26
 8005c40:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a19      	ldr	r2, [pc, #100]	; (8005cac <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e018      	b.n	8005c9a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c6c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	025b      	lsls	r3, r3, #9
 8005c72:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005c74:	2390      	movs	r3, #144	; 0x90
 8005c76:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f107 0210 	add.w	r2, r7, #16
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 fc46 	bl	8007520 <SDMMC_ConfigData>

      return HAL_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	e000      	b.n	8005c9a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005c98:	2302      	movs	r3, #2
  }
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3730      	adds	r7, #48	; 0x30
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	080064c5 	.word	0x080064c5
 8005ca8:	08006561 	.word	0x08006561
 8005cac:	004005ff 	.word	0x004005ff

08005cb0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_SD_IRQHandler+0x2e>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 ffed 	bl	8006cb6 <SD_Read_IT>
 8005cdc:	e153      	b.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 808d 	beq.w	8005e08 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4ba3      	ldr	r3, [pc, #652]	; (8005f90 <HAL_SD_IRQHandler+0x2e0>)
 8005d04:	400b      	ands	r3, r1
 8005d06:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0201 	bic.w	r2, r2, #1
 8005d16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d039      	beq.n	8005d96 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d104      	bne.n	8005d36 <HAL_SD_IRQHandler+0x86>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d011      	beq.n	8005d5a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fcc6 	bl	80076cc <SDMMC_CmdStopTransfer>
 8005d40:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d008      	beq.n	8005d5a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f921 	bl	8005f9c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <HAL_SD_IRQHandler+0xd6>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f002 f936 	bl	8007ff8 <HAL_SD_RxCpltCallback>
 8005d8c:	e0fb      	b.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f002 f928 	bl	8007fe4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d94:	e0f7      	b.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80f2 	beq.w	8005f86 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d011      	beq.n	8005dd0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fc8b 	bl	80076cc <SDMMC_CmdStopTransfer>
 8005db6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d008      	beq.n	8005dd0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f8e6 	bl	8005f9c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 80d5 	bne.w	8005f86 <HAL_SD_IRQHandler+0x2d6>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 80cf 	bne.w	8005f86 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0208 	bic.w	r2, r2, #8
 8005df6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f002 f8ef 	bl	8007fe4 <HAL_SD_TxCpltCallback>
}
 8005e06:	e0be      	b.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d008      	beq.n	8005e28 <HAL_SD_IRQHandler+0x178>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 ff99 	bl	8006d58 <SD_Write_IT>
 8005e26:	e0ae      	b.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80a7 	beq.w	8005f86 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	f043 0202 	orr.w	r2, r3, #2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	f043 0208 	orr.w	r2, r3, #8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	f043 0220 	orr.w	r2, r3, #32
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	f043 0210 	orr.w	r2, r3, #16
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005eb8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 fc04 	bl	80076cc <SDMMC_CmdStopTransfer>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f857 	bl	8005f9c <HAL_SD_ErrorCallback>
}
 8005eee:	e04a      	b.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d045      	beq.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <HAL_SD_IRQHandler+0x25e>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d011      	beq.n	8005f32 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	4a20      	ldr	r2, [pc, #128]	; (8005f94 <HAL_SD_IRQHandler+0x2e4>)
 8005f14:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fd fb3c 	bl	8003598 <HAL_DMA_Abort_IT>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d02f      	beq.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fb6a 	bl	8006604 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005f30:	e029      	b.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <HAL_SD_IRQHandler+0x296>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d011      	beq.n	8005f6a <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	4a13      	ldr	r2, [pc, #76]	; (8005f98 <HAL_SD_IRQHandler+0x2e8>)
 8005f4c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fd fb20 	bl	8003598 <HAL_DMA_Abort_IT>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d013      	beq.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fb85 	bl	8006672 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005f68:	e00d      	b.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f002 f826 	bl	8007fd0 <HAL_SD_AbortCallback>
}
 8005f84:	e7ff      	b.n	8005f86 <HAL_SD_IRQHandler+0x2d6>
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	ffff3ec5 	.word	0xffff3ec5
 8005f94:	08006605 	.word	0x08006605
 8005f98:	08006673 	.word	0x08006673

08005f9c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fbe:	0f9b      	lsrs	r3, r3, #30
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fca:	0e9b      	lsrs	r3, r3, #26
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fdc:	0e1b      	lsrs	r3, r3, #24
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fee:	0c1b      	lsrs	r3, r3, #16
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ffa:	0a1b      	lsrs	r3, r3, #8
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006006:	b2da      	uxtb	r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006010:	0d1b      	lsrs	r3, r3, #20
 8006012:	b29a      	uxth	r2, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	b2da      	uxtb	r2, r3
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800602e:	0bdb      	lsrs	r3, r3, #15
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	b2da      	uxtb	r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006040:	0b9b      	lsrs	r3, r3, #14
 8006042:	b2db      	uxtb	r3, r3
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	b2da      	uxtb	r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006052:	0b5b      	lsrs	r3, r3, #13
 8006054:	b2db      	uxtb	r3, r3
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	b2da      	uxtb	r2, r3
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006064:	0b1b      	lsrs	r3, r3, #12
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	b2da      	uxtb	r2, r3
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2200      	movs	r2, #0
 8006076:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607c:	2b00      	cmp	r3, #0
 800607e:	d163      	bne.n	8006148 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006084:	009a      	lsls	r2, r3, #2
 8006086:	f640 73fc 	movw	r3, #4092	; 0xffc
 800608a:	4013      	ands	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006090:	0f92      	lsrs	r2, r2, #30
 8006092:	431a      	orrs	r2, r3
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609c:	0edb      	lsrs	r3, r3, #27
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ae:	0e1b      	lsrs	r3, r3, #24
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c0:	0d5b      	lsrs	r3, r3, #21
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060d2:	0c9b      	lsrs	r3, r3, #18
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e4:	0bdb      	lsrs	r3, r3, #15
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	7e1b      	ldrb	r3, [r3, #24]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	3302      	adds	r3, #2
 8006108:	2201      	movs	r2, #1
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006112:	fb02 f203 	mul.w	r2, r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	7a1b      	ldrb	r3, [r3, #8]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	2201      	movs	r2, #1
 8006126:	409a      	lsls	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006134:	0a52      	lsrs	r2, r2, #9
 8006136:	fb02 f203 	mul.w	r2, r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006144:	661a      	str	r2, [r3, #96]	; 0x60
 8006146:	e031      	b.n	80061ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614c:	2b01      	cmp	r3, #1
 800614e:	d11d      	bne.n	800618c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006154:	041b      	lsls	r3, r3, #16
 8006156:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	431a      	orrs	r2, r3
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	3301      	adds	r3, #1
 800616c:	029a      	lsls	r2, r3, #10
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006180:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	661a      	str	r2, [r3, #96]	; 0x60
 800618a:	e00f      	b.n	80061ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a58      	ldr	r2, [pc, #352]	; (80062f4 <HAL_SD_GetCardCSD+0x344>)
 8006192:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e09d      	b.n	80062e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b0:	0b9b      	lsrs	r3, r3, #14
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c2:	09db      	lsrs	r3, r3, #7
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e4:	0fdb      	lsrs	r3, r3, #31
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f0:	0f5b      	lsrs	r3, r3, #29
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006202:	0e9b      	lsrs	r3, r3, #26
 8006204:	b2db      	uxtb	r3, r3
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	b2da      	uxtb	r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006214:	0d9b      	lsrs	r3, r3, #22
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	b2da      	uxtb	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006226:	0d5b      	lsrs	r3, r3, #21
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	b2da      	uxtb	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	0c1b      	lsrs	r3, r3, #16
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	b2da      	uxtb	r2, r3
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	0bdb      	lsrs	r3, r3, #15
 8006258:	b2db      	uxtb	r3, r3
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	b2da      	uxtb	r2, r3
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626a:	0b9b      	lsrs	r3, r3, #14
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	b2da      	uxtb	r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	0b5b      	lsrs	r3, r3, #13
 8006280:	b2db      	uxtb	r3, r3
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	b2da      	uxtb	r2, r3
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	0b1b      	lsrs	r3, r3, #12
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	b2da      	uxtb	r2, r3
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a6:	0a9b      	lsrs	r3, r3, #10
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	0a1b      	lsrs	r3, r3, #8
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	004005ff 	.word	0x004005ff

080062f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006350:	b5b0      	push	{r4, r5, r7, lr}
 8006352:	b08e      	sub	sp, #56	; 0x38
 8006354:	af04      	add	r7, sp, #16
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2203      	movs	r2, #3
 8006364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636c:	2b03      	cmp	r3, #3
 800636e:	d02e      	beq.n	80063ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	d106      	bne.n	8006386 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
 8006384:	e029      	b.n	80063da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638c:	d10a      	bne.n	80063a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fb28 	bl	80069e4 <SD_WideBus_Enable>
 8006394:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	639a      	str	r2, [r3, #56]	; 0x38
 80063a2:	e01a      	b.n	80063da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fb65 	bl	8006a7a <SD_WideBus_Disable>
 80063b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38
 80063be:	e00c      	b.n	80063da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	639a      	str	r2, [r3, #56]	; 0x38
 80063cc:	e005      	b.n	80063da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a26      	ldr	r2, [pc, #152]	; (8006480 <HAL_SD_ConfigWideBusOperation+0x130>)
 80063e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80063f8:	e01f      	b.n	800643a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681d      	ldr	r5, [r3, #0]
 8006420:	466c      	mov	r4, sp
 8006422:	f107 0314 	add.w	r3, r7, #20
 8006426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800642a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800642e:	f107 0308 	add.w	r3, r7, #8
 8006432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006434:	4628      	mov	r0, r5
 8006436:	f000 ffc3 	bl	80073c0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006442:	4618      	mov	r0, r3
 8006444:	f001 f898 	bl	8007578 <SDMMC_CmdBlockLength>
 8006448:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00c      	beq.n	800646a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a0a      	ldr	r2, [pc, #40]	; (8006480 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006476:	4618      	mov	r0, r3
 8006478:	3728      	adds	r7, #40	; 0x28
 800647a:	46bd      	mov	sp, r7
 800647c:	bdb0      	pop	{r4, r5, r7, pc}
 800647e:	bf00      	nop
 8006480:	004005ff 	.word	0x004005ff

08006484 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006490:	f107 030c 	add.w	r3, r7, #12
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa7c 	bl	8006994 <SD_SendStatus>
 800649c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	0a5b      	lsrs	r3, r3, #9
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80064ba:	693b      	ldr	r3, [r7, #16]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	2b82      	cmp	r3, #130	; 0x82
 8006502:	d111      	bne.n	8006528 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f001 f8df 	bl	80076cc <SDMMC_CmdStopTransfer>
 800650e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d008      	beq.n	8006528 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	431a      	orrs	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff fd3a 	bl	8005f9c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0208 	bic.w	r2, r2, #8
 8006536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006540:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f001 fd51 	bl	8007ff8 <HAL_SD_RxCpltCallback>
#endif
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fd f9be 	bl	80038f0 <HAL_DMA_GetError>
 8006574:	4603      	mov	r3, r0
 8006576:	2b02      	cmp	r3, #2
 8006578:	d03e      	beq.n	80065f8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006580:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006588:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d002      	beq.n	8006596 <SD_DMAError+0x36>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d12d      	bne.n	80065f2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a19      	ldr	r2, [pc, #100]	; (8006600 <SD_DMAError+0xa0>)
 800659c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80065ac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80065ba:	6978      	ldr	r0, [r7, #20]
 80065bc:	f7ff ff62 	bl	8006484 <HAL_SD_GetCardState>
 80065c0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b06      	cmp	r3, #6
 80065c6:	d002      	beq.n	80065ce <SD_DMAError+0x6e>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d10a      	bne.n	80065e4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f001 f87a 	bl	80076cc <SDMMC_CmdStopTransfer>
 80065d8:	4602      	mov	r2, r0
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	431a      	orrs	r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80065f2:	6978      	ldr	r0, [r7, #20]
 80065f4:	f7ff fcd2 	bl	8005f9c <HAL_SD_ErrorCallback>
#endif
  }
}
 80065f8:	bf00      	nop
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	004005ff 	.word	0x004005ff

08006604 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f240 523a 	movw	r2, #1338	; 0x53a
 800661a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff ff31 	bl	8006484 <HAL_SD_GetCardState>
 8006622:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b06      	cmp	r3, #6
 8006636:	d002      	beq.n	800663e <SD_DMATxAbort+0x3a>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b05      	cmp	r3, #5
 800663c:	d10a      	bne.n	8006654 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f001 f842 	bl	80076cc <SDMMC_CmdStopTransfer>
 8006648:	4602      	mov	r2, r0
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	431a      	orrs	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	2b00      	cmp	r3, #0
 800665a:	d103      	bne.n	8006664 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f001 fcb7 	bl	8007fd0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006662:	e002      	b.n	800666a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff fc99 	bl	8005f9c <HAL_SD_ErrorCallback>
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f240 523a 	movw	r2, #1338	; 0x53a
 8006688:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7ff fefa 	bl	8006484 <HAL_SD_GetCardState>
 8006690:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b06      	cmp	r3, #6
 80066a4:	d002      	beq.n	80066ac <SD_DMARxAbort+0x3a>
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b05      	cmp	r3, #5
 80066aa:	d10a      	bne.n	80066c2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 f80b 	bl	80076cc <SDMMC_CmdStopTransfer>
 80066b6:	4602      	mov	r2, r0
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	431a      	orrs	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d103      	bne.n	80066d2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f001 fc80 	bl	8007fd0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80066d0:	e002      	b.n	80066d8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7ff fc62 	bl	8005f9c <HAL_SD_ErrorCallback>
}
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80066e0:	b5b0      	push	{r4, r5, r7, lr}
 80066e2:	b094      	sub	sp, #80	; 0x50
 80066e4:	af04      	add	r7, sp, #16
 80066e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80066e8:	2301      	movs	r3, #1
 80066ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 febd 	bl	8007470 <SDMMC_GetPowerState>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80066fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006700:	e0b6      	b.n	8006870 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	2b03      	cmp	r3, #3
 8006708:	d02f      	beq.n	800676a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f001 f8e7 	bl	80078e2 <SDMMC_CmdSendCID>
 8006714:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <SD_InitCard+0x40>
    {
      return errorstate;
 800671c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671e:	e0a7      	b.n	8006870 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2100      	movs	r1, #0
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fee7 	bl	80074fa <SDMMC_GetResponse>
 800672c:	4602      	mov	r2, r0
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2104      	movs	r1, #4
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fede 	bl	80074fa <SDMMC_GetResponse>
 800673e:	4602      	mov	r2, r0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2108      	movs	r1, #8
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fed5 	bl	80074fa <SDMMC_GetResponse>
 8006750:	4602      	mov	r2, r0
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	210c      	movs	r1, #12
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fecc 	bl	80074fa <SDMMC_GetResponse>
 8006762:	4602      	mov	r2, r0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	2b03      	cmp	r3, #3
 8006770:	d00d      	beq.n	800678e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f107 020e 	add.w	r2, r7, #14
 800677a:	4611      	mov	r1, r2
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f8ed 	bl	800795c <SDMMC_CmdSetRelAdd>
 8006782:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <SD_InitCard+0xae>
    {
      return errorstate;
 800678a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678c:	e070      	b.n	8006870 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	2b03      	cmp	r3, #3
 8006794:	d036      	beq.n	8006804 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006796:	89fb      	ldrh	r3, [r7, #14]
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a6:	041b      	lsls	r3, r3, #16
 80067a8:	4619      	mov	r1, r3
 80067aa:	4610      	mov	r0, r2
 80067ac:	f001 f8b7 	bl	800791e <SDMMC_CmdSendCSD>
 80067b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <SD_InitCard+0xdc>
    {
      return errorstate;
 80067b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ba:	e059      	b.n	8006870 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2100      	movs	r1, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fe99 	bl	80074fa <SDMMC_GetResponse>
 80067c8:	4602      	mov	r2, r0
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2104      	movs	r1, #4
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fe90 	bl	80074fa <SDMMC_GetResponse>
 80067da:	4602      	mov	r2, r0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2108      	movs	r1, #8
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fe87 	bl	80074fa <SDMMC_GetResponse>
 80067ec:	4602      	mov	r2, r0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	210c      	movs	r1, #12
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fe7e 	bl	80074fa <SDMMC_GetResponse>
 80067fe:	4602      	mov	r2, r0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2104      	movs	r1, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fe75 	bl	80074fa <SDMMC_GetResponse>
 8006810:	4603      	mov	r3, r0
 8006812:	0d1a      	lsrs	r2, r3, #20
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006818:	f107 0310 	add.w	r3, r7, #16
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff fbc6 	bl	8005fb0 <HAL_SD_GetCardCSD>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800682a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800682e:	e01f      	b.n	8006870 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6819      	ldr	r1, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006838:	041b      	lsls	r3, r3, #16
 800683a:	461a      	mov	r2, r3
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	4608      	mov	r0, r1
 8006842:	f000 ff65 	bl	8007710 <SDMMC_CmdSelDesel>
 8006846:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <SD_InitCard+0x172>
  {
    return errorstate;
 800684e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006850:	e00e      	b.n	8006870 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681d      	ldr	r5, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	466c      	mov	r4, sp
 800685a:	f103 0210 	add.w	r2, r3, #16
 800685e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006864:	3304      	adds	r3, #4
 8006866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006868:	4628      	mov	r0, r5
 800686a:	f000 fda9 	bl	80073c0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3740      	adds	r7, #64	; 0x40
 8006874:	46bd      	mov	sp, r7
 8006876:	bdb0      	pop	{r4, r5, r7, pc}

08006878 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f000 ff60 	bl	8007756 <SDMMC_CmdGoIdleState>
 8006896:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	e072      	b.n	8006988 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 ff73 	bl	8007792 <SDMMC_CmdOperCond>
 80068ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00d      	beq.n	80068d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 ff49 	bl	8007756 <SDMMC_CmdGoIdleState>
 80068c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e05b      	b.n	8006988 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d137      	bne.n	800694e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2100      	movs	r1, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 ff73 	bl	80077d0 <SDMMC_CmdAppCommand>
 80068ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d02d      	beq.n	800694e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068f6:	e047      	b.n	8006988 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2100      	movs	r1, #0
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 ff66 	bl	80077d0 <SDMMC_CmdAppCommand>
 8006904:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <SD_PowerON+0x98>
    {
      return errorstate;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	e03b      	b.n	8006988 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	491e      	ldr	r1, [pc, #120]	; (8006990 <SD_PowerON+0x118>)
 8006916:	4618      	mov	r0, r3
 8006918:	f000 ff7c 	bl	8007814 <SDMMC_CmdAppOperCommand>
 800691c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006924:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006928:	e02e      	b.n	8006988 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fde2 	bl	80074fa <SDMMC_GetResponse>
 8006936:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	0fdb      	lsrs	r3, r3, #31
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <SD_PowerON+0xcc>
 8006940:	2301      	movs	r3, #1
 8006942:	e000      	b.n	8006946 <SD_PowerON+0xce>
 8006944:	2300      	movs	r3, #0
 8006946:	613b      	str	r3, [r7, #16]

    count++;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	3301      	adds	r3, #1
 800694c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006954:	4293      	cmp	r3, r2
 8006956:	d802      	bhi.n	800695e <SD_PowerON+0xe6>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0cc      	beq.n	80068f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006964:	4293      	cmp	r3, r2
 8006966:	d902      	bls.n	800696e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800696c:	e00c      	b.n	8006988 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	645a      	str	r2, [r3, #68]	; 0x44
 800697e:	e002      	b.n	8006986 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	c1100000 	.word	0xc1100000

08006994 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80069a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069a8:	e018      	b.n	80069dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	4619      	mov	r1, r3
 80069b6:	4610      	mov	r0, r2
 80069b8:	f000 fff1 	bl	800799e <SDMMC_CmdSendStatus>
 80069bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	e009      	b.n	80069dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fd93 	bl	80074fa <SDMMC_GetResponse>
 80069d4:	4602      	mov	r2, r0
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2100      	movs	r1, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fd7d 	bl	80074fa <SDMMC_GetResponse>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a0a:	d102      	bne.n	8006a12 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a10:	e02f      	b.n	8006a72 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a12:	f107 030c 	add.w	r3, r7, #12
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f879 	bl	8006b10 <SD_FindSCR>
 8006a1e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	e023      	b.n	8006a72 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01c      	beq.n	8006a6e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f000 fec5 	bl	80077d0 <SDMMC_CmdAppCommand>
 8006a46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	e00f      	b.n	8006a72 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2102      	movs	r1, #2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 feff 	bl	800785c <SDMMC_CmdBusWidth>
 8006a5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	e003      	b.n	8006a72 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e001      	b.n	8006a72 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b086      	sub	sp, #24
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	2300      	movs	r3, #0
 8006a88:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fd32 	bl	80074fa <SDMMC_GetResponse>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aa0:	d102      	bne.n	8006aa8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006aa6:	e02f      	b.n	8006b08 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006aa8:	f107 030c 	add.w	r3, r7, #12
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f82e 	bl	8006b10 <SD_FindSCR>
 8006ab4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	e023      	b.n	8006b08 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01c      	beq.n	8006b04 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad2:	041b      	lsls	r3, r3, #16
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f000 fe7a 	bl	80077d0 <SDMMC_CmdAppCommand>
 8006adc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	e00f      	b.n	8006b08 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 feb4 	bl	800785c <SDMMC_CmdBusWidth>
 8006af4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	e003      	b.n	8006b08 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e001      	b.n	8006b08 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006b10:	b590      	push	{r4, r7, lr}
 8006b12:	b08f      	sub	sp, #60	; 0x3c
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b1a:	f7fb fc49 	bl	80023b0 <HAL_GetTick>
 8006b1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006b24:	2300      	movs	r3, #0
 8006b26:	60bb      	str	r3, [r7, #8]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2108      	movs	r1, #8
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fd1e 	bl	8007578 <SDMMC_CmdBlockLength>
 8006b3c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	e0b2      	b.n	8006cae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b50:	041b      	lsls	r3, r3, #16
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f000 fe3b 	bl	80077d0 <SDMMC_CmdAppCommand>
 8006b5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	e0a3      	b.n	8006cae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b6a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006b70:	2330      	movs	r3, #48	; 0x30
 8006b72:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b74:	2302      	movs	r3, #2
 8006b76:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f107 0210 	add.w	r2, r7, #16
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fcc8 	bl	8007520 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fe83 	bl	80078a0 <SDMMC_CmdSendSCR>
 8006b9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d02a      	beq.n	8006bf8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	e083      	b.n	8006cae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00f      	beq.n	8006bd4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6819      	ldr	r1, [r3, #0]
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	f107 0208 	add.w	r2, r7, #8
 8006bc0:	18d4      	adds	r4, r2, r3
 8006bc2:	4608      	mov	r0, r1
 8006bc4:	f000 fc28 	bl	8007418 <SDMMC_ReadFIFO>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	6023      	str	r3, [r4, #0]
      index++;
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bce:	3301      	adds	r3, #1
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd2:	e006      	b.n	8006be2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d012      	beq.n	8006c08 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006be2:	f7fb fbe5 	bl	80023b0 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bf0:	d102      	bne.n	8006bf8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006bf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bf6:	e05a      	b.n	8006cae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0cf      	beq.n	8006ba6 <SD_FindSCR+0x96>
 8006c06:	e000      	b.n	8006c0a <SD_FindSCR+0xfa>
      break;
 8006c08:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c20:	2308      	movs	r3, #8
 8006c22:	e044      	b.n	8006cae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2202      	movs	r2, #2
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e037      	b.n	8006cae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2220      	movs	r2, #32
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006c54:	2320      	movs	r3, #32
 8006c56:	e02a      	b.n	8006cae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	061a      	lsls	r2, r3, #24
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	0a1b      	lsrs	r3, r3, #8
 8006c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	0e1b      	lsrs	r3, r3, #24
 8006c7e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	601a      	str	r2, [r3, #0]
    scr++;
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	3304      	adds	r3, #4
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	061a      	lsls	r2, r3, #24
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ca0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	0e1b      	lsrs	r3, r3, #24
 8006ca6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	373c      	adds	r7, #60	; 0x3c
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd90      	pop	{r4, r7, pc}

08006cb6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b086      	sub	sp, #24
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d03f      	beq.n	8006d50 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	e033      	b.n	8006d3e <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fb9c 	bl	8007418 <SDMMC_ReadFIFO>
 8006ce0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3301      	adds	r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	0a1b      	lsrs	r3, r3, #8
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	0c1b      	lsrs	r3, r3, #16
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	0e1b      	lsrs	r3, r3, #24
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b07      	cmp	r3, #7
 8006d42:	d9c8      	bls.n	8006cd6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006d50:	bf00      	nop
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d043      	beq.n	8006dfa <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	e037      	b.n	8006de8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3301      	adds	r3, #1
 8006d82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	021a      	lsls	r2, r3, #8
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	041a      	lsls	r2, r3, #16
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	061a      	lsls	r2, r3, #24
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f107 0208 	add.w	r2, r7, #8
 8006dda:	4611      	mov	r1, r2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fb28 	bl	8007432 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	3301      	adds	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b07      	cmp	r3, #7
 8006dec:	d9c4      	bls.n	8006d78 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006dfa:	bf00      	nop
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e049      	b.n	8006ea8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d106      	bne.n	8006e2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f841 	bl	8006eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f000 f9ff 	bl	8007244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d001      	beq.n	8006edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e054      	b.n	8006f86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0201 	orr.w	r2, r2, #1
 8006ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a26      	ldr	r2, [pc, #152]	; (8006f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d022      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x80>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f06:	d01d      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x80>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a22      	ldr	r2, [pc, #136]	; (8006f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d018      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x80>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a21      	ldr	r2, [pc, #132]	; (8006f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d013      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x80>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00e      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x80>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a1e      	ldr	r2, [pc, #120]	; (8006fa4 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d009      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x80>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1c      	ldr	r2, [pc, #112]	; (8006fa8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d004      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x80>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <HAL_TIM_Base_Start_IT+0xe8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d115      	bne.n	8006f70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	4b19      	ldr	r3, [pc, #100]	; (8006fb0 <HAL_TIM_Base_Start_IT+0xec>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b06      	cmp	r3, #6
 8006f54:	d015      	beq.n	8006f82 <HAL_TIM_Base_Start_IT+0xbe>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5c:	d011      	beq.n	8006f82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0201 	orr.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6e:	e008      	b.n	8006f82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0201 	orr.w	r2, r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	e000      	b.n	8006f84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40000400 	.word	0x40000400
 8006f9c:	40000800 	.word	0x40000800
 8006fa0:	40000c00 	.word	0x40000c00
 8006fa4:	40010400 	.word	0x40010400
 8006fa8:	40014000 	.word	0x40014000
 8006fac:	40001800 	.word	0x40001800
 8006fb0:	00010007 	.word	0x00010007

08006fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d122      	bne.n	8007010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d11b      	bne.n	8007010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f06f 0202 	mvn.w	r2, #2
 8006fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f905 	bl	8007206 <HAL_TIM_IC_CaptureCallback>
 8006ffc:	e005      	b.n	800700a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f8f7 	bl	80071f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f908 	bl	800721a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0304 	and.w	r3, r3, #4
 800701a:	2b04      	cmp	r3, #4
 800701c:	d122      	bne.n	8007064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b04      	cmp	r3, #4
 800702a:	d11b      	bne.n	8007064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f06f 0204 	mvn.w	r2, #4
 8007034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f8db 	bl	8007206 <HAL_TIM_IC_CaptureCallback>
 8007050:	e005      	b.n	800705e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f8cd 	bl	80071f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f8de 	bl	800721a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b08      	cmp	r3, #8
 8007070:	d122      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b08      	cmp	r3, #8
 800707e:	d11b      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0208 	mvn.w	r2, #8
 8007088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2204      	movs	r2, #4
 800708e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f8b1 	bl	8007206 <HAL_TIM_IC_CaptureCallback>
 80070a4:	e005      	b.n	80070b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f8a3 	bl	80071f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f8b4 	bl	800721a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b10      	cmp	r3, #16
 80070c4:	d122      	bne.n	800710c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b10      	cmp	r3, #16
 80070d2:	d11b      	bne.n	800710c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0210 	mvn.w	r2, #16
 80070dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2208      	movs	r2, #8
 80070e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f887 	bl	8007206 <HAL_TIM_IC_CaptureCallback>
 80070f8:	e005      	b.n	8007106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f879 	bl	80071f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f88a 	bl	800721a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b01      	cmp	r3, #1
 8007118:	d10e      	bne.n	8007138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b01      	cmp	r3, #1
 8007126:	d107      	bne.n	8007138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f06f 0201 	mvn.w	r2, #1
 8007130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fa fdb2 	bl	8001c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b80      	cmp	r3, #128	; 0x80
 8007144:	d10e      	bne.n	8007164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007150:	2b80      	cmp	r3, #128	; 0x80
 8007152:	d107      	bne.n	8007164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800715c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f91a 	bl	8007398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007172:	d10e      	bne.n	8007192 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b80      	cmp	r3, #128	; 0x80
 8007180:	d107      	bne.n	8007192 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800718a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f90d 	bl	80073ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	d10e      	bne.n	80071be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b40      	cmp	r3, #64	; 0x40
 80071ac:	d107      	bne.n	80071be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f838 	bl	800722e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d10e      	bne.n	80071ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d107      	bne.n	80071ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f06f 0220 	mvn.w	r2, #32
 80071e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f8cd 	bl	8007384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071ea:	bf00      	nop
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a40      	ldr	r2, [pc, #256]	; (8007358 <TIM_Base_SetConfig+0x114>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d013      	beq.n	8007284 <TIM_Base_SetConfig+0x40>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007262:	d00f      	beq.n	8007284 <TIM_Base_SetConfig+0x40>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a3d      	ldr	r2, [pc, #244]	; (800735c <TIM_Base_SetConfig+0x118>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00b      	beq.n	8007284 <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a3c      	ldr	r2, [pc, #240]	; (8007360 <TIM_Base_SetConfig+0x11c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d007      	beq.n	8007284 <TIM_Base_SetConfig+0x40>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a3b      	ldr	r2, [pc, #236]	; (8007364 <TIM_Base_SetConfig+0x120>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d003      	beq.n	8007284 <TIM_Base_SetConfig+0x40>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a3a      	ldr	r2, [pc, #232]	; (8007368 <TIM_Base_SetConfig+0x124>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d108      	bne.n	8007296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a2f      	ldr	r2, [pc, #188]	; (8007358 <TIM_Base_SetConfig+0x114>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d02b      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a4:	d027      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2c      	ldr	r2, [pc, #176]	; (800735c <TIM_Base_SetConfig+0x118>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d023      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a2b      	ldr	r2, [pc, #172]	; (8007360 <TIM_Base_SetConfig+0x11c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d01f      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a2a      	ldr	r2, [pc, #168]	; (8007364 <TIM_Base_SetConfig+0x120>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d01b      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a29      	ldr	r2, [pc, #164]	; (8007368 <TIM_Base_SetConfig+0x124>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d017      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a28      	ldr	r2, [pc, #160]	; (800736c <TIM_Base_SetConfig+0x128>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d013      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a27      	ldr	r2, [pc, #156]	; (8007370 <TIM_Base_SetConfig+0x12c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00f      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a26      	ldr	r2, [pc, #152]	; (8007374 <TIM_Base_SetConfig+0x130>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00b      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a25      	ldr	r2, [pc, #148]	; (8007378 <TIM_Base_SetConfig+0x134>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d007      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a24      	ldr	r2, [pc, #144]	; (800737c <TIM_Base_SetConfig+0x138>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d003      	beq.n	80072f6 <TIM_Base_SetConfig+0xb2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a23      	ldr	r2, [pc, #140]	; (8007380 <TIM_Base_SetConfig+0x13c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d108      	bne.n	8007308 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a0a      	ldr	r2, [pc, #40]	; (8007358 <TIM_Base_SetConfig+0x114>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_Base_SetConfig+0xf8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a0c      	ldr	r2, [pc, #48]	; (8007368 <TIM_Base_SetConfig+0x124>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d103      	bne.n	8007344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	691a      	ldr	r2, [r3, #16]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	615a      	str	r2, [r3, #20]
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40010000 	.word	0x40010000
 800735c:	40000400 	.word	0x40000400
 8007360:	40000800 	.word	0x40000800
 8007364:	40000c00 	.word	0x40000c00
 8007368:	40010400 	.word	0x40010400
 800736c:	40014000 	.word	0x40014000
 8007370:	40014400 	.word	0x40014400
 8007374:	40014800 	.word	0x40014800
 8007378:	40001800 	.word	0x40001800
 800737c:	40001c00 	.word	0x40001c00
 8007380:	40002000 	.word	0x40002000

08007384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80073c0:	b084      	sub	sp, #16
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	f107 001c 	add.w	r0, r7, #28
 80073ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80073d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80073d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80073da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80073de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80073e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80073e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80073ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	4b07      	ldr	r3, [pc, #28]	; (8007414 <SDMMC_Init+0x54>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	b004      	add	sp, #16
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	ffff8100 	.word	0xffff8100

08007418 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2203      	movs	r2, #3
 8007460:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0303 	and.w	r3, r3, #3
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80074aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80074b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80074b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	4b06      	ldr	r3, [pc, #24]	; (80074dc <SDMMC_SendCommand+0x50>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	fffff000 	.word	0xfffff000

080074e0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	b2db      	uxtb	r3, r3
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3314      	adds	r3, #20
 8007508:	461a      	mov	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	4413      	add	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
}  
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007546:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800754c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007552:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	431a      	orrs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800756a:	2300      	movs	r3, #0

}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007586:	2310      	movs	r3, #16
 8007588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800758a:	2340      	movs	r3, #64	; 0x40
 800758c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800758e:	2300      	movs	r3, #0
 8007590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007596:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007598:	f107 0308 	add.w	r3, r7, #8
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff ff74 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80075a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a8:	2110      	movs	r1, #16
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa1a 	bl	80079e4 <SDMMC_GetCmdResp1>
 80075b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075b2:	69fb      	ldr	r3, [r7, #28]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3720      	adds	r7, #32
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80075ca:	2311      	movs	r3, #17
 80075cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075ce:	2340      	movs	r3, #64	; 0x40
 80075d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075d2:	2300      	movs	r3, #0
 80075d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075dc:	f107 0308 	add.w	r3, r7, #8
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff ff52 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80075e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ec:	2111      	movs	r1, #17
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f9f8 	bl	80079e4 <SDMMC_GetCmdResp1>
 80075f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075f6:	69fb      	ldr	r3, [r7, #28]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800760e:	2312      	movs	r3, #18
 8007610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007612:	2340      	movs	r3, #64	; 0x40
 8007614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007616:	2300      	movs	r3, #0
 8007618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800761a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800761e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007620:	f107 0308 	add.w	r3, r7, #8
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff ff30 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800762c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007630:	2112      	movs	r1, #18
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f9d6 	bl	80079e4 <SDMMC_GetCmdResp1>
 8007638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800763a:	69fb      	ldr	r3, [r7, #28]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007652:	2318      	movs	r3, #24
 8007654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007656:	2340      	movs	r3, #64	; 0x40
 8007658:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800765e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007662:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007664:	f107 0308 	add.w	r3, r7, #8
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff ff0e 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007670:	f241 3288 	movw	r2, #5000	; 0x1388
 8007674:	2118      	movs	r1, #24
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f9b4 	bl	80079e4 <SDMMC_GetCmdResp1>
 800767c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800767e:	69fb      	ldr	r3, [r7, #28]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3720      	adds	r7, #32
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007696:	2319      	movs	r3, #25
 8007698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800769a:	2340      	movs	r3, #64	; 0x40
 800769c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076a8:	f107 0308 	add.w	r3, r7, #8
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff feec 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80076b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b8:	2119      	movs	r1, #25
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f992 	bl	80079e4 <SDMMC_GetCmdResp1>
 80076c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076c2:	69fb      	ldr	r3, [r7, #28]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3720      	adds	r7, #32
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80076d8:	230c      	movs	r3, #12
 80076da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076ea:	f107 0308 	add.w	r3, r7, #8
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff fecb 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80076f6:	4a05      	ldr	r2, [pc, #20]	; (800770c <SDMMC_CmdStopTransfer+0x40>)
 80076f8:	210c      	movs	r1, #12
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f972 	bl	80079e4 <SDMMC_GetCmdResp1>
 8007700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007702:	69fb      	ldr	r3, [r7, #28]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3720      	adds	r7, #32
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	05f5e100 	.word	0x05f5e100

08007710 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08a      	sub	sp, #40	; 0x28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007720:	2307      	movs	r3, #7
 8007722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007728:	2300      	movs	r3, #0
 800772a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800772c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007730:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007732:	f107 0310 	add.w	r3, r7, #16
 8007736:	4619      	mov	r1, r3
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff fea7 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800773e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007742:	2107      	movs	r1, #7
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 f94d 	bl	80079e4 <SDMMC_GetCmdResp1>
 800774a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800774e:	4618      	mov	r0, r3
 8007750:	3728      	adds	r7, #40	; 0x28
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b088      	sub	sp, #32
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007766:	2300      	movs	r3, #0
 8007768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800776a:	2300      	movs	r3, #0
 800776c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800776e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007772:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007774:	f107 0308 	add.w	r3, r7, #8
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff fe86 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fb67 	bl	8007e54 <SDMMC_GetCmdError>
 8007786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007788:	69fb      	ldr	r3, [r7, #28]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3720      	adds	r7, #32
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b088      	sub	sp, #32
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800779a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800779e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80077a0:	2308      	movs	r3, #8
 80077a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077a4:	2340      	movs	r3, #64	; 0x40
 80077a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077b2:	f107 0308 	add.w	r3, r7, #8
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff fe67 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fafa 	bl	8007db8 <SDMMC_GetCmdResp7>
 80077c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077c6:	69fb      	ldr	r3, [r7, #28]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3720      	adds	r7, #32
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80077de:	2337      	movs	r3, #55	; 0x37
 80077e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077e2:	2340      	movs	r3, #64	; 0x40
 80077e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077e6:	2300      	movs	r3, #0
 80077e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077f0:	f107 0308 	add.w	r3, r7, #8
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fe48 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80077fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007800:	2137      	movs	r1, #55	; 0x37
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f8ee 	bl	80079e4 <SDMMC_GetCmdResp1>
 8007808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800780a:	69fb      	ldr	r3, [r7, #28]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3720      	adds	r7, #32
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	4b0d      	ldr	r3, [pc, #52]	; (8007858 <SDMMC_CmdAppOperCommand+0x44>)
 8007822:	4313      	orrs	r3, r2
 8007824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007826:	2329      	movs	r3, #41	; 0x29
 8007828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800782a:	2340      	movs	r3, #64	; 0x40
 800782c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800782e:	2300      	movs	r3, #0
 8007830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007838:	f107 0308 	add.w	r3, r7, #8
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff fe24 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fa03 	bl	8007c50 <SDMMC_GetCmdResp3>
 800784a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800784c:	69fb      	ldr	r3, [r7, #28]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	80100000 	.word	0x80100000

0800785c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800786a:	2306      	movs	r3, #6
 800786c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800786e:	2340      	movs	r3, #64	; 0x40
 8007870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800787a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800787c:	f107 0308 	add.w	r3, r7, #8
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff fe02 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007888:	f241 3288 	movw	r2, #5000	; 0x1388
 800788c:	2106      	movs	r1, #6
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f8a8 	bl	80079e4 <SDMMC_GetCmdResp1>
 8007894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007896:	69fb      	ldr	r3, [r7, #28]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80078ac:	2333      	movs	r3, #51	; 0x33
 80078ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078b0:	2340      	movs	r3, #64	; 0x40
 80078b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078be:	f107 0308 	add.w	r3, r7, #8
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff fde1 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80078ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ce:	2133      	movs	r1, #51	; 0x33
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f887 	bl	80079e4 <SDMMC_GetCmdResp1>
 80078d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078d8:	69fb      	ldr	r3, [r7, #28]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b088      	sub	sp, #32
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80078ee:	2302      	movs	r3, #2
 80078f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80078f2:	23c0      	movs	r3, #192	; 0xc0
 80078f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007900:	f107 0308 	add.w	r3, r7, #8
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fdc0 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f957 	bl	8007bc0 <SDMMC_GetCmdResp2>
 8007912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007914:	69fb      	ldr	r3, [r7, #28]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b088      	sub	sp, #32
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800792c:	2309      	movs	r3, #9
 800792e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007930:	23c0      	movs	r3, #192	; 0xc0
 8007932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800793e:	f107 0308 	add.w	r3, r7, #8
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fda1 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f938 	bl	8007bc0 <SDMMC_GetCmdResp2>
 8007950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007952:	69fb      	ldr	r3, [r7, #28]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800796a:	2303      	movs	r3, #3
 800796c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800796e:	2340      	movs	r3, #64	; 0x40
 8007970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800797a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800797c:	f107 0308 	add.w	r3, r7, #8
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff fd82 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	2103      	movs	r1, #3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f99d 	bl	8007ccc <SDMMC_GetCmdResp6>
 8007992:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007994:	69fb      	ldr	r3, [r7, #28]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3720      	adds	r7, #32
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b088      	sub	sp, #32
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80079ac:	230d      	movs	r3, #13
 80079ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079b0:	2340      	movs	r3, #64	; 0x40
 80079b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079be:	f107 0308 	add.w	r3, r7, #8
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fd61 	bl	800748c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80079ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ce:	210d      	movs	r1, #13
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f807 	bl	80079e4 <SDMMC_GetCmdResp1>
 80079d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079d8:	69fb      	ldr	r3, [r7, #28]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	460b      	mov	r3, r1
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80079f2:	4b70      	ldr	r3, [pc, #448]	; (8007bb4 <SDMMC_GetCmdResp1+0x1d0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a70      	ldr	r2, [pc, #448]	; (8007bb8 <SDMMC_GetCmdResp1+0x1d4>)
 80079f8:	fba2 2303 	umull	r2, r3, r2, r3
 80079fc:	0a5a      	lsrs	r2, r3, #9
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
 8007a04:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	1e5a      	subs	r2, r3, #1
 8007a0a:	61fa      	str	r2, [r7, #28]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a14:	e0c9      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0ef      	beq.n	8007a06 <SDMMC_GetCmdResp1+0x22>
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1ea      	bne.n	8007a06 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2204      	movs	r2, #4
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a42:	2304      	movs	r3, #4
 8007a44:	e0b1      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e0a6      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	22c5      	movs	r2, #197	; 0xc5
 8007a60:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7ff fd3c 	bl	80074e0 <SDMMC_GetCommandResponse>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d001      	beq.n	8007a76 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e099      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007a76:	2100      	movs	r1, #0
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff fd3e 	bl	80074fa <SDMMC_GetResponse>
 8007a7e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4b4e      	ldr	r3, [pc, #312]	; (8007bbc <SDMMC_GetCmdResp1+0x1d8>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e08d      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	da02      	bge.n	8007a9a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a98:	e087      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007aa4:	2340      	movs	r3, #64	; 0x40
 8007aa6:	e080      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007ab2:	2380      	movs	r3, #128	; 0x80
 8007ab4:	e079      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ac4:	e071      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad4:	e069      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ae4:	e061      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007af0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007af4:	e059      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b04:	e051      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b14:	e049      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007b20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b24:	e041      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b34:	e039      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b44:	e031      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007b50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b54:	e029      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007b60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b64:	e021      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007b70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b74:	e019      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007b80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b84:	e011      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007b90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b94:	e009      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007ba0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ba4:	e001      	b.n	8007baa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007ba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000004 	.word	0x20000004
 8007bb8:	10624dd3 	.word	0x10624dd3
 8007bbc:	fdffe008 	.word	0xfdffe008

08007bc0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bc8:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <SDMMC_GetCmdResp2+0x88>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a1f      	ldr	r2, [pc, #124]	; (8007c4c <SDMMC_GetCmdResp2+0x8c>)
 8007bce:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd2:	0a5b      	lsrs	r3, r3, #9
 8007bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bd8:	fb02 f303 	mul.w	r3, r2, r3
 8007bdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1e5a      	subs	r2, r3, #1
 8007be2:	60fa      	str	r2, [r7, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007be8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bec:	e026      	b.n	8007c3c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0ef      	beq.n	8007bde <SDMMC_GetCmdResp2+0x1e>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1ea      	bne.n	8007bde <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2204      	movs	r2, #4
 8007c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c1a:	2304      	movs	r3, #4
 8007c1c:	e00e      	b.n	8007c3c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d004      	beq.n	8007c34 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e003      	b.n	8007c3c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	22c5      	movs	r2, #197	; 0xc5
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	20000004 	.word	0x20000004
 8007c4c:	10624dd3 	.word	0x10624dd3

08007c50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c58:	4b1a      	ldr	r3, [pc, #104]	; (8007cc4 <SDMMC_GetCmdResp3+0x74>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1a      	ldr	r2, [pc, #104]	; (8007cc8 <SDMMC_GetCmdResp3+0x78>)
 8007c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c62:	0a5b      	lsrs	r3, r3, #9
 8007c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c68:	fb02 f303 	mul.w	r3, r2, r3
 8007c6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1e5a      	subs	r2, r3, #1
 8007c72:	60fa      	str	r2, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c7c:	e01b      	b.n	8007cb6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0ef      	beq.n	8007c6e <SDMMC_GetCmdResp3+0x1e>
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1ea      	bne.n	8007c6e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9c:	f003 0304 	and.w	r3, r3, #4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d004      	beq.n	8007cae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2204      	movs	r2, #4
 8007ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007caa:	2304      	movs	r3, #4
 8007cac:	e003      	b.n	8007cb6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	22c5      	movs	r2, #197	; 0xc5
 8007cb2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000004 	.word	0x20000004
 8007cc8:	10624dd3 	.word	0x10624dd3

08007ccc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007cda:	4b35      	ldr	r3, [pc, #212]	; (8007db0 <SDMMC_GetCmdResp6+0xe4>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a35      	ldr	r2, [pc, #212]	; (8007db4 <SDMMC_GetCmdResp6+0xe8>)
 8007ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce4:	0a5b      	lsrs	r3, r3, #9
 8007ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cea:	fb02 f303 	mul.w	r3, r2, r3
 8007cee:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	1e5a      	subs	r2, r3, #1
 8007cf4:	61fa      	str	r2, [r7, #28]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d102      	bne.n	8007d00 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cfe:	e052      	b.n	8007da6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d04:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0ef      	beq.n	8007cf0 <SDMMC_GetCmdResp6+0x24>
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1ea      	bne.n	8007cf0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d004      	beq.n	8007d30 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d2c:	2304      	movs	r3, #4
 8007d2e:	e03a      	b.n	8007da6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e02f      	b.n	8007da6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f7ff fbca 	bl	80074e0 <SDMMC_GetCommandResponse>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	461a      	mov	r2, r3
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d001      	beq.n	8007d5a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e025      	b.n	8007da6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	22c5      	movs	r2, #197	; 0xc5
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007d60:	2100      	movs	r1, #0
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff fbc9 	bl	80074fa <SDMMC_GetResponse>
 8007d68:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	0c1b      	lsrs	r3, r3, #16
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e011      	b.n	8007da6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d90:	e009      	b.n	8007da6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007da0:	e001      	b.n	8007da6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007da2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20000004 	.word	0x20000004
 8007db4:	10624dd3 	.word	0x10624dd3

08007db8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dc0:	4b22      	ldr	r3, [pc, #136]	; (8007e4c <SDMMC_GetCmdResp7+0x94>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a22      	ldr	r2, [pc, #136]	; (8007e50 <SDMMC_GetCmdResp7+0x98>)
 8007dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dca:	0a5b      	lsrs	r3, r3, #9
 8007dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd0:	fb02 f303 	mul.w	r3, r2, r3
 8007dd4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	1e5a      	subs	r2, r3, #1
 8007dda:	60fa      	str	r2, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d102      	bne.n	8007de6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007de0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007de4:	e02c      	b.n	8007e40 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0ef      	beq.n	8007dd6 <SDMMC_GetCmdResp7+0x1e>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1ea      	bne.n	8007dd6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2204      	movs	r2, #4
 8007e10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e12:	2304      	movs	r3, #4
 8007e14:	e014      	b.n	8007e40 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d004      	beq.n	8007e2c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e009      	b.n	8007e40 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2240      	movs	r2, #64	; 0x40
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007e3e:	2300      	movs	r3, #0
  
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	20000004 	.word	0x20000004
 8007e50:	10624dd3 	.word	0x10624dd3

08007e54 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e5c:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <SDMMC_GetCmdError+0x50>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a11      	ldr	r2, [pc, #68]	; (8007ea8 <SDMMC_GetCmdError+0x54>)
 8007e62:	fba2 2303 	umull	r2, r3, r2, r3
 8007e66:	0a5b      	lsrs	r3, r3, #9
 8007e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e6c:	fb02 f303 	mul.w	r3, r2, r3
 8007e70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	1e5a      	subs	r2, r3, #1
 8007e76:	60fa      	str	r2, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d102      	bne.n	8007e82 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e80:	e009      	b.n	8007e96 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0f1      	beq.n	8007e72 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	22c5      	movs	r2, #197	; 0xc5
 8007e92:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	20000004 	.word	0x20000004
 8007ea8:	10624dd3 	.word	0x10624dd3

08007eac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007eb0:	4904      	ldr	r1, [pc, #16]	; (8007ec4 <MX_FATFS_Init+0x18>)
 8007eb2:	4805      	ldr	r0, [pc, #20]	; (8007ec8 <MX_FATFS_Init+0x1c>)
 8007eb4:	f003 fcaa 	bl	800b80c <FATFS_LinkDriver>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	461a      	mov	r2, r3
 8007ebc:	4b03      	ldr	r3, [pc, #12]	; (8007ecc <MX_FATFS_Init+0x20>)
 8007ebe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007ec0:	bf00      	nop
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20004640 	.word	0x20004640
 8007ec8:	080103d0 	.word	0x080103d0
 8007ecc:	2000463c 	.word	0x2000463c

08007ed0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007ed4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007eea:	f000 f896 	bl	800801a <BSP_SD_IsDetected>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d001      	beq.n	8007ef8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e012      	b.n	8007f1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007ef8:	480b      	ldr	r0, [pc, #44]	; (8007f28 <BSP_SD_Init+0x48>)
 8007efa:	f7fd fc59 	bl	80057b0 <HAL_SD_Init>
 8007efe:	4603      	mov	r3, r0
 8007f00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d109      	bne.n	8007f1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007f08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f0c:	4806      	ldr	r0, [pc, #24]	; (8007f28 <BSP_SD_Init+0x48>)
 8007f0e:	f7fe fa1f 	bl	8006350 <HAL_SD_ConfigWideBusOperation>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20004430 	.word	0x20004430

08007f2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	68f9      	ldr	r1, [r7, #12]
 8007f42:	4806      	ldr	r0, [pc, #24]	; (8007f5c <BSP_SD_ReadBlocks_DMA+0x30>)
 8007f44:	f7fd fcec 	bl	8005920 <HAL_SD_ReadBlocks_DMA>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20004430 	.word	0x20004430

08007f60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	68f9      	ldr	r1, [r7, #12]
 8007f76:	4806      	ldr	r0, [pc, #24]	; (8007f90 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007f78:	f7fd fdb4 	bl	8005ae4 <HAL_SD_WriteBlocks_DMA>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20004430 	.word	0x20004430

08007f94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007f98:	4805      	ldr	r0, [pc, #20]	; (8007fb0 <BSP_SD_GetCardState+0x1c>)
 8007f9a:	f7fe fa73 	bl	8006484 <HAL_SD_GetCardState>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	bf14      	ite	ne
 8007fa4:	2301      	movne	r3, #1
 8007fa6:	2300      	moveq	r3, #0
 8007fa8:	b2db      	uxtb	r3, r3
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20004430 	.word	0x20004430

08007fb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	4803      	ldr	r0, [pc, #12]	; (8007fcc <BSP_SD_GetCardInfo+0x18>)
 8007fc0:	f7fe f99a 	bl	80062f8 <HAL_SD_GetCardInfo>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20004430 	.word	0x20004430

08007fd0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007fd8:	f000 f818 	bl	800800c <BSP_SD_AbortCallback>
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007fec:	f000 f9a8 	bl	8008340 <BSP_SD_WriteCpltCallback>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008000:	f000 f9ac 	bl	800835c <BSP_SD_ReadCpltCallback>
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0

}
 8008010:	bf00      	nop
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008020:	2301      	movs	r3, #1
 8008022:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	b2db      	uxtb	r3, r3
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800803c:	f003 fd45 	bl	800baca <osKernelSysTick>
 8008040:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8008042:	e006      	b.n	8008052 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008044:	f7ff ffa6 	bl	8007f94 <BSP_SD_GetCardState>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800804e:	2300      	movs	r3, #0
 8008050:	e009      	b.n	8008066 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8008052:	f003 fd3a 	bl	800baca <osKernelSysTick>
 8008056:	4602      	mov	r2, r0
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d8f0      	bhi.n	8008044 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800807a:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <SD_CheckStatus+0x38>)
 800807c:	2201      	movs	r2, #1
 800807e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008080:	f7ff ff88 	bl	8007f94 <BSP_SD_GetCardState>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d107      	bne.n	800809a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <SD_CheckStatus+0x38>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f023 0301 	bic.w	r3, r3, #1
 8008094:	b2da      	uxtb	r2, r3
 8008096:	4b04      	ldr	r3, [pc, #16]	; (80080a8 <SD_CheckStatus+0x38>)
 8008098:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800809a:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <SD_CheckStatus+0x38>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b2db      	uxtb	r3, r3
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	2000000d 	.word	0x2000000d

080080ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80080ac:	b590      	push	{r4, r7, lr}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80080b6:	4b20      	ldr	r3, [pc, #128]	; (8008138 <SD_initialize+0x8c>)
 80080b8:	2201      	movs	r2, #1
 80080ba:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80080bc:	f003 fcf9 	bl	800bab2 <osKernelRunning>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d030      	beq.n	8008128 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80080c6:	f7ff ff0b 	bl	8007ee0 <BSP_SD_Init>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d107      	bne.n	80080e0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff ffcc 	bl	8008070 <SD_CheckStatus>
 80080d8:	4603      	mov	r3, r0
 80080da:	461a      	mov	r2, r3
 80080dc:	4b16      	ldr	r3, [pc, #88]	; (8008138 <SD_initialize+0x8c>)
 80080de:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80080e0:	4b15      	ldr	r3, [pc, #84]	; (8008138 <SD_initialize+0x8c>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d01e      	beq.n	8008128 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80080ea:	4b14      	ldr	r3, [pc, #80]	; (800813c <SD_initialize+0x90>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10e      	bne.n	8008110 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80080f2:	4b13      	ldr	r3, [pc, #76]	; (8008140 <SD_initialize+0x94>)
 80080f4:	f107 0408 	add.w	r4, r7, #8
 80080f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80080fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80080fe:	f107 0308 	add.w	r3, r7, #8
 8008102:	2100      	movs	r1, #0
 8008104:	4618      	mov	r0, r3
 8008106:	f003 fe1a 	bl	800bd3e <osMessageCreate>
 800810a:	4603      	mov	r3, r0
 800810c:	4a0b      	ldr	r2, [pc, #44]	; (800813c <SD_initialize+0x90>)
 800810e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <SD_initialize+0x90>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d107      	bne.n	8008128 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8008118:	4b07      	ldr	r3, [pc, #28]	; (8008138 <SD_initialize+0x8c>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f043 0301 	orr.w	r3, r3, #1
 8008122:	b2da      	uxtb	r2, r3
 8008124:	4b04      	ldr	r3, [pc, #16]	; (8008138 <SD_initialize+0x8c>)
 8008126:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008128:	4b03      	ldr	r3, [pc, #12]	; (8008138 <SD_initialize+0x8c>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	b2db      	uxtb	r3, r3
}
 800812e:	4618      	mov	r0, r3
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	bd90      	pop	{r4, r7, pc}
 8008136:	bf00      	nop
 8008138:	2000000d 	.word	0x2000000d
 800813c:	200005b0 	.word	0x200005b0
 8008140:	08010350 	.word	0x08010350

08008144 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff ff8d 	bl	8008070 <SD_CheckStatus>
 8008156:	4603      	mov	r3, r0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008176:	f247 5030 	movw	r0, #30000	; 0x7530
 800817a:	f7ff ff5b 	bl	8008034 <SD_CheckStatusWithTimeout>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	da02      	bge.n	800818a <SD_read+0x2a>
  {
    return res;
 8008184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008188:	e032      	b.n	80081f0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	68b8      	ldr	r0, [r7, #8]
 8008190:	f7ff fecc 	bl	8007f2c <BSP_SD_ReadBlocks_DMA>
 8008194:	4603      	mov	r3, r0
 8008196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800819a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d124      	bne.n	80081ec <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80081a2:	4b15      	ldr	r3, [pc, #84]	; (80081f8 <SD_read+0x98>)
 80081a4:	6819      	ldr	r1, [r3, #0]
 80081a6:	f107 0314 	add.w	r3, r7, #20
 80081aa:	f247 5230 	movw	r2, #30000	; 0x7530
 80081ae:	4618      	mov	r0, r3
 80081b0:	f003 fe2e 	bl	800be10 <osMessageGet>

    if (event.status == osEventMessage)
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2b10      	cmp	r3, #16
 80081b8:	d118      	bne.n	80081ec <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d115      	bne.n	80081ec <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80081c0:	f003 fc83 	bl	800baca <osKernelSysTick>
 80081c4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80081c6:	e008      	b.n	80081da <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80081c8:	f7ff fee4 	bl	8007f94 <BSP_SD_GetCardState>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d103      	bne.n	80081da <SD_read+0x7a>
              {
                res = RES_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80081d8:	e008      	b.n	80081ec <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80081da:	f003 fc76 	bl	800baca <osKernelSysTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	f247 522f 	movw	r2, #29999	; 0x752f
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d9ed      	bls.n	80081c8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80081ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3728      	adds	r7, #40	; 0x28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200005b0 	.word	0x200005b0

080081fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08a      	sub	sp, #40	; 0x28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	603b      	str	r3, [r7, #0]
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008212:	f247 5030 	movw	r0, #30000	; 0x7530
 8008216:	f7ff ff0d 	bl	8008034 <SD_CheckStatusWithTimeout>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	da02      	bge.n	8008226 <SD_write+0x2a>
  {
    return res;
 8008220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008224:	e02e      	b.n	8008284 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	68b8      	ldr	r0, [r7, #8]
 800822c:	f7ff fe98 	bl	8007f60 <BSP_SD_WriteBlocks_DMA>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d124      	bne.n	8008280 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8008236:	4b15      	ldr	r3, [pc, #84]	; (800828c <SD_write+0x90>)
 8008238:	6819      	ldr	r1, [r3, #0]
 800823a:	f107 0314 	add.w	r3, r7, #20
 800823e:	f247 5230 	movw	r2, #30000	; 0x7530
 8008242:	4618      	mov	r0, r3
 8008244:	f003 fde4 	bl	800be10 <osMessageGet>

    if (event.status == osEventMessage)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2b10      	cmp	r3, #16
 800824c:	d118      	bne.n	8008280 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	2b02      	cmp	r3, #2
 8008252:	d115      	bne.n	8008280 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8008254:	f003 fc39 	bl	800baca <osKernelSysTick>
 8008258:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800825a:	e008      	b.n	800826e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800825c:	f7ff fe9a 	bl	8007f94 <BSP_SD_GetCardState>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d103      	bne.n	800826e <SD_write+0x72>
          {
            res = RES_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800826c:	e008      	b.n	8008280 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800826e:	f003 fc2c 	bl	800baca <osKernelSysTick>
 8008272:	4602      	mov	r2, r0
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	f247 522f 	movw	r2, #29999	; 0x752f
 800827c:	4293      	cmp	r3, r2
 800827e:	d9ed      	bls.n	800825c <SD_write+0x60>
    }

  }
#endif

  return res;
 8008280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008284:	4618      	mov	r0, r3
 8008286:	3728      	adds	r7, #40	; 0x28
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	200005b0 	.word	0x200005b0

08008290 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08c      	sub	sp, #48	; 0x30
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	603a      	str	r2, [r7, #0]
 800829a:	71fb      	strb	r3, [r7, #7]
 800829c:	460b      	mov	r3, r1
 800829e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80082a6:	4b25      	ldr	r3, [pc, #148]	; (800833c <SD_ioctl+0xac>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <SD_ioctl+0x28>
 80082b4:	2303      	movs	r3, #3
 80082b6:	e03c      	b.n	8008332 <SD_ioctl+0xa2>

  switch (cmd)
 80082b8:	79bb      	ldrb	r3, [r7, #6]
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d834      	bhi.n	8008328 <SD_ioctl+0x98>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <SD_ioctl+0x34>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082dd 	.word	0x080082dd
 80082cc:	080082f5 	.word	0x080082f5
 80082d0:	0800830f 	.word	0x0800830f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082da:	e028      	b.n	800832e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80082dc:	f107 030c 	add.w	r3, r7, #12
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff fe67 	bl	8007fb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80082e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082f2:	e01c      	b.n	800832e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80082f4:	f107 030c 	add.w	r3, r7, #12
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff fe5b 	bl	8007fb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	b29a      	uxth	r2, r3
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800830c:	e00f      	b.n	800832e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800830e:	f107 030c 	add.w	r3, r7, #12
 8008312:	4618      	mov	r0, r3
 8008314:	f7ff fe4e 	bl	8007fb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	0a5a      	lsrs	r2, r3, #9
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008326:	e002      	b.n	800832e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008328:	2304      	movs	r3, #4
 800832a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800832e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008332:	4618      	mov	r0, r3
 8008334:	3730      	adds	r7, #48	; 0x30
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	2000000d 	.word	0x2000000d

08008340 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <BSP_SD_WriteCpltCallback+0x18>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2200      	movs	r2, #0
 800834a:	2102      	movs	r1, #2
 800834c:	4618      	mov	r0, r3
 800834e:	f003 fd1f 	bl	800bd90 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200005b0 	.word	0x200005b0

0800835c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8008360:	4b04      	ldr	r3, [pc, #16]	; (8008374 <BSP_SD_ReadCpltCallback+0x18>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2200      	movs	r2, #0
 8008366:	2101      	movs	r1, #1
 8008368:	4618      	mov	r0, r3
 800836a:	f003 fd11 	bl	800bd90 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800836e:	bf00      	nop
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	200005b0 	.word	0x200005b0

08008378 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	4a08      	ldr	r2, [pc, #32]	; (80083a8 <disk_status+0x30>)
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	79fa      	ldrb	r2, [r7, #7]
 8008390:	4905      	ldr	r1, [pc, #20]	; (80083a8 <disk_status+0x30>)
 8008392:	440a      	add	r2, r1
 8008394:	7a12      	ldrb	r2, [r2, #8]
 8008396:	4610      	mov	r0, r2
 8008398:	4798      	blx	r3
 800839a:	4603      	mov	r3, r0
 800839c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	200005dc 	.word	0x200005dc

080083ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	4a0d      	ldr	r2, [pc, #52]	; (80083f4 <disk_initialize+0x48>)
 80083be:	5cd3      	ldrb	r3, [r2, r3]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d111      	bne.n	80083e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	4a0b      	ldr	r2, [pc, #44]	; (80083f4 <disk_initialize+0x48>)
 80083c8:	2101      	movs	r1, #1
 80083ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <disk_initialize+0x48>)
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	79fa      	ldrb	r2, [r7, #7]
 80083da:	4906      	ldr	r1, [pc, #24]	; (80083f4 <disk_initialize+0x48>)
 80083dc:	440a      	add	r2, r1
 80083de:	7a12      	ldrb	r2, [r2, #8]
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	200005dc 	.word	0x200005dc

080083f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80083f8:	b590      	push	{r4, r7, lr}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	607a      	str	r2, [r7, #4]
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	4a0a      	ldr	r2, [pc, #40]	; (8008434 <disk_read+0x3c>)
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	689c      	ldr	r4, [r3, #8]
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	4a07      	ldr	r2, [pc, #28]	; (8008434 <disk_read+0x3c>)
 8008418:	4413      	add	r3, r2
 800841a:	7a18      	ldrb	r0, [r3, #8]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	47a0      	blx	r4
 8008424:	4603      	mov	r3, r0
 8008426:	75fb      	strb	r3, [r7, #23]
  return res;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
}
 800842a:	4618      	mov	r0, r3
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	bd90      	pop	{r4, r7, pc}
 8008432:	bf00      	nop
 8008434:	200005dc 	.word	0x200005dc

08008438 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008438:	b590      	push	{r4, r7, lr}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	607a      	str	r2, [r7, #4]
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	4a0a      	ldr	r2, [pc, #40]	; (8008474 <disk_write+0x3c>)
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	68dc      	ldr	r4, [r3, #12]
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	4a07      	ldr	r2, [pc, #28]	; (8008474 <disk_write+0x3c>)
 8008458:	4413      	add	r3, r2
 800845a:	7a18      	ldrb	r0, [r3, #8]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	47a0      	blx	r4
 8008464:	4603      	mov	r3, r0
 8008466:	75fb      	strb	r3, [r7, #23]
  return res;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
}
 800846a:	4618      	mov	r0, r3
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	bd90      	pop	{r4, r7, pc}
 8008472:	bf00      	nop
 8008474:	200005dc 	.word	0x200005dc

08008478 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	603a      	str	r2, [r7, #0]
 8008482:	71fb      	strb	r3, [r7, #7]
 8008484:	460b      	mov	r3, r1
 8008486:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <disk_ioctl+0x38>)
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	79fa      	ldrb	r2, [r7, #7]
 8008496:	4906      	ldr	r1, [pc, #24]	; (80084b0 <disk_ioctl+0x38>)
 8008498:	440a      	add	r2, r1
 800849a:	7a10      	ldrb	r0, [r2, #8]
 800849c:	79b9      	ldrb	r1, [r7, #6]
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	4798      	blx	r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	200005dc 	.word	0x200005dc

080084b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3301      	adds	r3, #1
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80084c4:	89fb      	ldrh	r3, [r7, #14]
 80084c6:	021b      	lsls	r3, r3, #8
 80084c8:	b21a      	sxth	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	b21b      	sxth	r3, r3
 80084d0:	4313      	orrs	r3, r2
 80084d2:	b21b      	sxth	r3, r3
 80084d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80084d6:	89fb      	ldrh	r3, [r7, #14]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3303      	adds	r3, #3
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	021b      	lsls	r3, r3, #8
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	3202      	adds	r2, #2
 80084fc:	7812      	ldrb	r2, [r2, #0]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	021b      	lsls	r3, r3, #8
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	3201      	adds	r2, #1
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	4313      	orrs	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
	return rv;
 800851c:	68fb      	ldr	r3, [r7, #12]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	460b      	mov	r3, r1
 8008534:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	887a      	ldrh	r2, [r7, #2]
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	701a      	strb	r2, [r3, #0]
 8008542:	887b      	ldrh	r3, [r7, #2]
 8008544:	0a1b      	lsrs	r3, r3, #8
 8008546:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	887a      	ldrh	r2, [r7, #2]
 8008550:	b2d2      	uxtb	r2, r2
 8008552:	701a      	strb	r2, [r3, #0]
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	b2d2      	uxtb	r2, r2
 8008574:	701a      	strb	r2, [r3, #0]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	0a1b      	lsrs	r3, r3, #8
 800857a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	1c5a      	adds	r2, r3, #1
 8008580:	607a      	str	r2, [r7, #4]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	b2d2      	uxtb	r2, r2
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	0a1b      	lsrs	r3, r3, #8
 800858c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	b2d2      	uxtb	r2, r2
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	0a1b      	lsrs	r3, r3, #8
 800859e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	607a      	str	r2, [r7, #4]
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	b2d2      	uxtb	r2, r2
 80085aa:	701a      	strb	r2, [r3, #0]
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	1c53      	adds	r3, r2, #1
 80085d6:	613b      	str	r3, [r7, #16]
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	1c59      	adds	r1, r3, #1
 80085dc:	6179      	str	r1, [r7, #20]
 80085de:	7812      	ldrb	r2, [r2, #0]
 80085e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	607b      	str	r3, [r7, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1f1      	bne.n	80085d2 <mem_cpy+0x1a>
	}
}
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80085fa:	b480      	push	{r7}
 80085fc:	b087      	sub	sp, #28
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	617a      	str	r2, [r7, #20]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	3b01      	subs	r3, #1
 800861a:	607b      	str	r3, [r7, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1f3      	bne.n	800860a <mem_set+0x10>
}
 8008622:	bf00      	nop
 8008624:	bf00      	nop
 8008626:	371c      	adds	r7, #28
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008630:	b480      	push	{r7}
 8008632:	b089      	sub	sp, #36	; 0x24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	61fa      	str	r2, [r7, #28]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	4619      	mov	r1, r3
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	61ba      	str	r2, [r7, #24]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	1acb      	subs	r3, r1, r3
 800865c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3b01      	subs	r3, #1
 8008662:	607b      	str	r3, [r7, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <mem_cmp+0x40>
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0eb      	beq.n	8008648 <mem_cmp+0x18>

	return r;
 8008670:	697b      	ldr	r3, [r7, #20]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3724      	adds	r7, #36	; 0x24
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800867e:	b480      	push	{r7}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008688:	e002      	b.n	8008690 <chk_chr+0x12>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3301      	adds	r3, #1
 800868e:	607b      	str	r3, [r7, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <chk_chr+0x26>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d1f2      	bne.n	800868a <chk_chr+0xc>
	return *str;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	781b      	ldrb	r3, [r3, #0]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d009      	beq.n	80086d6 <lock_fs+0x22>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f003 f9a2 	bl	800ba10 <ff_req_grant>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <lock_fs+0x22>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <lock_fs+0x24>
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00d      	beq.n	800870e <unlock_fs+0x2e>
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	2b0c      	cmp	r3, #12
 80086f6:	d00a      	beq.n	800870e <unlock_fs+0x2e>
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	2b0b      	cmp	r3, #11
 80086fc:	d007      	beq.n	800870e <unlock_fs+0x2e>
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	2b0f      	cmp	r3, #15
 8008702:	d004      	beq.n	800870e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	4618      	mov	r0, r3
 800870a:	f003 f996 	bl	800ba3a <ff_rel_grant>
	}
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008722:	2300      	movs	r3, #0
 8008724:	60bb      	str	r3, [r7, #8]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	e029      	b.n	8008780 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800872c:	4a27      	ldr	r2, [pc, #156]	; (80087cc <chk_lock+0xb4>)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	4413      	add	r3, r2
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d01d      	beq.n	8008776 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800873a:	4a24      	ldr	r2, [pc, #144]	; (80087cc <chk_lock+0xb4>)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	4413      	add	r3, r2
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	429a      	cmp	r2, r3
 800874a:	d116      	bne.n	800877a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800874c:	4a1f      	ldr	r2, [pc, #124]	; (80087cc <chk_lock+0xb4>)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	4413      	add	r3, r2
 8008754:	3304      	adds	r3, #4
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800875c:	429a      	cmp	r2, r3
 800875e:	d10c      	bne.n	800877a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008760:	4a1a      	ldr	r2, [pc, #104]	; (80087cc <chk_lock+0xb4>)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	4413      	add	r3, r2
 8008768:	3308      	adds	r3, #8
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008770:	429a      	cmp	r2, r3
 8008772:	d102      	bne.n	800877a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008774:	e007      	b.n	8008786 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008776:	2301      	movs	r3, #1
 8008778:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3301      	adds	r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d9d2      	bls.n	800872c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d109      	bne.n	80087a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d102      	bne.n	8008798 <chk_lock+0x80>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d101      	bne.n	800879c <chk_lock+0x84>
 8008798:	2300      	movs	r3, #0
 800879a:	e010      	b.n	80087be <chk_lock+0xa6>
 800879c:	2312      	movs	r3, #18
 800879e:	e00e      	b.n	80087be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d108      	bne.n	80087b8 <chk_lock+0xa0>
 80087a6:	4a09      	ldr	r2, [pc, #36]	; (80087cc <chk_lock+0xb4>)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	011b      	lsls	r3, r3, #4
 80087ac:	4413      	add	r3, r2
 80087ae:	330c      	adds	r3, #12
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b6:	d101      	bne.n	80087bc <chk_lock+0xa4>
 80087b8:	2310      	movs	r3, #16
 80087ba:	e000      	b.n	80087be <chk_lock+0xa6>
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	200005bc 	.word	0x200005bc

080087d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087d6:	2300      	movs	r3, #0
 80087d8:	607b      	str	r3, [r7, #4]
 80087da:	e002      	b.n	80087e2 <enq_lock+0x12>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3301      	adds	r3, #1
 80087e0:	607b      	str	r3, [r7, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d806      	bhi.n	80087f6 <enq_lock+0x26>
 80087e8:	4a09      	ldr	r2, [pc, #36]	; (8008810 <enq_lock+0x40>)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	4413      	add	r3, r2
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f2      	bne.n	80087dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	bf14      	ite	ne
 80087fc:	2301      	movne	r3, #1
 80087fe:	2300      	moveq	r3, #0
 8008800:	b2db      	uxtb	r3, r3
}
 8008802:	4618      	mov	r0, r3
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	200005bc 	.word	0x200005bc

08008814 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	e01f      	b.n	8008864 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008824:	4a41      	ldr	r2, [pc, #260]	; (800892c <inc_lock+0x118>)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	011b      	lsls	r3, r3, #4
 800882a:	4413      	add	r3, r2
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d113      	bne.n	800885e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008836:	4a3d      	ldr	r2, [pc, #244]	; (800892c <inc_lock+0x118>)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	4413      	add	r3, r2
 800883e:	3304      	adds	r3, #4
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008846:	429a      	cmp	r2, r3
 8008848:	d109      	bne.n	800885e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800884a:	4a38      	ldr	r2, [pc, #224]	; (800892c <inc_lock+0x118>)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	4413      	add	r3, r2
 8008852:	3308      	adds	r3, #8
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800885a:	429a      	cmp	r2, r3
 800885c:	d006      	beq.n	800886c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d9dc      	bls.n	8008824 <inc_lock+0x10>
 800886a:	e000      	b.n	800886e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800886c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d132      	bne.n	80088da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008874:	2300      	movs	r3, #0
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	e002      	b.n	8008880 <inc_lock+0x6c>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d806      	bhi.n	8008894 <inc_lock+0x80>
 8008886:	4a29      	ldr	r2, [pc, #164]	; (800892c <inc_lock+0x118>)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	011b      	lsls	r3, r3, #4
 800888c:	4413      	add	r3, r2
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1f2      	bne.n	800887a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b02      	cmp	r3, #2
 8008898:	d101      	bne.n	800889e <inc_lock+0x8a>
 800889a:	2300      	movs	r3, #0
 800889c:	e040      	b.n	8008920 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	4922      	ldr	r1, [pc, #136]	; (800892c <inc_lock+0x118>)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	011b      	lsls	r3, r3, #4
 80088a8:	440b      	add	r3, r1
 80088aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	491e      	ldr	r1, [pc, #120]	; (800892c <inc_lock+0x118>)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	011b      	lsls	r3, r3, #4
 80088b6:	440b      	add	r3, r1
 80088b8:	3304      	adds	r3, #4
 80088ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	695a      	ldr	r2, [r3, #20]
 80088c0:	491a      	ldr	r1, [pc, #104]	; (800892c <inc_lock+0x118>)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	440b      	add	r3, r1
 80088c8:	3308      	adds	r3, #8
 80088ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80088cc:	4a17      	ldr	r2, [pc, #92]	; (800892c <inc_lock+0x118>)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	011b      	lsls	r3, r3, #4
 80088d2:	4413      	add	r3, r2
 80088d4:	330c      	adds	r3, #12
 80088d6:	2200      	movs	r2, #0
 80088d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d009      	beq.n	80088f4 <inc_lock+0xe0>
 80088e0:	4a12      	ldr	r2, [pc, #72]	; (800892c <inc_lock+0x118>)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	4413      	add	r3, r2
 80088e8:	330c      	adds	r3, #12
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <inc_lock+0xe0>
 80088f0:	2300      	movs	r3, #0
 80088f2:	e015      	b.n	8008920 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d108      	bne.n	800890c <inc_lock+0xf8>
 80088fa:	4a0c      	ldr	r2, [pc, #48]	; (800892c <inc_lock+0x118>)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	4413      	add	r3, r2
 8008902:	330c      	adds	r3, #12
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	b29a      	uxth	r2, r3
 800890a:	e001      	b.n	8008910 <inc_lock+0xfc>
 800890c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008910:	4906      	ldr	r1, [pc, #24]	; (800892c <inc_lock+0x118>)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	440b      	add	r3, r1
 8008918:	330c      	adds	r3, #12
 800891a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3301      	adds	r3, #1
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	200005bc 	.word	0x200005bc

08008930 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3b01      	subs	r3, #1
 800893c:	607b      	str	r3, [r7, #4]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d825      	bhi.n	8008990 <dec_lock+0x60>
		n = Files[i].ctr;
 8008944:	4a17      	ldr	r2, [pc, #92]	; (80089a4 <dec_lock+0x74>)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	4413      	add	r3, r2
 800894c:	330c      	adds	r3, #12
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008952:	89fb      	ldrh	r3, [r7, #14]
 8008954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008958:	d101      	bne.n	800895e <dec_lock+0x2e>
 800895a:	2300      	movs	r3, #0
 800895c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800895e:	89fb      	ldrh	r3, [r7, #14]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <dec_lock+0x3a>
 8008964:	89fb      	ldrh	r3, [r7, #14]
 8008966:	3b01      	subs	r3, #1
 8008968:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800896a:	4a0e      	ldr	r2, [pc, #56]	; (80089a4 <dec_lock+0x74>)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	4413      	add	r3, r2
 8008972:	330c      	adds	r3, #12
 8008974:	89fa      	ldrh	r2, [r7, #14]
 8008976:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008978:	89fb      	ldrh	r3, [r7, #14]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d105      	bne.n	800898a <dec_lock+0x5a>
 800897e:	4a09      	ldr	r2, [pc, #36]	; (80089a4 <dec_lock+0x74>)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	011b      	lsls	r3, r3, #4
 8008984:	4413      	add	r3, r2
 8008986:	2200      	movs	r2, #0
 8008988:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	737b      	strb	r3, [r7, #13]
 800898e:	e001      	b.n	8008994 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008990:	2302      	movs	r3, #2
 8008992:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008994:	7b7b      	ldrb	r3, [r7, #13]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	200005bc 	.word	0x200005bc

080089a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e010      	b.n	80089d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80089b6:	4a0d      	ldr	r2, [pc, #52]	; (80089ec <clear_lock+0x44>)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	011b      	lsls	r3, r3, #4
 80089bc:	4413      	add	r3, r2
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d105      	bne.n	80089d2 <clear_lock+0x2a>
 80089c6:	4a09      	ldr	r2, [pc, #36]	; (80089ec <clear_lock+0x44>)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	4413      	add	r3, r2
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3301      	adds	r3, #1
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d9eb      	bls.n	80089b6 <clear_lock+0xe>
	}
}
 80089de:	bf00      	nop
 80089e0:	bf00      	nop
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	200005bc 	.word	0x200005bc

080089f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	78db      	ldrb	r3, [r3, #3]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d034      	beq.n	8008a6e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	7858      	ldrb	r0, [r3, #1]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008a14:	2301      	movs	r3, #1
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	f7ff fd0e 	bl	8008438 <disk_write>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	73fb      	strb	r3, [r7, #15]
 8008a26:	e022      	b.n	8008a6e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	1ad2      	subs	r2, r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d217      	bcs.n	8008a6e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	789b      	ldrb	r3, [r3, #2]
 8008a42:	613b      	str	r3, [r7, #16]
 8008a44:	e010      	b.n	8008a68 <sync_window+0x78>
					wsect += fs->fsize;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	7858      	ldrb	r0, [r3, #1]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	f7ff fceb 	bl	8008438 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d8eb      	bhi.n	8008a46 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d01b      	beq.n	8008ac8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff ffad 	bl	80089f0 <sync_window>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d113      	bne.n	8008ac8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	7858      	ldrb	r0, [r3, #1]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008aaa:	2301      	movs	r3, #1
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	f7ff fca3 	bl	80083f8 <disk_read>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d004      	beq.n	8008ac2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008abc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff ff87 	bl	80089f0 <sync_window>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d159      	bne.n	8008ba0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d149      	bne.n	8008b88 <sync_fs+0xb4>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	791b      	ldrb	r3, [r3, #4]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d145      	bne.n	8008b88 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	899b      	ldrh	r3, [r3, #12]
 8008b06:	461a      	mov	r2, r3
 8008b08:	2100      	movs	r1, #0
 8008b0a:	f7ff fd76 	bl	80085fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	333c      	adds	r3, #60	; 0x3c
 8008b12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b16:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff fd05 	bl	800852a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	333c      	adds	r3, #60	; 0x3c
 8008b24:	4921      	ldr	r1, [pc, #132]	; (8008bac <sync_fs+0xd8>)
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff fd1a 	bl	8008560 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	333c      	adds	r3, #60	; 0x3c
 8008b30:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b34:	491e      	ldr	r1, [pc, #120]	; (8008bb0 <sync_fs+0xdc>)
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff fd12 	bl	8008560 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	333c      	adds	r3, #60	; 0x3c
 8008b40:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f7ff fd08 	bl	8008560 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	333c      	adds	r3, #60	; 0x3c
 8008b54:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4610      	mov	r0, r2
 8008b60:	f7ff fcfe 	bl	8008560 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b68:	1c5a      	adds	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	7858      	ldrb	r0, [r3, #1]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f7ff fc5b 	bl	8008438 <disk_write>
			fs->fsi_flag = 0;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	785b      	ldrb	r3, [r3, #1]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2100      	movs	r1, #0
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fc71 	bl	8008478 <disk_ioctl>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <sync_fs+0xcc>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	41615252 	.word	0x41615252
 8008bb0:	61417272 	.word	0x61417272

08008bb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	3b02      	subs	r3, #2
 8008bc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	3b02      	subs	r3, #2
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d301      	bcc.n	8008bd4 <clust2sect+0x20>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e008      	b.n	8008be6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	895b      	ldrh	r3, [r3, #10]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	fb03 f202 	mul.w	r2, r3, r2
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be4:	4413      	add	r3, r2
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d904      	bls.n	8008c12 <get_fat+0x20>
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d302      	bcc.n	8008c18 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008c12:	2301      	movs	r3, #1
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	e0bb      	b.n	8008d90 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	f000 8083 	beq.w	8008d2e <get_fat+0x13c>
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	f300 80a7 	bgt.w	8008d7c <get_fat+0x18a>
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d002      	beq.n	8008c38 <get_fat+0x46>
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d056      	beq.n	8008ce4 <get_fat+0xf2>
 8008c36:	e0a1      	b.n	8008d7c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	085b      	lsrs	r3, r3, #1
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	899b      	ldrh	r3, [r3, #12]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c56:	4413      	add	r3, r2
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6938      	ldr	r0, [r7, #16]
 8008c5c:	f7ff ff0c 	bl	8008a78 <move_window>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f040 808d 	bne.w	8008d82 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	60fa      	str	r2, [r7, #12]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	8992      	ldrh	r2, [r2, #12]
 8008c72:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c76:	fb02 f201 	mul.w	r2, r2, r1
 8008c7a:	1a9b      	subs	r3, r3, r2
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	899b      	ldrh	r3, [r3, #12]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c96:	4413      	add	r3, r2
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6938      	ldr	r0, [r7, #16]
 8008c9c:	f7ff feec 	bl	8008a78 <move_window>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d16f      	bne.n	8008d86 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	899b      	ldrh	r3, [r3, #12]
 8008caa:	461a      	mov	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cb2:	fb02 f201 	mul.w	r2, r2, r1
 8008cb6:	1a9b      	subs	r3, r3, r2
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cc0:	021b      	lsls	r3, r3, #8
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <get_fat+0xe8>
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	091b      	lsrs	r3, r3, #4
 8008cd8:	e002      	b.n	8008ce0 <get_fat+0xee>
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ce0:	617b      	str	r3, [r7, #20]
			break;
 8008ce2:	e055      	b.n	8008d90 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	899b      	ldrh	r3, [r3, #12]
 8008cec:	085b      	lsrs	r3, r3, #1
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cf8:	4413      	add	r3, r2
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6938      	ldr	r0, [r7, #16]
 8008cfe:	f7ff febb 	bl	8008a78 <move_window>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d140      	bne.n	8008d8a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	8992      	ldrh	r2, [r2, #12]
 8008d16:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d1a:	fb02 f200 	mul.w	r2, r2, r0
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	440b      	add	r3, r1
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff fbc6 	bl	80084b4 <ld_word>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	617b      	str	r3, [r7, #20]
			break;
 8008d2c:	e030      	b.n	8008d90 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	899b      	ldrh	r3, [r3, #12]
 8008d36:	089b      	lsrs	r3, r3, #2
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d42:	4413      	add	r3, r2
 8008d44:	4619      	mov	r1, r3
 8008d46:	6938      	ldr	r0, [r7, #16]
 8008d48:	f7ff fe96 	bl	8008a78 <move_window>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d11d      	bne.n	8008d8e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	8992      	ldrh	r2, [r2, #12]
 8008d60:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d64:	fb02 f200 	mul.w	r2, r2, r0
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff fbb9 	bl	80084e4 <ld_dword>
 8008d72:	4603      	mov	r3, r0
 8008d74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008d78:	617b      	str	r3, [r7, #20]
			break;
 8008d7a:	e009      	b.n	8008d90 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	e006      	b.n	8008d90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d82:	bf00      	nop
 8008d84:	e004      	b.n	8008d90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d86:	bf00      	nop
 8008d88:	e002      	b.n	8008d90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d8a:	bf00      	nop
 8008d8c:	e000      	b.n	8008d90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d8e:	bf00      	nop
		}
	}

	return val;
 8008d90:	697b      	ldr	r3, [r7, #20]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008d9a:	b590      	push	{r4, r7, lr}
 8008d9c:	b089      	sub	sp, #36	; 0x24
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008da6:	2302      	movs	r3, #2
 8008da8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	f240 8102 	bls.w	8008fb6 <put_fat+0x21c>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	f080 80fc 	bcs.w	8008fb6 <put_fat+0x21c>
		switch (fs->fs_type) {
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	f000 80b6 	beq.w	8008f34 <put_fat+0x19a>
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	f300 80fd 	bgt.w	8008fc8 <put_fat+0x22e>
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d003      	beq.n	8008dda <put_fat+0x40>
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	f000 8083 	beq.w	8008ede <put_fat+0x144>
 8008dd8:	e0f6      	b.n	8008fc8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	61bb      	str	r3, [r7, #24]
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	4413      	add	r3, r2
 8008de6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	899b      	ldrh	r3, [r3, #12]
 8008df0:	4619      	mov	r1, r3
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008df8:	4413      	add	r3, r2
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f7ff fe3b 	bl	8008a78 <move_window>
 8008e02:	4603      	mov	r3, r0
 8008e04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e06:	7ffb      	ldrb	r3, [r7, #31]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f040 80d6 	bne.w	8008fba <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	61ba      	str	r2, [r7, #24]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	8992      	ldrh	r2, [r2, #12]
 8008e1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e22:	fb02 f200 	mul.w	r2, r2, r0
 8008e26:	1a9b      	subs	r3, r3, r2
 8008e28:	440b      	add	r3, r1
 8008e2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00d      	beq.n	8008e52 <put_fat+0xb8>
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	b25b      	sxtb	r3, r3
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	b25a      	sxtb	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	b25b      	sxtb	r3, r3
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	b25b      	sxtb	r3, r3
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	e001      	b.n	8008e56 <put_fat+0xbc>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	899b      	ldrh	r3, [r3, #12]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e70:	4413      	add	r3, r2
 8008e72:	4619      	mov	r1, r3
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff fdff 	bl	8008a78 <move_window>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e7e:	7ffb      	ldrb	r3, [r7, #31]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f040 809c 	bne.w	8008fbe <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	899b      	ldrh	r3, [r3, #12]
 8008e90:	461a      	mov	r2, r3
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e98:	fb02 f200 	mul.w	r2, r2, r0
 8008e9c:	1a9b      	subs	r3, r3, r2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <put_fat+0x11a>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	091b      	lsrs	r3, r3, #4
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	e00e      	b.n	8008ed2 <put_fat+0x138>
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	b25b      	sxtb	r3, r3
 8008eba:	f023 030f 	bic.w	r3, r3, #15
 8008ebe:	b25a      	sxtb	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	0a1b      	lsrs	r3, r3, #8
 8008ec4:	b25b      	sxtb	r3, r3
 8008ec6:	f003 030f 	and.w	r3, r3, #15
 8008eca:	b25b      	sxtb	r3, r3
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	b25b      	sxtb	r3, r3
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	70da      	strb	r2, [r3, #3]
			break;
 8008edc:	e074      	b.n	8008fc8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	899b      	ldrh	r3, [r3, #12]
 8008ee6:	085b      	lsrs	r3, r3, #1
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	4619      	mov	r1, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ef2:	4413      	add	r3, r2
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f7ff fdbe 	bl	8008a78 <move_window>
 8008efc:	4603      	mov	r3, r0
 8008efe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f00:	7ffb      	ldrb	r3, [r7, #31]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d15d      	bne.n	8008fc2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	005b      	lsls	r3, r3, #1
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	8992      	ldrh	r2, [r2, #12]
 8008f14:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f18:	fb02 f200 	mul.w	r2, r2, r0
 8008f1c:	1a9b      	subs	r3, r3, r2
 8008f1e:	440b      	add	r3, r1
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	b292      	uxth	r2, r2
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff faff 	bl	800852a <st_word>
			fs->wflag = 1;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	70da      	strb	r2, [r3, #3]
			break;
 8008f32:	e049      	b.n	8008fc8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	899b      	ldrh	r3, [r3, #12]
 8008f3c:	089b      	lsrs	r3, r3, #2
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	4619      	mov	r1, r3
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f48:	4413      	add	r3, r2
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f7ff fd93 	bl	8008a78 <move_window>
 8008f52:	4603      	mov	r3, r0
 8008f54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f56:	7ffb      	ldrb	r3, [r7, #31]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d134      	bne.n	8008fc6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	8992      	ldrh	r2, [r2, #12]
 8008f70:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f74:	fb02 f200 	mul.w	r2, r2, r0
 8008f78:	1a9b      	subs	r3, r3, r2
 8008f7a:	440b      	add	r3, r1
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7ff fab1 	bl	80084e4 <ld_dword>
 8008f82:	4603      	mov	r3, r0
 8008f84:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f88:	4323      	orrs	r3, r4
 8008f8a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	8992      	ldrh	r2, [r2, #12]
 8008f9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f9e:	fb02 f200 	mul.w	r2, r2, r0
 8008fa2:	1a9b      	subs	r3, r3, r2
 8008fa4:	440b      	add	r3, r1
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff fad9 	bl	8008560 <st_dword>
			fs->wflag = 1;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	70da      	strb	r2, [r3, #3]
			break;
 8008fb4:	e008      	b.n	8008fc8 <put_fat+0x22e>
		}
	}
 8008fb6:	bf00      	nop
 8008fb8:	e006      	b.n	8008fc8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008fba:	bf00      	nop
 8008fbc:	e004      	b.n	8008fc8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008fbe:	bf00      	nop
 8008fc0:	e002      	b.n	8008fc8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008fc6:	bf00      	nop
	return res;
 8008fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3724      	adds	r7, #36	; 0x24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd90      	pop	{r4, r7, pc}

08008fd2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b088      	sub	sp, #32
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d904      	bls.n	8008ff8 <remove_chain+0x26>
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d301      	bcc.n	8008ffc <remove_chain+0x2a>
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e04b      	b.n	8009094 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00c      	beq.n	800901c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	69b8      	ldr	r0, [r7, #24]
 800900a:	f7ff fec6 	bl	8008d9a <put_fat>
 800900e:	4603      	mov	r3, r0
 8009010:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009012:	7ffb      	ldrb	r3, [r7, #31]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <remove_chain+0x4a>
 8009018:	7ffb      	ldrb	r3, [r7, #31]
 800901a:	e03b      	b.n	8009094 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f7ff fde7 	bl	8008bf2 <get_fat>
 8009024:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d031      	beq.n	8009090 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <remove_chain+0x64>
 8009032:	2302      	movs	r3, #2
 8009034:	e02e      	b.n	8009094 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800903c:	d101      	bne.n	8009042 <remove_chain+0x70>
 800903e:	2301      	movs	r3, #1
 8009040:	e028      	b.n	8009094 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009042:	2200      	movs	r2, #0
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	69b8      	ldr	r0, [r7, #24]
 8009048:	f7ff fea7 	bl	8008d9a <put_fat>
 800904c:	4603      	mov	r3, r0
 800904e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009050:	7ffb      	ldrb	r3, [r7, #31]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <remove_chain+0x88>
 8009056:	7ffb      	ldrb	r3, [r7, #31]
 8009058:	e01c      	b.n	8009094 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	69da      	ldr	r2, [r3, #28]
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	3b02      	subs	r3, #2
 8009064:	429a      	cmp	r2, r3
 8009066:	d20b      	bcs.n	8009080 <remove_chain+0xae>
			fs->free_clst++;
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	791b      	ldrb	r3, [r3, #4]
 8009076:	f043 0301 	orr.w	r3, r3, #1
 800907a:	b2da      	uxtb	r2, r3
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	429a      	cmp	r2, r3
 800908c:	d3c6      	bcc.n	800901c <remove_chain+0x4a>
 800908e:	e000      	b.n	8009092 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009090:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3720      	adds	r7, #32
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b088      	sub	sp, #32
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10d      	bne.n	80090ce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d004      	beq.n	80090c8 <create_chain+0x2c>
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d31b      	bcc.n	8009100 <create_chain+0x64>
 80090c8:	2301      	movs	r3, #1
 80090ca:	61bb      	str	r3, [r7, #24]
 80090cc:	e018      	b.n	8009100 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fd8e 	bl	8008bf2 <get_fat>
 80090d6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d801      	bhi.n	80090e2 <create_chain+0x46>
 80090de:	2301      	movs	r3, #1
 80090e0:	e070      	b.n	80091c4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090e8:	d101      	bne.n	80090ee <create_chain+0x52>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	e06a      	b.n	80091c4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d201      	bcs.n	80090fc <create_chain+0x60>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	e063      	b.n	80091c4 <create_chain+0x128>
		scl = clst;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	3301      	adds	r3, #1
 8009108:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	69fa      	ldr	r2, [r7, #28]
 8009110:	429a      	cmp	r2, r3
 8009112:	d307      	bcc.n	8009124 <create_chain+0x88>
				ncl = 2;
 8009114:	2302      	movs	r3, #2
 8009116:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	429a      	cmp	r2, r3
 800911e:	d901      	bls.n	8009124 <create_chain+0x88>
 8009120:	2300      	movs	r3, #0
 8009122:	e04f      	b.n	80091c4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009124:	69f9      	ldr	r1, [r7, #28]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7ff fd63 	bl	8008bf2 <get_fat>
 800912c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00e      	beq.n	8009152 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d003      	beq.n	8009142 <create_chain+0xa6>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009140:	d101      	bne.n	8009146 <create_chain+0xaa>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	e03e      	b.n	80091c4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009146:	69fa      	ldr	r2, [r7, #28]
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	429a      	cmp	r2, r3
 800914c:	d1da      	bne.n	8009104 <create_chain+0x68>
 800914e:	2300      	movs	r3, #0
 8009150:	e038      	b.n	80091c4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009152:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009158:	69f9      	ldr	r1, [r7, #28]
 800915a:	6938      	ldr	r0, [r7, #16]
 800915c:	f7ff fe1d 	bl	8008d9a <put_fat>
 8009160:	4603      	mov	r3, r0
 8009162:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d109      	bne.n	800917e <create_chain+0xe2>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d006      	beq.n	800917e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009170:	69fa      	ldr	r2, [r7, #28]
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6938      	ldr	r0, [r7, #16]
 8009176:	f7ff fe10 	bl	8008d9a <put_fat>
 800917a:	4603      	mov	r3, r0
 800917c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d116      	bne.n	80091b2 <create_chain+0x116>
		fs->last_clst = ncl;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	69da      	ldr	r2, [r3, #28]
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	3b02      	subs	r3, #2
 8009194:	429a      	cmp	r2, r3
 8009196:	d804      	bhi.n	80091a2 <create_chain+0x106>
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	1e5a      	subs	r2, r3, #1
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	791b      	ldrb	r3, [r3, #4]
 80091a6:	f043 0301 	orr.w	r3, r3, #1
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	711a      	strb	r2, [r3, #4]
 80091b0:	e007      	b.n	80091c2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d102      	bne.n	80091be <create_chain+0x122>
 80091b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091bc:	e000      	b.n	80091c0 <create_chain+0x124>
 80091be:	2301      	movs	r3, #1
 80091c0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80091c2:	69fb      	ldr	r3, [r7, #28]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3720      	adds	r7, #32
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	3304      	adds	r3, #4
 80091e2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	899b      	ldrh	r3, [r3, #12]
 80091e8:	461a      	mov	r2, r3
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	8952      	ldrh	r2, [r2, #10]
 80091f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	1d1a      	adds	r2, r3, #4
 80091fe:	613a      	str	r2, [r7, #16]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <clmt_clust+0x42>
 800920a:	2300      	movs	r3, #0
 800920c:	e010      	b.n	8009230 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	429a      	cmp	r2, r3
 8009214:	d307      	bcc.n	8009226 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	3304      	adds	r3, #4
 8009222:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009224:	e7e9      	b.n	80091fa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009226:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	4413      	add	r3, r2
}
 8009230:	4618      	mov	r0, r3
 8009232:	371c      	adds	r7, #28
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009252:	d204      	bcs.n	800925e <dir_sdi+0x22>
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	f003 031f 	and.w	r3, r3, #31
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <dir_sdi+0x26>
		return FR_INT_ERR;
 800925e:	2302      	movs	r3, #2
 8009260:	e071      	b.n	8009346 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d106      	bne.n	8009282 <dir_sdi+0x46>
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b02      	cmp	r3, #2
 800927a:	d902      	bls.n	8009282 <dir_sdi+0x46>
		clst = fs->dirbase;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009280:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10c      	bne.n	80092a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	095b      	lsrs	r3, r3, #5
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	8912      	ldrh	r2, [r2, #8]
 8009290:	4293      	cmp	r3, r2
 8009292:	d301      	bcc.n	8009298 <dir_sdi+0x5c>
 8009294:	2302      	movs	r3, #2
 8009296:	e056      	b.n	8009346 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	61da      	str	r2, [r3, #28]
 80092a0:	e02d      	b.n	80092fe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	895b      	ldrh	r3, [r3, #10]
 80092a6:	461a      	mov	r2, r3
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	899b      	ldrh	r3, [r3, #12]
 80092ac:	fb03 f302 	mul.w	r3, r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092b2:	e019      	b.n	80092e8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6979      	ldr	r1, [r7, #20]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7ff fc9a 	bl	8008bf2 <get_fat>
 80092be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c6:	d101      	bne.n	80092cc <dir_sdi+0x90>
 80092c8:	2301      	movs	r3, #1
 80092ca:	e03c      	b.n	8009346 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d904      	bls.n	80092dc <dir_sdi+0xa0>
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d301      	bcc.n	80092e0 <dir_sdi+0xa4>
 80092dc:	2302      	movs	r3, #2
 80092de:	e032      	b.n	8009346 <dir_sdi+0x10a>
			ofs -= csz;
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d2e1      	bcs.n	80092b4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80092f0:	6979      	ldr	r1, [r7, #20]
 80092f2:	6938      	ldr	r0, [r7, #16]
 80092f4:	f7ff fc5e 	bl	8008bb4 <clust2sect>
 80092f8:	4602      	mov	r2, r0
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <dir_sdi+0xd4>
 800930c:	2302      	movs	r3, #2
 800930e:	e01a      	b.n	8009346 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	69da      	ldr	r2, [r3, #28]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	899b      	ldrh	r3, [r3, #12]
 8009318:	4619      	mov	r1, r3
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009320:	441a      	add	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	899b      	ldrh	r3, [r3, #12]
 8009330:	461a      	mov	r2, r3
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	fbb3 f0f2 	udiv	r0, r3, r2
 8009338:	fb02 f200 	mul.w	r2, r2, r0
 800933c:	1a9b      	subs	r3, r3, r2
 800933e:	18ca      	adds	r2, r1, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b086      	sub	sp, #24
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	3320      	adds	r3, #32
 8009364:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <dir_next+0x28>
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009374:	d301      	bcc.n	800937a <dir_next+0x2c>
 8009376:	2304      	movs	r3, #4
 8009378:	e0bb      	b.n	80094f2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	899b      	ldrh	r3, [r3, #12]
 800937e:	461a      	mov	r2, r3
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	fbb3 f1f2 	udiv	r1, r3, r2
 8009386:	fb02 f201 	mul.w	r2, r2, r1
 800938a:	1a9b      	subs	r3, r3, r2
 800938c:	2b00      	cmp	r3, #0
 800938e:	f040 809d 	bne.w	80094cc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10b      	bne.n	80093bc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	095b      	lsrs	r3, r3, #5
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	8912      	ldrh	r2, [r2, #8]
 80093ac:	4293      	cmp	r3, r2
 80093ae:	f0c0 808d 	bcc.w	80094cc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	61da      	str	r2, [r3, #28]
 80093b8:	2304      	movs	r3, #4
 80093ba:	e09a      	b.n	80094f2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	899b      	ldrh	r3, [r3, #12]
 80093c0:	461a      	mov	r2, r3
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	8952      	ldrh	r2, [r2, #10]
 80093cc:	3a01      	subs	r2, #1
 80093ce:	4013      	ands	r3, r2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d17b      	bne.n	80094cc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f7ff fc08 	bl	8008bf2 <get_fat>
 80093e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d801      	bhi.n	80093ee <dir_next+0xa0>
 80093ea:	2302      	movs	r3, #2
 80093ec:	e081      	b.n	80094f2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f4:	d101      	bne.n	80093fa <dir_next+0xac>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e07b      	b.n	80094f2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	429a      	cmp	r2, r3
 8009402:	d359      	bcc.n	80094b8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d104      	bne.n	8009414 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	61da      	str	r2, [r3, #28]
 8009410:	2304      	movs	r3, #4
 8009412:	e06e      	b.n	80094f2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f7ff fe3d 	bl	800909c <create_chain>
 8009422:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <dir_next+0xe0>
 800942a:	2307      	movs	r3, #7
 800942c:	e061      	b.n	80094f2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d101      	bne.n	8009438 <dir_next+0xea>
 8009434:	2302      	movs	r3, #2
 8009436:	e05c      	b.n	80094f2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800943e:	d101      	bne.n	8009444 <dir_next+0xf6>
 8009440:	2301      	movs	r3, #1
 8009442:	e056      	b.n	80094f2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7ff fad3 	bl	80089f0 <sync_window>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <dir_next+0x106>
 8009450:	2301      	movs	r3, #1
 8009452:	e04e      	b.n	80094f2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	899b      	ldrh	r3, [r3, #12]
 800945e:	461a      	mov	r2, r3
 8009460:	2100      	movs	r1, #0
 8009462:	f7ff f8ca 	bl	80085fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009466:	2300      	movs	r3, #0
 8009468:	613b      	str	r3, [r7, #16]
 800946a:	6979      	ldr	r1, [r7, #20]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f7ff fba1 	bl	8008bb4 <clust2sect>
 8009472:	4602      	mov	r2, r0
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	639a      	str	r2, [r3, #56]	; 0x38
 8009478:	e012      	b.n	80094a0 <dir_next+0x152>
						fs->wflag = 1;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f7ff fab5 	bl	80089f0 <sync_window>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <dir_next+0x142>
 800948c:	2301      	movs	r3, #1
 800948e:	e030      	b.n	80094f2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	3301      	adds	r3, #1
 8009494:	613b      	str	r3, [r7, #16]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	639a      	str	r2, [r3, #56]	; 0x38
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	895b      	ldrh	r3, [r3, #10]
 80094a4:	461a      	mov	r2, r3
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d3e6      	bcc.n	800947a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	1ad2      	subs	r2, r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80094be:	6979      	ldr	r1, [r7, #20]
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f7ff fb77 	bl	8008bb4 <clust2sect>
 80094c6:	4602      	mov	r2, r0
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	899b      	ldrh	r3, [r3, #12]
 80094dc:	461a      	mov	r2, r3
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80094e4:	fb02 f200 	mul.w	r2, r2, r0
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	18ca      	adds	r2, r1, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b086      	sub	sp, #24
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800950a:	2100      	movs	r1, #0
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff fe95 	bl	800923c <dir_sdi>
 8009512:	4603      	mov	r3, r0
 8009514:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d12b      	bne.n	8009574 <dir_alloc+0x7a>
		n = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	4619      	mov	r1, r3
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff faa6 	bl	8008a78 <move_window>
 800952c:	4603      	mov	r3, r0
 800952e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d11d      	bne.n	8009572 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2be5      	cmp	r3, #229	; 0xe5
 800953e:	d004      	beq.n	800954a <dir_alloc+0x50>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d107      	bne.n	800955a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	3301      	adds	r3, #1
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	429a      	cmp	r2, r3
 8009556:	d102      	bne.n	800955e <dir_alloc+0x64>
 8009558:	e00c      	b.n	8009574 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800955a:	2300      	movs	r3, #0
 800955c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800955e:	2101      	movs	r1, #1
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7ff fef4 	bl	800934e <dir_next>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0d7      	beq.n	8009520 <dir_alloc+0x26>
 8009570:	e000      	b.n	8009574 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009572:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	2b04      	cmp	r3, #4
 8009578:	d101      	bne.n	800957e <dir_alloc+0x84>
 800957a:	2307      	movs	r3, #7
 800957c:	75fb      	strb	r3, [r7, #23]
	return res;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	331a      	adds	r3, #26
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe ff8c 	bl	80084b4 <ld_word>
 800959c:	4603      	mov	r3, r0
 800959e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d109      	bne.n	80095bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	3314      	adds	r3, #20
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fe ff81 	bl	80084b4 <ld_word>
 80095b2:	4603      	mov	r3, r0
 80095b4:	041b      	lsls	r3, r3, #16
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80095bc:	68fb      	ldr	r3, [r7, #12]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	331a      	adds	r3, #26
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	b292      	uxth	r2, r2
 80095da:	4611      	mov	r1, r2
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fe ffa4 	bl	800852a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d109      	bne.n	80095fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f103 0214 	add.w	r2, r3, #20
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	0c1b      	lsrs	r3, r3, #16
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	4619      	mov	r1, r3
 80095f8:	4610      	mov	r0, r2
 80095fa:	f7fe ff96 	bl	800852a <st_word>
	}
}
 80095fe:	bf00      	nop
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009608:	b590      	push	{r4, r7, lr}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	331a      	adds	r3, #26
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe ff4c 	bl	80084b4 <ld_word>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <cmp_lfn+0x1e>
 8009622:	2300      	movs	r3, #0
 8009624:	e059      	b.n	80096da <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800962e:	1e5a      	subs	r2, r3, #1
 8009630:	4613      	mov	r3, r2
 8009632:	005b      	lsls	r3, r3, #1
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800963c:	2301      	movs	r3, #1
 800963e:	81fb      	strh	r3, [r7, #14]
 8009640:	2300      	movs	r3, #0
 8009642:	613b      	str	r3, [r7, #16]
 8009644:	e033      	b.n	80096ae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009646:	4a27      	ldr	r2, [pc, #156]	; (80096e4 <cmp_lfn+0xdc>)
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	4413      	add	r3, r2
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	4413      	add	r3, r2
 8009654:	4618      	mov	r0, r3
 8009656:	f7fe ff2d 	bl	80084b4 <ld_word>
 800965a:	4603      	mov	r3, r0
 800965c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800965e:	89fb      	ldrh	r3, [r7, #14]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d01a      	beq.n	800969a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2bfe      	cmp	r3, #254	; 0xfe
 8009668:	d812      	bhi.n	8009690 <cmp_lfn+0x88>
 800966a:	89bb      	ldrh	r3, [r7, #12]
 800966c:	4618      	mov	r0, r3
 800966e:	f002 f919 	bl	800b8a4 <ff_wtoupper>
 8009672:	4603      	mov	r3, r0
 8009674:	461c      	mov	r4, r3
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	617a      	str	r2, [r7, #20]
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	4413      	add	r3, r2
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	4618      	mov	r0, r3
 8009686:	f002 f90d 	bl	800b8a4 <ff_wtoupper>
 800968a:	4603      	mov	r3, r0
 800968c:	429c      	cmp	r4, r3
 800968e:	d001      	beq.n	8009694 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009690:	2300      	movs	r3, #0
 8009692:	e022      	b.n	80096da <cmp_lfn+0xd2>
			}
			wc = uc;
 8009694:	89bb      	ldrh	r3, [r7, #12]
 8009696:	81fb      	strh	r3, [r7, #14]
 8009698:	e006      	b.n	80096a8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800969a:	89bb      	ldrh	r3, [r7, #12]
 800969c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d001      	beq.n	80096a8 <cmp_lfn+0xa0>
 80096a4:	2300      	movs	r3, #0
 80096a6:	e018      	b.n	80096da <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	3301      	adds	r3, #1
 80096ac:	613b      	str	r3, [r7, #16]
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b0c      	cmp	r3, #12
 80096b2:	d9c8      	bls.n	8009646 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00b      	beq.n	80096d8 <cmp_lfn+0xd0>
 80096c0:	89fb      	ldrh	r3, [r7, #14]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d008      	beq.n	80096d8 <cmp_lfn+0xd0>
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	4413      	add	r3, r2
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <cmp_lfn+0xd0>
 80096d4:	2300      	movs	r3, #0
 80096d6:	e000      	b.n	80096da <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80096d8:	2301      	movs	r3, #1
}
 80096da:	4618      	mov	r0, r3
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd90      	pop	{r4, r7, pc}
 80096e2:	bf00      	nop
 80096e4:	08010464 	.word	0x08010464

080096e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b088      	sub	sp, #32
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	4611      	mov	r1, r2
 80096f4:	461a      	mov	r2, r3
 80096f6:	460b      	mov	r3, r1
 80096f8:	71fb      	strb	r3, [r7, #7]
 80096fa:	4613      	mov	r3, r2
 80096fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	330d      	adds	r3, #13
 8009702:	79ba      	ldrb	r2, [r7, #6]
 8009704:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	330b      	adds	r3, #11
 800970a:	220f      	movs	r2, #15
 800970c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	330c      	adds	r3, #12
 8009712:	2200      	movs	r2, #0
 8009714:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	331a      	adds	r3, #26
 800971a:	2100      	movs	r1, #0
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe ff04 	bl	800852a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	1e5a      	subs	r2, r3, #1
 8009726:	4613      	mov	r3, r2
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	82fb      	strh	r3, [r7, #22]
 8009736:	2300      	movs	r3, #0
 8009738:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800973a:	8afb      	ldrh	r3, [r7, #22]
 800973c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009740:	4293      	cmp	r3, r2
 8009742:	d007      	beq.n	8009754 <put_lfn+0x6c>
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	61fa      	str	r2, [r7, #28]
 800974a:	005b      	lsls	r3, r3, #1
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009754:	4a17      	ldr	r2, [pc, #92]	; (80097b4 <put_lfn+0xcc>)
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	4413      	add	r3, r2
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	4413      	add	r3, r2
 8009762:	8afa      	ldrh	r2, [r7, #22]
 8009764:	4611      	mov	r1, r2
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fedf 	bl	800852a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800976c:	8afb      	ldrh	r3, [r7, #22]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d102      	bne.n	8009778 <put_lfn+0x90>
 8009772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009776:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	3301      	adds	r3, #1
 800977c:	61bb      	str	r3, [r7, #24]
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	2b0c      	cmp	r3, #12
 8009782:	d9da      	bls.n	800973a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009784:	8afb      	ldrh	r3, [r7, #22]
 8009786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800978a:	4293      	cmp	r3, r2
 800978c:	d006      	beq.n	800979c <put_lfn+0xb4>
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4413      	add	r3, r2
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d103      	bne.n	80097a4 <put_lfn+0xbc>
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	79fa      	ldrb	r2, [r7, #7]
 80097a8:	701a      	strb	r2, [r3, #0]
}
 80097aa:	bf00      	nop
 80097ac:	3720      	adds	r7, #32
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	08010464 	.word	0x08010464

080097b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08c      	sub	sp, #48	; 0x30
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80097c6:	220b      	movs	r2, #11
 80097c8:	68b9      	ldr	r1, [r7, #8]
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f7fe fef4 	bl	80085b8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	2b05      	cmp	r3, #5
 80097d4:	d929      	bls.n	800982a <gen_numname+0x72>
		sr = seq;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80097da:	e020      	b.n	800981e <gen_numname+0x66>
			wc = *lfn++;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	1c9a      	adds	r2, r3, #2
 80097e0:	607a      	str	r2, [r7, #4]
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80097e6:	2300      	movs	r3, #0
 80097e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80097ea:	e015      	b.n	8009818 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	005a      	lsls	r2, r3, #1
 80097f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	4413      	add	r3, r2
 80097f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80097fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097fc:	085b      	lsrs	r3, r3, #1
 80097fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d003      	beq.n	8009812 <gen_numname+0x5a>
 800980a:	69fa      	ldr	r2, [r7, #28]
 800980c:	4b31      	ldr	r3, [pc, #196]	; (80098d4 <gen_numname+0x11c>)
 800980e:	4053      	eors	r3, r2
 8009810:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	3301      	adds	r3, #1
 8009816:	62bb      	str	r3, [r7, #40]	; 0x28
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	2b0f      	cmp	r3, #15
 800981c:	d9e6      	bls.n	80097ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1da      	bne.n	80097dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800982a:	2307      	movs	r3, #7
 800982c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	f003 030f 	and.w	r3, r3, #15
 8009836:	b2db      	uxtb	r3, r3
 8009838:	3330      	adds	r3, #48	; 0x30
 800983a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800983e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009842:	2b39      	cmp	r3, #57	; 0x39
 8009844:	d904      	bls.n	8009850 <gen_numname+0x98>
 8009846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800984a:	3307      	adds	r3, #7
 800984c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	1e5a      	subs	r2, r3, #1
 8009854:	62ba      	str	r2, [r7, #40]	; 0x28
 8009856:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800985a:	4413      	add	r3, r2
 800985c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009860:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	091b      	lsrs	r3, r3, #4
 8009868:	603b      	str	r3, [r7, #0]
	} while (seq);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1de      	bne.n	800982e <gen_numname+0x76>
	ns[i] = '~';
 8009870:	f107 0214 	add.w	r2, r7, #20
 8009874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009876:	4413      	add	r3, r2
 8009878:	227e      	movs	r2, #126	; 0x7e
 800987a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800987c:	2300      	movs	r3, #0
 800987e:	627b      	str	r3, [r7, #36]	; 0x24
 8009880:	e002      	b.n	8009888 <gen_numname+0xd0>
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	3301      	adds	r3, #1
 8009886:	627b      	str	r3, [r7, #36]	; 0x24
 8009888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988c:	429a      	cmp	r2, r3
 800988e:	d205      	bcs.n	800989c <gen_numname+0xe4>
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	4413      	add	r3, r2
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2b20      	cmp	r3, #32
 800989a:	d1f2      	bne.n	8009882 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	2b07      	cmp	r3, #7
 80098a0:	d808      	bhi.n	80098b4 <gen_numname+0xfc>
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80098a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80098ac:	4413      	add	r3, r2
 80098ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80098b2:	e000      	b.n	80098b6 <gen_numname+0xfe>
 80098b4:	2120      	movs	r1, #32
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	627a      	str	r2, [r7, #36]	; 0x24
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	460a      	mov	r2, r1
 80098c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	2b07      	cmp	r3, #7
 80098c8:	d9e8      	bls.n	800989c <gen_numname+0xe4>
}
 80098ca:	bf00      	nop
 80098cc:	bf00      	nop
 80098ce:	3730      	adds	r7, #48	; 0x30
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	00011021 	.word	0x00011021

080098d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80098e4:	230b      	movs	r3, #11
 80098e6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	0852      	lsrs	r2, r2, #1
 80098ee:	01db      	lsls	r3, r3, #7
 80098f0:	4313      	orrs	r3, r2
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	1c59      	adds	r1, r3, #1
 80098f8:	6079      	str	r1, [r7, #4]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	4413      	add	r3, r2
 80098fe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	3b01      	subs	r3, #1
 8009904:	60bb      	str	r3, [r7, #8]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1ed      	bne.n	80098e8 <sum_sfn+0x10>
	return sum;
 800990c:	7bfb      	ldrb	r3, [r7, #15]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b086      	sub	sp, #24
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009928:	2100      	movs	r1, #0
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff fc86 	bl	800923c <dir_sdi>
 8009930:	4603      	mov	r3, r0
 8009932:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <dir_find+0x24>
 800993a:	7dfb      	ldrb	r3, [r7, #23]
 800993c:	e0a9      	b.n	8009a92 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800993e:	23ff      	movs	r3, #255	; 0xff
 8009940:	753b      	strb	r3, [r7, #20]
 8009942:	7d3b      	ldrb	r3, [r7, #20]
 8009944:	757b      	strb	r3, [r7, #21]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800994c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	4619      	mov	r1, r3
 8009954:	6938      	ldr	r0, [r7, #16]
 8009956:	f7ff f88f 	bl	8008a78 <move_window>
 800995a:	4603      	mov	r3, r0
 800995c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	2b00      	cmp	r3, #0
 8009962:	f040 8090 	bne.w	8009a86 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800996e:	7dbb      	ldrb	r3, [r7, #22]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <dir_find+0x60>
 8009974:	2304      	movs	r3, #4
 8009976:	75fb      	strb	r3, [r7, #23]
 8009978:	e08a      	b.n	8009a90 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	330b      	adds	r3, #11
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009986:	73fb      	strb	r3, [r7, #15]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	7bfa      	ldrb	r2, [r7, #15]
 800998c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800998e:	7dbb      	ldrb	r3, [r7, #22]
 8009990:	2be5      	cmp	r3, #229	; 0xe5
 8009992:	d007      	beq.n	80099a4 <dir_find+0x8a>
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	f003 0308 	and.w	r3, r3, #8
 800999a:	2b00      	cmp	r3, #0
 800999c:	d009      	beq.n	80099b2 <dir_find+0x98>
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	2b0f      	cmp	r3, #15
 80099a2:	d006      	beq.n	80099b2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80099a4:	23ff      	movs	r3, #255	; 0xff
 80099a6:	757b      	strb	r3, [r7, #21]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099ae:	631a      	str	r2, [r3, #48]	; 0x30
 80099b0:	e05e      	b.n	8009a70 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	2b0f      	cmp	r3, #15
 80099b6:	d136      	bne.n	8009a26 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80099be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d154      	bne.n	8009a70 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80099c6:	7dbb      	ldrb	r3, [r7, #22]
 80099c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00d      	beq.n	80099ec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a1b      	ldr	r3, [r3, #32]
 80099d4:	7b5b      	ldrb	r3, [r3, #13]
 80099d6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80099d8:	7dbb      	ldrb	r3, [r7, #22]
 80099da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099de:	75bb      	strb	r3, [r7, #22]
 80099e0:	7dbb      	ldrb	r3, [r7, #22]
 80099e2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	695a      	ldr	r2, [r3, #20]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80099ec:	7dba      	ldrb	r2, [r7, #22]
 80099ee:	7d7b      	ldrb	r3, [r7, #21]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d115      	bne.n	8009a20 <dir_find+0x106>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	330d      	adds	r3, #13
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	7d3a      	ldrb	r2, [r7, #20]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d10e      	bne.n	8009a20 <dir_find+0x106>
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	691a      	ldr	r2, [r3, #16]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7ff fdfb 	bl	8009608 <cmp_lfn>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <dir_find+0x106>
 8009a18:	7d7b      	ldrb	r3, [r7, #21]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	e000      	b.n	8009a22 <dir_find+0x108>
 8009a20:	23ff      	movs	r3, #255	; 0xff
 8009a22:	757b      	strb	r3, [r7, #21]
 8009a24:	e024      	b.n	8009a70 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009a26:	7d7b      	ldrb	r3, [r7, #21]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d109      	bne.n	8009a40 <dir_find+0x126>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7ff ff51 	bl	80098d8 <sum_sfn>
 8009a36:	4603      	mov	r3, r0
 8009a38:	461a      	mov	r2, r3
 8009a3a:	7d3b      	ldrb	r3, [r7, #20]
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d024      	beq.n	8009a8a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <dir_find+0x14a>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a18      	ldr	r0, [r3, #32]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3324      	adds	r3, #36	; 0x24
 8009a56:	220b      	movs	r2, #11
 8009a58:	4619      	mov	r1, r3
 8009a5a:	f7fe fde9 	bl	8008630 <mem_cmp>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d014      	beq.n	8009a8e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009a64:	23ff      	movs	r3, #255	; 0xff
 8009a66:	757b      	strb	r3, [r7, #21]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a6e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009a70:	2100      	movs	r1, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff fc6b 	bl	800934e <dir_next>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f43f af65 	beq.w	800994e <dir_find+0x34>
 8009a84:	e004      	b.n	8009a90 <dir_find+0x176>
		if (res != FR_OK) break;
 8009a86:	bf00      	nop
 8009a88:	e002      	b.n	8009a90 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009a8a:	bf00      	nop
 8009a8c:	e000      	b.n	8009a90 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009a8e:	bf00      	nop

	return res;
 8009a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08c      	sub	sp, #48	; 0x30
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ab0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <dir_register+0x20>
 8009ab8:	2306      	movs	r3, #6
 8009aba:	e0e0      	b.n	8009c7e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009abc:	2300      	movs	r3, #0
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
 8009ac0:	e002      	b.n	8009ac8 <dir_register+0x2c>
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	691a      	ldr	r2, [r3, #16]
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	4413      	add	r3, r2
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1f4      	bne.n	8009ac2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009ade:	f107 030c 	add.w	r3, r7, #12
 8009ae2:	220c      	movs	r2, #12
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fe fd67 	bl	80085b8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009aea:	7dfb      	ldrb	r3, [r7, #23]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d032      	beq.n	8009b5a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2240      	movs	r2, #64	; 0x40
 8009af8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009afc:	2301      	movs	r3, #1
 8009afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b00:	e016      	b.n	8009b30 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	f107 010c 	add.w	r1, r7, #12
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	f7ff fe51 	bl	80097b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff feff 	bl	800991a <dir_find>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	2b63      	cmp	r3, #99	; 0x63
 8009b34:	d9e5      	bls.n	8009b02 <dir_register+0x66>
 8009b36:	e000      	b.n	8009b3a <dir_register+0x9e>
			if (res != FR_OK) break;
 8009b38:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	2b64      	cmp	r3, #100	; 0x64
 8009b3e:	d101      	bne.n	8009b44 <dir_register+0xa8>
 8009b40:	2307      	movs	r3, #7
 8009b42:	e09c      	b.n	8009c7e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009b44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b48:	2b04      	cmp	r3, #4
 8009b4a:	d002      	beq.n	8009b52 <dir_register+0xb6>
 8009b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b50:	e095      	b.n	8009c7e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009b52:	7dfa      	ldrb	r2, [r7, #23]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	f003 0302 	and.w	r3, r3, #2
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d007      	beq.n	8009b74 <dir_register+0xd8>
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	330c      	adds	r3, #12
 8009b68:	4a47      	ldr	r2, [pc, #284]	; (8009c88 <dir_register+0x1ec>)
 8009b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b6e:	089b      	lsrs	r3, r3, #2
 8009b70:	3301      	adds	r3, #1
 8009b72:	e000      	b.n	8009b76 <dir_register+0xda>
 8009b74:	2301      	movs	r3, #1
 8009b76:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009b78:	6a39      	ldr	r1, [r7, #32]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff fcbd 	bl	80094fa <dir_alloc>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d148      	bne.n	8009c20 <dir_register+0x184>
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	3b01      	subs	r3, #1
 8009b92:	623b      	str	r3, [r7, #32]
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d042      	beq.n	8009c20 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	695a      	ldr	r2, [r3, #20]
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	015b      	lsls	r3, r3, #5
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff fb48 	bl	800923c <dir_sdi>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d132      	bne.n	8009c20 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3324      	adds	r3, #36	; 0x24
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7ff fe8a 	bl	80098d8 <sum_sfn>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	69f8      	ldr	r0, [r7, #28]
 8009bd0:	f7fe ff52 	bl	8008a78 <move_window>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d11d      	bne.n	8009c1e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	6918      	ldr	r0, [r3, #16]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a19      	ldr	r1, [r3, #32]
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	7efb      	ldrb	r3, [r7, #27]
 8009bf0:	f7ff fd7a 	bl	80096e8 <put_lfn>
				fs->wflag = 1;
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff fba6 	bl	800934e <dir_next>
 8009c02:	4603      	mov	r3, r0
 8009c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d107      	bne.n	8009c20 <dir_register+0x184>
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	623b      	str	r3, [r7, #32]
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1d5      	bne.n	8009bc8 <dir_register+0x12c>
 8009c1c:	e000      	b.n	8009c20 <dir_register+0x184>
				if (res != FR_OK) break;
 8009c1e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d128      	bne.n	8009c7a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	69f8      	ldr	r0, [r7, #28]
 8009c30:	f7fe ff22 	bl	8008a78 <move_window>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d11b      	bne.n	8009c7a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	2220      	movs	r2, #32
 8009c48:	2100      	movs	r1, #0
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fcd5 	bl	80085fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a18      	ldr	r0, [r3, #32]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3324      	adds	r3, #36	; 0x24
 8009c58:	220b      	movs	r2, #11
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	f7fe fcac 	bl	80085b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	330c      	adds	r3, #12
 8009c6c:	f002 0218 	and.w	r2, r2, #24
 8009c70:	b2d2      	uxtb	r2, r2
 8009c72:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	2201      	movs	r2, #1
 8009c78:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3730      	adds	r7, #48	; 0x30
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	4ec4ec4f 	.word	0x4ec4ec4f

08009c8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08a      	sub	sp, #40	; 0x28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	613b      	str	r3, [r7, #16]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	1c5a      	adds	r2, r3, #1
 8009cb0:	61ba      	str	r2, [r7, #24]
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009cba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cbc:	2b1f      	cmp	r3, #31
 8009cbe:	d940      	bls.n	8009d42 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009cc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cc2:	2b2f      	cmp	r3, #47	; 0x2f
 8009cc4:	d006      	beq.n	8009cd4 <create_name+0x48>
 8009cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cc8:	2b5c      	cmp	r3, #92	; 0x5c
 8009cca:	d110      	bne.n	8009cee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009ccc:	e002      	b.n	8009cd4 <create_name+0x48>
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	61bb      	str	r3, [r7, #24]
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	4413      	add	r3, r2
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b2f      	cmp	r3, #47	; 0x2f
 8009cde:	d0f6      	beq.n	8009cce <create_name+0x42>
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b5c      	cmp	r3, #92	; 0x5c
 8009cea:	d0f0      	beq.n	8009cce <create_name+0x42>
			break;
 8009cec:	e02a      	b.n	8009d44 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2bfe      	cmp	r3, #254	; 0xfe
 8009cf2:	d901      	bls.n	8009cf8 <create_name+0x6c>
 8009cf4:	2306      	movs	r3, #6
 8009cf6:	e177      	b.n	8009fe8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d00:	2101      	movs	r1, #1
 8009d02:	4618      	mov	r0, r3
 8009d04:	f001 fd92 	bl	800b82c <ff_convert>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009d0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <create_name+0x8a>
 8009d12:	2306      	movs	r3, #6
 8009d14:	e168      	b.n	8009fe8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d18:	2b7f      	cmp	r3, #127	; 0x7f
 8009d1a:	d809      	bhi.n	8009d30 <create_name+0xa4>
 8009d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d1e:	4619      	mov	r1, r3
 8009d20:	48b3      	ldr	r0, [pc, #716]	; (8009ff0 <create_name+0x364>)
 8009d22:	f7fe fcac 	bl	800867e <chk_chr>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <create_name+0xa4>
 8009d2c:	2306      	movs	r3, #6
 8009d2e:	e15b      	b.n	8009fe8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	1c5a      	adds	r2, r3, #1
 8009d34:	617a      	str	r2, [r7, #20]
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d3e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009d40:	e7b4      	b.n	8009cac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009d42:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	441a      	add	r2, r3
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d50:	2b1f      	cmp	r3, #31
 8009d52:	d801      	bhi.n	8009d58 <create_name+0xcc>
 8009d54:	2304      	movs	r3, #4
 8009d56:	e000      	b.n	8009d5a <create_name+0xce>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009d5e:	e011      	b.n	8009d84 <create_name+0xf8>
		w = lfn[di - 1];
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009d66:	4413      	add	r3, r2
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	881b      	ldrh	r3, [r3, #0]
 8009d70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d002      	beq.n	8009d7e <create_name+0xf2>
 8009d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d7a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d7c:	d106      	bne.n	8009d8c <create_name+0x100>
		di--;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	3b01      	subs	r3, #1
 8009d82:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1ea      	bne.n	8009d60 <create_name+0xd4>
 8009d8a:	e000      	b.n	8009d8e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009d8c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	005b      	lsls	r3, r3, #1
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4413      	add	r3, r2
 8009d96:	2200      	movs	r2, #0
 8009d98:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <create_name+0x118>
 8009da0:	2306      	movs	r3, #6
 8009da2:	e121      	b.n	8009fe8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	3324      	adds	r3, #36	; 0x24
 8009da8:	220b      	movs	r2, #11
 8009daa:	2120      	movs	r1, #32
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fe fc24 	bl	80085fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009db2:	2300      	movs	r3, #0
 8009db4:	61bb      	str	r3, [r7, #24]
 8009db6:	e002      	b.n	8009dbe <create_name+0x132>
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	61bb      	str	r3, [r7, #24]
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	2b20      	cmp	r3, #32
 8009dca:	d0f5      	beq.n	8009db8 <create_name+0x12c>
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8009dd8:	d0ee      	beq.n	8009db8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d009      	beq.n	8009df4 <create_name+0x168>
 8009de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de4:	f043 0303 	orr.w	r3, r3, #3
 8009de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009dec:	e002      	b.n	8009df4 <create_name+0x168>
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d009      	beq.n	8009e0e <create_name+0x182>
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009e00:	4413      	add	r3, r2
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	4413      	add	r3, r2
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e0c:	d1ef      	bne.n	8009dee <create_name+0x162>

	i = b = 0; ni = 8;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e14:	2300      	movs	r3, #0
 8009e16:	623b      	str	r3, [r7, #32]
 8009e18:	2308      	movs	r3, #8
 8009e1a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	61ba      	str	r2, [r7, #24]
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 8090 	beq.w	8009f54 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e36:	2b20      	cmp	r3, #32
 8009e38:	d006      	beq.n	8009e48 <create_name+0x1bc>
 8009e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e3e:	d10a      	bne.n	8009e56 <create_name+0x1ca>
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d006      	beq.n	8009e56 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e4c:	f043 0303 	orr.w	r3, r3, #3
 8009e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e54:	e07d      	b.n	8009f52 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009e56:	6a3a      	ldr	r2, [r7, #32]
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d203      	bcs.n	8009e66 <create_name+0x1da>
 8009e5e:	69ba      	ldr	r2, [r7, #24]
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d123      	bne.n	8009eae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	2b0b      	cmp	r3, #11
 8009e6a:	d106      	bne.n	8009e7a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e70:	f043 0303 	orr.w	r3, r3, #3
 8009e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e78:	e06f      	b.n	8009f5a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009e7a:	69ba      	ldr	r2, [r7, #24]
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d005      	beq.n	8009e8e <create_name+0x202>
 8009e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e86:	f043 0303 	orr.w	r3, r3, #3
 8009e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d860      	bhi.n	8009f58 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	61bb      	str	r3, [r7, #24]
 8009e9a:	2308      	movs	r3, #8
 8009e9c:	623b      	str	r3, [r7, #32]
 8009e9e:	230b      	movs	r3, #11
 8009ea0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009ea2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009eac:	e051      	b.n	8009f52 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eb0:	2b7f      	cmp	r3, #127	; 0x7f
 8009eb2:	d914      	bls.n	8009ede <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f001 fcb7 	bl	800b82c <ff_convert>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009ec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d004      	beq.n	8009ed2 <create_name+0x246>
 8009ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eca:	3b80      	subs	r3, #128	; 0x80
 8009ecc:	4a49      	ldr	r2, [pc, #292]	; (8009ff4 <create_name+0x368>)
 8009ece:	5cd3      	ldrb	r3, [r2, r3]
 8009ed0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ed6:	f043 0302 	orr.w	r3, r3, #2
 8009eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d007      	beq.n	8009ef4 <create_name+0x268>
 8009ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4843      	ldr	r0, [pc, #268]	; (8009ff8 <create_name+0x36c>)
 8009eea:	f7fe fbc8 	bl	800867e <chk_chr>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d008      	beq.n	8009f06 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009ef4:	235f      	movs	r3, #95	; 0x5f
 8009ef6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009efc:	f043 0303 	orr.w	r3, r3, #3
 8009f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f04:	e01b      	b.n	8009f3e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f08:	2b40      	cmp	r3, #64	; 0x40
 8009f0a:	d909      	bls.n	8009f20 <create_name+0x294>
 8009f0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f0e:	2b5a      	cmp	r3, #90	; 0x5a
 8009f10:	d806      	bhi.n	8009f20 <create_name+0x294>
					b |= 2;
 8009f12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f16:	f043 0302 	orr.w	r3, r3, #2
 8009f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f1e:	e00e      	b.n	8009f3e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009f20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f22:	2b60      	cmp	r3, #96	; 0x60
 8009f24:	d90b      	bls.n	8009f3e <create_name+0x2b2>
 8009f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f28:	2b7a      	cmp	r3, #122	; 0x7a
 8009f2a:	d808      	bhi.n	8009f3e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f30:	f043 0301 	orr.w	r3, r3, #1
 8009f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f3a:	3b20      	subs	r3, #32
 8009f3c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	623a      	str	r2, [r7, #32]
 8009f44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f46:	b2d1      	uxtb	r1, r2
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	460a      	mov	r2, r1
 8009f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009f52:	e763      	b.n	8009e1c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009f54:	bf00      	nop
 8009f56:	e000      	b.n	8009f5a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009f58:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f60:	2be5      	cmp	r3, #229	; 0xe5
 8009f62:	d103      	bne.n	8009f6c <create_name+0x2e0>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2205      	movs	r2, #5
 8009f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	2b08      	cmp	r3, #8
 8009f70:	d104      	bne.n	8009f7c <create_name+0x2f0>
 8009f72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f80:	f003 030c 	and.w	r3, r3, #12
 8009f84:	2b0c      	cmp	r3, #12
 8009f86:	d005      	beq.n	8009f94 <create_name+0x308>
 8009f88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f8c:	f003 0303 	and.w	r3, r3, #3
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	d105      	bne.n	8009fa0 <create_name+0x314>
 8009f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f98:	f043 0302 	orr.w	r3, r3, #2
 8009f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fa4:	f003 0302 	and.w	r3, r3, #2
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d117      	bne.n	8009fdc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009fac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fb0:	f003 0303 	and.w	r3, r3, #3
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d105      	bne.n	8009fc4 <create_name+0x338>
 8009fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fbc:	f043 0310 	orr.w	r3, r3, #16
 8009fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009fc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fc8:	f003 030c 	and.w	r3, r3, #12
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	d105      	bne.n	8009fdc <create_name+0x350>
 8009fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd4:	f043 0308 	orr.w	r3, r3, #8
 8009fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009fe2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009fe6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3728      	adds	r7, #40	; 0x28
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	08010360 	.word	0x08010360
 8009ff4:	080103e4 	.word	0x080103e4
 8009ff8:	0801036c 	.word	0x0801036c

08009ffc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a010:	e002      	b.n	800a018 <follow_path+0x1c>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	3301      	adds	r3, #1
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b2f      	cmp	r3, #47	; 0x2f
 800a01e:	d0f8      	beq.n	800a012 <follow_path+0x16>
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b5c      	cmp	r3, #92	; 0x5c
 800a026:	d0f4      	beq.n	800a012 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	2200      	movs	r2, #0
 800a02c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b1f      	cmp	r3, #31
 800a034:	d80a      	bhi.n	800a04c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2280      	movs	r2, #128	; 0x80
 800a03a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a03e:	2100      	movs	r1, #0
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7ff f8fb 	bl	800923c <dir_sdi>
 800a046:	4603      	mov	r3, r0
 800a048:	75fb      	strb	r3, [r7, #23]
 800a04a:	e048      	b.n	800a0de <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a04c:	463b      	mov	r3, r7
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff fe1b 	bl	8009c8c <create_name>
 800a056:	4603      	mov	r3, r0
 800a058:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d139      	bne.n	800a0d4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff fc5a 	bl	800991a <dir_find>
 800a066:	4603      	mov	r3, r0
 800a068:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a070:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00a      	beq.n	800a08e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d12c      	bne.n	800a0d8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a07e:	7afb      	ldrb	r3, [r7, #11]
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b00      	cmp	r3, #0
 800a086:	d127      	bne.n	800a0d8 <follow_path+0xdc>
 800a088:	2305      	movs	r3, #5
 800a08a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a08c:	e024      	b.n	800a0d8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a08e:	7afb      	ldrb	r3, [r7, #11]
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d121      	bne.n	800a0dc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	799b      	ldrb	r3, [r3, #6]
 800a09c:	f003 0310 	and.w	r3, r3, #16
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d102      	bne.n	800a0aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a0a4:	2305      	movs	r3, #5
 800a0a6:	75fb      	strb	r3, [r7, #23]
 800a0a8:	e019      	b.n	800a0de <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	8992      	ldrh	r2, [r2, #12]
 800a0b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0bc:	fb02 f200 	mul.w	r2, r2, r0
 800a0c0:	1a9b      	subs	r3, r3, r2
 800a0c2:	440b      	add	r3, r1
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f7ff fa5e 	bl	8009588 <ld_clust>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0d2:	e7bb      	b.n	800a04c <follow_path+0x50>
			if (res != FR_OK) break;
 800a0d4:	bf00      	nop
 800a0d6:	e002      	b.n	800a0de <follow_path+0xe2>
				break;
 800a0d8:	bf00      	nop
 800a0da:	e000      	b.n	800a0de <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0dc:	bf00      	nop
			}
		}
	}

	return res;
 800a0de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a0f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d031      	beq.n	800a162 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	e002      	b.n	800a10c <get_ldnumber+0x24>
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	3301      	adds	r3, #1
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b1f      	cmp	r3, #31
 800a112:	d903      	bls.n	800a11c <get_ldnumber+0x34>
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b3a      	cmp	r3, #58	; 0x3a
 800a11a:	d1f4      	bne.n	800a106 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b3a      	cmp	r3, #58	; 0x3a
 800a122:	d11c      	bne.n	800a15e <get_ldnumber+0x76>
			tp = *path;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	1c5a      	adds	r2, r3, #1
 800a12e:	60fa      	str	r2, [r7, #12]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	3b30      	subs	r3, #48	; 0x30
 800a134:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2b09      	cmp	r3, #9
 800a13a:	d80e      	bhi.n	800a15a <get_ldnumber+0x72>
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	429a      	cmp	r2, r3
 800a142:	d10a      	bne.n	800a15a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d107      	bne.n	800a15a <get_ldnumber+0x72>
					vol = (int)i;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	3301      	adds	r3, #1
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	e002      	b.n	800a164 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a15e:	2300      	movs	r3, #0
 800a160:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a162:	693b      	ldr	r3, [r7, #16]
}
 800a164:	4618      	mov	r0, r3
 800a166:	371c      	adds	r7, #28
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	70da      	strb	r2, [r3, #3]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a186:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7fe fc74 	bl	8008a78 <move_window>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <check_fs+0x2a>
 800a196:	2304      	movs	r3, #4
 800a198:	e038      	b.n	800a20c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	333c      	adds	r3, #60	; 0x3c
 800a19e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe f986 	bl	80084b4 <ld_word>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d001      	beq.n	800a1b8 <check_fs+0x48>
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e029      	b.n	800a20c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1be:	2be9      	cmp	r3, #233	; 0xe9
 800a1c0:	d009      	beq.n	800a1d6 <check_fs+0x66>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1c8:	2beb      	cmp	r3, #235	; 0xeb
 800a1ca:	d11e      	bne.n	800a20a <check_fs+0x9a>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1d2:	2b90      	cmp	r3, #144	; 0x90
 800a1d4:	d119      	bne.n	800a20a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	333c      	adds	r3, #60	; 0x3c
 800a1da:	3336      	adds	r3, #54	; 0x36
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe f981 	bl	80084e4 <ld_dword>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a1e8:	4a0a      	ldr	r2, [pc, #40]	; (800a214 <check_fs+0xa4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d101      	bne.n	800a1f2 <check_fs+0x82>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e00c      	b.n	800a20c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	333c      	adds	r3, #60	; 0x3c
 800a1f6:	3352      	adds	r3, #82	; 0x52
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe f973 	bl	80084e4 <ld_dword>
 800a1fe:	4603      	mov	r3, r0
 800a200:	4a05      	ldr	r2, [pc, #20]	; (800a218 <check_fs+0xa8>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d101      	bne.n	800a20a <check_fs+0x9a>
 800a206:	2300      	movs	r3, #0
 800a208:	e000      	b.n	800a20c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a20a:	2302      	movs	r3, #2
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	00544146 	.word	0x00544146
 800a218:	33544146 	.word	0x33544146

0800a21c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b096      	sub	sp, #88	; 0x58
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2200      	movs	r2, #0
 800a22e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f7ff ff59 	bl	800a0e8 <get_ldnumber>
 800a236:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	da01      	bge.n	800a242 <find_volume+0x26>
 800a23e:	230b      	movs	r3, #11
 800a240:	e26c      	b.n	800a71c <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a242:	4aa4      	ldr	r2, [pc, #656]	; (800a4d4 <find_volume+0x2b8>)
 800a244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a24a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <find_volume+0x3a>
 800a252:	230c      	movs	r3, #12
 800a254:	e262      	b.n	800a71c <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800a256:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a258:	f7fe fa2c 	bl	80086b4 <lock_fs>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <find_volume+0x4a>
 800a262:	230f      	movs	r3, #15
 800a264:	e25a      	b.n	800a71c <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a26a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a26c:	79fb      	ldrb	r3, [r7, #7]
 800a26e:	f023 0301 	bic.w	r3, r3, #1
 800a272:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01a      	beq.n	800a2b2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	785b      	ldrb	r3, [r3, #1]
 800a280:	4618      	mov	r0, r3
 800a282:	f7fe f879 	bl	8008378 <disk_status>
 800a286:	4603      	mov	r3, r0
 800a288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a28c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10c      	bne.n	800a2b2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d007      	beq.n	800a2ae <find_volume+0x92>
 800a29e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2a2:	f003 0304 	and.w	r3, r3, #4
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a2aa:	230a      	movs	r3, #10
 800a2ac:	e236      	b.n	800a71c <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e234      	b.n	800a71c <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	785b      	ldrb	r3, [r3, #1]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe f871 	bl	80083ac <disk_initialize>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a2d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e21d      	b.n	800a71c <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d007      	beq.n	800a2f6 <find_volume+0xda>
 800a2e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2ea:	f003 0304 	and.w	r3, r3, #4
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a2f2:	230a      	movs	r3, #10
 800a2f4:	e212      	b.n	800a71c <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f8:	7858      	ldrb	r0, [r3, #1]
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	330c      	adds	r3, #12
 800a2fe:	461a      	mov	r2, r3
 800a300:	2102      	movs	r1, #2
 800a302:	f7fe f8b9 	bl	8008478 <disk_ioctl>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <find_volume+0xf4>
 800a30c:	2301      	movs	r3, #1
 800a30e:	e205      	b.n	800a71c <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a312:	899b      	ldrh	r3, [r3, #12]
 800a314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a318:	d80d      	bhi.n	800a336 <find_volume+0x11a>
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	899b      	ldrh	r3, [r3, #12]
 800a31e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a322:	d308      	bcc.n	800a336 <find_volume+0x11a>
 800a324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a326:	899b      	ldrh	r3, [r3, #12]
 800a328:	461a      	mov	r2, r3
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	899b      	ldrh	r3, [r3, #12]
 800a32e:	3b01      	subs	r3, #1
 800a330:	4013      	ands	r3, r2
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <find_volume+0x11e>
 800a336:	2301      	movs	r3, #1
 800a338:	e1f0      	b.n	800a71c <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a33e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a342:	f7ff ff15 	bl	800a170 <check_fs>
 800a346:	4603      	mov	r3, r0
 800a348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a34c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a350:	2b02      	cmp	r3, #2
 800a352:	d14b      	bne.n	800a3ec <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a354:	2300      	movs	r3, #0
 800a356:	643b      	str	r3, [r7, #64]	; 0x40
 800a358:	e01f      	b.n	800a39a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a362:	011b      	lsls	r3, r3, #4
 800a364:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a368:	4413      	add	r3, r2
 800a36a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36e:	3304      	adds	r3, #4
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d006      	beq.n	800a384 <find_volume+0x168>
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	3308      	adds	r3, #8
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fe f8b2 	bl	80084e4 <ld_dword>
 800a380:	4602      	mov	r2, r0
 800a382:	e000      	b.n	800a386 <find_volume+0x16a>
 800a384:	2200      	movs	r2, #0
 800a386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a38e:	440b      	add	r3, r1
 800a390:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a396:	3301      	adds	r3, #1
 800a398:	643b      	str	r3, [r7, #64]	; 0x40
 800a39a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d9dc      	bls.n	800a35a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <find_volume+0x194>
 800a3aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a3be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a3c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d005      	beq.n	800a3d2 <find_volume+0x1b6>
 800a3c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3ca:	f7ff fed1 	bl	800a170 <check_fs>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	e000      	b.n	800a3d4 <find_volume+0x1b8>
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a3d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d905      	bls.n	800a3ec <find_volume+0x1d0>
 800a3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	643b      	str	r3, [r7, #64]	; 0x40
 800a3e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d9e1      	bls.n	800a3b0 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a3ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3f0:	2b04      	cmp	r3, #4
 800a3f2:	d101      	bne.n	800a3f8 <find_volume+0x1dc>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e191      	b.n	800a71c <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a3f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d901      	bls.n	800a404 <find_volume+0x1e8>
 800a400:	230d      	movs	r3, #13
 800a402:	e18b      	b.n	800a71c <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	333c      	adds	r3, #60	; 0x3c
 800a408:	330b      	adds	r3, #11
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fe f852 	bl	80084b4 <ld_word>
 800a410:	4603      	mov	r3, r0
 800a412:	461a      	mov	r2, r3
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	899b      	ldrh	r3, [r3, #12]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d001      	beq.n	800a420 <find_volume+0x204>
 800a41c:	230d      	movs	r3, #13
 800a41e:	e17d      	b.n	800a71c <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	333c      	adds	r3, #60	; 0x3c
 800a424:	3316      	adds	r3, #22
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe f844 	bl	80084b4 <ld_word>
 800a42c:	4603      	mov	r3, r0
 800a42e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a432:	2b00      	cmp	r3, #0
 800a434:	d106      	bne.n	800a444 <find_volume+0x228>
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	333c      	adds	r3, #60	; 0x3c
 800a43a:	3324      	adds	r3, #36	; 0x24
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fe f851 	bl	80084e4 <ld_dword>
 800a442:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a448:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	789b      	ldrb	r3, [r3, #2]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d005      	beq.n	800a468 <find_volume+0x24c>
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	789b      	ldrb	r3, [r3, #2]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d001      	beq.n	800a468 <find_volume+0x24c>
 800a464:	230d      	movs	r3, #13
 800a466:	e159      	b.n	800a71c <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46a:	789b      	ldrb	r3, [r3, #2]
 800a46c:	461a      	mov	r2, r3
 800a46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a470:	fb02 f303 	mul.w	r3, r2, r3
 800a474:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a478:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a484:	895b      	ldrh	r3, [r3, #10]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d008      	beq.n	800a49c <find_volume+0x280>
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	895b      	ldrh	r3, [r3, #10]
 800a48e:	461a      	mov	r2, r3
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	895b      	ldrh	r3, [r3, #10]
 800a494:	3b01      	subs	r3, #1
 800a496:	4013      	ands	r3, r2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <find_volume+0x284>
 800a49c:	230d      	movs	r3, #13
 800a49e:	e13d      	b.n	800a71c <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	333c      	adds	r3, #60	; 0x3c
 800a4a4:	3311      	adds	r3, #17
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe f804 	bl	80084b4 <ld_word>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	891b      	ldrh	r3, [r3, #8]
 800a4b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4ba:	8992      	ldrh	r2, [r2, #12]
 800a4bc:	0952      	lsrs	r2, r2, #5
 800a4be:	b292      	uxth	r2, r2
 800a4c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4c4:	fb02 f201 	mul.w	r2, r2, r1
 800a4c8:	1a9b      	subs	r3, r3, r2
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d003      	beq.n	800a4d8 <find_volume+0x2bc>
 800a4d0:	230d      	movs	r3, #13
 800a4d2:	e123      	b.n	800a71c <find_volume+0x500>
 800a4d4:	200005b4 	.word	0x200005b4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	333c      	adds	r3, #60	; 0x3c
 800a4dc:	3313      	adds	r3, #19
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fd ffe8 	bl	80084b4 <ld_word>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a4e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <find_volume+0x2e0>
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f0:	333c      	adds	r3, #60	; 0x3c
 800a4f2:	3320      	adds	r3, #32
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fd fff5 	bl	80084e4 <ld_dword>
 800a4fa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	333c      	adds	r3, #60	; 0x3c
 800a500:	330e      	adds	r3, #14
 800a502:	4618      	mov	r0, r3
 800a504:	f7fd ffd6 	bl	80084b4 <ld_word>
 800a508:	4603      	mov	r3, r0
 800a50a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a50c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <find_volume+0x2fa>
 800a512:	230d      	movs	r3, #13
 800a514:	e102      	b.n	800a71c <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a516:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a51a:	4413      	add	r3, r2
 800a51c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a51e:	8911      	ldrh	r1, [r2, #8]
 800a520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a522:	8992      	ldrh	r2, [r2, #12]
 800a524:	0952      	lsrs	r2, r2, #5
 800a526:	b292      	uxth	r2, r2
 800a528:	fbb1 f2f2 	udiv	r2, r1, r2
 800a52c:	b292      	uxth	r2, r2
 800a52e:	4413      	add	r3, r2
 800a530:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	429a      	cmp	r2, r3
 800a538:	d201      	bcs.n	800a53e <find_volume+0x322>
 800a53a:	230d      	movs	r3, #13
 800a53c:	e0ee      	b.n	800a71c <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a53e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a546:	8952      	ldrh	r2, [r2, #10]
 800a548:	fbb3 f3f2 	udiv	r3, r3, r2
 800a54c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <find_volume+0x33c>
 800a554:	230d      	movs	r3, #13
 800a556:	e0e1      	b.n	800a71c <find_volume+0x500>
		fmt = FS_FAT32;
 800a558:	2303      	movs	r3, #3
 800a55a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a560:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a564:	4293      	cmp	r3, r2
 800a566:	d802      	bhi.n	800a56e <find_volume+0x352>
 800a568:	2302      	movs	r3, #2
 800a56a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a574:	4293      	cmp	r3, r2
 800a576:	d802      	bhi.n	800a57e <find_volume+0x362>
 800a578:	2301      	movs	r3, #1
 800a57a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	1c9a      	adds	r2, r3, #2
 800a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a584:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a58a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a58c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a590:	441a      	add	r2, r3
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800a596:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	441a      	add	r2, r3
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59e:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800a5a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d11e      	bne.n	800a5e6 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	333c      	adds	r3, #60	; 0x3c
 800a5ac:	332a      	adds	r3, #42	; 0x2a
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fd ff80 	bl	80084b4 <ld_word>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d001      	beq.n	800a5be <find_volume+0x3a2>
 800a5ba:	230d      	movs	r3, #13
 800a5bc:	e0ae      	b.n	800a71c <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c0:	891b      	ldrh	r3, [r3, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <find_volume+0x3ae>
 800a5c6:	230d      	movs	r3, #13
 800a5c8:	e0a8      	b.n	800a71c <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5cc:	333c      	adds	r3, #60	; 0x3c
 800a5ce:	332c      	adds	r3, #44	; 0x2c
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fd ff87 	bl	80084e4 <ld_dword>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a5e4:	e01f      	b.n	800a626 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	891b      	ldrh	r3, [r3, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <find_volume+0x3d6>
 800a5ee:	230d      	movs	r3, #13
 800a5f0:	e094      	b.n	800a71c <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5f8:	441a      	add	r2, r3
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fc:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a5fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a602:	2b02      	cmp	r3, #2
 800a604:	d103      	bne.n	800a60e <find_volume+0x3f2>
 800a606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	e00a      	b.n	800a624 <find_volume+0x408>
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	6a1a      	ldr	r2, [r3, #32]
 800a612:	4613      	mov	r3, r2
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4413      	add	r3, r2
 800a618:	085a      	lsrs	r2, r3, #1
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a624:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62c:	899b      	ldrh	r3, [r3, #12]
 800a62e:	4619      	mov	r1, r3
 800a630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a632:	440b      	add	r3, r1
 800a634:	3b01      	subs	r3, #1
 800a636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a638:	8989      	ldrh	r1, [r1, #12]
 800a63a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a63e:	429a      	cmp	r2, r3
 800a640:	d201      	bcs.n	800a646 <find_volume+0x42a>
 800a642:	230d      	movs	r3, #13
 800a644:	e06a      	b.n	800a71c <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a64c:	61da      	str	r2, [r3, #28]
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	69da      	ldr	r2, [r3, #28]
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	2280      	movs	r2, #128	; 0x80
 800a65a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a65c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a660:	2b03      	cmp	r3, #3
 800a662:	d149      	bne.n	800a6f8 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	333c      	adds	r3, #60	; 0x3c
 800a668:	3330      	adds	r3, #48	; 0x30
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fd ff22 	bl	80084b4 <ld_word>
 800a670:	4603      	mov	r3, r0
 800a672:	2b01      	cmp	r3, #1
 800a674:	d140      	bne.n	800a6f8 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a678:	3301      	adds	r3, #1
 800a67a:	4619      	mov	r1, r3
 800a67c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a67e:	f7fe f9fb 	bl	8008a78 <move_window>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d137      	bne.n	800a6f8 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	2200      	movs	r2, #0
 800a68c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	333c      	adds	r3, #60	; 0x3c
 800a692:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a696:	4618      	mov	r0, r3
 800a698:	f7fd ff0c 	bl	80084b4 <ld_word>
 800a69c:	4603      	mov	r3, r0
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d127      	bne.n	800a6f8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6aa:	333c      	adds	r3, #60	; 0x3c
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fd ff19 	bl	80084e4 <ld_dword>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	4a1b      	ldr	r2, [pc, #108]	; (800a724 <find_volume+0x508>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d11e      	bne.n	800a6f8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	333c      	adds	r3, #60	; 0x3c
 800a6be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fd ff0e 	bl	80084e4 <ld_dword>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	4a17      	ldr	r2, [pc, #92]	; (800a728 <find_volume+0x50c>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d113      	bne.n	800a6f8 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	333c      	adds	r3, #60	; 0x3c
 800a6d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fd ff03 	bl	80084e4 <ld_dword>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e2:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	333c      	adds	r3, #60	; 0x3c
 800a6e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fd fef9 	bl	80084e4 <ld_dword>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f6:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a6fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a700:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <find_volume+0x510>)
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	3301      	adds	r3, #1
 800a706:	b29a      	uxth	r2, r3
 800a708:	4b08      	ldr	r3, [pc, #32]	; (800a72c <find_volume+0x510>)
 800a70a:	801a      	strh	r2, [r3, #0]
 800a70c:	4b07      	ldr	r3, [pc, #28]	; (800a72c <find_volume+0x510>)
 800a70e:	881a      	ldrh	r2, [r3, #0]
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a716:	f7fe f947 	bl	80089a8 <clear_lock>
#endif
	return FR_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3758      	adds	r7, #88	; 0x58
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	41615252 	.word	0x41615252
 800a728:	61417272 	.word	0x61417272
 800a72c:	200005b8 	.word	0x200005b8

0800a730 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a73a:	2309      	movs	r3, #9
 800a73c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d02e      	beq.n	800a7a2 <validate+0x72>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d02a      	beq.n	800a7a2 <validate+0x72>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d025      	beq.n	800a7a2 <validate+0x72>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	889a      	ldrh	r2, [r3, #4]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	88db      	ldrh	r3, [r3, #6]
 800a760:	429a      	cmp	r2, r3
 800a762:	d11e      	bne.n	800a7a2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fd ffa3 	bl	80086b4 <lock_fs>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d014      	beq.n	800a79e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	785b      	ldrb	r3, [r3, #1]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fd fdfc 	bl	8008378 <disk_status>
 800a780:	4603      	mov	r3, r0
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	d102      	bne.n	800a790 <validate+0x60>
				res = FR_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	73fb      	strb	r3, [r7, #15]
 800a78e:	e008      	b.n	800a7a2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2100      	movs	r1, #0
 800a796:	4618      	mov	r0, r3
 800a798:	f7fd ffa2 	bl	80086e0 <unlock_fs>
 800a79c:	e001      	b.n	800a7a2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a79e:	230f      	movs	r3, #15
 800a7a0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d102      	bne.n	800a7ae <validate+0x7e>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	e000      	b.n	800a7b0 <validate+0x80>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	6013      	str	r3, [r2, #0]
	return res;
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b088      	sub	sp, #32
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a7d2:	f107 0310 	add.w	r3, r7, #16
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7ff fc86 	bl	800a0e8 <get_ldnumber>
 800a7dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	da01      	bge.n	800a7e8 <f_mount+0x28>
 800a7e4:	230b      	movs	r3, #11
 800a7e6:	e048      	b.n	800a87a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a7e8:	4a26      	ldr	r2, [pc, #152]	; (800a884 <f_mount+0xc4>)
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00f      	beq.n	800a818 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a7f8:	69b8      	ldr	r0, [r7, #24]
 800a7fa:	f7fe f8d5 	bl	80089a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	4618      	mov	r0, r3
 800a804:	f001 f8f8 	bl	800b9f8 <ff_del_syncobj>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <f_mount+0x52>
 800a80e:	2302      	movs	r3, #2
 800a810:	e033      	b.n	800a87a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	2200      	movs	r2, #0
 800a816:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00f      	beq.n	800a83e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	b2da      	uxtb	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	3314      	adds	r3, #20
 800a82c:	4619      	mov	r1, r3
 800a82e:	4610      	mov	r0, r2
 800a830:	f001 f8c2 	bl	800b9b8 <ff_cre_syncobj>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <f_mount+0x7e>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e01d      	b.n	800a87a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	4910      	ldr	r1, [pc, #64]	; (800a884 <f_mount+0xc4>)
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <f_mount+0x94>
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d001      	beq.n	800a858 <f_mount+0x98>
 800a854:	2300      	movs	r3, #0
 800a856:	e010      	b.n	800a87a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a858:	f107 010c 	add.w	r1, r7, #12
 800a85c:	f107 0308 	add.w	r3, r7, #8
 800a860:	2200      	movs	r2, #0
 800a862:	4618      	mov	r0, r3
 800a864:	f7ff fcda 	bl	800a21c <find_volume>
 800a868:	4603      	mov	r3, r0
 800a86a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	7dfa      	ldrb	r2, [r7, #23]
 800a870:	4611      	mov	r1, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f7fd ff34 	bl	80086e0 <unlock_fs>
 800a878:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3720      	adds	r7, #32
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	200005b4 	.word	0x200005b4

0800a888 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800a88e:	af00      	add	r7, sp, #0
 800a890:	f107 030c 	add.w	r3, r7, #12
 800a894:	6018      	str	r0, [r3, #0]
 800a896:	f107 0308 	add.w	r3, r7, #8
 800a89a:	6019      	str	r1, [r3, #0]
 800a89c:	1dfb      	adds	r3, r7, #7
 800a89e:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a8a0:	f107 030c 	add.w	r3, r7, #12
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <f_open+0x26>
 800a8aa:	2309      	movs	r3, #9
 800a8ac:	e24a      	b.n	800ad44 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a8ae:	1dfb      	adds	r3, r7, #7
 800a8b0:	1dfa      	adds	r2, r7, #7
 800a8b2:	7812      	ldrb	r2, [r2, #0]
 800a8b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800a8b8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800a8ba:	1dfb      	adds	r3, r7, #7
 800a8bc:	781a      	ldrb	r2, [r3, #0]
 800a8be:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800a8c2:	f107 0308 	add.w	r3, r7, #8
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff fca8 	bl	800a21c <find_volume>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800a8d2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f040 8221 	bne.w	800ad1e <f_open+0x496>
		dj.obj.fs = fs;
 800a8dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a8e0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800a8e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a8e8:	f107 0214 	add.w	r2, r7, #20
 800a8ec:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a8ee:	f107 0308 	add.w	r3, r7, #8
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7ff fb7e 	bl	8009ffc <follow_path>
 800a900:	4603      	mov	r3, r0
 800a902:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a906:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d11b      	bne.n	800a946 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a90e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800a912:	b25b      	sxtb	r3, r3
 800a914:	2b00      	cmp	r3, #0
 800a916:	da03      	bge.n	800a920 <f_open+0x98>
				res = FR_INVALID_NAME;
 800a918:	2306      	movs	r3, #6
 800a91a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800a91e:	e012      	b.n	800a946 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a920:	1dfb      	adds	r3, r7, #7
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	f023 0301 	bic.w	r3, r3, #1
 800a928:	2b00      	cmp	r3, #0
 800a92a:	bf14      	ite	ne
 800a92c:	2301      	movne	r3, #1
 800a92e:	2300      	moveq	r3, #0
 800a930:	b2db      	uxtb	r3, r3
 800a932:	461a      	mov	r2, r3
 800a934:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800a938:	4611      	mov	r1, r2
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fd feec 	bl	8008718 <chk_lock>
 800a940:	4603      	mov	r3, r0
 800a942:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a946:	1dfb      	adds	r3, r7, #7
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	f003 031c 	and.w	r3, r3, #28
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 809b 	beq.w	800aa8a <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800a954:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d019      	beq.n	800a990 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a95c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800a960:	2b04      	cmp	r3, #4
 800a962:	d10e      	bne.n	800a982 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a964:	f7fd ff34 	bl	80087d0 <enq_lock>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d006      	beq.n	800a97c <f_open+0xf4>
 800a96e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800a972:	4618      	mov	r0, r3
 800a974:	f7ff f892 	bl	8009a9c <dir_register>
 800a978:	4603      	mov	r3, r0
 800a97a:	e000      	b.n	800a97e <f_open+0xf6>
 800a97c:	2312      	movs	r3, #18
 800a97e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a982:	1dfb      	adds	r3, r7, #7
 800a984:	1dfa      	adds	r2, r7, #7
 800a986:	7812      	ldrb	r2, [r2, #0]
 800a988:	f042 0208 	orr.w	r2, r2, #8
 800a98c:	701a      	strb	r2, [r3, #0]
 800a98e:	e012      	b.n	800a9b6 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a990:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800a994:	f003 0311 	and.w	r3, r3, #17
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <f_open+0x11c>
					res = FR_DENIED;
 800a99c:	2307      	movs	r3, #7
 800a99e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800a9a2:	e008      	b.n	800a9b6 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a9a4:	1dfb      	adds	r3, r7, #7
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	f003 0304 	and.w	r3, r3, #4
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <f_open+0x12e>
 800a9b0:	2308      	movs	r3, #8
 800a9b2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a9b6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f040 8082 	bne.w	800aac4 <f_open+0x23c>
 800a9c0:	1dfb      	adds	r3, r7, #7
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	f003 0308 	and.w	r3, r3, #8
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d07b      	beq.n	800aac4 <f_open+0x23c>
				dw = GET_FATTIME();
 800a9cc:	f7fd fa80 	bl	8007ed0 <get_fattime>
 800a9d0:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a9d4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800a9d8:	330e      	adds	r3, #14
 800a9da:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fd fdbe 	bl	8008560 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a9e4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800a9e8:	3316      	adds	r3, #22
 800a9ea:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fd fdb6 	bl	8008560 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a9f4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800a9f8:	330b      	adds	r3, #11
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a9fe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800aa02:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800aa06:	4611      	mov	r1, r2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fe fdbd 	bl	8009588 <ld_clust>
 800aa0e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aa12:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800aa16:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fe fdd2 	bl	80095c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aa22:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800aa26:	331c      	adds	r3, #28
 800aa28:	2100      	movs	r1, #0
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fd fd98 	bl	8008560 <st_dword>
					fs->wflag = 1;
 800aa30:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800aa34:	2201      	movs	r2, #1
 800aa36:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aa38:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d041      	beq.n	800aac4 <f_open+0x23c>
						dw = fs->winsect;
 800aa40:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800aa44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa46:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800aa4a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fe fabc 	bl	8008fd2 <remove_chain>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800aa60:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d12d      	bne.n	800aac4 <f_open+0x23c>
							res = move_window(fs, dw);
 800aa68:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800aa6c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe f801 	bl	8008a78 <move_window>
 800aa76:	4603      	mov	r3, r0
 800aa78:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aa7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800aa80:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800aa84:	3a01      	subs	r2, #1
 800aa86:	619a      	str	r2, [r3, #24]
 800aa88:	e01c      	b.n	800aac4 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aa8a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d118      	bne.n	800aac4 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aa92:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800aa96:	f003 0310 	and.w	r3, r3, #16
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d003      	beq.n	800aaa6 <f_open+0x21e>
					res = FR_NO_FILE;
 800aa9e:	2304      	movs	r3, #4
 800aaa0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800aaa4:	e00e      	b.n	800aac4 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aaa6:	1dfb      	adds	r3, r7, #7
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d008      	beq.n	800aac4 <f_open+0x23c>
 800aab2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800aab6:	f003 0301 	and.w	r3, r3, #1
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d002      	beq.n	800aac4 <f_open+0x23c>
						res = FR_DENIED;
 800aabe:	2307      	movs	r3, #7
 800aac0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800aac4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d136      	bne.n	800ab3a <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aacc:	1dfb      	adds	r3, r7, #7
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	f003 0308 	and.w	r3, r3, #8
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d005      	beq.n	800aae4 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800aad8:	1dfb      	adds	r3, r7, #7
 800aada:	1dfa      	adds	r2, r7, #7
 800aadc:	7812      	ldrb	r2, [r2, #0]
 800aade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aae2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aae4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800aae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaea:	f107 030c 	add.w	r3, r7, #12
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aaf2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800aaf6:	f107 030c 	add.w	r3, r7, #12
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aafe:	1dfb      	adds	r3, r7, #7
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	f023 0301 	bic.w	r3, r3, #1
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	bf14      	ite	ne
 800ab0a:	2301      	movne	r3, #1
 800ab0c:	2300      	moveq	r3, #0
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	461a      	mov	r2, r3
 800ab12:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ab16:	4611      	mov	r1, r2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fd fe7b 	bl	8008814 <inc_lock>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	f107 030c 	add.w	r3, r7, #12
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ab28:	f107 030c 	add.w	r3, r7, #12
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d102      	bne.n	800ab3a <f_open+0x2b2>
 800ab34:	2302      	movs	r3, #2
 800ab36:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ab3a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f040 80ed 	bne.w	800ad1e <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ab44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ab48:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe fd1a 	bl	8009588 <ld_clust>
 800ab54:	4602      	mov	r2, r0
 800ab56:	f107 030c 	add.w	r3, r7, #12
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ab5e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ab62:	331c      	adds	r3, #28
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fd fcbd 	bl	80084e4 <ld_dword>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	f107 030c 	add.w	r3, r7, #12
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ab74:	f107 030c 	add.w	r3, r7, #12
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ab7e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800ab82:	f107 030c 	add.w	r3, r7, #12
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ab8a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ab8e:	88da      	ldrh	r2, [r3, #6]
 800ab90:	f107 030c 	add.w	r3, r7, #12
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ab98:	f107 030c 	add.w	r3, r7, #12
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	1dfa      	adds	r2, r7, #7
 800aba0:	7812      	ldrb	r2, [r2, #0]
 800aba2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aba4:	f107 030c 	add.w	r3, r7, #12
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2200      	movs	r2, #0
 800abac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800abae:	f107 030c 	add.w	r3, r7, #12
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2200      	movs	r2, #0
 800abb6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800abb8:	f107 030c 	add.w	r3, r7, #12
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2200      	movs	r2, #0
 800abc0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800abc2:	f107 030c 	add.w	r3, r7, #12
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3330      	adds	r3, #48	; 0x30
 800abca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800abce:	2100      	movs	r1, #0
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fd fd12 	bl	80085fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800abd6:	1dfb      	adds	r3, r7, #7
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	f003 0320 	and.w	r3, r3, #32
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 809d 	beq.w	800ad1e <f_open+0x496>
 800abe4:	f107 030c 	add.w	r3, r7, #12
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 8096 	beq.w	800ad1e <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800abf2:	f107 030c 	add.w	r3, r7, #12
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68da      	ldr	r2, [r3, #12]
 800abfa:	f107 030c 	add.w	r3, r7, #12
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac02:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ac06:	895b      	ldrh	r3, [r3, #10]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ac0e:	899b      	ldrh	r3, [r3, #12]
 800ac10:	fb03 f302 	mul.w	r3, r3, r2
 800ac14:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ac18:	f107 030c 	add.w	r3, r7, #12
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac24:	f107 030c 	add.w	r3, r7, #12
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800ac30:	e01f      	b.n	800ac72 <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 800ac32:	f107 030c 	add.w	r3, r7, #12
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fd ffd8 	bl	8008bf2 <get_fat>
 800ac42:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800ac46:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d802      	bhi.n	800ac54 <f_open+0x3cc>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ac54:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800ac58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac5c:	d102      	bne.n	800ac64 <f_open+0x3dc>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac64:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800ac68:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800ac72:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d105      	bne.n	800ac86 <f_open+0x3fe>
 800ac7a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800ac7e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d8d5      	bhi.n	800ac32 <f_open+0x3aa>
				}
				fp->clust = clst;
 800ac86:	f107 030c 	add.w	r3, r7, #12
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800ac90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ac92:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d141      	bne.n	800ad1e <f_open+0x496>
 800ac9a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ac9e:	899b      	ldrh	r3, [r3, #12]
 800aca0:	461a      	mov	r2, r3
 800aca2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800aca6:	fbb3 f1f2 	udiv	r1, r3, r2
 800acaa:	fb02 f201 	mul.w	r2, r2, r1
 800acae:	1a9b      	subs	r3, r3, r2
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d034      	beq.n	800ad1e <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800acb4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800acb8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fd ff79 	bl	8008bb4 <clust2sect>
 800acc2:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800acc6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800acca:	2b00      	cmp	r3, #0
 800accc:	d103      	bne.n	800acd6 <f_open+0x44e>
						res = FR_INT_ERR;
 800acce:	2302      	movs	r3, #2
 800acd0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800acd4:	e023      	b.n	800ad1e <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800acd6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800acda:	899b      	ldrh	r3, [r3, #12]
 800acdc:	461a      	mov	r2, r3
 800acde:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800ace2:	fbb3 f2f2 	udiv	r2, r3, r2
 800ace6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800acea:	441a      	add	r2, r3
 800acec:	f107 030c 	add.w	r3, r7, #12
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800acf4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800acf8:	7858      	ldrb	r0, [r3, #1]
 800acfa:	f107 030c 	add.w	r3, r7, #12
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad04:	f107 030c 	add.w	r3, r7, #12
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	6a1a      	ldr	r2, [r3, #32]
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	f7fd fb73 	bl	80083f8 <disk_read>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d002      	beq.n	800ad1e <f_open+0x496>
 800ad18:	2301      	movs	r3, #1
 800ad1a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ad1e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d004      	beq.n	800ad30 <f_open+0x4a8>
 800ad26:	f107 030c 	add.w	r3, r7, #12
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ad30:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ad34:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800ad38:	4611      	mov	r1, r2
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fd fcd0 	bl	80086e0 <unlock_fs>
 800ad40:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b08c      	sub	sp, #48	; 0x30
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	60f8      	str	r0, [r7, #12]
 800ad56:	60b9      	str	r1, [r7, #8]
 800ad58:	607a      	str	r2, [r7, #4]
 800ad5a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f107 0210 	add.w	r2, r7, #16
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff fcde 	bl	800a730 <validate>
 800ad74:	4603      	mov	r3, r0
 800ad76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ad7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d107      	bne.n	800ad92 <f_write+0x44>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	7d5b      	ldrb	r3, [r3, #21]
 800ad86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ad8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d009      	beq.n	800ada6 <f_write+0x58>
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ad98:	4611      	mov	r1, r2
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fd fca0 	bl	80086e0 <unlock_fs>
 800ada0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ada4:	e192      	b.n	800b0cc <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	7d1b      	ldrb	r3, [r3, #20]
 800adaa:	f003 0302 	and.w	r3, r3, #2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d106      	bne.n	800adc0 <f_write+0x72>
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	2107      	movs	r1, #7
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fd fc92 	bl	80086e0 <unlock_fs>
 800adbc:	2307      	movs	r3, #7
 800adbe:	e185      	b.n	800b0cc <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	699a      	ldr	r2, [r3, #24]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	441a      	add	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	429a      	cmp	r2, r3
 800adce:	f080 816a 	bcs.w	800b0a6 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	43db      	mvns	r3, r3
 800add8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800adda:	e164      	b.n	800b0a6 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	8992      	ldrh	r2, [r2, #12]
 800ade4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ade8:	fb02 f201 	mul.w	r2, r2, r1
 800adec:	1a9b      	subs	r3, r3, r2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f040 810f 	bne.w	800b012 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	8992      	ldrh	r2, [r2, #12]
 800adfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	8952      	ldrh	r2, [r2, #10]
 800ae04:	3a01      	subs	r2, #1
 800ae06:	4013      	ands	r3, r2
 800ae08:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d14d      	bne.n	800aeac <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10c      	bne.n	800ae32 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d11a      	bne.n	800ae5a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2100      	movs	r1, #0
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe f937 	bl	800909c <create_chain>
 800ae2e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae30:	e013      	b.n	800ae5a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d007      	beq.n	800ae4a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7fe f9c3 	bl	80091cc <clmt_clust>
 800ae46:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae48:	e007      	b.n	800ae5a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	69db      	ldr	r3, [r3, #28]
 800ae50:	4619      	mov	r1, r3
 800ae52:	4610      	mov	r0, r2
 800ae54:	f7fe f922 	bl	800909c <create_chain>
 800ae58:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 8127 	beq.w	800b0b0 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ae62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d109      	bne.n	800ae7c <f_write+0x12e>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	755a      	strb	r2, [r3, #21]
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2102      	movs	r1, #2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fd fc34 	bl	80086e0 <unlock_fs>
 800ae78:	2302      	movs	r3, #2
 800ae7a:	e127      	b.n	800b0cc <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae82:	d109      	bne.n	800ae98 <f_write+0x14a>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2201      	movs	r2, #1
 800ae88:	755a      	strb	r2, [r3, #21]
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fd fc26 	bl	80086e0 <unlock_fs>
 800ae94:	2301      	movs	r3, #1
 800ae96:	e119      	b.n	800b0cc <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae9c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d102      	bne.n	800aeac <f_write+0x15e>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeaa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	7d1b      	ldrb	r3, [r3, #20]
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da1d      	bge.n	800aef2 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	7858      	ldrb	r0, [r3, #1]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a1a      	ldr	r2, [r3, #32]
 800aec4:	2301      	movs	r3, #1
 800aec6:	f7fd fab7 	bl	8008438 <disk_write>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d009      	beq.n	800aee4 <f_write+0x196>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2201      	movs	r2, #1
 800aed4:	755a      	strb	r2, [r3, #21]
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	2101      	movs	r1, #1
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fd fc00 	bl	80086e0 <unlock_fs>
 800aee0:	2301      	movs	r3, #1
 800aee2:	e0f3      	b.n	800b0cc <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	7d1b      	ldrb	r3, [r3, #20]
 800aee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeec:	b2da      	uxtb	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	4619      	mov	r1, r3
 800aefa:	4610      	mov	r0, r2
 800aefc:	f7fd fe5a 	bl	8008bb4 <clust2sect>
 800af00:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d109      	bne.n	800af1c <f_write+0x1ce>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2202      	movs	r2, #2
 800af0c:	755a      	strb	r2, [r3, #21]
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	2102      	movs	r1, #2
 800af12:	4618      	mov	r0, r3
 800af14:	f7fd fbe4 	bl	80086e0 <unlock_fs>
 800af18:	2302      	movs	r3, #2
 800af1a:	e0d7      	b.n	800b0cc <f_write+0x37e>
			sect += csect;
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	4413      	add	r3, r2
 800af22:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	899b      	ldrh	r3, [r3, #12]
 800af28:	461a      	mov	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af30:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d048      	beq.n	800afca <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800af38:	69ba      	ldr	r2, [r7, #24]
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	4413      	add	r3, r2
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	8952      	ldrh	r2, [r2, #10]
 800af42:	4293      	cmp	r3, r2
 800af44:	d905      	bls.n	800af52 <f_write+0x204>
					cc = fs->csize - csect;
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	895b      	ldrh	r3, [r3, #10]
 800af4a:	461a      	mov	r2, r3
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	7858      	ldrb	r0, [r3, #1]
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	69f9      	ldr	r1, [r7, #28]
 800af5c:	f7fd fa6c 	bl	8008438 <disk_write>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d009      	beq.n	800af7a <f_write+0x22c>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2201      	movs	r2, #1
 800af6a:	755a      	strb	r2, [r3, #21]
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	2101      	movs	r1, #1
 800af70:	4618      	mov	r0, r3
 800af72:	f7fd fbb5 	bl	80086e0 <unlock_fs>
 800af76:	2301      	movs	r3, #1
 800af78:	e0a8      	b.n	800b0cc <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6a1a      	ldr	r2, [r3, #32]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	6a3a      	ldr	r2, [r7, #32]
 800af84:	429a      	cmp	r2, r3
 800af86:	d918      	bls.n	800afba <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6a1a      	ldr	r2, [r3, #32]
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	8992      	ldrh	r2, [r2, #12]
 800af9a:	fb02 f303 	mul.w	r3, r2, r3
 800af9e:	69fa      	ldr	r2, [r7, #28]
 800afa0:	18d1      	adds	r1, r2, r3
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	899b      	ldrh	r3, [r3, #12]
 800afa6:	461a      	mov	r2, r3
 800afa8:	f7fd fb06 	bl	80085b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	7d1b      	ldrb	r3, [r3, #20]
 800afb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	899b      	ldrh	r3, [r3, #12]
 800afbe:	461a      	mov	r2, r3
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	fb02 f303 	mul.w	r3, r2, r3
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800afc8:	e050      	b.n	800b06c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d01b      	beq.n	800b00c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	699a      	ldr	r2, [r3, #24]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800afdc:	429a      	cmp	r2, r3
 800afde:	d215      	bcs.n	800b00c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	7858      	ldrb	r0, [r3, #1]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afea:	2301      	movs	r3, #1
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	f7fd fa03 	bl	80083f8 <disk_read>
 800aff2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d009      	beq.n	800b00c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2201      	movs	r2, #1
 800affc:	755a      	strb	r2, [r3, #21]
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	2101      	movs	r1, #1
 800b002:	4618      	mov	r0, r3
 800b004:	f7fd fb6c 	bl	80086e0 <unlock_fs>
 800b008:	2301      	movs	r3, #1
 800b00a:	e05f      	b.n	800b0cc <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	899b      	ldrh	r3, [r3, #12]
 800b016:	4618      	mov	r0, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	8992      	ldrh	r2, [r2, #12]
 800b020:	fbb3 f1f2 	udiv	r1, r3, r2
 800b024:	fb02 f201 	mul.w	r2, r2, r1
 800b028:	1a9b      	subs	r3, r3, r2
 800b02a:	1ac3      	subs	r3, r0, r3
 800b02c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	429a      	cmp	r2, r3
 800b034:	d901      	bls.n	800b03a <f_write+0x2ec>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	8992      	ldrh	r2, [r2, #12]
 800b048:	fbb3 f0f2 	udiv	r0, r3, r2
 800b04c:	fb02 f200 	mul.w	r2, r2, r0
 800b050:	1a9b      	subs	r3, r3, r2
 800b052:	440b      	add	r3, r1
 800b054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b056:	69f9      	ldr	r1, [r7, #28]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7fd faad 	bl	80085b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	7d1b      	ldrb	r3, [r3, #20]
 800b062:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b066:	b2da      	uxtb	r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b06c:	69fa      	ldr	r2, [r7, #28]
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	4413      	add	r3, r2
 800b072:	61fb      	str	r3, [r7, #28]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	699a      	ldr	r2, [r3, #24]
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	441a      	add	r2, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	619a      	str	r2, [r3, #24]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	429a      	cmp	r2, r3
 800b08a:	bf38      	it	cc
 800b08c:	461a      	movcc	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	60da      	str	r2, [r3, #12]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b098:	441a      	add	r2, r3
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f47f ae97 	bne.w	800addc <f_write+0x8e>
 800b0ae:	e000      	b.n	800b0b2 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b0b0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	7d1b      	ldrb	r3, [r3, #20]
 800b0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fd fb0b 	bl	80086e0 <unlock_fs>
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3730      	adds	r7, #48	; 0x30
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f107 0208 	add.w	r2, r7, #8
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7ff fb23 	bl	800a730 <validate>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d16d      	bne.n	800b1d0 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	7d1b      	ldrb	r3, [r3, #20]
 800b0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d067      	beq.n	800b1d0 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7d1b      	ldrb	r3, [r3, #20]
 800b104:	b25b      	sxtb	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	da1a      	bge.n	800b140 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	7858      	ldrb	r0, [r3, #1]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a1a      	ldr	r2, [r3, #32]
 800b118:	2301      	movs	r3, #1
 800b11a:	f7fd f98d 	bl	8008438 <disk_write>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d006      	beq.n	800b132 <f_sync+0x5e>
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2101      	movs	r1, #1
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fd fad9 	bl	80086e0 <unlock_fs>
 800b12e:	2301      	movs	r3, #1
 800b130:	e055      	b.n	800b1de <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	7d1b      	ldrb	r3, [r3, #20]
 800b136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b140:	f7fc fec6 	bl	8007ed0 <get_fattime>
 800b144:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	4619      	mov	r1, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	f7fd fc92 	bl	8008a78 <move_window>
 800b154:	4603      	mov	r3, r0
 800b156:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b158:	7dfb      	ldrb	r3, [r7, #23]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d138      	bne.n	800b1d0 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b162:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	330b      	adds	r3, #11
 800b168:	781a      	ldrb	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	330b      	adds	r3, #11
 800b16e:	f042 0220 	orr.w	r2, r2, #32
 800b172:	b2d2      	uxtb	r2, r2
 800b174:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6818      	ldr	r0, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	461a      	mov	r2, r3
 800b180:	68f9      	ldr	r1, [r7, #12]
 800b182:	f7fe fa20 	bl	80095c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f103 021c 	add.w	r2, r3, #28
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f7fd f9e4 	bl	8008560 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	3316      	adds	r3, #22
 800b19c:	6939      	ldr	r1, [r7, #16]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fd f9de 	bl	8008560 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3312      	adds	r3, #18
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fd f9bd 	bl	800852a <st_word>
					fs->wflag = 1;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fd fc8b 	bl	8008ad4 <sync_fs>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	7d1b      	ldrb	r3, [r3, #20]
 800b1c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	7dfa      	ldrb	r2, [r7, #23]
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fd fa82 	bl	80086e0 <unlock_fs>
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f7ff ff70 	bl	800b0d4 <f_sync>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d11d      	bne.n	800b23a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f107 0208 	add.w	r2, r7, #8
 800b204:	4611      	mov	r1, r2
 800b206:	4618      	mov	r0, r3
 800b208:	f7ff fa92 	bl	800a730 <validate>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d111      	bne.n	800b23a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fd fb88 	bl	8008930 <dec_lock>
 800b220:	4603      	mov	r3, r0
 800b222:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b224:	7bfb      	ldrb	r3, [r7, #15]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d102      	bne.n	800b230 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2100      	movs	r1, #0
 800b234:	4618      	mov	r0, r3
 800b236:	f7fd fa53 	bl	80086e0 <unlock_fs>
#endif
		}
	}
	return res;
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	460b      	mov	r3, r1
 800b24e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b250:	78fb      	ldrb	r3, [r7, #3]
 800b252:	2b0a      	cmp	r3, #10
 800b254:	d103      	bne.n	800b25e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b256:	210d      	movs	r1, #13
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff fff3 	bl	800b244 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	db25      	blt.n	800b2b6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	60fa      	str	r2, [r7, #12]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	4413      	add	r3, r2
 800b274:	78fa      	ldrb	r2, [r7, #3]
 800b276:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b3c      	cmp	r3, #60	; 0x3c
 800b27c:	dd12      	ble.n	800b2a4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f103 010c 	add.w	r1, r3, #12
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	f107 0308 	add.w	r3, r7, #8
 800b28e:	f7ff fd5e 	bl	800ad4e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	429a      	cmp	r2, r3
 800b298:	d101      	bne.n	800b29e <putc_bfd+0x5a>
 800b29a:	2300      	movs	r3, #0
 800b29c:	e001      	b.n	800b2a2 <putc_bfd+0x5e>
 800b29e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2a2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	609a      	str	r2, [r3, #8]
 800b2b4:	e000      	b.n	800b2b8 <putc_bfd+0x74>
	if (i < 0) return;
 800b2b6:	bf00      	nop
}
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	db16      	blt.n	800b2fc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6818      	ldr	r0, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f103 010c 	add.w	r1, r3, #12
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	f107 030c 	add.w	r3, r7, #12
 800b2e2:	f7ff fd34 	bl	800ad4e <f_write>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d107      	bne.n	800b2fc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d102      	bne.n	800b2fc <putc_flush+0x3e>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	e001      	b.n	800b300 <putc_flush+0x42>
	return EOF;
 800b2fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	605a      	str	r2, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685a      	ldr	r2, [r3, #4]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	609a      	str	r2, [r3, #8]
}
 800b326:	bf00      	nop
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
	...

0800b334 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b334:	b40e      	push	{r1, r2, r3}
 800b336:	b580      	push	{r7, lr}
 800b338:	b0a7      	sub	sp, #156	; 0x9c
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b33e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b342:	6879      	ldr	r1, [r7, #4]
 800b344:	4618      	mov	r0, r3
 800b346:	f7ff ffdf 	bl	800b308 <putc_init>

	va_start(arp, fmt);
 800b34a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b34e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b354:	1c5a      	adds	r2, r3, #1
 800b356:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b360:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 81f4 	beq.w	800b752 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800b36a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b36e:	2b25      	cmp	r3, #37	; 0x25
 800b370:	d008      	beq.n	800b384 <f_printf+0x50>
			putc_bfd(&pb, c);
 800b372:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b37a:	4611      	mov	r1, r2
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7ff ff61 	bl	800b244 <putc_bfd>
			continue;
 800b382:	e1e5      	b.n	800b750 <f_printf+0x41c>
		}
		w = f = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b38a:	2300      	movs	r3, #0
 800b38c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b390:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b394:	1c5a      	adds	r2, r3, #1
 800b396:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b3a0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b3a4:	2b30      	cmp	r3, #48	; 0x30
 800b3a6:	d10b      	bne.n	800b3c0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b3ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b3be:	e024      	b.n	800b40a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b3c0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b3c4:	2b2d      	cmp	r3, #45	; 0x2d
 800b3c6:	d120      	bne.n	800b40a <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b3ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b3de:	e014      	b.n	800b40a <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b3e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	005b      	lsls	r3, r3, #1
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b3f2:	4413      	add	r3, r2
 800b3f4:	3b30      	subs	r3, #48	; 0x30
 800b3f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b3fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b40a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b40e:	2b2f      	cmp	r3, #47	; 0x2f
 800b410:	d903      	bls.n	800b41a <f_printf+0xe6>
 800b412:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b416:	2b39      	cmp	r3, #57	; 0x39
 800b418:	d9e2      	bls.n	800b3e0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b41a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b41e:	2b6c      	cmp	r3, #108	; 0x6c
 800b420:	d003      	beq.n	800b42a <f_printf+0xf6>
 800b422:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b426:	2b4c      	cmp	r3, #76	; 0x4c
 800b428:	d10d      	bne.n	800b446 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b42a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b42e:	f043 0304 	orr.w	r3, r3, #4
 800b432:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b446:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f000 8183 	beq.w	800b756 <f_printf+0x422>
		d = c;
 800b450:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b454:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b458:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b45c:	2b60      	cmp	r3, #96	; 0x60
 800b45e:	d908      	bls.n	800b472 <f_printf+0x13e>
 800b460:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b464:	2b7a      	cmp	r3, #122	; 0x7a
 800b466:	d804      	bhi.n	800b472 <f_printf+0x13e>
 800b468:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b46c:	3b20      	subs	r3, #32
 800b46e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b472:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b476:	3b42      	subs	r3, #66	; 0x42
 800b478:	2b16      	cmp	r3, #22
 800b47a:	f200 8098 	bhi.w	800b5ae <f_printf+0x27a>
 800b47e:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <f_printf+0x150>)
 800b480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b484:	0800b58f 	.word	0x0800b58f
 800b488:	0800b577 	.word	0x0800b577
 800b48c:	0800b59f 	.word	0x0800b59f
 800b490:	0800b5af 	.word	0x0800b5af
 800b494:	0800b5af 	.word	0x0800b5af
 800b498:	0800b5af 	.word	0x0800b5af
 800b49c:	0800b5af 	.word	0x0800b5af
 800b4a0:	0800b5af 	.word	0x0800b5af
 800b4a4:	0800b5af 	.word	0x0800b5af
 800b4a8:	0800b5af 	.word	0x0800b5af
 800b4ac:	0800b5af 	.word	0x0800b5af
 800b4b0:	0800b5af 	.word	0x0800b5af
 800b4b4:	0800b5af 	.word	0x0800b5af
 800b4b8:	0800b597 	.word	0x0800b597
 800b4bc:	0800b5af 	.word	0x0800b5af
 800b4c0:	0800b5af 	.word	0x0800b5af
 800b4c4:	0800b5af 	.word	0x0800b5af
 800b4c8:	0800b4e1 	.word	0x0800b4e1
 800b4cc:	0800b5af 	.word	0x0800b5af
 800b4d0:	0800b59f 	.word	0x0800b59f
 800b4d4:	0800b5af 	.word	0x0800b5af
 800b4d8:	0800b5af 	.word	0x0800b5af
 800b4dc:	0800b5a7 	.word	0x0800b5a7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b4e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4e2:	1d1a      	adds	r2, r3, #4
 800b4e4:	67ba      	str	r2, [r7, #120]	; 0x78
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4f0:	e004      	b.n	800b4fc <f_printf+0x1c8>
 800b4f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b4fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b502:	4413      	add	r3, r2
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1f3      	bne.n	800b4f2 <f_printf+0x1be>
			if (!(f & 2)) {
 800b50a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b50e:	f003 0302 	and.w	r3, r3, #2
 800b512:	2b00      	cmp	r3, #0
 800b514:	d11a      	bne.n	800b54c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b516:	e005      	b.n	800b524 <f_printf+0x1f0>
 800b518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b51c:	2120      	movs	r1, #32
 800b51e:	4618      	mov	r0, r3
 800b520:	f7ff fe90 	bl	800b244 <putc_bfd>
 800b524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b528:	1c5a      	adds	r2, r3, #1
 800b52a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b52e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b532:	429a      	cmp	r2, r3
 800b534:	d8f0      	bhi.n	800b518 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b536:	e009      	b.n	800b54c <f_printf+0x218>
 800b538:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b53e:	781a      	ldrb	r2, [r3, #0]
 800b540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b544:	4611      	mov	r1, r2
 800b546:	4618      	mov	r0, r3
 800b548:	f7ff fe7c 	bl	800b244 <putc_bfd>
 800b54c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1f1      	bne.n	800b538 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b554:	e005      	b.n	800b562 <f_printf+0x22e>
 800b556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b55a:	2120      	movs	r1, #32
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7ff fe71 	bl	800b244 <putc_bfd>
 800b562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b56c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b570:	429a      	cmp	r2, r3
 800b572:	d8f0      	bhi.n	800b556 <f_printf+0x222>
			continue;
 800b574:	e0ec      	b.n	800b750 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b578:	1d1a      	adds	r2, r3, #4
 800b57a:	67ba      	str	r2, [r7, #120]	; 0x78
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	b2da      	uxtb	r2, r3
 800b580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b584:	4611      	mov	r1, r2
 800b586:	4618      	mov	r0, r3
 800b588:	f7ff fe5c 	bl	800b244 <putc_bfd>
 800b58c:	e0e0      	b.n	800b750 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800b58e:	2302      	movs	r3, #2
 800b590:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b594:	e014      	b.n	800b5c0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b596:	2308      	movs	r3, #8
 800b598:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b59c:	e010      	b.n	800b5c0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b59e:	230a      	movs	r3, #10
 800b5a0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b5a4:	e00c      	b.n	800b5c0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b5a6:	2310      	movs	r3, #16
 800b5a8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b5ac:	e008      	b.n	800b5c0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b5ae:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b5b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff fe43 	bl	800b244 <putc_bfd>
 800b5be:	e0c7      	b.n	800b750 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b5c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d004      	beq.n	800b5d6 <f_printf+0x2a2>
 800b5cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5ce:	1d1a      	adds	r2, r3, #4
 800b5d0:	67ba      	str	r2, [r7, #120]	; 0x78
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	e00c      	b.n	800b5f0 <f_printf+0x2bc>
 800b5d6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b5da:	2b44      	cmp	r3, #68	; 0x44
 800b5dc:	d104      	bne.n	800b5e8 <f_printf+0x2b4>
 800b5de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5e0:	1d1a      	adds	r2, r3, #4
 800b5e2:	67ba      	str	r2, [r7, #120]	; 0x78
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	e003      	b.n	800b5f0 <f_printf+0x2bc>
 800b5e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5ea:	1d1a      	adds	r2, r3, #4
 800b5ec:	67ba      	str	r2, [r7, #120]	; 0x78
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b5f4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b5f8:	2b44      	cmp	r3, #68	; 0x44
 800b5fa:	d10e      	bne.n	800b61a <f_printf+0x2e6>
 800b5fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b600:	2b00      	cmp	r3, #0
 800b602:	da0a      	bge.n	800b61a <f_printf+0x2e6>
			v = 0 - v;
 800b604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b608:	425b      	negs	r3, r3
 800b60a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b60e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b612:	f043 0308 	orr.w	r3, r3, #8
 800b616:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b620:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b628:	fbb3 f1f2 	udiv	r1, r3, r2
 800b62c:	fb02 f201 	mul.w	r2, r2, r1
 800b630:	1a9b      	subs	r3, r3, r2
 800b632:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b636:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b63a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b642:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b646:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b64a:	2b09      	cmp	r3, #9
 800b64c:	d90b      	bls.n	800b666 <f_printf+0x332>
 800b64e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b652:	2b78      	cmp	r3, #120	; 0x78
 800b654:	d101      	bne.n	800b65a <f_printf+0x326>
 800b656:	2227      	movs	r2, #39	; 0x27
 800b658:	e000      	b.n	800b65c <f_printf+0x328>
 800b65a:	2207      	movs	r2, #7
 800b65c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b660:	4413      	add	r3, r2
 800b662:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b666:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b670:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b674:	3230      	adds	r2, #48	; 0x30
 800b676:	b2d2      	uxtb	r2, r2
 800b678:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800b67c:	440b      	add	r3, r1
 800b67e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <f_printf+0x35e>
 800b68a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b68e:	2b1f      	cmp	r3, #31
 800b690:	d9c6      	bls.n	800b620 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b692:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b696:	f003 0308 	and.w	r3, r3, #8
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00a      	beq.n	800b6b4 <f_printf+0x380>
 800b69e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b6a8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b6ac:	4413      	add	r3, r2
 800b6ae:	222d      	movs	r2, #45	; 0x2d
 800b6b0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b6b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b6bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <f_printf+0x398>
 800b6c8:	2330      	movs	r3, #48	; 0x30
 800b6ca:	e000      	b.n	800b6ce <f_printf+0x39a>
 800b6cc:	2320      	movs	r3, #32
 800b6ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b6d2:	e007      	b.n	800b6e4 <f_printf+0x3b0>
 800b6d4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b6d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b6dc:	4611      	mov	r1, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff fdb0 	bl	800b244 <putc_bfd>
 800b6e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b6e8:	f003 0302 	and.w	r3, r3, #2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d108      	bne.n	800b702 <f_printf+0x3ce>
 800b6f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6f4:	1c5a      	adds	r2, r3, #1
 800b6f6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b6fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d8e8      	bhi.n	800b6d4 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800b702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b706:	3b01      	subs	r3, #1
 800b708:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b70c:	f107 020c 	add.w	r2, r7, #12
 800b710:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b714:	4413      	add	r3, r2
 800b716:	781a      	ldrb	r2, [r3, #0]
 800b718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b71c:	4611      	mov	r1, r2
 800b71e:	4618      	mov	r0, r3
 800b720:	f7ff fd90 	bl	800b244 <putc_bfd>
		} while (i);
 800b724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d1ea      	bne.n	800b702 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800b72c:	e007      	b.n	800b73e <f_printf+0x40a>
 800b72e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b736:	4611      	mov	r1, r2
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff fd83 	bl	800b244 <putc_bfd>
 800b73e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b742:	1c5a      	adds	r2, r3, #1
 800b744:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b748:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d8ee      	bhi.n	800b72e <f_printf+0x3fa>
		c = *fmt++;
 800b750:	e5fe      	b.n	800b350 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b752:	bf00      	nop
 800b754:	e000      	b.n	800b758 <f_printf+0x424>
		if (!c) break;
 800b756:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7ff fdae 	bl	800b2be <putc_flush>
 800b762:	4603      	mov	r3, r0
}
 800b764:	4618      	mov	r0, r3
 800b766:	379c      	adds	r7, #156	; 0x9c
 800b768:	46bd      	mov	sp, r7
 800b76a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b76e:	b003      	add	sp, #12
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop

0800b774 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b774:	b480      	push	{r7}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	4613      	mov	r3, r2
 800b780:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b782:	2301      	movs	r3, #1
 800b784:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b78a:	4b1f      	ldr	r3, [pc, #124]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b78c:	7a5b      	ldrb	r3, [r3, #9]
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d131      	bne.n	800b7f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b794:	4b1c      	ldr	r3, [pc, #112]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b796:	7a5b      	ldrb	r3, [r3, #9]
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	461a      	mov	r2, r3
 800b79c:	4b1a      	ldr	r3, [pc, #104]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b79e:	2100      	movs	r1, #0
 800b7a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b7a2:	4b19      	ldr	r3, [pc, #100]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7a4:	7a5b      	ldrb	r3, [r3, #9]
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	4a17      	ldr	r2, [pc, #92]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b7b2:	4b15      	ldr	r3, [pc, #84]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7b4:	7a5b      	ldrb	r3, [r3, #9]
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	4b13      	ldr	r3, [pc, #76]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7bc:	4413      	add	r3, r2
 800b7be:	79fa      	ldrb	r2, [r7, #7]
 800b7c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b7c2:	4b11      	ldr	r3, [pc, #68]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7c4:	7a5b      	ldrb	r3, [r3, #9]
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	b2d1      	uxtb	r1, r2
 800b7cc:	4a0e      	ldr	r2, [pc, #56]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7ce:	7251      	strb	r1, [r2, #9]
 800b7d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b7d2:	7dbb      	ldrb	r3, [r7, #22]
 800b7d4:	3330      	adds	r3, #48	; 0x30
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	223a      	movs	r2, #58	; 0x3a
 800b7e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	3302      	adds	r3, #2
 800b7e8:	222f      	movs	r2, #47	; 0x2f
 800b7ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	3303      	adds	r3, #3
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	371c      	adds	r7, #28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	200005dc 	.word	0x200005dc

0800b80c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b816:	2200      	movs	r2, #0
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7ff ffaa 	bl	800b774 <FATFS_LinkDriverEx>
 800b820:	4603      	mov	r3, r0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
	...

0800b82c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	6039      	str	r1, [r7, #0]
 800b836:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b838:	88fb      	ldrh	r3, [r7, #6]
 800b83a:	2b7f      	cmp	r3, #127	; 0x7f
 800b83c:	d802      	bhi.n	800b844 <ff_convert+0x18>
		c = chr;
 800b83e:	88fb      	ldrh	r3, [r7, #6]
 800b840:	81fb      	strh	r3, [r7, #14]
 800b842:	e025      	b.n	800b890 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00b      	beq.n	800b862 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b84a:	88fb      	ldrh	r3, [r7, #6]
 800b84c:	2bff      	cmp	r3, #255	; 0xff
 800b84e:	d805      	bhi.n	800b85c <ff_convert+0x30>
 800b850:	88fb      	ldrh	r3, [r7, #6]
 800b852:	3b80      	subs	r3, #128	; 0x80
 800b854:	4a12      	ldr	r2, [pc, #72]	; (800b8a0 <ff_convert+0x74>)
 800b856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b85a:	e000      	b.n	800b85e <ff_convert+0x32>
 800b85c:	2300      	movs	r3, #0
 800b85e:	81fb      	strh	r3, [r7, #14]
 800b860:	e016      	b.n	800b890 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b862:	2300      	movs	r3, #0
 800b864:	81fb      	strh	r3, [r7, #14]
 800b866:	e009      	b.n	800b87c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b868:	89fb      	ldrh	r3, [r7, #14]
 800b86a:	4a0d      	ldr	r2, [pc, #52]	; (800b8a0 <ff_convert+0x74>)
 800b86c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b870:	88fa      	ldrh	r2, [r7, #6]
 800b872:	429a      	cmp	r2, r3
 800b874:	d006      	beq.n	800b884 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b876:	89fb      	ldrh	r3, [r7, #14]
 800b878:	3301      	adds	r3, #1
 800b87a:	81fb      	strh	r3, [r7, #14]
 800b87c:	89fb      	ldrh	r3, [r7, #14]
 800b87e:	2b7f      	cmp	r3, #127	; 0x7f
 800b880:	d9f2      	bls.n	800b868 <ff_convert+0x3c>
 800b882:	e000      	b.n	800b886 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b884:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b886:	89fb      	ldrh	r3, [r7, #14]
 800b888:	3380      	adds	r3, #128	; 0x80
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b890:	89fb      	ldrh	r3, [r7, #14]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	08010474 	.word	0x08010474

0800b8a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b8ae:	88fb      	ldrh	r3, [r7, #6]
 800b8b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b4:	d201      	bcs.n	800b8ba <ff_wtoupper+0x16>
 800b8b6:	4b3e      	ldr	r3, [pc, #248]	; (800b9b0 <ff_wtoupper+0x10c>)
 800b8b8:	e000      	b.n	800b8bc <ff_wtoupper+0x18>
 800b8ba:	4b3e      	ldr	r3, [pc, #248]	; (800b9b4 <ff_wtoupper+0x110>)
 800b8bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	1c9a      	adds	r2, r3, #2
 800b8c2:	617a      	str	r2, [r7, #20]
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b8c8:	8a7b      	ldrh	r3, [r7, #18]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d068      	beq.n	800b9a0 <ff_wtoupper+0xfc>
 800b8ce:	88fa      	ldrh	r2, [r7, #6]
 800b8d0:	8a7b      	ldrh	r3, [r7, #18]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d364      	bcc.n	800b9a0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	1c9a      	adds	r2, r3, #2
 800b8da:	617a      	str	r2, [r7, #20]
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	823b      	strh	r3, [r7, #16]
 800b8e0:	8a3b      	ldrh	r3, [r7, #16]
 800b8e2:	0a1b      	lsrs	r3, r3, #8
 800b8e4:	81fb      	strh	r3, [r7, #14]
 800b8e6:	8a3b      	ldrh	r3, [r7, #16]
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b8ec:	88fa      	ldrh	r2, [r7, #6]
 800b8ee:	8a79      	ldrh	r1, [r7, #18]
 800b8f0:	8a3b      	ldrh	r3, [r7, #16]
 800b8f2:	440b      	add	r3, r1
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	da49      	bge.n	800b98c <ff_wtoupper+0xe8>
			switch (cmd) {
 800b8f8:	89fb      	ldrh	r3, [r7, #14]
 800b8fa:	2b08      	cmp	r3, #8
 800b8fc:	d84f      	bhi.n	800b99e <ff_wtoupper+0xfa>
 800b8fe:	a201      	add	r2, pc, #4	; (adr r2, 800b904 <ff_wtoupper+0x60>)
 800b900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b904:	0800b929 	.word	0x0800b929
 800b908:	0800b93b 	.word	0x0800b93b
 800b90c:	0800b951 	.word	0x0800b951
 800b910:	0800b959 	.word	0x0800b959
 800b914:	0800b961 	.word	0x0800b961
 800b918:	0800b969 	.word	0x0800b969
 800b91c:	0800b971 	.word	0x0800b971
 800b920:	0800b979 	.word	0x0800b979
 800b924:	0800b981 	.word	0x0800b981
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b928:	88fa      	ldrh	r2, [r7, #6]
 800b92a:	8a7b      	ldrh	r3, [r7, #18]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	005b      	lsls	r3, r3, #1
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	4413      	add	r3, r2
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	80fb      	strh	r3, [r7, #6]
 800b938:	e027      	b.n	800b98a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b93a:	88fa      	ldrh	r2, [r7, #6]
 800b93c:	8a7b      	ldrh	r3, [r7, #18]
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	b29b      	uxth	r3, r3
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	b29b      	uxth	r3, r3
 800b948:	88fa      	ldrh	r2, [r7, #6]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	80fb      	strh	r3, [r7, #6]
 800b94e:	e01c      	b.n	800b98a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b950:	88fb      	ldrh	r3, [r7, #6]
 800b952:	3b10      	subs	r3, #16
 800b954:	80fb      	strh	r3, [r7, #6]
 800b956:	e018      	b.n	800b98a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b958:	88fb      	ldrh	r3, [r7, #6]
 800b95a:	3b20      	subs	r3, #32
 800b95c:	80fb      	strh	r3, [r7, #6]
 800b95e:	e014      	b.n	800b98a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b960:	88fb      	ldrh	r3, [r7, #6]
 800b962:	3b30      	subs	r3, #48	; 0x30
 800b964:	80fb      	strh	r3, [r7, #6]
 800b966:	e010      	b.n	800b98a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b968:	88fb      	ldrh	r3, [r7, #6]
 800b96a:	3b1a      	subs	r3, #26
 800b96c:	80fb      	strh	r3, [r7, #6]
 800b96e:	e00c      	b.n	800b98a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b970:	88fb      	ldrh	r3, [r7, #6]
 800b972:	3308      	adds	r3, #8
 800b974:	80fb      	strh	r3, [r7, #6]
 800b976:	e008      	b.n	800b98a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	3b50      	subs	r3, #80	; 0x50
 800b97c:	80fb      	strh	r3, [r7, #6]
 800b97e:	e004      	b.n	800b98a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b980:	88fb      	ldrh	r3, [r7, #6]
 800b982:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b986:	80fb      	strh	r3, [r7, #6]
 800b988:	bf00      	nop
			}
			break;
 800b98a:	e008      	b.n	800b99e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b98c:	89fb      	ldrh	r3, [r7, #14]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d195      	bne.n	800b8be <ff_wtoupper+0x1a>
 800b992:	8a3b      	ldrh	r3, [r7, #16]
 800b994:	005b      	lsls	r3, r3, #1
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	4413      	add	r3, r2
 800b99a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b99c:	e78f      	b.n	800b8be <ff_wtoupper+0x1a>
			break;
 800b99e:	bf00      	nop
	}

	return chr;
 800b9a0:	88fb      	ldrh	r3, [r7, #6]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	371c      	adds	r7, #28
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	08010574 	.word	0x08010574
 800b9b4:	08010768 	.word	0x08010768

0800b9b8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	4603      	mov	r3, r0
 800b9c0:	6039      	str	r1, [r7, #0]
 800b9c2:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	60fb      	str	r3, [r7, #12]
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b9cc:	f107 030c 	add.w	r3, r7, #12
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 f8e9 	bl	800bbaa <osSemaphoreCreate>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	bf14      	ite	ne
 800b9e6:	2301      	movne	r3, #1
 800b9e8:	2300      	moveq	r3, #0
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	617b      	str	r3, [r7, #20]

    return ret;
 800b9ee:	697b      	ldr	r3, [r7, #20]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f989 	bl	800bd18 <osSemaphoreDelete>
#endif
    return 1;
 800ba06:	2301      	movs	r3, #1
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800ba1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f8f5 	bl	800bc10 <osSemaphoreWait>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d101      	bne.n	800ba30 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ba30:	68fb      	ldr	r3, [r7, #12]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f932 	bl	800bcac <osSemaphoreRelease>
#endif
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	4603      	mov	r3, r0
 800ba58:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ba5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba62:	2b84      	cmp	r3, #132	; 0x84
 800ba64:	d005      	beq.n	800ba72 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ba66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	3303      	adds	r3, #3
 800ba70:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ba72:	68fb      	ldr	r3, [r7, #12]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba86:	f3ef 8305 	mrs	r3, IPSR
 800ba8a:	607b      	str	r3, [r7, #4]
  return(result);
 800ba8c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	bf14      	ite	ne
 800ba92:	2301      	movne	r3, #1
 800ba94:	2300      	moveq	r3, #0
 800ba96:	b2db      	uxtb	r3, r3
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800baa8:	f001 fc2e 	bl	800d308 <vTaskStartScheduler>
  
  return osOK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800bab6:	f002 f85b 	bl	800db70 <xTaskGetSchedulerState>
 800baba:	4603      	mov	r3, r0
 800babc:	2b01      	cmp	r3, #1
 800babe:	d101      	bne.n	800bac4 <osKernelRunning+0x12>
    return 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	e000      	b.n	800bac6 <osKernelRunning+0x14>
  else
    return 1;
 800bac4:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	bd80      	pop	{r7, pc}

0800baca <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bace:	f7ff ffd7 	bl	800ba80 <inHandlerMode>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d003      	beq.n	800bae0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bad8:	f001 fd36 	bl	800d548 <xTaskGetTickCountFromISR>
 800badc:	4603      	mov	r3, r0
 800bade:	e002      	b.n	800bae6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bae0:	f001 fd22 	bl	800d528 <xTaskGetTickCount>
 800bae4:	4603      	mov	r3, r0
  }
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	bd80      	pop	{r7, pc}

0800baea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800baea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baec:	b089      	sub	sp, #36	; 0x24
 800baee:	af04      	add	r7, sp, #16
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d020      	beq.n	800bb3e <osThreadCreate+0x54>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d01c      	beq.n	800bb3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685c      	ldr	r4, [r3, #4]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681d      	ldr	r5, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	691e      	ldr	r6, [r3, #16]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7ff ff9a 	bl	800ba50 <makeFreeRtosPriority>
 800bb1c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	695b      	ldr	r3, [r3, #20]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb26:	9202      	str	r2, [sp, #8]
 800bb28:	9301      	str	r3, [sp, #4]
 800bb2a:	9100      	str	r1, [sp, #0]
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	4632      	mov	r2, r6
 800bb30:	4629      	mov	r1, r5
 800bb32:	4620      	mov	r0, r4
 800bb34:	f001 fa16 	bl	800cf64 <xTaskCreateStatic>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	60fb      	str	r3, [r7, #12]
 800bb3c:	e01c      	b.n	800bb78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	685c      	ldr	r4, [r3, #4]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb4a:	b29e      	uxth	r6, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7ff ff7c 	bl	800ba50 <makeFreeRtosPriority>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	f107 030c 	add.w	r3, r7, #12
 800bb5e:	9301      	str	r3, [sp, #4]
 800bb60:	9200      	str	r2, [sp, #0]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	4632      	mov	r2, r6
 800bb66:	4629      	mov	r1, r5
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f001 fa5e 	bl	800d02a <xTaskCreate>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d001      	beq.n	800bb78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bb74:	2300      	movs	r3, #0
 800bb76:	e000      	b.n	800bb7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bb78:	68fb      	ldr	r3, [r7, #12]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b084      	sub	sp, #16
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <osDelay+0x16>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	e000      	b.n	800bb9a <osDelay+0x18>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f001 fb7e 	bl	800d29c <vTaskDelay>
  
  return osOK;
 800bba0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b086      	sub	sp, #24
 800bbae:	af02      	add	r7, sp, #8
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00f      	beq.n	800bbdc <osSemaphoreCreate+0x32>
    if (count == 1) {
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d10a      	bne.n	800bbd8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	2203      	movs	r2, #3
 800bbc8:	9200      	str	r2, [sp, #0]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2100      	movs	r1, #0
 800bbce:	2001      	movs	r0, #1
 800bbd0:	f000 fab0 	bl	800c134 <xQueueGenericCreateStatic>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	e016      	b.n	800bc06 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	e014      	b.n	800bc06 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d110      	bne.n	800bc04 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bbe2:	2203      	movs	r2, #3
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	2001      	movs	r0, #1
 800bbe8:	f000 fb26 	bl	800c238 <xQueueGenericCreate>
 800bbec:	60f8      	str	r0, [r7, #12]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d005      	beq.n	800bc00 <osSemaphoreCreate+0x56>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f000 fb7e 	bl	800c2fc <xQueueGenericSend>
      return sema;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	e000      	b.n	800bc06 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bc04:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bc24:	2380      	movs	r3, #128	; 0x80
 800bc26:	e03a      	b.n	800bc9e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc32:	d103      	bne.n	800bc3c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bc34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc38:	60fb      	str	r3, [r7, #12]
 800bc3a:	e009      	b.n	800bc50 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d006      	beq.n	800bc50 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <osSemaphoreWait+0x40>
      ticks = 1;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bc50:	f7ff ff16 	bl	800ba80 <inHandlerMode>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d017      	beq.n	800bc8a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bc5a:	f107 0308 	add.w	r3, r7, #8
 800bc5e:	461a      	mov	r2, r3
 800bc60:	2100      	movs	r1, #0
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 ff80 	bl	800cb68 <xQueueReceiveFromISR>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d001      	beq.n	800bc72 <osSemaphoreWait+0x62>
      return osErrorOS;
 800bc6e:	23ff      	movs	r3, #255	; 0xff
 800bc70:	e015      	b.n	800bc9e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d011      	beq.n	800bc9c <osSemaphoreWait+0x8c>
 800bc78:	4b0b      	ldr	r3, [pc, #44]	; (800bca8 <osSemaphoreWait+0x98>)
 800bc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	e008      	b.n	800bc9c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bc8a:	68f9      	ldr	r1, [r7, #12]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fe57 	bl	800c940 <xQueueSemaphoreTake>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d001      	beq.n	800bc9c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bc98:	23ff      	movs	r3, #255	; 0xff
 800bc9a:	e000      	b.n	800bc9e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	e000ed04 	.word	0xe000ed04

0800bcac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bcbc:	f7ff fee0 	bl	800ba80 <inHandlerMode>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d016      	beq.n	800bcf4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bcc6:	f107 0308 	add.w	r3, r7, #8
 800bcca:	4619      	mov	r1, r3
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fcbb 	bl	800c648 <xQueueGiveFromISR>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d001      	beq.n	800bcdc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bcd8:	23ff      	movs	r3, #255	; 0xff
 800bcda:	e017      	b.n	800bd0c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d013      	beq.n	800bd0a <osSemaphoreRelease+0x5e>
 800bce2:	4b0c      	ldr	r3, [pc, #48]	; (800bd14 <osSemaphoreRelease+0x68>)
 800bce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	e00a      	b.n	800bd0a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fafe 	bl	800c2fc <xQueueGenericSend>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d001      	beq.n	800bd0a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bd06:	23ff      	movs	r3, #255	; 0xff
 800bd08:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	e000ed04 	.word	0xe000ed04

0800bd18 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bd20:	f7ff feae 	bl	800ba80 <inHandlerMode>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800bd2a:	2382      	movs	r3, #130	; 0x82
 800bd2c:	e003      	b.n	800bd36 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 ffa0 	bl	800cc74 <vQueueDelete>

  return osOK; 
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bd3e:	b590      	push	{r4, r7, lr}
 800bd40:	b085      	sub	sp, #20
 800bd42:	af02      	add	r7, sp, #8
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d011      	beq.n	800bd74 <osMessageCreate+0x36>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00d      	beq.n	800bd74 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6859      	ldr	r1, [r3, #4]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	689a      	ldr	r2, [r3, #8]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	2400      	movs	r4, #0
 800bd6a:	9400      	str	r4, [sp, #0]
 800bd6c:	f000 f9e2 	bl	800c134 <xQueueGenericCreateStatic>
 800bd70:	4603      	mov	r3, r0
 800bd72:	e008      	b.n	800bd86 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4619      	mov	r1, r3
 800bd80:	f000 fa5a 	bl	800c238 <xQueueGenericCreate>
 800bd84:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd90      	pop	{r4, r7, pc}
	...

0800bd90 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <osMessagePut+0x1e>
    ticks = 1;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bdae:	f7ff fe67 	bl	800ba80 <inHandlerMode>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d018      	beq.n	800bdea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bdb8:	f107 0210 	add.w	r2, r7, #16
 800bdbc:	f107 0108 	add.w	r1, r7, #8
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f000 fba0 	bl	800c508 <xQueueGenericSendFromISR>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d001      	beq.n	800bdd2 <osMessagePut+0x42>
      return osErrorOS;
 800bdce:	23ff      	movs	r3, #255	; 0xff
 800bdd0:	e018      	b.n	800be04 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d014      	beq.n	800be02 <osMessagePut+0x72>
 800bdd8:	4b0c      	ldr	r3, [pc, #48]	; (800be0c <osMessagePut+0x7c>)
 800bdda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	e00b      	b.n	800be02 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bdea:	f107 0108 	add.w	r1, r7, #8
 800bdee:	2300      	movs	r3, #0
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f000 fa82 	bl	800c2fc <xQueueGenericSend>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d001      	beq.n	800be02 <osMessagePut+0x72>
      return osErrorOS;
 800bdfe:	23ff      	movs	r3, #255	; 0xff
 800be00:	e000      	b.n	800be04 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3718      	adds	r7, #24
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	e000ed04 	.word	0xe000ed04

0800be10 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800be10:	b590      	push	{r4, r7, lr}
 800be12:	b08b      	sub	sp, #44	; 0x2c
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800be20:	2300      	movs	r3, #0
 800be22:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10a      	bne.n	800be40 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800be2a:	2380      	movs	r3, #128	; 0x80
 800be2c:	617b      	str	r3, [r7, #20]
    return event;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	461c      	mov	r4, r3
 800be32:	f107 0314 	add.w	r3, r7, #20
 800be36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800be3e:	e054      	b.n	800beea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800be40:	2300      	movs	r3, #0
 800be42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be4e:	d103      	bne.n	800be58 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800be50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be54:	627b      	str	r3, [r7, #36]	; 0x24
 800be56:	e009      	b.n	800be6c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d006      	beq.n	800be6c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800be62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <osMessageGet+0x5c>
      ticks = 1;
 800be68:	2301      	movs	r3, #1
 800be6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800be6c:	f7ff fe08 	bl	800ba80 <inHandlerMode>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d01c      	beq.n	800beb0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800be76:	f107 0220 	add.w	r2, r7, #32
 800be7a:	f107 0314 	add.w	r3, r7, #20
 800be7e:	3304      	adds	r3, #4
 800be80:	4619      	mov	r1, r3
 800be82:	68b8      	ldr	r0, [r7, #8]
 800be84:	f000 fe70 	bl	800cb68 <xQueueReceiveFromISR>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d102      	bne.n	800be94 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800be8e:	2310      	movs	r3, #16
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	e001      	b.n	800be98 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800be94:	2300      	movs	r3, #0
 800be96:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be98:	6a3b      	ldr	r3, [r7, #32]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d01d      	beq.n	800beda <osMessageGet+0xca>
 800be9e:	4b15      	ldr	r3, [pc, #84]	; (800bef4 <osMessageGet+0xe4>)
 800bea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea4:	601a      	str	r2, [r3, #0]
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	e014      	b.n	800beda <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800beb0:	f107 0314 	add.w	r3, r7, #20
 800beb4:	3304      	adds	r3, #4
 800beb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb8:	4619      	mov	r1, r3
 800beba:	68b8      	ldr	r0, [r7, #8]
 800bebc:	f000 fc5a 	bl	800c774 <xQueueReceive>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d102      	bne.n	800becc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bec6:	2310      	movs	r3, #16
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	e006      	b.n	800beda <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <osMessageGet+0xc6>
 800bed2:	2300      	movs	r3, #0
 800bed4:	e000      	b.n	800bed8 <osMessageGet+0xc8>
 800bed6:	2340      	movs	r3, #64	; 0x40
 800bed8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	461c      	mov	r4, r3
 800bede:	f107 0314 	add.w	r3, r7, #20
 800bee2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	372c      	adds	r7, #44	; 0x2c
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd90      	pop	{r4, r7, pc}
 800bef2:	bf00      	nop
 800bef4:	e000ed04 	.word	0xe000ed04

0800bef8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f103 0208 	add.w	r2, r3, #8
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f103 0208 	add.w	r2, r3, #8
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f103 0208 	add.w	r2, r3, #8
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf46:	bf00      	nop
 800bf48:	370c      	adds	r7, #12
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf52:	b480      	push	{r7}
 800bf54:	b085      	sub	sp, #20
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	689a      	ldr	r2, [r3, #8]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	601a      	str	r2, [r3, #0]
}
 800bf8e:	bf00      	nop
 800bf90:	3714      	adds	r7, #20
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b085      	sub	sp, #20
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfb0:	d103      	bne.n	800bfba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	60fb      	str	r3, [r7, #12]
 800bfb8:	e00c      	b.n	800bfd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	3308      	adds	r3, #8
 800bfbe:	60fb      	str	r3, [r7, #12]
 800bfc0:	e002      	b.n	800bfc8 <vListInsert+0x2e>
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	60fb      	str	r3, [r7, #12]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d2f6      	bcs.n	800bfc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	685a      	ldr	r2, [r3, #4]
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	683a      	ldr	r2, [r7, #0]
 800bfe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	601a      	str	r2, [r3, #0]
}
 800c000:	bf00      	nop
 800c002:	3714      	adds	r7, #20
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	6892      	ldr	r2, [r2, #8]
 800c022:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	6852      	ldr	r2, [r2, #4]
 800c02c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	429a      	cmp	r2, r3
 800c036:	d103      	bne.n	800c040 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689a      	ldr	r2, [r3, #8]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	1e5a      	subs	r2, r3, #1
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10c      	bne.n	800c08e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c078:	b672      	cpsid	i
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	b662      	cpsie	i
 800c088:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c08a:	bf00      	nop
 800c08c:	e7fe      	b.n	800c08c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c08e:	f002 f8bd 	bl	800e20c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09a:	68f9      	ldr	r1, [r7, #12]
 800c09c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c09e:	fb01 f303 	mul.w	r3, r1, r3
 800c0a2:	441a      	add	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	68f9      	ldr	r1, [r7, #12]
 800c0c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0c4:	fb01 f303 	mul.w	r3, r1, r3
 800c0c8:	441a      	add	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	22ff      	movs	r2, #255	; 0xff
 800c0d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	22ff      	movs	r2, #255	; 0xff
 800c0da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d114      	bne.n	800c10e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d01a      	beq.n	800c122 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3310      	adds	r3, #16
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f001 fb79 	bl	800d7e8 <xTaskRemoveFromEventList>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d012      	beq.n	800c122 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c0fc:	4b0c      	ldr	r3, [pc, #48]	; (800c130 <xQueueGenericReset+0xd0>)
 800c0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c102:	601a      	str	r2, [r3, #0]
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	e009      	b.n	800c122 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3310      	adds	r3, #16
 800c112:	4618      	mov	r0, r3
 800c114:	f7ff fef0 	bl	800bef8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3324      	adds	r3, #36	; 0x24
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7ff feeb 	bl	800bef8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c122:	f002 f8a7 	bl	800e274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c126:	2301      	movs	r3, #1
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08e      	sub	sp, #56	; 0x38
 800c138:	af02      	add	r7, sp, #8
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10c      	bne.n	800c162 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	b672      	cpsid	i
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	b662      	cpsie	i
 800c15c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c15e:	bf00      	nop
 800c160:	e7fe      	b.n	800c160 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d10c      	bne.n	800c182 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16c:	b672      	cpsid	i
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	b662      	cpsie	i
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c17e:	bf00      	nop
 800c180:	e7fe      	b.n	800c180 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <xQueueGenericCreateStatic+0x5a>
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <xQueueGenericCreateStatic+0x5e>
 800c18e:	2301      	movs	r3, #1
 800c190:	e000      	b.n	800c194 <xQueueGenericCreateStatic+0x60>
 800c192:	2300      	movs	r3, #0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d10c      	bne.n	800c1b2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	b672      	cpsid	i
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	b662      	cpsie	i
 800c1ac:	623b      	str	r3, [r7, #32]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d102      	bne.n	800c1be <xQueueGenericCreateStatic+0x8a>
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <xQueueGenericCreateStatic+0x8e>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e000      	b.n	800c1c4 <xQueueGenericCreateStatic+0x90>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10c      	bne.n	800c1e2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1cc:	b672      	cpsid	i
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	b662      	cpsie	i
 800c1dc:	61fb      	str	r3, [r7, #28]
}
 800c1de:	bf00      	nop
 800c1e0:	e7fe      	b.n	800c1e0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c1e2:	2348      	movs	r3, #72	; 0x48
 800c1e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	2b48      	cmp	r3, #72	; 0x48
 800c1ea:	d00c      	beq.n	800c206 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f0:	b672      	cpsid	i
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	b662      	cpsie	i
 800c200:	61bb      	str	r3, [r7, #24]
}
 800c202:	bf00      	nop
 800c204:	e7fe      	b.n	800c204 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c206:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00d      	beq.n	800c22e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	2201      	movs	r2, #1
 800c216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c21a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	4613      	mov	r3, r2
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	68b9      	ldr	r1, [r7, #8]
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 f847 	bl	800c2bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c230:	4618      	mov	r0, r3
 800c232:	3730      	adds	r7, #48	; 0x30
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b08a      	sub	sp, #40	; 0x28
 800c23c:	af02      	add	r7, sp, #8
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	4613      	mov	r3, r2
 800c244:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10c      	bne.n	800c266 <xQueueGenericCreate+0x2e>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	b672      	cpsid	i
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	b662      	cpsie	i
 800c260:	613b      	str	r3, [r7, #16]
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	61fb      	str	r3, [r7, #28]
 800c270:	e004      	b.n	800c27c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	fb02 f303 	mul.w	r3, r2, r3
 800c27a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	3348      	adds	r3, #72	; 0x48
 800c280:	4618      	mov	r0, r3
 800c282:	f002 f8ef 	bl	800e464 <pvPortMalloc>
 800c286:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d011      	beq.n	800c2b2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	3348      	adds	r3, #72	; 0x48
 800c296:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2a0:	79fa      	ldrb	r2, [r7, #7]
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	697a      	ldr	r2, [r7, #20]
 800c2aa:	68b9      	ldr	r1, [r7, #8]
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 f805 	bl	800c2bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2b2:	69bb      	ldr	r3, [r7, #24]
	}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3720      	adds	r7, #32
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
 800c2c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d103      	bne.n	800c2d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	69ba      	ldr	r2, [r7, #24]
 800c2d4:	601a      	str	r2, [r3, #0]
 800c2d6:	e002      	b.n	800c2de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	69b8      	ldr	r0, [r7, #24]
 800c2ee:	f7ff feb7 	bl	800c060 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2f2:	bf00      	nop
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08e      	sub	sp, #56	; 0x38
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
 800c308:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c30a:	2300      	movs	r3, #0
 800c30c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10c      	bne.n	800c332 <xQueueGenericSend+0x36>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31c:	b672      	cpsid	i
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	b662      	cpsie	i
 800c32c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d103      	bne.n	800c340 <xQueueGenericSend+0x44>
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d101      	bne.n	800c344 <xQueueGenericSend+0x48>
 800c340:	2301      	movs	r3, #1
 800c342:	e000      	b.n	800c346 <xQueueGenericSend+0x4a>
 800c344:	2300      	movs	r3, #0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10c      	bne.n	800c364 <xQueueGenericSend+0x68>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	b672      	cpsid	i
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	b662      	cpsie	i
 800c35e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	2b02      	cmp	r3, #2
 800c368:	d103      	bne.n	800c372 <xQueueGenericSend+0x76>
 800c36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d101      	bne.n	800c376 <xQueueGenericSend+0x7a>
 800c372:	2301      	movs	r3, #1
 800c374:	e000      	b.n	800c378 <xQueueGenericSend+0x7c>
 800c376:	2300      	movs	r3, #0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10c      	bne.n	800c396 <xQueueGenericSend+0x9a>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	b672      	cpsid	i
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	b662      	cpsie	i
 800c390:	623b      	str	r3, [r7, #32]
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c396:	f001 fbeb 	bl	800db70 <xTaskGetSchedulerState>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <xQueueGenericSend+0xaa>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <xQueueGenericSend+0xae>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <xQueueGenericSend+0xb0>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10c      	bne.n	800c3ca <xQueueGenericSend+0xce>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	b672      	cpsid	i
 800c3b6:	f383 8811 	msr	BASEPRI, r3
 800c3ba:	f3bf 8f6f 	isb	sy
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	b662      	cpsie	i
 800c3c4:	61fb      	str	r3, [r7, #28]
}
 800c3c6:	bf00      	nop
 800c3c8:	e7fe      	b.n	800c3c8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3ca:	f001 ff1f 	bl	800e20c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d302      	bcc.n	800c3e0 <xQueueGenericSend+0xe4>
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	d129      	bne.n	800c434 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3e0:	683a      	ldr	r2, [r7, #0]
 800c3e2:	68b9      	ldr	r1, [r7, #8]
 800c3e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3e6:	f000 fc82 	bl	800ccee <prvCopyDataToQueue>
 800c3ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d010      	beq.n	800c416 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f6:	3324      	adds	r3, #36	; 0x24
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f001 f9f5 	bl	800d7e8 <xTaskRemoveFromEventList>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d013      	beq.n	800c42c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c404:	4b3f      	ldr	r3, [pc, #252]	; (800c504 <xQueueGenericSend+0x208>)
 800c406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c40a:	601a      	str	r2, [r3, #0]
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	e00a      	b.n	800c42c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d007      	beq.n	800c42c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c41c:	4b39      	ldr	r3, [pc, #228]	; (800c504 <xQueueGenericSend+0x208>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c42c:	f001 ff22 	bl	800e274 <vPortExitCritical>
				return pdPASS;
 800c430:	2301      	movs	r3, #1
 800c432:	e063      	b.n	800c4fc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d103      	bne.n	800c442 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c43a:	f001 ff1b 	bl	800e274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	e05c      	b.n	800c4fc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c444:	2b00      	cmp	r3, #0
 800c446:	d106      	bne.n	800c456 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c448:	f107 0314 	add.w	r3, r7, #20
 800c44c:	4618      	mov	r0, r3
 800c44e:	f001 fa2f 	bl	800d8b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c452:	2301      	movs	r3, #1
 800c454:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c456:	f001 ff0d 	bl	800e274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c45a:	f000 ffb9 	bl	800d3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c45e:	f001 fed5 	bl	800e20c <vPortEnterCritical>
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c468:	b25b      	sxtb	r3, r3
 800c46a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c46e:	d103      	bne.n	800c478 <xQueueGenericSend+0x17c>
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	2200      	movs	r2, #0
 800c474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c47e:	b25b      	sxtb	r3, r3
 800c480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c484:	d103      	bne.n	800c48e <xQueueGenericSend+0x192>
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c48e:	f001 fef1 	bl	800e274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c492:	1d3a      	adds	r2, r7, #4
 800c494:	f107 0314 	add.w	r3, r7, #20
 800c498:	4611      	mov	r1, r2
 800c49a:	4618      	mov	r0, r3
 800c49c:	f001 fa1e 	bl	800d8dc <xTaskCheckForTimeOut>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d124      	bne.n	800c4f0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c4a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4a8:	f000 fd19 	bl	800cede <prvIsQueueFull>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d018      	beq.n	800c4e4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b4:	3310      	adds	r3, #16
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f001 f96e 	bl	800d79c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c4c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4c2:	f000 fca4 	bl	800ce0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4c6:	f000 ff91 	bl	800d3ec <xTaskResumeAll>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f47f af7c 	bne.w	800c3ca <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800c4d2:	4b0c      	ldr	r3, [pc, #48]	; (800c504 <xQueueGenericSend+0x208>)
 800c4d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d8:	601a      	str	r2, [r3, #0]
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	e772      	b.n	800c3ca <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4e6:	f000 fc92 	bl	800ce0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4ea:	f000 ff7f 	bl	800d3ec <xTaskResumeAll>
 800c4ee:	e76c      	b.n	800c3ca <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4f2:	f000 fc8c 	bl	800ce0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4f6:	f000 ff79 	bl	800d3ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3738      	adds	r7, #56	; 0x38
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	e000ed04 	.word	0xe000ed04

0800c508 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b08e      	sub	sp, #56	; 0x38
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
 800c514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d10c      	bne.n	800c53a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800c520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c524:	b672      	cpsid	i
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	b662      	cpsie	i
 800c534:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c536:	bf00      	nop
 800c538:	e7fe      	b.n	800c538 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d103      	bne.n	800c548 <xQueueGenericSendFromISR+0x40>
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <xQueueGenericSendFromISR+0x44>
 800c548:	2301      	movs	r3, #1
 800c54a:	e000      	b.n	800c54e <xQueueGenericSendFromISR+0x46>
 800c54c:	2300      	movs	r3, #0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10c      	bne.n	800c56c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	b672      	cpsid	i
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	b662      	cpsie	i
 800c566:	623b      	str	r3, [r7, #32]
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b02      	cmp	r3, #2
 800c570:	d103      	bne.n	800c57a <xQueueGenericSendFromISR+0x72>
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c576:	2b01      	cmp	r3, #1
 800c578:	d101      	bne.n	800c57e <xQueueGenericSendFromISR+0x76>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e000      	b.n	800c580 <xQueueGenericSendFromISR+0x78>
 800c57e:	2300      	movs	r3, #0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10c      	bne.n	800c59e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800c584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c588:	b672      	cpsid	i
 800c58a:	f383 8811 	msr	BASEPRI, r3
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f3bf 8f4f 	dsb	sy
 800c596:	b662      	cpsie	i
 800c598:	61fb      	str	r3, [r7, #28]
}
 800c59a:	bf00      	nop
 800c59c:	e7fe      	b.n	800c59c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c59e:	f001 ff1d 	bl	800e3dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c5a2:	f3ef 8211 	mrs	r2, BASEPRI
 800c5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5aa:	b672      	cpsid	i
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	b662      	cpsie	i
 800c5ba:	61ba      	str	r2, [r7, #24]
 800c5bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c5be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d302      	bcc.n	800c5d4 <xQueueGenericSendFromISR+0xcc>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d12c      	bne.n	800c62e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	68b9      	ldr	r1, [r7, #8]
 800c5e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5e4:	f000 fb83 	bl	800ccee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c5ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5f0:	d112      	bne.n	800c618 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d016      	beq.n	800c628 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	3324      	adds	r3, #36	; 0x24
 800c5fe:	4618      	mov	r0, r3
 800c600:	f001 f8f2 	bl	800d7e8 <xTaskRemoveFromEventList>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00e      	beq.n	800c628 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00b      	beq.n	800c628 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	601a      	str	r2, [r3, #0]
 800c616:	e007      	b.n	800c628 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c618:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c61c:	3301      	adds	r3, #1
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	b25a      	sxtb	r2, r3
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c628:	2301      	movs	r3, #1
 800c62a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c62c:	e001      	b.n	800c632 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c62e:	2300      	movs	r3, #0
 800c630:	637b      	str	r3, [r7, #52]	; 0x34
 800c632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c634:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c63c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c640:	4618      	mov	r0, r3
 800c642:	3738      	adds	r7, #56	; 0x38
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b08e      	sub	sp, #56	; 0x38
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10c      	bne.n	800c676 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	b672      	cpsid	i
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	b662      	cpsie	i
 800c670:	623b      	str	r3, [r7, #32]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00c      	beq.n	800c698 <xQueueGiveFromISR+0x50>
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	b672      	cpsid	i
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	b662      	cpsie	i
 800c692:	61fb      	str	r3, [r7, #28]
}
 800c694:	bf00      	nop
 800c696:	e7fe      	b.n	800c696 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d103      	bne.n	800c6a8 <xQueueGiveFromISR+0x60>
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <xQueueGiveFromISR+0x64>
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e000      	b.n	800c6ae <xQueueGiveFromISR+0x66>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10c      	bne.n	800c6cc <xQueueGiveFromISR+0x84>
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b6:	b672      	cpsid	i
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	b662      	cpsie	i
 800c6c6:	61bb      	str	r3, [r7, #24]
}
 800c6c8:	bf00      	nop
 800c6ca:	e7fe      	b.n	800c6ca <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6cc:	f001 fe86 	bl	800e3dc <vPortValidateInterruptPriority>
	__asm volatile
 800c6d0:	f3ef 8211 	mrs	r2, BASEPRI
 800c6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d8:	b672      	cpsid	i
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	b662      	cpsie	i
 800c6e8:	617a      	str	r2, [r7, #20]
 800c6ea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c6ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d22b      	bcs.n	800c758 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	1c5a      	adds	r2, r3, #1
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c712:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c71a:	d112      	bne.n	800c742 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c720:	2b00      	cmp	r3, #0
 800c722:	d016      	beq.n	800c752 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c726:	3324      	adds	r3, #36	; 0x24
 800c728:	4618      	mov	r0, r3
 800c72a:	f001 f85d 	bl	800d7e8 <xTaskRemoveFromEventList>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00e      	beq.n	800c752 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00b      	beq.n	800c752 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	2201      	movs	r2, #1
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	e007      	b.n	800c752 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c746:	3301      	adds	r3, #1
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	b25a      	sxtb	r2, r3
 800c74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c752:	2301      	movs	r3, #1
 800c754:	637b      	str	r3, [r7, #52]	; 0x34
 800c756:	e001      	b.n	800c75c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c758:	2300      	movs	r3, #0
 800c75a:	637b      	str	r3, [r7, #52]	; 0x34
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f383 8811 	msr	BASEPRI, r3
}
 800c766:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3738      	adds	r7, #56	; 0x38
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
	...

0800c774 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b08c      	sub	sp, #48	; 0x30
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c780:	2300      	movs	r3, #0
 800c782:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10c      	bne.n	800c7a8 <xQueueReceive+0x34>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	b672      	cpsid	i
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	b662      	cpsie	i
 800c7a2:	623b      	str	r3, [r7, #32]
}
 800c7a4:	bf00      	nop
 800c7a6:	e7fe      	b.n	800c7a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d103      	bne.n	800c7b6 <xQueueReceive+0x42>
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d101      	bne.n	800c7ba <xQueueReceive+0x46>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e000      	b.n	800c7bc <xQueueReceive+0x48>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10c      	bne.n	800c7da <xQueueReceive+0x66>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c4:	b672      	cpsid	i
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	b662      	cpsie	i
 800c7d4:	61fb      	str	r3, [r7, #28]
}
 800c7d6:	bf00      	nop
 800c7d8:	e7fe      	b.n	800c7d8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7da:	f001 f9c9 	bl	800db70 <xTaskGetSchedulerState>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d102      	bne.n	800c7ea <xQueueReceive+0x76>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <xQueueReceive+0x7a>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e000      	b.n	800c7f0 <xQueueReceive+0x7c>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10c      	bne.n	800c80e <xQueueReceive+0x9a>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f8:	b672      	cpsid	i
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	b662      	cpsie	i
 800c808:	61bb      	str	r3, [r7, #24]
}
 800c80a:	bf00      	nop
 800c80c:	e7fe      	b.n	800c80c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c80e:	f001 fcfd 	bl	800e20c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c816:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d01f      	beq.n	800c85e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c81e:	68b9      	ldr	r1, [r7, #8]
 800c820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c822:	f000 face 	bl	800cdc2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c828:	1e5a      	subs	r2, r3, #1
 800c82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00f      	beq.n	800c856 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	3310      	adds	r3, #16
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 ffd4 	bl	800d7e8 <xTaskRemoveFromEventList>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d007      	beq.n	800c856 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c846:	4b3d      	ldr	r3, [pc, #244]	; (800c93c <xQueueReceive+0x1c8>)
 800c848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c84c:	601a      	str	r2, [r3, #0]
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c856:	f001 fd0d 	bl	800e274 <vPortExitCritical>
				return pdPASS;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e069      	b.n	800c932 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d103      	bne.n	800c86c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c864:	f001 fd06 	bl	800e274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c868:	2300      	movs	r3, #0
 800c86a:	e062      	b.n	800c932 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d106      	bne.n	800c880 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c872:	f107 0310 	add.w	r3, r7, #16
 800c876:	4618      	mov	r0, r3
 800c878:	f001 f81a 	bl	800d8b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c87c:	2301      	movs	r3, #1
 800c87e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c880:	f001 fcf8 	bl	800e274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c884:	f000 fda4 	bl	800d3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c888:	f001 fcc0 	bl	800e20c <vPortEnterCritical>
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c892:	b25b      	sxtb	r3, r3
 800c894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c898:	d103      	bne.n	800c8a2 <xQueueReceive+0x12e>
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8a8:	b25b      	sxtb	r3, r3
 800c8aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8ae:	d103      	bne.n	800c8b8 <xQueueReceive+0x144>
 800c8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8b8:	f001 fcdc 	bl	800e274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8bc:	1d3a      	adds	r2, r7, #4
 800c8be:	f107 0310 	add.w	r3, r7, #16
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f001 f809 	bl	800d8dc <xTaskCheckForTimeOut>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d123      	bne.n	800c918 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d2:	f000 faee 	bl	800ceb2 <prvIsQueueEmpty>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d017      	beq.n	800c90c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	3324      	adds	r3, #36	; 0x24
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 ff59 	bl	800d79c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ec:	f000 fa8f 	bl	800ce0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8f0:	f000 fd7c 	bl	800d3ec <xTaskResumeAll>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d189      	bne.n	800c80e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c8fa:	4b10      	ldr	r3, [pc, #64]	; (800c93c <xQueueReceive+0x1c8>)
 800c8fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c900:	601a      	str	r2, [r3, #0]
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	e780      	b.n	800c80e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c90c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c90e:	f000 fa7e 	bl	800ce0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c912:	f000 fd6b 	bl	800d3ec <xTaskResumeAll>
 800c916:	e77a      	b.n	800c80e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c91a:	f000 fa78 	bl	800ce0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c91e:	f000 fd65 	bl	800d3ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c924:	f000 fac5 	bl	800ceb2 <prvIsQueueEmpty>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f43f af6f 	beq.w	800c80e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c930:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c932:	4618      	mov	r0, r3
 800c934:	3730      	adds	r7, #48	; 0x30
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	e000ed04 	.word	0xe000ed04

0800c940 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08e      	sub	sp, #56	; 0x38
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c94a:	2300      	movs	r3, #0
 800c94c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c952:	2300      	movs	r3, #0
 800c954:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10c      	bne.n	800c976 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	b672      	cpsid	i
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	b662      	cpsie	i
 800c970:	623b      	str	r3, [r7, #32]
}
 800c972:	bf00      	nop
 800c974:	e7fe      	b.n	800c974 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00c      	beq.n	800c998 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	b672      	cpsid	i
 800c984:	f383 8811 	msr	BASEPRI, r3
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	b662      	cpsie	i
 800c992:	61fb      	str	r3, [r7, #28]
}
 800c994:	bf00      	nop
 800c996:	e7fe      	b.n	800c996 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c998:	f001 f8ea 	bl	800db70 <xTaskGetSchedulerState>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d102      	bne.n	800c9a8 <xQueueSemaphoreTake+0x68>
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <xQueueSemaphoreTake+0x6c>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e000      	b.n	800c9ae <xQueueSemaphoreTake+0x6e>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10c      	bne.n	800c9cc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800c9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b6:	b672      	cpsid	i
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	b662      	cpsie	i
 800c9c6:	61bb      	str	r3, [r7, #24]
}
 800c9c8:	bf00      	nop
 800c9ca:	e7fe      	b.n	800c9ca <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9cc:	f001 fc1e 	bl	800e20c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d024      	beq.n	800ca26 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	1e5a      	subs	r2, r3, #1
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d104      	bne.n	800c9f6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c9ec:	f001 fa86 	bl	800defc <pvTaskIncrementMutexHeldCount>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00f      	beq.n	800ca1e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	3310      	adds	r3, #16
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 fef0 	bl	800d7e8 <xTaskRemoveFromEventList>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d007      	beq.n	800ca1e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca0e:	4b55      	ldr	r3, [pc, #340]	; (800cb64 <xQueueSemaphoreTake+0x224>)
 800ca10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca14:	601a      	str	r2, [r3, #0]
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca1e:	f001 fc29 	bl	800e274 <vPortExitCritical>
				return pdPASS;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e099      	b.n	800cb5a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d113      	bne.n	800ca54 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ca2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00c      	beq.n	800ca4c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	b672      	cpsid	i
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	b662      	cpsie	i
 800ca46:	617b      	str	r3, [r7, #20]
}
 800ca48:	bf00      	nop
 800ca4a:	e7fe      	b.n	800ca4a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ca4c:	f001 fc12 	bl	800e274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca50:	2300      	movs	r3, #0
 800ca52:	e082      	b.n	800cb5a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d106      	bne.n	800ca68 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca5a:	f107 030c 	add.w	r3, r7, #12
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 ff26 	bl	800d8b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca64:	2301      	movs	r3, #1
 800ca66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca68:	f001 fc04 	bl	800e274 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca6c:	f000 fcb0 	bl	800d3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca70:	f001 fbcc 	bl	800e20c <vPortEnterCritical>
 800ca74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca7a:	b25b      	sxtb	r3, r3
 800ca7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca80:	d103      	bne.n	800ca8a <xQueueSemaphoreTake+0x14a>
 800ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca90:	b25b      	sxtb	r3, r3
 800ca92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca96:	d103      	bne.n	800caa0 <xQueueSemaphoreTake+0x160>
 800ca98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800caa0:	f001 fbe8 	bl	800e274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800caa4:	463a      	mov	r2, r7
 800caa6:	f107 030c 	add.w	r3, r7, #12
 800caaa:	4611      	mov	r1, r2
 800caac:	4618      	mov	r0, r3
 800caae:	f000 ff15 	bl	800d8dc <xTaskCheckForTimeOut>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d132      	bne.n	800cb1e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caba:	f000 f9fa 	bl	800ceb2 <prvIsQueueEmpty>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d026      	beq.n	800cb12 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d109      	bne.n	800cae0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800cacc:	f001 fb9e 	bl	800e20c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f001 f869 	bl	800dbac <xTaskPriorityInherit>
 800cada:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cadc:	f001 fbca 	bl	800e274 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	3324      	adds	r3, #36	; 0x24
 800cae4:	683a      	ldr	r2, [r7, #0]
 800cae6:	4611      	mov	r1, r2
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 fe57 	bl	800d79c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800caee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caf0:	f000 f98d 	bl	800ce0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800caf4:	f000 fc7a 	bl	800d3ec <xTaskResumeAll>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f47f af66 	bne.w	800c9cc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800cb00:	4b18      	ldr	r3, [pc, #96]	; (800cb64 <xQueueSemaphoreTake+0x224>)
 800cb02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb06:	601a      	str	r2, [r3, #0]
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	e75c      	b.n	800c9cc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cb12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb14:	f000 f97b 	bl	800ce0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb18:	f000 fc68 	bl	800d3ec <xTaskResumeAll>
 800cb1c:	e756      	b.n	800c9cc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cb1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb20:	f000 f975 	bl	800ce0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb24:	f000 fc62 	bl	800d3ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb2a:	f000 f9c2 	bl	800ceb2 <prvIsQueueEmpty>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f43f af4b 	beq.w	800c9cc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00d      	beq.n	800cb58 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800cb3c:	f001 fb66 	bl	800e20c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb42:	f000 f8bc 	bl	800ccbe <prvGetDisinheritPriorityAfterTimeout>
 800cb46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f001 f936 	bl	800ddc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cb54:	f001 fb8e 	bl	800e274 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3738      	adds	r7, #56	; 0x38
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	e000ed04 	.word	0xe000ed04

0800cb68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08e      	sub	sp, #56	; 0x38
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10c      	bne.n	800cb98 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	b672      	cpsid	i
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	b662      	cpsie	i
 800cb92:	623b      	str	r3, [r7, #32]
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d103      	bne.n	800cba6 <xQueueReceiveFromISR+0x3e>
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d101      	bne.n	800cbaa <xQueueReceiveFromISR+0x42>
 800cba6:	2301      	movs	r3, #1
 800cba8:	e000      	b.n	800cbac <xQueueReceiveFromISR+0x44>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10c      	bne.n	800cbca <xQueueReceiveFromISR+0x62>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	b672      	cpsid	i
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	b662      	cpsie	i
 800cbc4:	61fb      	str	r3, [r7, #28]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbca:	f001 fc07 	bl	800e3dc <vPortValidateInterruptPriority>
	__asm volatile
 800cbce:	f3ef 8211 	mrs	r2, BASEPRI
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	b672      	cpsid	i
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	b662      	cpsie	i
 800cbe6:	61ba      	str	r2, [r7, #24]
 800cbe8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cbea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cbec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d02f      	beq.n	800cc5a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc04:	68b9      	ldr	r1, [r7, #8]
 800cc06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc08:	f000 f8db 	bl	800cdc2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0e:	1e5a      	subs	r2, r3, #1
 800cc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cc14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc1c:	d112      	bne.n	800cc44 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d016      	beq.n	800cc54 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	3310      	adds	r3, #16
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 fddc 	bl	800d7e8 <xTaskRemoveFromEventList>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00e      	beq.n	800cc54 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00b      	beq.n	800cc54 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	601a      	str	r2, [r3, #0]
 800cc42:	e007      	b.n	800cc54 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cc44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc48:	3301      	adds	r3, #1
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	b25a      	sxtb	r2, r3
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cc54:	2301      	movs	r3, #1
 800cc56:	637b      	str	r3, [r7, #52]	; 0x34
 800cc58:	e001      	b.n	800cc5e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	637b      	str	r3, [r7, #52]	; 0x34
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	f383 8811 	msr	BASEPRI, r3
}
 800cc68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3738      	adds	r7, #56	; 0x38
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10c      	bne.n	800cca0 <vQueueDelete+0x2c>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	b672      	cpsid	i
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	b662      	cpsie	i
 800cc9a:	60bb      	str	r3, [r7, #8]
}
 800cc9c:	bf00      	nop
 800cc9e:	e7fe      	b.n	800cc9e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f000 f935 	bl	800cf10 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d102      	bne.n	800ccb6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f001 fca1 	bl	800e5f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ccb6:	bf00      	nop
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ccbe:	b480      	push	{r7}
 800ccc0:	b085      	sub	sp, #20
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d006      	beq.n	800ccdc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f1c3 0307 	rsb	r3, r3, #7
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	e001      	b.n	800cce0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cce0:	68fb      	ldr	r3, [r7, #12]
	}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3714      	adds	r7, #20
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b086      	sub	sp, #24
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	60f8      	str	r0, [r7, #12]
 800ccf6:	60b9      	str	r1, [r7, #8]
 800ccf8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10d      	bne.n	800cd28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d14d      	bne.n	800cdb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f000 ffc7 	bl	800dcac <xTaskPriorityDisinherit>
 800cd1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2200      	movs	r2, #0
 800cd24:	609a      	str	r2, [r3, #8]
 800cd26:	e043      	b.n	800cdb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d119      	bne.n	800cd62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6858      	ldr	r0, [r3, #4]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd36:	461a      	mov	r2, r3
 800cd38:	68b9      	ldr	r1, [r7, #8]
 800cd3a:	f002 fe51 	bl	800f9e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd46:	441a      	add	r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	685a      	ldr	r2, [r3, #4]
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d32b      	bcc.n	800cdb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	605a      	str	r2, [r3, #4]
 800cd60:	e026      	b.n	800cdb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	68d8      	ldr	r0, [r3, #12]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	68b9      	ldr	r1, [r7, #8]
 800cd6e:	f002 fe37 	bl	800f9e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	68da      	ldr	r2, [r3, #12]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7a:	425b      	negs	r3, r3
 800cd7c:	441a      	add	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	68da      	ldr	r2, [r3, #12]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d207      	bcs.n	800cd9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	689a      	ldr	r2, [r3, #8]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd96:	425b      	negs	r3, r3
 800cd98:	441a      	add	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d105      	bne.n	800cdb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d002      	beq.n	800cdb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	1c5a      	adds	r2, r3, #1
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cdb8:	697b      	ldr	r3, [r7, #20]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b082      	sub	sp, #8
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
 800cdca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d018      	beq.n	800ce06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68da      	ldr	r2, [r3, #12]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cddc:	441a      	add	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	68da      	ldr	r2, [r3, #12]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d303      	bcc.n	800cdf6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	68d9      	ldr	r1, [r3, #12]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfe:	461a      	mov	r2, r3
 800ce00:	6838      	ldr	r0, [r7, #0]
 800ce02:	f002 fded 	bl	800f9e0 <memcpy>
	}
}
 800ce06:	bf00      	nop
 800ce08:	3708      	adds	r7, #8
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b084      	sub	sp, #16
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ce16:	f001 f9f9 	bl	800e20c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce22:	e011      	b.n	800ce48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d012      	beq.n	800ce52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	3324      	adds	r3, #36	; 0x24
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 fcd9 	bl	800d7e8 <xTaskRemoveFromEventList>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d001      	beq.n	800ce40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ce3c:	f000 fdb4 	bl	800d9a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ce40:	7bfb      	ldrb	r3, [r7, #15]
 800ce42:	3b01      	subs	r3, #1
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	dce9      	bgt.n	800ce24 <prvUnlockQueue+0x16>
 800ce50:	e000      	b.n	800ce54 <prvUnlockQueue+0x46>
					break;
 800ce52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	22ff      	movs	r2, #255	; 0xff
 800ce58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ce5c:	f001 fa0a 	bl	800e274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ce60:	f001 f9d4 	bl	800e20c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce6c:	e011      	b.n	800ce92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d012      	beq.n	800ce9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	3310      	adds	r3, #16
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 fcb4 	bl	800d7e8 <xTaskRemoveFromEventList>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ce86:	f000 fd8f 	bl	800d9a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ce8a:	7bbb      	ldrb	r3, [r7, #14]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	dce9      	bgt.n	800ce6e <prvUnlockQueue+0x60>
 800ce9a:	e000      	b.n	800ce9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ce9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	22ff      	movs	r2, #255	; 0xff
 800cea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cea6:	f001 f9e5 	bl	800e274 <vPortExitCritical>
}
 800ceaa:	bf00      	nop
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b084      	sub	sp, #16
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ceba:	f001 f9a7 	bl	800e20c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d102      	bne.n	800cecc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cec6:	2301      	movs	r3, #1
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	e001      	b.n	800ced0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cecc:	2300      	movs	r3, #0
 800cece:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ced0:	f001 f9d0 	bl	800e274 <vPortExitCritical>

	return xReturn;
 800ced4:	68fb      	ldr	r3, [r7, #12]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b084      	sub	sp, #16
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cee6:	f001 f991 	bl	800e20c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d102      	bne.n	800cefc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cef6:	2301      	movs	r3, #1
 800cef8:	60fb      	str	r3, [r7, #12]
 800cefa:	e001      	b.n	800cf00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cefc:	2300      	movs	r3, #0
 800cefe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf00:	f001 f9b8 	bl	800e274 <vPortExitCritical>

	return xReturn;
 800cf04:	68fb      	ldr	r3, [r7, #12]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
	...

0800cf10 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60fb      	str	r3, [r7, #12]
 800cf1c:	e016      	b.n	800cf4c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cf1e:	4a10      	ldr	r2, [pc, #64]	; (800cf60 <vQueueUnregisterQueue+0x50>)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	00db      	lsls	r3, r3, #3
 800cf24:	4413      	add	r3, r2
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d10b      	bne.n	800cf46 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cf2e:	4a0c      	ldr	r2, [pc, #48]	; (800cf60 <vQueueUnregisterQueue+0x50>)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2100      	movs	r1, #0
 800cf34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cf38:	4a09      	ldr	r2, [pc, #36]	; (800cf60 <vQueueUnregisterQueue+0x50>)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	00db      	lsls	r3, r3, #3
 800cf3e:	4413      	add	r3, r2
 800cf40:	2200      	movs	r2, #0
 800cf42:	605a      	str	r2, [r3, #4]
				break;
 800cf44:	e006      	b.n	800cf54 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	3301      	adds	r3, #1
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b07      	cmp	r3, #7
 800cf50:	d9e5      	bls.n	800cf1e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cf52:	bf00      	nop
 800cf54:	bf00      	nop
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr
 800cf60:	200066b0 	.word	0x200066b0

0800cf64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b08e      	sub	sp, #56	; 0x38
 800cf68:	af04      	add	r7, sp, #16
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
 800cf70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10c      	bne.n	800cf92 <xTaskCreateStatic+0x2e>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	b672      	cpsid	i
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	b662      	cpsie	i
 800cf8c:	623b      	str	r3, [r7, #32]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800cf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10c      	bne.n	800cfb2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800cf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9c:	b672      	cpsid	i
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	b662      	cpsie	i
 800cfac:	61fb      	str	r3, [r7, #28]
}
 800cfae:	bf00      	nop
 800cfb0:	e7fe      	b.n	800cfb0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cfb2:	2354      	movs	r3, #84	; 0x54
 800cfb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	2b54      	cmp	r3, #84	; 0x54
 800cfba:	d00c      	beq.n	800cfd6 <xTaskCreateStatic+0x72>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	b672      	cpsid	i
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	b662      	cpsie	i
 800cfd0:	61bb      	str	r3, [r7, #24]
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cfd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d01e      	beq.n	800d01c <xTaskCreateStatic+0xb8>
 800cfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d01b      	beq.n	800d01c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff0:	2202      	movs	r2, #2
 800cff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cff6:	2300      	movs	r3, #0
 800cff8:	9303      	str	r3, [sp, #12]
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	9302      	str	r3, [sp, #8]
 800cffe:	f107 0314 	add.w	r3, r7, #20
 800d002:	9301      	str	r3, [sp, #4]
 800d004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	68b9      	ldr	r1, [r7, #8]
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	f000 f850 	bl	800d0b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d016:	f000 f8d7 	bl	800d1c8 <prvAddNewTaskToReadyList>
 800d01a:	e001      	b.n	800d020 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d01c:	2300      	movs	r3, #0
 800d01e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d020:	697b      	ldr	r3, [r7, #20]
	}
 800d022:	4618      	mov	r0, r3
 800d024:	3728      	adds	r7, #40	; 0x28
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b08c      	sub	sp, #48	; 0x30
 800d02e:	af04      	add	r7, sp, #16
 800d030:	60f8      	str	r0, [r7, #12]
 800d032:	60b9      	str	r1, [r7, #8]
 800d034:	603b      	str	r3, [r7, #0]
 800d036:	4613      	mov	r3, r2
 800d038:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d03a:	88fb      	ldrh	r3, [r7, #6]
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	4618      	mov	r0, r3
 800d040:	f001 fa10 	bl	800e464 <pvPortMalloc>
 800d044:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00e      	beq.n	800d06a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d04c:	2054      	movs	r0, #84	; 0x54
 800d04e:	f001 fa09 	bl	800e464 <pvPortMalloc>
 800d052:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d003      	beq.n	800d062 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	631a      	str	r2, [r3, #48]	; 0x30
 800d060:	e005      	b.n	800d06e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d062:	6978      	ldr	r0, [r7, #20]
 800d064:	f001 fac8 	bl	800e5f8 <vPortFree>
 800d068:	e001      	b.n	800d06e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d017      	beq.n	800d0a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	2200      	movs	r2, #0
 800d078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d07c:	88fa      	ldrh	r2, [r7, #6]
 800d07e:	2300      	movs	r3, #0
 800d080:	9303      	str	r3, [sp, #12]
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	9302      	str	r3, [sp, #8]
 800d086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d088:	9301      	str	r3, [sp, #4]
 800d08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	68b9      	ldr	r1, [r7, #8]
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f000 f80e 	bl	800d0b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d098:	69f8      	ldr	r0, [r7, #28]
 800d09a:	f000 f895 	bl	800d1c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	61bb      	str	r3, [r7, #24]
 800d0a2:	e002      	b.n	800d0aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d0a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d0aa:	69bb      	ldr	r3, [r7, #24]
	}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3720      	adds	r7, #32
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b088      	sub	sp, #32
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
 800d0c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0c6:	6879      	ldr	r1, [r7, #4]
 800d0c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d0cc:	440b      	add	r3, r1
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	f023 0307 	bic.w	r3, r3, #7
 800d0da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00c      	beq.n	800d100 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	b672      	cpsid	i
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	b662      	cpsie	i
 800d0fa:	617b      	str	r3, [r7, #20]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d01f      	beq.n	800d146 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d106:	2300      	movs	r3, #0
 800d108:	61fb      	str	r3, [r7, #28]
 800d10a:	e012      	b.n	800d132 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	4413      	add	r3, r2
 800d112:	7819      	ldrb	r1, [r3, #0]
 800d114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	4413      	add	r3, r2
 800d11a:	3334      	adds	r3, #52	; 0x34
 800d11c:	460a      	mov	r2, r1
 800d11e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d120:	68ba      	ldr	r2, [r7, #8]
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	4413      	add	r3, r2
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d006      	beq.n	800d13a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	3301      	adds	r3, #1
 800d130:	61fb      	str	r3, [r7, #28]
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	2b0f      	cmp	r3, #15
 800d136:	d9e9      	bls.n	800d10c <prvInitialiseNewTask+0x58>
 800d138:	e000      	b.n	800d13c <prvInitialiseNewTask+0x88>
			{
				break;
 800d13a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13e:	2200      	movs	r2, #0
 800d140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d144:	e003      	b.n	800d14e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d150:	2b06      	cmp	r3, #6
 800d152:	d901      	bls.n	800d158 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d154:	2306      	movs	r3, #6
 800d156:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d15c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d162:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d166:	2200      	movs	r2, #0
 800d168:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16c:	3304      	adds	r3, #4
 800d16e:	4618      	mov	r0, r3
 800d170:	f7fe fee2 	bl	800bf38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d176:	3318      	adds	r3, #24
 800d178:	4618      	mov	r0, r3
 800d17a:	f7fe fedd 	bl	800bf38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d182:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d186:	f1c3 0207 	rsb	r2, r3, #7
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d192:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d196:	2200      	movs	r2, #0
 800d198:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	68f9      	ldr	r1, [r7, #12]
 800d1a6:	69b8      	ldr	r0, [r7, #24]
 800d1a8:	f000 ff22 	bl	800dff0 <pxPortInitialiseStack>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d002      	beq.n	800d1be <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1be:	bf00      	nop
 800d1c0:	3720      	adds	r7, #32
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
	...

0800d1c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d1d0:	f001 f81c 	bl	800e20c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d1d4:	4b2a      	ldr	r3, [pc, #168]	; (800d280 <prvAddNewTaskToReadyList+0xb8>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	4a29      	ldr	r2, [pc, #164]	; (800d280 <prvAddNewTaskToReadyList+0xb8>)
 800d1dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d1de:	4b29      	ldr	r3, [pc, #164]	; (800d284 <prvAddNewTaskToReadyList+0xbc>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d109      	bne.n	800d1fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d1e6:	4a27      	ldr	r2, [pc, #156]	; (800d284 <prvAddNewTaskToReadyList+0xbc>)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d1ec:	4b24      	ldr	r3, [pc, #144]	; (800d280 <prvAddNewTaskToReadyList+0xb8>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d110      	bne.n	800d216 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d1f4:	f000 fbfc 	bl	800d9f0 <prvInitialiseTaskLists>
 800d1f8:	e00d      	b.n	800d216 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d1fa:	4b23      	ldr	r3, [pc, #140]	; (800d288 <prvAddNewTaskToReadyList+0xc0>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d109      	bne.n	800d216 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d202:	4b20      	ldr	r3, [pc, #128]	; (800d284 <prvAddNewTaskToReadyList+0xbc>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d802      	bhi.n	800d216 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d210:	4a1c      	ldr	r2, [pc, #112]	; (800d284 <prvAddNewTaskToReadyList+0xbc>)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d216:	4b1d      	ldr	r3, [pc, #116]	; (800d28c <prvAddNewTaskToReadyList+0xc4>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	3301      	adds	r3, #1
 800d21c:	4a1b      	ldr	r2, [pc, #108]	; (800d28c <prvAddNewTaskToReadyList+0xc4>)
 800d21e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d224:	2201      	movs	r2, #1
 800d226:	409a      	lsls	r2, r3
 800d228:	4b19      	ldr	r3, [pc, #100]	; (800d290 <prvAddNewTaskToReadyList+0xc8>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4313      	orrs	r3, r2
 800d22e:	4a18      	ldr	r2, [pc, #96]	; (800d290 <prvAddNewTaskToReadyList+0xc8>)
 800d230:	6013      	str	r3, [r2, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d236:	4613      	mov	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4a15      	ldr	r2, [pc, #84]	; (800d294 <prvAddNewTaskToReadyList+0xcc>)
 800d240:	441a      	add	r2, r3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	3304      	adds	r3, #4
 800d246:	4619      	mov	r1, r3
 800d248:	4610      	mov	r0, r2
 800d24a:	f7fe fe82 	bl	800bf52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d24e:	f001 f811 	bl	800e274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d252:	4b0d      	ldr	r3, [pc, #52]	; (800d288 <prvAddNewTaskToReadyList+0xc0>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00e      	beq.n	800d278 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d25a:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <prvAddNewTaskToReadyList+0xbc>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d264:	429a      	cmp	r2, r3
 800d266:	d207      	bcs.n	800d278 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d268:	4b0b      	ldr	r3, [pc, #44]	; (800d298 <prvAddNewTaskToReadyList+0xd0>)
 800d26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d26e:	601a      	str	r2, [r3, #0]
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	200006e8 	.word	0x200006e8
 800d284:	200005e8 	.word	0x200005e8
 800d288:	200006f4 	.word	0x200006f4
 800d28c:	20000704 	.word	0x20000704
 800d290:	200006f0 	.word	0x200006f0
 800d294:	200005ec 	.word	0x200005ec
 800d298:	e000ed04 	.word	0xe000ed04

0800d29c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d019      	beq.n	800d2e2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d2ae:	4b14      	ldr	r3, [pc, #80]	; (800d300 <vTaskDelay+0x64>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00c      	beq.n	800d2d0 <vTaskDelay+0x34>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ba:	b672      	cpsid	i
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	b662      	cpsie	i
 800d2ca:	60bb      	str	r3, [r7, #8]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d2d0:	f000 f87e 	bl	800d3d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 fe24 	bl	800df24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d2dc:	f000 f886 	bl	800d3ec <xTaskResumeAll>
 800d2e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d107      	bne.n	800d2f8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800d2e8:	4b06      	ldr	r3, [pc, #24]	; (800d304 <vTaskDelay+0x68>)
 800d2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ee:	601a      	str	r2, [r3, #0]
 800d2f0:	f3bf 8f4f 	dsb	sy
 800d2f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d2f8:	bf00      	nop
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	20000710 	.word	0x20000710
 800d304:	e000ed04 	.word	0xe000ed04

0800d308 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b08a      	sub	sp, #40	; 0x28
 800d30c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d30e:	2300      	movs	r3, #0
 800d310:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d312:	2300      	movs	r3, #0
 800d314:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d316:	463a      	mov	r2, r7
 800d318:	1d39      	adds	r1, r7, #4
 800d31a:	f107 0308 	add.w	r3, r7, #8
 800d31e:	4618      	mov	r0, r3
 800d320:	f7f4 f9dc 	bl	80016dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d324:	6839      	ldr	r1, [r7, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	68ba      	ldr	r2, [r7, #8]
 800d32a:	9202      	str	r2, [sp, #8]
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	2300      	movs	r3, #0
 800d330:	9300      	str	r3, [sp, #0]
 800d332:	2300      	movs	r3, #0
 800d334:	460a      	mov	r2, r1
 800d336:	4920      	ldr	r1, [pc, #128]	; (800d3b8 <vTaskStartScheduler+0xb0>)
 800d338:	4820      	ldr	r0, [pc, #128]	; (800d3bc <vTaskStartScheduler+0xb4>)
 800d33a:	f7ff fe13 	bl	800cf64 <xTaskCreateStatic>
 800d33e:	4603      	mov	r3, r0
 800d340:	4a1f      	ldr	r2, [pc, #124]	; (800d3c0 <vTaskStartScheduler+0xb8>)
 800d342:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d344:	4b1e      	ldr	r3, [pc, #120]	; (800d3c0 <vTaskStartScheduler+0xb8>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d34c:	2301      	movs	r3, #1
 800d34e:	617b      	str	r3, [r7, #20]
 800d350:	e001      	b.n	800d356 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d352:	2300      	movs	r3, #0
 800d354:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d118      	bne.n	800d38e <vTaskStartScheduler+0x86>
	__asm volatile
 800d35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d360:	b672      	cpsid	i
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	b662      	cpsie	i
 800d370:	613b      	str	r3, [r7, #16]
}
 800d372:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d374:	4b13      	ldr	r3, [pc, #76]	; (800d3c4 <vTaskStartScheduler+0xbc>)
 800d376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d37a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d37c:	4b12      	ldr	r3, [pc, #72]	; (800d3c8 <vTaskStartScheduler+0xc0>)
 800d37e:	2201      	movs	r2, #1
 800d380:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d382:	4b12      	ldr	r3, [pc, #72]	; (800d3cc <vTaskStartScheduler+0xc4>)
 800d384:	2200      	movs	r2, #0
 800d386:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d388:	f000 fec2 	bl	800e110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d38c:	e010      	b.n	800d3b0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d394:	d10c      	bne.n	800d3b0 <vTaskStartScheduler+0xa8>
	__asm volatile
 800d396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39a:	b672      	cpsid	i
 800d39c:	f383 8811 	msr	BASEPRI, r3
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	b662      	cpsie	i
 800d3aa:	60fb      	str	r3, [r7, #12]
}
 800d3ac:	bf00      	nop
 800d3ae:	e7fe      	b.n	800d3ae <vTaskStartScheduler+0xa6>
}
 800d3b0:	bf00      	nop
 800d3b2:	3718      	adds	r7, #24
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	080103a8 	.word	0x080103a8
 800d3bc:	0800d9c1 	.word	0x0800d9c1
 800d3c0:	2000070c 	.word	0x2000070c
 800d3c4:	20000708 	.word	0x20000708
 800d3c8:	200006f4 	.word	0x200006f4
 800d3cc:	200006ec 	.word	0x200006ec

0800d3d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d3d4:	4b04      	ldr	r3, [pc, #16]	; (800d3e8 <vTaskSuspendAll+0x18>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	4a03      	ldr	r2, [pc, #12]	; (800d3e8 <vTaskSuspendAll+0x18>)
 800d3dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d3de:	bf00      	nop
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	20000710 	.word	0x20000710

0800d3ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d3fa:	4b42      	ldr	r3, [pc, #264]	; (800d504 <xTaskResumeAll+0x118>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d10c      	bne.n	800d41c <xTaskResumeAll+0x30>
	__asm volatile
 800d402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d406:	b672      	cpsid	i
 800d408:	f383 8811 	msr	BASEPRI, r3
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	f3bf 8f4f 	dsb	sy
 800d414:	b662      	cpsie	i
 800d416:	603b      	str	r3, [r7, #0]
}
 800d418:	bf00      	nop
 800d41a:	e7fe      	b.n	800d41a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d41c:	f000 fef6 	bl	800e20c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d420:	4b38      	ldr	r3, [pc, #224]	; (800d504 <xTaskResumeAll+0x118>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	3b01      	subs	r3, #1
 800d426:	4a37      	ldr	r2, [pc, #220]	; (800d504 <xTaskResumeAll+0x118>)
 800d428:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d42a:	4b36      	ldr	r3, [pc, #216]	; (800d504 <xTaskResumeAll+0x118>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d161      	bne.n	800d4f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d432:	4b35      	ldr	r3, [pc, #212]	; (800d508 <xTaskResumeAll+0x11c>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d05d      	beq.n	800d4f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d43a:	e02e      	b.n	800d49a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d43c:	4b33      	ldr	r3, [pc, #204]	; (800d50c <xTaskResumeAll+0x120>)
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	3318      	adds	r3, #24
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fe fddf 	bl	800c00c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3304      	adds	r3, #4
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fdda 	bl	800c00c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45c:	2201      	movs	r2, #1
 800d45e:	409a      	lsls	r2, r3
 800d460:	4b2b      	ldr	r3, [pc, #172]	; (800d510 <xTaskResumeAll+0x124>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4313      	orrs	r3, r2
 800d466:	4a2a      	ldr	r2, [pc, #168]	; (800d510 <xTaskResumeAll+0x124>)
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d46e:	4613      	mov	r3, r2
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	4413      	add	r3, r2
 800d474:	009b      	lsls	r3, r3, #2
 800d476:	4a27      	ldr	r2, [pc, #156]	; (800d514 <xTaskResumeAll+0x128>)
 800d478:	441a      	add	r2, r3
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	3304      	adds	r3, #4
 800d47e:	4619      	mov	r1, r3
 800d480:	4610      	mov	r0, r2
 800d482:	f7fe fd66 	bl	800bf52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d48a:	4b23      	ldr	r3, [pc, #140]	; (800d518 <xTaskResumeAll+0x12c>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d490:	429a      	cmp	r2, r3
 800d492:	d302      	bcc.n	800d49a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d494:	4b21      	ldr	r3, [pc, #132]	; (800d51c <xTaskResumeAll+0x130>)
 800d496:	2201      	movs	r2, #1
 800d498:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d49a:	4b1c      	ldr	r3, [pc, #112]	; (800d50c <xTaskResumeAll+0x120>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1cc      	bne.n	800d43c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d001      	beq.n	800d4ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d4a8:	f000 fb42 	bl	800db30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d4ac:	4b1c      	ldr	r3, [pc, #112]	; (800d520 <xTaskResumeAll+0x134>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d010      	beq.n	800d4da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d4b8:	f000 f858 	bl	800d56c <xTaskIncrementTick>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d002      	beq.n	800d4c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d4c2:	4b16      	ldr	r3, [pc, #88]	; (800d51c <xTaskResumeAll+0x130>)
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1f1      	bne.n	800d4b8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800d4d4:	4b12      	ldr	r3, [pc, #72]	; (800d520 <xTaskResumeAll+0x134>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d4da:	4b10      	ldr	r3, [pc, #64]	; (800d51c <xTaskResumeAll+0x130>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d009      	beq.n	800d4f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d4e6:	4b0f      	ldr	r3, [pc, #60]	; (800d524 <xTaskResumeAll+0x138>)
 800d4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ec:	601a      	str	r2, [r3, #0]
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4f6:	f000 febd 	bl	800e274 <vPortExitCritical>

	return xAlreadyYielded;
 800d4fa:	68bb      	ldr	r3, [r7, #8]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3710      	adds	r7, #16
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	20000710 	.word	0x20000710
 800d508:	200006e8 	.word	0x200006e8
 800d50c:	200006a8 	.word	0x200006a8
 800d510:	200006f0 	.word	0x200006f0
 800d514:	200005ec 	.word	0x200005ec
 800d518:	200005e8 	.word	0x200005e8
 800d51c:	200006fc 	.word	0x200006fc
 800d520:	200006f8 	.word	0x200006f8
 800d524:	e000ed04 	.word	0xe000ed04

0800d528 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d52e:	4b05      	ldr	r3, [pc, #20]	; (800d544 <xTaskGetTickCount+0x1c>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d534:	687b      	ldr	r3, [r7, #4]
}
 800d536:	4618      	mov	r0, r3
 800d538:	370c      	adds	r7, #12
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	200006ec 	.word	0x200006ec

0800d548 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d54e:	f000 ff45 	bl	800e3dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d552:	2300      	movs	r3, #0
 800d554:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d556:	4b04      	ldr	r3, [pc, #16]	; (800d568 <xTaskGetTickCountFromISR+0x20>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d55c:	683b      	ldr	r3, [r7, #0]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3708      	adds	r7, #8
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	200006ec 	.word	0x200006ec

0800d56c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d572:	2300      	movs	r3, #0
 800d574:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d576:	4b4f      	ldr	r3, [pc, #316]	; (800d6b4 <xTaskIncrementTick+0x148>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f040 808a 	bne.w	800d694 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d580:	4b4d      	ldr	r3, [pc, #308]	; (800d6b8 <xTaskIncrementTick+0x14c>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3301      	adds	r3, #1
 800d586:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d588:	4a4b      	ldr	r2, [pc, #300]	; (800d6b8 <xTaskIncrementTick+0x14c>)
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d122      	bne.n	800d5da <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d594:	4b49      	ldr	r3, [pc, #292]	; (800d6bc <xTaskIncrementTick+0x150>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00c      	beq.n	800d5b8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	b672      	cpsid	i
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	b662      	cpsie	i
 800d5b2:	603b      	str	r3, [r7, #0]
}
 800d5b4:	bf00      	nop
 800d5b6:	e7fe      	b.n	800d5b6 <xTaskIncrementTick+0x4a>
 800d5b8:	4b40      	ldr	r3, [pc, #256]	; (800d6bc <xTaskIncrementTick+0x150>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	60fb      	str	r3, [r7, #12]
 800d5be:	4b40      	ldr	r3, [pc, #256]	; (800d6c0 <xTaskIncrementTick+0x154>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a3e      	ldr	r2, [pc, #248]	; (800d6bc <xTaskIncrementTick+0x150>)
 800d5c4:	6013      	str	r3, [r2, #0]
 800d5c6:	4a3e      	ldr	r2, [pc, #248]	; (800d6c0 <xTaskIncrementTick+0x154>)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6013      	str	r3, [r2, #0]
 800d5cc:	4b3d      	ldr	r3, [pc, #244]	; (800d6c4 <xTaskIncrementTick+0x158>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	4a3c      	ldr	r2, [pc, #240]	; (800d6c4 <xTaskIncrementTick+0x158>)
 800d5d4:	6013      	str	r3, [r2, #0]
 800d5d6:	f000 faab 	bl	800db30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d5da:	4b3b      	ldr	r3, [pc, #236]	; (800d6c8 <xTaskIncrementTick+0x15c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d348      	bcc.n	800d676 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5e4:	4b35      	ldr	r3, [pc, #212]	; (800d6bc <xTaskIncrementTick+0x150>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d104      	bne.n	800d5f8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ee:	4b36      	ldr	r3, [pc, #216]	; (800d6c8 <xTaskIncrementTick+0x15c>)
 800d5f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5f4:	601a      	str	r2, [r3, #0]
					break;
 800d5f6:	e03e      	b.n	800d676 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5f8:	4b30      	ldr	r3, [pc, #192]	; (800d6bc <xTaskIncrementTick+0x150>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d203      	bcs.n	800d618 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d610:	4a2d      	ldr	r2, [pc, #180]	; (800d6c8 <xTaskIncrementTick+0x15c>)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d616:	e02e      	b.n	800d676 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	3304      	adds	r3, #4
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe fcf5 	bl	800c00c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d626:	2b00      	cmp	r3, #0
 800d628:	d004      	beq.n	800d634 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	3318      	adds	r3, #24
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fe fcec 	bl	800c00c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d638:	2201      	movs	r2, #1
 800d63a:	409a      	lsls	r2, r3
 800d63c:	4b23      	ldr	r3, [pc, #140]	; (800d6cc <xTaskIncrementTick+0x160>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4313      	orrs	r3, r2
 800d642:	4a22      	ldr	r2, [pc, #136]	; (800d6cc <xTaskIncrementTick+0x160>)
 800d644:	6013      	str	r3, [r2, #0]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d64a:	4613      	mov	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4a1f      	ldr	r2, [pc, #124]	; (800d6d0 <xTaskIncrementTick+0x164>)
 800d654:	441a      	add	r2, r3
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	3304      	adds	r3, #4
 800d65a:	4619      	mov	r1, r3
 800d65c:	4610      	mov	r0, r2
 800d65e:	f7fe fc78 	bl	800bf52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d666:	4b1b      	ldr	r3, [pc, #108]	; (800d6d4 <xTaskIncrementTick+0x168>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d3b9      	bcc.n	800d5e4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d670:	2301      	movs	r3, #1
 800d672:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d674:	e7b6      	b.n	800d5e4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d676:	4b17      	ldr	r3, [pc, #92]	; (800d6d4 <xTaskIncrementTick+0x168>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d67c:	4914      	ldr	r1, [pc, #80]	; (800d6d0 <xTaskIncrementTick+0x164>)
 800d67e:	4613      	mov	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4413      	add	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	440b      	add	r3, r1
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d907      	bls.n	800d69e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800d68e:	2301      	movs	r3, #1
 800d690:	617b      	str	r3, [r7, #20]
 800d692:	e004      	b.n	800d69e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d694:	4b10      	ldr	r3, [pc, #64]	; (800d6d8 <xTaskIncrementTick+0x16c>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3301      	adds	r3, #1
 800d69a:	4a0f      	ldr	r2, [pc, #60]	; (800d6d8 <xTaskIncrementTick+0x16c>)
 800d69c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d69e:	4b0f      	ldr	r3, [pc, #60]	; (800d6dc <xTaskIncrementTick+0x170>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d6aa:	697b      	ldr	r3, [r7, #20]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	20000710 	.word	0x20000710
 800d6b8:	200006ec 	.word	0x200006ec
 800d6bc:	200006a0 	.word	0x200006a0
 800d6c0:	200006a4 	.word	0x200006a4
 800d6c4:	20000700 	.word	0x20000700
 800d6c8:	20000708 	.word	0x20000708
 800d6cc:	200006f0 	.word	0x200006f0
 800d6d0:	200005ec 	.word	0x200005ec
 800d6d4:	200005e8 	.word	0x200005e8
 800d6d8:	200006f8 	.word	0x200006f8
 800d6dc:	200006fc 	.word	0x200006fc

0800d6e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b087      	sub	sp, #28
 800d6e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d6e6:	4b28      	ldr	r3, [pc, #160]	; (800d788 <vTaskSwitchContext+0xa8>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d003      	beq.n	800d6f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d6ee:	4b27      	ldr	r3, [pc, #156]	; (800d78c <vTaskSwitchContext+0xac>)
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d6f4:	e041      	b.n	800d77a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d6f6:	4b25      	ldr	r3, [pc, #148]	; (800d78c <vTaskSwitchContext+0xac>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6fc:	4b24      	ldr	r3, [pc, #144]	; (800d790 <vTaskSwitchContext+0xb0>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	fab3 f383 	clz	r3, r3
 800d708:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d70a:	7afb      	ldrb	r3, [r7, #11]
 800d70c:	f1c3 031f 	rsb	r3, r3, #31
 800d710:	617b      	str	r3, [r7, #20]
 800d712:	4920      	ldr	r1, [pc, #128]	; (800d794 <vTaskSwitchContext+0xb4>)
 800d714:	697a      	ldr	r2, [r7, #20]
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	440b      	add	r3, r1
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10c      	bne.n	800d740 <vTaskSwitchContext+0x60>
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72a:	b672      	cpsid	i
 800d72c:	f383 8811 	msr	BASEPRI, r3
 800d730:	f3bf 8f6f 	isb	sy
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	b662      	cpsie	i
 800d73a:	607b      	str	r3, [r7, #4]
}
 800d73c:	bf00      	nop
 800d73e:	e7fe      	b.n	800d73e <vTaskSwitchContext+0x5e>
 800d740:	697a      	ldr	r2, [r7, #20]
 800d742:	4613      	mov	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4a12      	ldr	r2, [pc, #72]	; (800d794 <vTaskSwitchContext+0xb4>)
 800d74c:	4413      	add	r3, r2
 800d74e:	613b      	str	r3, [r7, #16]
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	685a      	ldr	r2, [r3, #4]
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	605a      	str	r2, [r3, #4]
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	685a      	ldr	r2, [r3, #4]
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	3308      	adds	r3, #8
 800d762:	429a      	cmp	r2, r3
 800d764:	d104      	bne.n	800d770 <vTaskSwitchContext+0x90>
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	605a      	str	r2, [r3, #4]
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	4a08      	ldr	r2, [pc, #32]	; (800d798 <vTaskSwitchContext+0xb8>)
 800d778:	6013      	str	r3, [r2, #0]
}
 800d77a:	bf00      	nop
 800d77c:	371c      	adds	r7, #28
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	20000710 	.word	0x20000710
 800d78c:	200006fc 	.word	0x200006fc
 800d790:	200006f0 	.word	0x200006f0
 800d794:	200005ec 	.word	0x200005ec
 800d798:	200005e8 	.word	0x200005e8

0800d79c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10c      	bne.n	800d7c6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800d7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b0:	b672      	cpsid	i
 800d7b2:	f383 8811 	msr	BASEPRI, r3
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	b662      	cpsie	i
 800d7c0:	60fb      	str	r3, [r7, #12]
}
 800d7c2:	bf00      	nop
 800d7c4:	e7fe      	b.n	800d7c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7c6:	4b07      	ldr	r3, [pc, #28]	; (800d7e4 <vTaskPlaceOnEventList+0x48>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3318      	adds	r3, #24
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f7fe fbe3 	bl	800bf9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d7d4:	2101      	movs	r1, #1
 800d7d6:	6838      	ldr	r0, [r7, #0]
 800d7d8:	f000 fba4 	bl	800df24 <prvAddCurrentTaskToDelayedList>
}
 800d7dc:	bf00      	nop
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	200005e8 	.word	0x200005e8

0800d7e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b086      	sub	sp, #24
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10c      	bne.n	800d818 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d802:	b672      	cpsid	i
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	b662      	cpsie	i
 800d812:	60fb      	str	r3, [r7, #12]
}
 800d814:	bf00      	nop
 800d816:	e7fe      	b.n	800d816 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	3318      	adds	r3, #24
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fe fbf5 	bl	800c00c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d822:	4b1d      	ldr	r3, [pc, #116]	; (800d898 <xTaskRemoveFromEventList+0xb0>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d11c      	bne.n	800d864 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	3304      	adds	r3, #4
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fe fbec 	bl	800c00c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d838:	2201      	movs	r2, #1
 800d83a:	409a      	lsls	r2, r3
 800d83c:	4b17      	ldr	r3, [pc, #92]	; (800d89c <xTaskRemoveFromEventList+0xb4>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4313      	orrs	r3, r2
 800d842:	4a16      	ldr	r2, [pc, #88]	; (800d89c <xTaskRemoveFromEventList+0xb4>)
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d84a:	4613      	mov	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	4a13      	ldr	r2, [pc, #76]	; (800d8a0 <xTaskRemoveFromEventList+0xb8>)
 800d854:	441a      	add	r2, r3
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	3304      	adds	r3, #4
 800d85a:	4619      	mov	r1, r3
 800d85c:	4610      	mov	r0, r2
 800d85e:	f7fe fb78 	bl	800bf52 <vListInsertEnd>
 800d862:	e005      	b.n	800d870 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	3318      	adds	r3, #24
 800d868:	4619      	mov	r1, r3
 800d86a:	480e      	ldr	r0, [pc, #56]	; (800d8a4 <xTaskRemoveFromEventList+0xbc>)
 800d86c:	f7fe fb71 	bl	800bf52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d874:	4b0c      	ldr	r3, [pc, #48]	; (800d8a8 <xTaskRemoveFromEventList+0xc0>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d905      	bls.n	800d88a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d87e:	2301      	movs	r3, #1
 800d880:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d882:	4b0a      	ldr	r3, [pc, #40]	; (800d8ac <xTaskRemoveFromEventList+0xc4>)
 800d884:	2201      	movs	r2, #1
 800d886:	601a      	str	r2, [r3, #0]
 800d888:	e001      	b.n	800d88e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d88e:	697b      	ldr	r3, [r7, #20]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20000710 	.word	0x20000710
 800d89c:	200006f0 	.word	0x200006f0
 800d8a0:	200005ec 	.word	0x200005ec
 800d8a4:	200006a8 	.word	0x200006a8
 800d8a8:	200005e8 	.word	0x200005e8
 800d8ac:	200006fc 	.word	0x200006fc

0800d8b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d8b8:	4b06      	ldr	r3, [pc, #24]	; (800d8d4 <vTaskInternalSetTimeOutState+0x24>)
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d8c0:	4b05      	ldr	r3, [pc, #20]	; (800d8d8 <vTaskInternalSetTimeOutState+0x28>)
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	605a      	str	r2, [r3, #4]
}
 800d8c8:	bf00      	nop
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr
 800d8d4:	20000700 	.word	0x20000700
 800d8d8:	200006ec 	.word	0x200006ec

0800d8dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b088      	sub	sp, #32
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d10c      	bne.n	800d906 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f0:	b672      	cpsid	i
 800d8f2:	f383 8811 	msr	BASEPRI, r3
 800d8f6:	f3bf 8f6f 	isb	sy
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	b662      	cpsie	i
 800d900:	613b      	str	r3, [r7, #16]
}
 800d902:	bf00      	nop
 800d904:	e7fe      	b.n	800d904 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10c      	bne.n	800d926 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d910:	b672      	cpsid	i
 800d912:	f383 8811 	msr	BASEPRI, r3
 800d916:	f3bf 8f6f 	isb	sy
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	b662      	cpsie	i
 800d920:	60fb      	str	r3, [r7, #12]
}
 800d922:	bf00      	nop
 800d924:	e7fe      	b.n	800d924 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d926:	f000 fc71 	bl	800e20c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d92a:	4b1d      	ldr	r3, [pc, #116]	; (800d9a0 <xTaskCheckForTimeOut+0xc4>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	69ba      	ldr	r2, [r7, #24]
 800d936:	1ad3      	subs	r3, r2, r3
 800d938:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d942:	d102      	bne.n	800d94a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d944:	2300      	movs	r3, #0
 800d946:	61fb      	str	r3, [r7, #28]
 800d948:	e023      	b.n	800d992 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	4b15      	ldr	r3, [pc, #84]	; (800d9a4 <xTaskCheckForTimeOut+0xc8>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	429a      	cmp	r2, r3
 800d954:	d007      	beq.n	800d966 <xTaskCheckForTimeOut+0x8a>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	69ba      	ldr	r2, [r7, #24]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d302      	bcc.n	800d966 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d960:	2301      	movs	r3, #1
 800d962:	61fb      	str	r3, [r7, #28]
 800d964:	e015      	b.n	800d992 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d20b      	bcs.n	800d988 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	1ad2      	subs	r2, r2, r3
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7ff ff97 	bl	800d8b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d982:	2300      	movs	r3, #0
 800d984:	61fb      	str	r3, [r7, #28]
 800d986:	e004      	b.n	800d992 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2200      	movs	r2, #0
 800d98c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d98e:	2301      	movs	r3, #1
 800d990:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d992:	f000 fc6f 	bl	800e274 <vPortExitCritical>

	return xReturn;
 800d996:	69fb      	ldr	r3, [r7, #28]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3720      	adds	r7, #32
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	200006ec 	.word	0x200006ec
 800d9a4:	20000700 	.word	0x20000700

0800d9a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d9ac:	4b03      	ldr	r3, [pc, #12]	; (800d9bc <vTaskMissedYield+0x14>)
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	601a      	str	r2, [r3, #0]
}
 800d9b2:	bf00      	nop
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	200006fc 	.word	0x200006fc

0800d9c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d9c8:	f000 f852 	bl	800da70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d9cc:	4b06      	ldr	r3, [pc, #24]	; (800d9e8 <prvIdleTask+0x28>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d9f9      	bls.n	800d9c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d9d4:	4b05      	ldr	r3, [pc, #20]	; (800d9ec <prvIdleTask+0x2c>)
 800d9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9da:	601a      	str	r2, [r3, #0]
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d9e4:	e7f0      	b.n	800d9c8 <prvIdleTask+0x8>
 800d9e6:	bf00      	nop
 800d9e8:	200005ec 	.word	0x200005ec
 800d9ec:	e000ed04 	.word	0xe000ed04

0800d9f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	607b      	str	r3, [r7, #4]
 800d9fa:	e00c      	b.n	800da16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	4613      	mov	r3, r2
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	4413      	add	r3, r2
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	4a12      	ldr	r2, [pc, #72]	; (800da50 <prvInitialiseTaskLists+0x60>)
 800da08:	4413      	add	r3, r2
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fe fa74 	bl	800bef8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3301      	adds	r3, #1
 800da14:	607b      	str	r3, [r7, #4]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b06      	cmp	r3, #6
 800da1a:	d9ef      	bls.n	800d9fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da1c:	480d      	ldr	r0, [pc, #52]	; (800da54 <prvInitialiseTaskLists+0x64>)
 800da1e:	f7fe fa6b 	bl	800bef8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da22:	480d      	ldr	r0, [pc, #52]	; (800da58 <prvInitialiseTaskLists+0x68>)
 800da24:	f7fe fa68 	bl	800bef8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da28:	480c      	ldr	r0, [pc, #48]	; (800da5c <prvInitialiseTaskLists+0x6c>)
 800da2a:	f7fe fa65 	bl	800bef8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da2e:	480c      	ldr	r0, [pc, #48]	; (800da60 <prvInitialiseTaskLists+0x70>)
 800da30:	f7fe fa62 	bl	800bef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da34:	480b      	ldr	r0, [pc, #44]	; (800da64 <prvInitialiseTaskLists+0x74>)
 800da36:	f7fe fa5f 	bl	800bef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da3a:	4b0b      	ldr	r3, [pc, #44]	; (800da68 <prvInitialiseTaskLists+0x78>)
 800da3c:	4a05      	ldr	r2, [pc, #20]	; (800da54 <prvInitialiseTaskLists+0x64>)
 800da3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da40:	4b0a      	ldr	r3, [pc, #40]	; (800da6c <prvInitialiseTaskLists+0x7c>)
 800da42:	4a05      	ldr	r2, [pc, #20]	; (800da58 <prvInitialiseTaskLists+0x68>)
 800da44:	601a      	str	r2, [r3, #0]
}
 800da46:	bf00      	nop
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	200005ec 	.word	0x200005ec
 800da54:	20000678 	.word	0x20000678
 800da58:	2000068c 	.word	0x2000068c
 800da5c:	200006a8 	.word	0x200006a8
 800da60:	200006bc 	.word	0x200006bc
 800da64:	200006d4 	.word	0x200006d4
 800da68:	200006a0 	.word	0x200006a0
 800da6c:	200006a4 	.word	0x200006a4

0800da70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da76:	e019      	b.n	800daac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da78:	f000 fbc8 	bl	800e20c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da7c:	4b10      	ldr	r3, [pc, #64]	; (800dac0 <prvCheckTasksWaitingTermination+0x50>)
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	3304      	adds	r3, #4
 800da88:	4618      	mov	r0, r3
 800da8a:	f7fe fabf 	bl	800c00c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da8e:	4b0d      	ldr	r3, [pc, #52]	; (800dac4 <prvCheckTasksWaitingTermination+0x54>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	3b01      	subs	r3, #1
 800da94:	4a0b      	ldr	r2, [pc, #44]	; (800dac4 <prvCheckTasksWaitingTermination+0x54>)
 800da96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da98:	4b0b      	ldr	r3, [pc, #44]	; (800dac8 <prvCheckTasksWaitingTermination+0x58>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3b01      	subs	r3, #1
 800da9e:	4a0a      	ldr	r2, [pc, #40]	; (800dac8 <prvCheckTasksWaitingTermination+0x58>)
 800daa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800daa2:	f000 fbe7 	bl	800e274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f810 	bl	800dacc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800daac:	4b06      	ldr	r3, [pc, #24]	; (800dac8 <prvCheckTasksWaitingTermination+0x58>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d1e1      	bne.n	800da78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dab4:	bf00      	nop
 800dab6:	bf00      	nop
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	200006bc 	.word	0x200006bc
 800dac4:	200006e8 	.word	0x200006e8
 800dac8:	200006d0 	.word	0x200006d0

0800dacc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d108      	bne.n	800daf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dae2:	4618      	mov	r0, r3
 800dae4:	f000 fd88 	bl	800e5f8 <vPortFree>
				vPortFree( pxTCB );
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fd85 	bl	800e5f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800daee:	e01a      	b.n	800db26 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d103      	bne.n	800db02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fd7c 	bl	800e5f8 <vPortFree>
	}
 800db00:	e011      	b.n	800db26 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db08:	2b02      	cmp	r3, #2
 800db0a:	d00c      	beq.n	800db26 <prvDeleteTCB+0x5a>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db10:	b672      	cpsid	i
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	b662      	cpsie	i
 800db20:	60fb      	str	r3, [r7, #12]
}
 800db22:	bf00      	nop
 800db24:	e7fe      	b.n	800db24 <prvDeleteTCB+0x58>
	}
 800db26:	bf00      	nop
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
	...

0800db30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db36:	4b0c      	ldr	r3, [pc, #48]	; (800db68 <prvResetNextTaskUnblockTime+0x38>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d104      	bne.n	800db4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db40:	4b0a      	ldr	r3, [pc, #40]	; (800db6c <prvResetNextTaskUnblockTime+0x3c>)
 800db42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db48:	e008      	b.n	800db5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db4a:	4b07      	ldr	r3, [pc, #28]	; (800db68 <prvResetNextTaskUnblockTime+0x38>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	4a04      	ldr	r2, [pc, #16]	; (800db6c <prvResetNextTaskUnblockTime+0x3c>)
 800db5a:	6013      	str	r3, [r2, #0]
}
 800db5c:	bf00      	nop
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr
 800db68:	200006a0 	.word	0x200006a0
 800db6c:	20000708 	.word	0x20000708

0800db70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db76:	4b0b      	ldr	r3, [pc, #44]	; (800dba4 <xTaskGetSchedulerState+0x34>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d102      	bne.n	800db84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db7e:	2301      	movs	r3, #1
 800db80:	607b      	str	r3, [r7, #4]
 800db82:	e008      	b.n	800db96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db84:	4b08      	ldr	r3, [pc, #32]	; (800dba8 <xTaskGetSchedulerState+0x38>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d102      	bne.n	800db92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db8c:	2302      	movs	r3, #2
 800db8e:	607b      	str	r3, [r7, #4]
 800db90:	e001      	b.n	800db96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db92:	2300      	movs	r3, #0
 800db94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db96:	687b      	ldr	r3, [r7, #4]
	}
 800db98:	4618      	mov	r0, r3
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	200006f4 	.word	0x200006f4
 800dba8:	20000710 	.word	0x20000710

0800dbac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d069      	beq.n	800dc96 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc6:	4b36      	ldr	r3, [pc, #216]	; (800dca0 <xTaskPriorityInherit+0xf4>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d259      	bcs.n	800dc84 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	699b      	ldr	r3, [r3, #24]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	db06      	blt.n	800dbe6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbd8:	4b31      	ldr	r3, [pc, #196]	; (800dca0 <xTaskPriorityInherit+0xf4>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbde:	f1c3 0207 	rsb	r2, r3, #7
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	6959      	ldr	r1, [r3, #20]
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbee:	4613      	mov	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4413      	add	r3, r2
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	4a2b      	ldr	r2, [pc, #172]	; (800dca4 <xTaskPriorityInherit+0xf8>)
 800dbf8:	4413      	add	r3, r2
 800dbfa:	4299      	cmp	r1, r3
 800dbfc:	d13a      	bne.n	800dc74 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	3304      	adds	r3, #4
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fe fa02 	bl	800c00c <uxListRemove>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d115      	bne.n	800dc3a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc12:	4924      	ldr	r1, [pc, #144]	; (800dca4 <xTaskPriorityInherit+0xf8>)
 800dc14:	4613      	mov	r3, r2
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4413      	add	r3, r2
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	440b      	add	r3, r1
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d10a      	bne.n	800dc3a <xTaskPriorityInherit+0x8e>
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc28:	2201      	movs	r2, #1
 800dc2a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc2e:	43da      	mvns	r2, r3
 800dc30:	4b1d      	ldr	r3, [pc, #116]	; (800dca8 <xTaskPriorityInherit+0xfc>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4013      	ands	r3, r2
 800dc36:	4a1c      	ldr	r2, [pc, #112]	; (800dca8 <xTaskPriorityInherit+0xfc>)
 800dc38:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc3a:	4b19      	ldr	r3, [pc, #100]	; (800dca0 <xTaskPriorityInherit+0xf4>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc48:	2201      	movs	r2, #1
 800dc4a:	409a      	lsls	r2, r3
 800dc4c:	4b16      	ldr	r3, [pc, #88]	; (800dca8 <xTaskPriorityInherit+0xfc>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	4a15      	ldr	r2, [pc, #84]	; (800dca8 <xTaskPriorityInherit+0xfc>)
 800dc54:	6013      	str	r3, [r2, #0]
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	4413      	add	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4a10      	ldr	r2, [pc, #64]	; (800dca4 <xTaskPriorityInherit+0xf8>)
 800dc64:	441a      	add	r2, r3
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	3304      	adds	r3, #4
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	4610      	mov	r0, r2
 800dc6e:	f7fe f970 	bl	800bf52 <vListInsertEnd>
 800dc72:	e004      	b.n	800dc7e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc74:	4b0a      	ldr	r3, [pc, #40]	; (800dca0 <xTaskPriorityInherit+0xf4>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	e008      	b.n	800dc96 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc88:	4b05      	ldr	r3, [pc, #20]	; (800dca0 <xTaskPriorityInherit+0xf4>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d201      	bcs.n	800dc96 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dc92:	2301      	movs	r3, #1
 800dc94:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc96:	68fb      	ldr	r3, [r7, #12]
	}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	200005e8 	.word	0x200005e8
 800dca4:	200005ec 	.word	0x200005ec
 800dca8:	200006f0 	.word	0x200006f0

0800dcac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b086      	sub	sp, #24
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d072      	beq.n	800dda8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dcc2:	4b3c      	ldr	r3, [pc, #240]	; (800ddb4 <xTaskPriorityDisinherit+0x108>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	693a      	ldr	r2, [r7, #16]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d00c      	beq.n	800dce6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800dccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd0:	b672      	cpsid	i
 800dcd2:	f383 8811 	msr	BASEPRI, r3
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	b662      	cpsie	i
 800dce0:	60fb      	str	r3, [r7, #12]
}
 800dce2:	bf00      	nop
 800dce4:	e7fe      	b.n	800dce4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d10c      	bne.n	800dd08 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800dcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf2:	b672      	cpsid	i
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	b662      	cpsie	i
 800dd02:	60bb      	str	r3, [r7, #8]
}
 800dd04:	bf00      	nop
 800dd06:	e7fe      	b.n	800dd06 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd0c:	1e5a      	subs	r2, r3, #1
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d044      	beq.n	800dda8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d140      	bne.n	800dda8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	3304      	adds	r3, #4
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fe f96e 	bl	800c00c <uxListRemove>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d115      	bne.n	800dd62 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3a:	491f      	ldr	r1, [pc, #124]	; (800ddb8 <xTaskPriorityDisinherit+0x10c>)
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	440b      	add	r3, r1
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d10a      	bne.n	800dd62 <xTaskPriorityDisinherit+0xb6>
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd50:	2201      	movs	r2, #1
 800dd52:	fa02 f303 	lsl.w	r3, r2, r3
 800dd56:	43da      	mvns	r2, r3
 800dd58:	4b18      	ldr	r3, [pc, #96]	; (800ddbc <xTaskPriorityDisinherit+0x110>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	4a17      	ldr	r2, [pc, #92]	; (800ddbc <xTaskPriorityDisinherit+0x110>)
 800dd60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6e:	f1c3 0207 	rsb	r2, r3, #7
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	409a      	lsls	r2, r3
 800dd7e:	4b0f      	ldr	r3, [pc, #60]	; (800ddbc <xTaskPriorityDisinherit+0x110>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4313      	orrs	r3, r2
 800dd84:	4a0d      	ldr	r2, [pc, #52]	; (800ddbc <xTaskPriorityDisinherit+0x110>)
 800dd86:	6013      	str	r3, [r2, #0]
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4413      	add	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	4a08      	ldr	r2, [pc, #32]	; (800ddb8 <xTaskPriorityDisinherit+0x10c>)
 800dd96:	441a      	add	r2, r3
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	3304      	adds	r3, #4
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	4610      	mov	r0, r2
 800dda0:	f7fe f8d7 	bl	800bf52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dda4:	2301      	movs	r3, #1
 800dda6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dda8:	697b      	ldr	r3, [r7, #20]
	}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3718      	adds	r7, #24
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	200005e8 	.word	0x200005e8
 800ddb8:	200005ec 	.word	0x200005ec
 800ddbc:	200006f0 	.word	0x200006f0

0800ddc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b088      	sub	sp, #32
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 8087 	beq.w	800dee8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10c      	bne.n	800ddfc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800dde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde6:	b672      	cpsid	i
 800dde8:	f383 8811 	msr	BASEPRI, r3
 800ddec:	f3bf 8f6f 	isb	sy
 800ddf0:	f3bf 8f4f 	dsb	sy
 800ddf4:	b662      	cpsie	i
 800ddf6:	60fb      	str	r3, [r7, #12]
}
 800ddf8:	bf00      	nop
 800ddfa:	e7fe      	b.n	800ddfa <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de00:	683a      	ldr	r2, [r7, #0]
 800de02:	429a      	cmp	r2, r3
 800de04:	d902      	bls.n	800de0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	61fb      	str	r3, [r7, #28]
 800de0a:	e002      	b.n	800de12 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de16:	69fa      	ldr	r2, [r7, #28]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d065      	beq.n	800dee8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800de1c:	69bb      	ldr	r3, [r7, #24]
 800de1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de20:	697a      	ldr	r2, [r7, #20]
 800de22:	429a      	cmp	r2, r3
 800de24:	d160      	bne.n	800dee8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800de26:	4b32      	ldr	r3, [pc, #200]	; (800def0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	69ba      	ldr	r2, [r7, #24]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d10c      	bne.n	800de4a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800de30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de34:	b672      	cpsid	i
 800de36:	f383 8811 	msr	BASEPRI, r3
 800de3a:	f3bf 8f6f 	isb	sy
 800de3e:	f3bf 8f4f 	dsb	sy
 800de42:	b662      	cpsie	i
 800de44:	60bb      	str	r3, [r7, #8]
}
 800de46:	bf00      	nop
 800de48:	e7fe      	b.n	800de48 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de4e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	69fa      	ldr	r2, [r7, #28]
 800de54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	699b      	ldr	r3, [r3, #24]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	db04      	blt.n	800de68 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	f1c3 0207 	rsb	r2, r3, #7
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	6959      	ldr	r1, [r3, #20]
 800de6c:	693a      	ldr	r2, [r7, #16]
 800de6e:	4613      	mov	r3, r2
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	4413      	add	r3, r2
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	4a1f      	ldr	r2, [pc, #124]	; (800def4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800de78:	4413      	add	r3, r2
 800de7a:	4299      	cmp	r1, r3
 800de7c:	d134      	bne.n	800dee8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	3304      	adds	r3, #4
 800de82:	4618      	mov	r0, r3
 800de84:	f7fe f8c2 	bl	800c00c <uxListRemove>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d115      	bne.n	800deba <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de92:	4918      	ldr	r1, [pc, #96]	; (800def4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800de94:	4613      	mov	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	440b      	add	r3, r1
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10a      	bne.n	800deba <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea8:	2201      	movs	r2, #1
 800deaa:	fa02 f303 	lsl.w	r3, r2, r3
 800deae:	43da      	mvns	r2, r3
 800deb0:	4b11      	ldr	r3, [pc, #68]	; (800def8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4013      	ands	r3, r2
 800deb6:	4a10      	ldr	r2, [pc, #64]	; (800def8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800deb8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800debe:	2201      	movs	r2, #1
 800dec0:	409a      	lsls	r2, r3
 800dec2:	4b0d      	ldr	r3, [pc, #52]	; (800def8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4313      	orrs	r3, r2
 800dec8:	4a0b      	ldr	r2, [pc, #44]	; (800def8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800deca:	6013      	str	r3, [r2, #0]
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded0:	4613      	mov	r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	4413      	add	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4a06      	ldr	r2, [pc, #24]	; (800def4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800deda:	441a      	add	r2, r3
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	3304      	adds	r3, #4
 800dee0:	4619      	mov	r1, r3
 800dee2:	4610      	mov	r0, r2
 800dee4:	f7fe f835 	bl	800bf52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dee8:	bf00      	nop
 800deea:	3720      	adds	r7, #32
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	200005e8 	.word	0x200005e8
 800def4:	200005ec 	.word	0x200005ec
 800def8:	200006f0 	.word	0x200006f0

0800defc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800defc:	b480      	push	{r7}
 800defe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800df00:	4b07      	ldr	r3, [pc, #28]	; (800df20 <pvTaskIncrementMutexHeldCount+0x24>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d004      	beq.n	800df12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800df08:	4b05      	ldr	r3, [pc, #20]	; (800df20 <pvTaskIncrementMutexHeldCount+0x24>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df0e:	3201      	adds	r2, #1
 800df10:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800df12:	4b03      	ldr	r3, [pc, #12]	; (800df20 <pvTaskIncrementMutexHeldCount+0x24>)
 800df14:	681b      	ldr	r3, [r3, #0]
	}
 800df16:	4618      	mov	r0, r3
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	200005e8 	.word	0x200005e8

0800df24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df2e:	4b29      	ldr	r3, [pc, #164]	; (800dfd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df34:	4b28      	ldr	r3, [pc, #160]	; (800dfd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	3304      	adds	r3, #4
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fe f866 	bl	800c00c <uxListRemove>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10b      	bne.n	800df5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800df46:	4b24      	ldr	r3, [pc, #144]	; (800dfd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4c:	2201      	movs	r2, #1
 800df4e:	fa02 f303 	lsl.w	r3, r2, r3
 800df52:	43da      	mvns	r2, r3
 800df54:	4b21      	ldr	r3, [pc, #132]	; (800dfdc <prvAddCurrentTaskToDelayedList+0xb8>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4013      	ands	r3, r2
 800df5a:	4a20      	ldr	r2, [pc, #128]	; (800dfdc <prvAddCurrentTaskToDelayedList+0xb8>)
 800df5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df64:	d10a      	bne.n	800df7c <prvAddCurrentTaskToDelayedList+0x58>
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d007      	beq.n	800df7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df6c:	4b1a      	ldr	r3, [pc, #104]	; (800dfd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3304      	adds	r3, #4
 800df72:	4619      	mov	r1, r3
 800df74:	481a      	ldr	r0, [pc, #104]	; (800dfe0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800df76:	f7fd ffec 	bl	800bf52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df7a:	e026      	b.n	800dfca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4413      	add	r3, r2
 800df82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df84:	4b14      	ldr	r3, [pc, #80]	; (800dfd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	68ba      	ldr	r2, [r7, #8]
 800df8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	429a      	cmp	r2, r3
 800df92:	d209      	bcs.n	800dfa8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df94:	4b13      	ldr	r3, [pc, #76]	; (800dfe4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	4b0f      	ldr	r3, [pc, #60]	; (800dfd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3304      	adds	r3, #4
 800df9e:	4619      	mov	r1, r3
 800dfa0:	4610      	mov	r0, r2
 800dfa2:	f7fd fffa 	bl	800bf9a <vListInsert>
}
 800dfa6:	e010      	b.n	800dfca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfa8:	4b0f      	ldr	r3, [pc, #60]	; (800dfe8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	4b0a      	ldr	r3, [pc, #40]	; (800dfd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	f7fd fff0 	bl	800bf9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dfba:	4b0c      	ldr	r3, [pc, #48]	; (800dfec <prvAddCurrentTaskToDelayedList+0xc8>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d202      	bcs.n	800dfca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dfc4:	4a09      	ldr	r2, [pc, #36]	; (800dfec <prvAddCurrentTaskToDelayedList+0xc8>)
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	6013      	str	r3, [r2, #0]
}
 800dfca:	bf00      	nop
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	200006ec 	.word	0x200006ec
 800dfd8:	200005e8 	.word	0x200005e8
 800dfdc:	200006f0 	.word	0x200006f0
 800dfe0:	200006d4 	.word	0x200006d4
 800dfe4:	200006a4 	.word	0x200006a4
 800dfe8:	200006a0 	.word	0x200006a0
 800dfec:	20000708 	.word	0x20000708

0800dff0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dff0:	b480      	push	{r7}
 800dff2:	b085      	sub	sp, #20
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3b04      	subs	r3, #4
 800e000:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	3b04      	subs	r3, #4
 800e00e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	f023 0201 	bic.w	r2, r3, #1
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3b04      	subs	r3, #4
 800e01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e020:	4a0c      	ldr	r2, [pc, #48]	; (800e054 <pxPortInitialiseStack+0x64>)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	3b14      	subs	r3, #20
 800e02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	3b04      	subs	r3, #4
 800e036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f06f 0202 	mvn.w	r2, #2
 800e03e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	3b20      	subs	r3, #32
 800e044:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e046:	68fb      	ldr	r3, [r7, #12]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3714      	adds	r7, #20
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	0800e059 	.word	0x0800e059

0800e058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e062:	4b14      	ldr	r3, [pc, #80]	; (800e0b4 <prvTaskExitError+0x5c>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e06a:	d00c      	beq.n	800e086 <prvTaskExitError+0x2e>
	__asm volatile
 800e06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e070:	b672      	cpsid	i
 800e072:	f383 8811 	msr	BASEPRI, r3
 800e076:	f3bf 8f6f 	isb	sy
 800e07a:	f3bf 8f4f 	dsb	sy
 800e07e:	b662      	cpsie	i
 800e080:	60fb      	str	r3, [r7, #12]
}
 800e082:	bf00      	nop
 800e084:	e7fe      	b.n	800e084 <prvTaskExitError+0x2c>
	__asm volatile
 800e086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08a:	b672      	cpsid	i
 800e08c:	f383 8811 	msr	BASEPRI, r3
 800e090:	f3bf 8f6f 	isb	sy
 800e094:	f3bf 8f4f 	dsb	sy
 800e098:	b662      	cpsie	i
 800e09a:	60bb      	str	r3, [r7, #8]
}
 800e09c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e09e:	bf00      	nop
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0fc      	beq.n	800e0a0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e0a6:	bf00      	nop
 800e0a8:	bf00      	nop
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	20000010 	.word	0x20000010
	...

0800e0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e0c0:	4b07      	ldr	r3, [pc, #28]	; (800e0e0 <pxCurrentTCBConst2>)
 800e0c2:	6819      	ldr	r1, [r3, #0]
 800e0c4:	6808      	ldr	r0, [r1, #0]
 800e0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ca:	f380 8809 	msr	PSP, r0
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f04f 0000 	mov.w	r0, #0
 800e0d6:	f380 8811 	msr	BASEPRI, r0
 800e0da:	4770      	bx	lr
 800e0dc:	f3af 8000 	nop.w

0800e0e0 <pxCurrentTCBConst2>:
 800e0e0:	200005e8 	.word	0x200005e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e0e4:	bf00      	nop
 800e0e6:	bf00      	nop

0800e0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e0e8:	4808      	ldr	r0, [pc, #32]	; (800e10c <prvPortStartFirstTask+0x24>)
 800e0ea:	6800      	ldr	r0, [r0, #0]
 800e0ec:	6800      	ldr	r0, [r0, #0]
 800e0ee:	f380 8808 	msr	MSP, r0
 800e0f2:	f04f 0000 	mov.w	r0, #0
 800e0f6:	f380 8814 	msr	CONTROL, r0
 800e0fa:	b662      	cpsie	i
 800e0fc:	b661      	cpsie	f
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	f3bf 8f6f 	isb	sy
 800e106:	df00      	svc	0
 800e108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e10a:	bf00      	nop
 800e10c:	e000ed08 	.word	0xe000ed08

0800e110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e116:	4b37      	ldr	r3, [pc, #220]	; (800e1f4 <xPortStartScheduler+0xe4>)
 800e118:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	22ff      	movs	r2, #255	; 0xff
 800e126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	4b2f      	ldr	r3, [pc, #188]	; (800e1f8 <xPortStartScheduler+0xe8>)
 800e13c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e13e:	4b2f      	ldr	r3, [pc, #188]	; (800e1fc <xPortStartScheduler+0xec>)
 800e140:	2207      	movs	r2, #7
 800e142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e144:	e009      	b.n	800e15a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e146:	4b2d      	ldr	r3, [pc, #180]	; (800e1fc <xPortStartScheduler+0xec>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	3b01      	subs	r3, #1
 800e14c:	4a2b      	ldr	r2, [pc, #172]	; (800e1fc <xPortStartScheduler+0xec>)
 800e14e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e150:	78fb      	ldrb	r3, [r7, #3]
 800e152:	b2db      	uxtb	r3, r3
 800e154:	005b      	lsls	r3, r3, #1
 800e156:	b2db      	uxtb	r3, r3
 800e158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e15a:	78fb      	ldrb	r3, [r7, #3]
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e162:	2b80      	cmp	r3, #128	; 0x80
 800e164:	d0ef      	beq.n	800e146 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e166:	4b25      	ldr	r3, [pc, #148]	; (800e1fc <xPortStartScheduler+0xec>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f1c3 0307 	rsb	r3, r3, #7
 800e16e:	2b04      	cmp	r3, #4
 800e170:	d00c      	beq.n	800e18c <xPortStartScheduler+0x7c>
	__asm volatile
 800e172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e176:	b672      	cpsid	i
 800e178:	f383 8811 	msr	BASEPRI, r3
 800e17c:	f3bf 8f6f 	isb	sy
 800e180:	f3bf 8f4f 	dsb	sy
 800e184:	b662      	cpsie	i
 800e186:	60bb      	str	r3, [r7, #8]
}
 800e188:	bf00      	nop
 800e18a:	e7fe      	b.n	800e18a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e18c:	4b1b      	ldr	r3, [pc, #108]	; (800e1fc <xPortStartScheduler+0xec>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	021b      	lsls	r3, r3, #8
 800e192:	4a1a      	ldr	r2, [pc, #104]	; (800e1fc <xPortStartScheduler+0xec>)
 800e194:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e196:	4b19      	ldr	r3, [pc, #100]	; (800e1fc <xPortStartScheduler+0xec>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e19e:	4a17      	ldr	r2, [pc, #92]	; (800e1fc <xPortStartScheduler+0xec>)
 800e1a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e1aa:	4b15      	ldr	r3, [pc, #84]	; (800e200 <xPortStartScheduler+0xf0>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a14      	ldr	r2, [pc, #80]	; (800e200 <xPortStartScheduler+0xf0>)
 800e1b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e1b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e1b6:	4b12      	ldr	r3, [pc, #72]	; (800e200 <xPortStartScheduler+0xf0>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4a11      	ldr	r2, [pc, #68]	; (800e200 <xPortStartScheduler+0xf0>)
 800e1bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e1c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e1c2:	f000 f8dd 	bl	800e380 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e1c6:	4b0f      	ldr	r3, [pc, #60]	; (800e204 <xPortStartScheduler+0xf4>)
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e1cc:	f000 f8fc 	bl	800e3c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1d0:	4b0d      	ldr	r3, [pc, #52]	; (800e208 <xPortStartScheduler+0xf8>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a0c      	ldr	r2, [pc, #48]	; (800e208 <xPortStartScheduler+0xf8>)
 800e1d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e1da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e1dc:	f7ff ff84 	bl	800e0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e1e0:	f7ff fa7e 	bl	800d6e0 <vTaskSwitchContext>
	prvTaskExitError();
 800e1e4:	f7ff ff38 	bl	800e058 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	e000e400 	.word	0xe000e400
 800e1f8:	20000714 	.word	0x20000714
 800e1fc:	20000718 	.word	0x20000718
 800e200:	e000ed20 	.word	0xe000ed20
 800e204:	20000010 	.word	0x20000010
 800e208:	e000ef34 	.word	0xe000ef34

0800e20c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
	__asm volatile
 800e212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e216:	b672      	cpsid	i
 800e218:	f383 8811 	msr	BASEPRI, r3
 800e21c:	f3bf 8f6f 	isb	sy
 800e220:	f3bf 8f4f 	dsb	sy
 800e224:	b662      	cpsie	i
 800e226:	607b      	str	r3, [r7, #4]
}
 800e228:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e22a:	4b10      	ldr	r3, [pc, #64]	; (800e26c <vPortEnterCritical+0x60>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	3301      	adds	r3, #1
 800e230:	4a0e      	ldr	r2, [pc, #56]	; (800e26c <vPortEnterCritical+0x60>)
 800e232:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e234:	4b0d      	ldr	r3, [pc, #52]	; (800e26c <vPortEnterCritical+0x60>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d111      	bne.n	800e260 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e23c:	4b0c      	ldr	r3, [pc, #48]	; (800e270 <vPortEnterCritical+0x64>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	b2db      	uxtb	r3, r3
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00c      	beq.n	800e260 <vPortEnterCritical+0x54>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24a:	b672      	cpsid	i
 800e24c:	f383 8811 	msr	BASEPRI, r3
 800e250:	f3bf 8f6f 	isb	sy
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	b662      	cpsie	i
 800e25a:	603b      	str	r3, [r7, #0]
}
 800e25c:	bf00      	nop
 800e25e:	e7fe      	b.n	800e25e <vPortEnterCritical+0x52>
	}
}
 800e260:	bf00      	nop
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	20000010 	.word	0x20000010
 800e270:	e000ed04 	.word	0xe000ed04

0800e274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e27a:	4b13      	ldr	r3, [pc, #76]	; (800e2c8 <vPortExitCritical+0x54>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d10c      	bne.n	800e29c <vPortExitCritical+0x28>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	b672      	cpsid	i
 800e288:	f383 8811 	msr	BASEPRI, r3
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	b662      	cpsie	i
 800e296:	607b      	str	r3, [r7, #4]
}
 800e298:	bf00      	nop
 800e29a:	e7fe      	b.n	800e29a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e29c:	4b0a      	ldr	r3, [pc, #40]	; (800e2c8 <vPortExitCritical+0x54>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	4a09      	ldr	r2, [pc, #36]	; (800e2c8 <vPortExitCritical+0x54>)
 800e2a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e2a6:	4b08      	ldr	r3, [pc, #32]	; (800e2c8 <vPortExitCritical+0x54>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d105      	bne.n	800e2ba <vPortExitCritical+0x46>
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	f383 8811 	msr	BASEPRI, r3
}
 800e2b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e2ba:	bf00      	nop
 800e2bc:	370c      	adds	r7, #12
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	20000010 	.word	0x20000010
 800e2cc:	00000000 	.word	0x00000000

0800e2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e2d0:	f3ef 8009 	mrs	r0, PSP
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	4b15      	ldr	r3, [pc, #84]	; (800e330 <pxCurrentTCBConst>)
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	f01e 0f10 	tst.w	lr, #16
 800e2e0:	bf08      	it	eq
 800e2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ea:	6010      	str	r0, [r2, #0]
 800e2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e2f4:	b672      	cpsid	i
 800e2f6:	f380 8811 	msr	BASEPRI, r0
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	f3bf 8f6f 	isb	sy
 800e302:	b662      	cpsie	i
 800e304:	f7ff f9ec 	bl	800d6e0 <vTaskSwitchContext>
 800e308:	f04f 0000 	mov.w	r0, #0
 800e30c:	f380 8811 	msr	BASEPRI, r0
 800e310:	bc09      	pop	{r0, r3}
 800e312:	6819      	ldr	r1, [r3, #0]
 800e314:	6808      	ldr	r0, [r1, #0]
 800e316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31a:	f01e 0f10 	tst.w	lr, #16
 800e31e:	bf08      	it	eq
 800e320:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e324:	f380 8809 	msr	PSP, r0
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop

0800e330 <pxCurrentTCBConst>:
 800e330:	200005e8 	.word	0x200005e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e334:	bf00      	nop
 800e336:	bf00      	nop

0800e338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e342:	b672      	cpsid	i
 800e344:	f383 8811 	msr	BASEPRI, r3
 800e348:	f3bf 8f6f 	isb	sy
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	b662      	cpsie	i
 800e352:	607b      	str	r3, [r7, #4]
}
 800e354:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e356:	f7ff f909 	bl	800d56c <xTaskIncrementTick>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d003      	beq.n	800e368 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e360:	4b06      	ldr	r3, [pc, #24]	; (800e37c <SysTick_Handler+0x44>)
 800e362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e366:	601a      	str	r2, [r3, #0]
 800e368:	2300      	movs	r3, #0
 800e36a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	f383 8811 	msr	BASEPRI, r3
}
 800e372:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e374:	bf00      	nop
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	e000ed04 	.word	0xe000ed04

0800e380 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e380:	b480      	push	{r7}
 800e382:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e384:	4b0b      	ldr	r3, [pc, #44]	; (800e3b4 <vPortSetupTimerInterrupt+0x34>)
 800e386:	2200      	movs	r2, #0
 800e388:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e38a:	4b0b      	ldr	r3, [pc, #44]	; (800e3b8 <vPortSetupTimerInterrupt+0x38>)
 800e38c:	2200      	movs	r2, #0
 800e38e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e390:	4b0a      	ldr	r3, [pc, #40]	; (800e3bc <vPortSetupTimerInterrupt+0x3c>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	4a0a      	ldr	r2, [pc, #40]	; (800e3c0 <vPortSetupTimerInterrupt+0x40>)
 800e396:	fba2 2303 	umull	r2, r3, r2, r3
 800e39a:	099b      	lsrs	r3, r3, #6
 800e39c:	4a09      	ldr	r2, [pc, #36]	; (800e3c4 <vPortSetupTimerInterrupt+0x44>)
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e3a2:	4b04      	ldr	r3, [pc, #16]	; (800e3b4 <vPortSetupTimerInterrupt+0x34>)
 800e3a4:	2207      	movs	r2, #7
 800e3a6:	601a      	str	r2, [r3, #0]
}
 800e3a8:	bf00      	nop
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	e000e010 	.word	0xe000e010
 800e3b8:	e000e018 	.word	0xe000e018
 800e3bc:	20000004 	.word	0x20000004
 800e3c0:	10624dd3 	.word	0x10624dd3
 800e3c4:	e000e014 	.word	0xe000e014

0800e3c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e3c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e3d8 <vPortEnableVFP+0x10>
 800e3cc:	6801      	ldr	r1, [r0, #0]
 800e3ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e3d2:	6001      	str	r1, [r0, #0]
 800e3d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e3d6:	bf00      	nop
 800e3d8:	e000ed88 	.word	0xe000ed88

0800e3dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e3dc:	b480      	push	{r7}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e3e2:	f3ef 8305 	mrs	r3, IPSR
 800e3e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2b0f      	cmp	r3, #15
 800e3ec:	d916      	bls.n	800e41c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e3ee:	4a19      	ldr	r2, [pc, #100]	; (800e454 <vPortValidateInterruptPriority+0x78>)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e3f8:	4b17      	ldr	r3, [pc, #92]	; (800e458 <vPortValidateInterruptPriority+0x7c>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	7afa      	ldrb	r2, [r7, #11]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d20c      	bcs.n	800e41c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e406:	b672      	cpsid	i
 800e408:	f383 8811 	msr	BASEPRI, r3
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	b662      	cpsie	i
 800e416:	607b      	str	r3, [r7, #4]
}
 800e418:	bf00      	nop
 800e41a:	e7fe      	b.n	800e41a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e41c:	4b0f      	ldr	r3, [pc, #60]	; (800e45c <vPortValidateInterruptPriority+0x80>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e424:	4b0e      	ldr	r3, [pc, #56]	; (800e460 <vPortValidateInterruptPriority+0x84>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d90c      	bls.n	800e446 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e430:	b672      	cpsid	i
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	b662      	cpsie	i
 800e440:	603b      	str	r3, [r7, #0]
}
 800e442:	bf00      	nop
 800e444:	e7fe      	b.n	800e444 <vPortValidateInterruptPriority+0x68>
	}
 800e446:	bf00      	nop
 800e448:	3714      	adds	r7, #20
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop
 800e454:	e000e3f0 	.word	0xe000e3f0
 800e458:	20000714 	.word	0x20000714
 800e45c:	e000ed0c 	.word	0xe000ed0c
 800e460:	20000718 	.word	0x20000718

0800e464 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b08a      	sub	sp, #40	; 0x28
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e46c:	2300      	movs	r3, #0
 800e46e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e470:	f7fe ffae 	bl	800d3d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e474:	4b5b      	ldr	r3, [pc, #364]	; (800e5e4 <pvPortMalloc+0x180>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d101      	bne.n	800e480 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e47c:	f000 f91a 	bl	800e6b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e480:	4b59      	ldr	r3, [pc, #356]	; (800e5e8 <pvPortMalloc+0x184>)
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4013      	ands	r3, r2
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f040 8092 	bne.w	800e5b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d01f      	beq.n	800e4d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e494:	2208      	movs	r2, #8
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	4413      	add	r3, r2
 800e49a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f003 0307 	and.w	r3, r3, #7
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d016      	beq.n	800e4d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f023 0307 	bic.w	r3, r3, #7
 800e4ac:	3308      	adds	r3, #8
 800e4ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f003 0307 	and.w	r3, r3, #7
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00c      	beq.n	800e4d4 <pvPortMalloc+0x70>
	__asm volatile
 800e4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4be:	b672      	cpsid	i
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	b662      	cpsie	i
 800e4ce:	617b      	str	r3, [r7, #20]
}
 800e4d0:	bf00      	nop
 800e4d2:	e7fe      	b.n	800e4d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d06b      	beq.n	800e5b2 <pvPortMalloc+0x14e>
 800e4da:	4b44      	ldr	r3, [pc, #272]	; (800e5ec <pvPortMalloc+0x188>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d866      	bhi.n	800e5b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e4e4:	4b42      	ldr	r3, [pc, #264]	; (800e5f0 <pvPortMalloc+0x18c>)
 800e4e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e4e8:	4b41      	ldr	r3, [pc, #260]	; (800e5f0 <pvPortMalloc+0x18c>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4ee:	e004      	b.n	800e4fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	429a      	cmp	r2, r3
 800e502:	d903      	bls.n	800e50c <pvPortMalloc+0xa8>
 800e504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d1f1      	bne.n	800e4f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e50c:	4b35      	ldr	r3, [pc, #212]	; (800e5e4 <pvPortMalloc+0x180>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e512:	429a      	cmp	r2, r3
 800e514:	d04d      	beq.n	800e5b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e516:	6a3b      	ldr	r3, [r7, #32]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2208      	movs	r2, #8
 800e51c:	4413      	add	r3, r2
 800e51e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	6a3b      	ldr	r3, [r7, #32]
 800e526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52a:	685a      	ldr	r2, [r3, #4]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	1ad2      	subs	r2, r2, r3
 800e530:	2308      	movs	r3, #8
 800e532:	005b      	lsls	r3, r3, #1
 800e534:	429a      	cmp	r2, r3
 800e536:	d921      	bls.n	800e57c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4413      	add	r3, r2
 800e53e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	f003 0307 	and.w	r3, r3, #7
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00c      	beq.n	800e564 <pvPortMalloc+0x100>
	__asm volatile
 800e54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54e:	b672      	cpsid	i
 800e550:	f383 8811 	msr	BASEPRI, r3
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	b662      	cpsie	i
 800e55e:	613b      	str	r3, [r7, #16]
}
 800e560:	bf00      	nop
 800e562:	e7fe      	b.n	800e562 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e566:	685a      	ldr	r2, [r3, #4]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	1ad2      	subs	r2, r2, r3
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e576:	69b8      	ldr	r0, [r7, #24]
 800e578:	f000 f8fe 	bl	800e778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e57c:	4b1b      	ldr	r3, [pc, #108]	; (800e5ec <pvPortMalloc+0x188>)
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	1ad3      	subs	r3, r2, r3
 800e586:	4a19      	ldr	r2, [pc, #100]	; (800e5ec <pvPortMalloc+0x188>)
 800e588:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e58a:	4b18      	ldr	r3, [pc, #96]	; (800e5ec <pvPortMalloc+0x188>)
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	4b19      	ldr	r3, [pc, #100]	; (800e5f4 <pvPortMalloc+0x190>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	429a      	cmp	r2, r3
 800e594:	d203      	bcs.n	800e59e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e596:	4b15      	ldr	r3, [pc, #84]	; (800e5ec <pvPortMalloc+0x188>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4a16      	ldr	r2, [pc, #88]	; (800e5f4 <pvPortMalloc+0x190>)
 800e59c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a0:	685a      	ldr	r2, [r3, #4]
 800e5a2:	4b11      	ldr	r3, [pc, #68]	; (800e5e8 <pvPortMalloc+0x184>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	431a      	orrs	r2, r3
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e5b2:	f7fe ff1b 	bl	800d3ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	f003 0307 	and.w	r3, r3, #7
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d00c      	beq.n	800e5da <pvPortMalloc+0x176>
	__asm volatile
 800e5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c4:	b672      	cpsid	i
 800e5c6:	f383 8811 	msr	BASEPRI, r3
 800e5ca:	f3bf 8f6f 	isb	sy
 800e5ce:	f3bf 8f4f 	dsb	sy
 800e5d2:	b662      	cpsie	i
 800e5d4:	60fb      	str	r3, [r7, #12]
}
 800e5d6:	bf00      	nop
 800e5d8:	e7fe      	b.n	800e5d8 <pvPortMalloc+0x174>
	return pvReturn;
 800e5da:	69fb      	ldr	r3, [r7, #28]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3728      	adds	r7, #40	; 0x28
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	20004324 	.word	0x20004324
 800e5e8:	20004330 	.word	0x20004330
 800e5ec:	20004328 	.word	0x20004328
 800e5f0:	2000431c 	.word	0x2000431c
 800e5f4:	2000432c 	.word	0x2000432c

0800e5f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b086      	sub	sp, #24
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d04c      	beq.n	800e6a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e60a:	2308      	movs	r3, #8
 800e60c:	425b      	negs	r3, r3
 800e60e:	697a      	ldr	r2, [r7, #20]
 800e610:	4413      	add	r3, r2
 800e612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	685a      	ldr	r2, [r3, #4]
 800e61c:	4b23      	ldr	r3, [pc, #140]	; (800e6ac <vPortFree+0xb4>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4013      	ands	r3, r2
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10c      	bne.n	800e640 <vPortFree+0x48>
	__asm volatile
 800e626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62a:	b672      	cpsid	i
 800e62c:	f383 8811 	msr	BASEPRI, r3
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	b662      	cpsie	i
 800e63a:	60fb      	str	r3, [r7, #12]
}
 800e63c:	bf00      	nop
 800e63e:	e7fe      	b.n	800e63e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00c      	beq.n	800e662 <vPortFree+0x6a>
	__asm volatile
 800e648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64c:	b672      	cpsid	i
 800e64e:	f383 8811 	msr	BASEPRI, r3
 800e652:	f3bf 8f6f 	isb	sy
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	b662      	cpsie	i
 800e65c:	60bb      	str	r3, [r7, #8]
}
 800e65e:	bf00      	nop
 800e660:	e7fe      	b.n	800e660 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	685a      	ldr	r2, [r3, #4]
 800e666:	4b11      	ldr	r3, [pc, #68]	; (800e6ac <vPortFree+0xb4>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	4013      	ands	r3, r2
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d019      	beq.n	800e6a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d115      	bne.n	800e6a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	685a      	ldr	r2, [r3, #4]
 800e67c:	4b0b      	ldr	r3, [pc, #44]	; (800e6ac <vPortFree+0xb4>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	43db      	mvns	r3, r3
 800e682:	401a      	ands	r2, r3
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e688:	f7fe fea2 	bl	800d3d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	685a      	ldr	r2, [r3, #4]
 800e690:	4b07      	ldr	r3, [pc, #28]	; (800e6b0 <vPortFree+0xb8>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4413      	add	r3, r2
 800e696:	4a06      	ldr	r2, [pc, #24]	; (800e6b0 <vPortFree+0xb8>)
 800e698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e69a:	6938      	ldr	r0, [r7, #16]
 800e69c:	f000 f86c 	bl	800e778 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e6a0:	f7fe fea4 	bl	800d3ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e6a4:	bf00      	nop
 800e6a6:	3718      	adds	r7, #24
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	20004330 	.word	0x20004330
 800e6b0:	20004328 	.word	0x20004328

0800e6b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e6ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e6be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e6c0:	4b27      	ldr	r3, [pc, #156]	; (800e760 <prvHeapInit+0xac>)
 800e6c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f003 0307 	and.w	r3, r3, #7
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00c      	beq.n	800e6e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3307      	adds	r3, #7
 800e6d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f023 0307 	bic.w	r3, r3, #7
 800e6da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e6dc:	68ba      	ldr	r2, [r7, #8]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	1ad3      	subs	r3, r2, r3
 800e6e2:	4a1f      	ldr	r2, [pc, #124]	; (800e760 <prvHeapInit+0xac>)
 800e6e4:	4413      	add	r3, r2
 800e6e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e6ec:	4a1d      	ldr	r2, [pc, #116]	; (800e764 <prvHeapInit+0xb0>)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6f2:	4b1c      	ldr	r3, [pc, #112]	; (800e764 <prvHeapInit+0xb0>)
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e700:	2208      	movs	r2, #8
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	1a9b      	subs	r3, r3, r2
 800e706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f023 0307 	bic.w	r3, r3, #7
 800e70e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	4a15      	ldr	r2, [pc, #84]	; (800e768 <prvHeapInit+0xb4>)
 800e714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e716:	4b14      	ldr	r3, [pc, #80]	; (800e768 <prvHeapInit+0xb4>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2200      	movs	r2, #0
 800e71c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e71e:	4b12      	ldr	r3, [pc, #72]	; (800e768 <prvHeapInit+0xb4>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2200      	movs	r2, #0
 800e724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	1ad2      	subs	r2, r2, r3
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e734:	4b0c      	ldr	r3, [pc, #48]	; (800e768 <prvHeapInit+0xb4>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	4a0a      	ldr	r2, [pc, #40]	; (800e76c <prvHeapInit+0xb8>)
 800e742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	4a09      	ldr	r2, [pc, #36]	; (800e770 <prvHeapInit+0xbc>)
 800e74a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e74c:	4b09      	ldr	r3, [pc, #36]	; (800e774 <prvHeapInit+0xc0>)
 800e74e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e752:	601a      	str	r2, [r3, #0]
}
 800e754:	bf00      	nop
 800e756:	3714      	adds	r7, #20
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr
 800e760:	2000071c 	.word	0x2000071c
 800e764:	2000431c 	.word	0x2000431c
 800e768:	20004324 	.word	0x20004324
 800e76c:	2000432c 	.word	0x2000432c
 800e770:	20004328 	.word	0x20004328
 800e774:	20004330 	.word	0x20004330

0800e778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e780:	4b28      	ldr	r3, [pc, #160]	; (800e824 <prvInsertBlockIntoFreeList+0xac>)
 800e782:	60fb      	str	r3, [r7, #12]
 800e784:	e002      	b.n	800e78c <prvInsertBlockIntoFreeList+0x14>
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	60fb      	str	r3, [r7, #12]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	429a      	cmp	r2, r3
 800e794:	d8f7      	bhi.n	800e786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d108      	bne.n	800e7ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	685a      	ldr	r2, [r3, #4]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	441a      	add	r2, r3
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	68ba      	ldr	r2, [r7, #8]
 800e7c4:	441a      	add	r2, r3
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d118      	bne.n	800e800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	4b15      	ldr	r3, [pc, #84]	; (800e828 <prvInsertBlockIntoFreeList+0xb0>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d00d      	beq.n	800e7f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	441a      	add	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	e008      	b.n	800e808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7f6:	4b0c      	ldr	r3, [pc, #48]	; (800e828 <prvInsertBlockIntoFreeList+0xb0>)
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	601a      	str	r2, [r3, #0]
 800e7fe:	e003      	b.n	800e808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d002      	beq.n	800e816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e816:	bf00      	nop
 800e818:	3714      	adds	r7, #20
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	2000431c 	.word	0x2000431c
 800e828:	20004324 	.word	0x20004324

0800e82c <init_can>:
//  MODULE_ID module_id:     what module this is (ex. PDM_ID, ACM_ID)
//  BXCAN_TYPE bx_type:      master or slave BXcan type. This is usually BXTYPE_MASTER
// returns:
//  error codes specified in GopherCAN.h
S8 init_can(CAN_HandleTypeDef* hcan, MODULE_ID module_id, BXCAN_TYPE bx_type)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	460b      	mov	r3, r1
 800e836:	70fb      	strb	r3, [r7, #3]
 800e838:	4613      	mov	r3, r2
 800e83a:	70bb      	strb	r3, [r7, #2]
	U8 c;

	// set the current module
	this_module_id = module_id;
 800e83c:	4a38      	ldr	r2, [pc, #224]	; (800e920 <init_can+0xf4>)
 800e83e:	78fb      	ldrb	r3, [r7, #3]
 800e840:	7013      	strb	r3, [r2, #0]


	// init HAL_GetTick()
	HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 800e842:	2001      	movs	r0, #1
 800e844:	f7f3 fdc0 	bl	80023c8 <HAL_SetTickFreq>

	// setup the two buffers
	init_buffer(&rx_buffer, rx_buffer_mem, RX_BUFFER_SIZE);
 800e848:	2280      	movs	r2, #128	; 0x80
 800e84a:	4936      	ldr	r1, [pc, #216]	; (800e924 <init_can+0xf8>)
 800e84c:	4836      	ldr	r0, [pc, #216]	; (800e928 <init_can+0xfc>)
 800e84e:	f000 ffb1 	bl	800f7b4 <init_buffer>
	init_buffer(&tx_buffer, tx_buffer_mem, TX_BUFFER_SIZE);
 800e852:	2220      	movs	r2, #32
 800e854:	4935      	ldr	r1, [pc, #212]	; (800e92c <init_can+0x100>)
 800e856:	4836      	ldr	r0, [pc, #216]	; (800e930 <init_can+0x104>)
 800e858:	f000 ffac 	bl	800f7b4 <init_buffer>

	// if there are more CAN busses, set up the additional TX buffers
#ifdef MULTI_BUS
#if NUM_OF_BUSSES > 1
	init_buffer(&tx_buffer_1, tx_buffer_mem_1, TX_BUFFER_SIZE);
 800e85c:	2220      	movs	r2, #32
 800e85e:	4935      	ldr	r1, [pc, #212]	; (800e934 <init_can+0x108>)
 800e860:	4835      	ldr	r0, [pc, #212]	; (800e938 <init_can+0x10c>)
 800e862:	f000 ffa7 	bl	800f7b4 <init_buffer>
	init_buffer(&tx_buffer_2, tx_buffer_mem_2, TX_BUFFER_SIZE);
#endif // NUM_OF_BUSSES > 2
#endif // MULTI_BUS

	// init all of the parameter data
	init_all_params();
 800e866:	f000 f86d 	bl	800e944 <init_all_params>

	// set each function pointer to the do_nothing() function
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 800e86a:	2300      	movs	r3, #0
 800e86c:	73fb      	strb	r3, [r7, #15]
 800e86e:	e01f      	b.n	800e8b0 <init_can+0x84>
	{
		cust_funcs[c].func_ptr = &do_nothing;
 800e870:	7bfa      	ldrb	r2, [r7, #15]
 800e872:	4932      	ldr	r1, [pc, #200]	; (800e93c <init_can+0x110>)
 800e874:	4613      	mov	r3, r2
 800e876:	005b      	lsls	r3, r3, #1
 800e878:	4413      	add	r3, r2
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	440b      	add	r3, r1
 800e87e:	4a30      	ldr	r2, [pc, #192]	; (800e940 <init_can+0x114>)
 800e880:	601a      	str	r2, [r3, #0]
		cust_funcs[c].func_enabled = FALSE;
 800e882:	7bfa      	ldrb	r2, [r7, #15]
 800e884:	492d      	ldr	r1, [pc, #180]	; (800e93c <init_can+0x110>)
 800e886:	4613      	mov	r3, r2
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	4413      	add	r3, r2
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	440b      	add	r3, r1
 800e890:	3304      	adds	r3, #4
 800e892:	2200      	movs	r2, #0
 800e894:	701a      	strb	r2, [r3, #0]
		cust_funcs[c].param_ptr = NULL;
 800e896:	7bfa      	ldrb	r2, [r7, #15]
 800e898:	4928      	ldr	r1, [pc, #160]	; (800e93c <init_can+0x110>)
 800e89a:	4613      	mov	r3, r2
 800e89c:	005b      	lsls	r3, r3, #1
 800e89e:	4413      	add	r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	440b      	add	r3, r1
 800e8a4:	3308      	adds	r3, #8
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	601a      	str	r2, [r3, #0]
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 800e8aa:	7bfb      	ldrb	r3, [r7, #15]
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	73fb      	strb	r3, [r7, #15]
 800e8b0:	7bfb      	ldrb	r3, [r7, #15]
 800e8b2:	2b08      	cmp	r3, #8
 800e8b4:	d9dc      	bls.n	800e870 <init_can+0x44>

	}

	if (init_filters(hcan, bx_type))
 800e8b6:	78bb      	ldrb	r3, [r7, #2]
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f000 f88c 	bl	800e9d8 <init_filters>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d002      	beq.n	800e8cc <init_can+0xa0>
	{
		return FILTER_SET_FAILED;
 800e8c6:	f06f 0304 	mvn.w	r3, #4
 800e8ca:	e024      	b.n	800e916 <init_can+0xea>
	}

	// Setup the rx interrupt function to interrupt on any pending message
	// will call methods following the format HAL_CAN_xxxCallback()
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK
 800e8cc:	2102      	movs	r1, #2
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7f4 fa3c 	bl	8002d4c <HAL_CAN_ActivateNotification>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d106      	bne.n	800e8e8 <init_can+0xbc>
			|| HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 800e8da:	2110      	movs	r1, #16
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7f4 fa35 	bl	8002d4c <HAL_CAN_ActivateNotification>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d002      	beq.n	800e8ee <init_can+0xc2>
	{
		return IRQ_SET_FAILED;
 800e8e8:	f06f 0305 	mvn.w	r3, #5
 800e8ec:	e013      	b.n	800e916 <init_can+0xea>
	}

	// The F7xx includes interrupts for when a message is complete. Activate them here
#if TARGET == F7XX || TARGET == F4XX
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800e8ee:	2101      	movs	r1, #1
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7f4 fa2b 	bl	8002d4c <HAL_CAN_ActivateNotification>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <init_can+0xd6>
	{
		return IRQ_SET_FAILED;
 800e8fc:	f06f 0305 	mvn.w	r3, #5
 800e900:	e009      	b.n	800e916 <init_can+0xea>
	}
#endif // TARGET == F7XX || TARGET == F4XX

	// start can!
	if (HAL_CAN_Start(hcan) != HAL_OK)
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f7f3 ff94 	bl	8002830 <HAL_CAN_Start>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d002      	beq.n	800e914 <init_can+0xe8>
	{
		return CAN_START_FAILED;
 800e90e:	f06f 0306 	mvn.w	r3, #6
 800e912:	e000      	b.n	800e916 <init_can+0xea>
	}

	return CAN_SUCCESS;
 800e914:	2300      	movs	r3, #0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	2000738c 	.word	0x2000738c
 800e924:	200068fc 	.word	0x200068fc
 800e928:	200070fc 	.word	0x200070fc
 800e92c:	20007104 	.word	0x20007104
 800e930:	20007304 	.word	0x20007304
 800e934:	200066f0 	.word	0x200066f0
 800e938:	20007318 	.word	0x20007318
 800e93c:	20007320 	.word	0x20007320
 800e940:	0800f791 	.word	0x0800f791

0800e944 <init_all_params>:


// init_all_params
//  function to run through each parameter and set the default data in the struct
static void init_all_params(void)
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
	U16 c;
	CAN_INFO_STRUCT* data_struct;

	// set the param id for CAN commands
	can_command.param_id = CAN_COMMAND_ID;
 800e94a:	4b12      	ldr	r3, [pc, #72]	; (800e994 <init_all_params+0x50>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	719a      	strb	r2, [r3, #6]

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 800e950:	2301      	movs	r3, #1
 800e952:	80fb      	strh	r3, [r7, #6]
 800e954:	e014      	b.n	800e980 <init_all_params+0x3c>
	{
		data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[c]);
 800e956:	88fb      	ldrh	r3, [r7, #6]
 800e958:	4a0f      	ldr	r2, [pc, #60]	; (800e998 <init_all_params+0x54>)
 800e95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e95e:	603b      	str	r3, [r7, #0]

		data_struct->last_rx = 0;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	2200      	movs	r2, #0
 800e964:	601a      	str	r2, [r3, #0]
		data_struct->update_enabled = FALSE;
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	2200      	movs	r2, #0
 800e96a:	711a      	strb	r2, [r3, #4]
		data_struct->pending_response = FALSE;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	2200      	movs	r2, #0
 800e970:	715a      	strb	r2, [r3, #5]

		// set the ID for each parameter
		data_struct->param_id = c;
 800e972:	88fb      	ldrh	r3, [r7, #6]
 800e974:	b2da      	uxtb	r2, r3
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	719a      	strb	r2, [r3, #6]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 800e97a:	88fb      	ldrh	r3, [r7, #6]
 800e97c:	3301      	adds	r3, #1
 800e97e:	80fb      	strh	r3, [r7, #6]
 800e980:	88fb      	ldrh	r3, [r7, #6]
 800e982:	2b14      	cmp	r3, #20
 800e984:	d9e7      	bls.n	800e956 <init_all_params+0x12>
	}
}
 800e986:	bf00      	nop
 800e988:	bf00      	nop
 800e98a:	370c      	adds	r7, #12
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr
 800e994:	200073cc 	.word	0x200073cc
 800e998:	2000001c 	.word	0x2000001c

0800e99c <set_all_params_state>:
//  Function to set each parameter in gopherCAN to enabled(true) or disabled (false). This
//  is easier than manually enabling all of them.
// params:
//  boolean enabled: the state to set all of the parameters to
void set_all_params_state(boolean enabled)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	71fb      	strb	r3, [r7, #7]
	U16 c;

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	81fb      	strh	r3, [r7, #14]
 800e9aa:	e008      	b.n	800e9be <set_all_params_state+0x22>
	{
		((CAN_INFO_STRUCT*)(all_parameter_structs[c]))->update_enabled = enabled;
 800e9ac:	89fb      	ldrh	r3, [r7, #14]
 800e9ae:	4a09      	ldr	r2, [pc, #36]	; (800e9d4 <set_all_params_state+0x38>)
 800e9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9b4:	79fa      	ldrb	r2, [r7, #7]
 800e9b6:	711a      	strb	r2, [r3, #4]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 800e9b8:	89fb      	ldrh	r3, [r7, #14]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	81fb      	strh	r3, [r7, #14]
 800e9be:	89fb      	ldrh	r3, [r7, #14]
 800e9c0:	2b14      	cmp	r3, #20
 800e9c2:	d9f3      	bls.n	800e9ac <set_all_params_state+0x10>
	}
}
 800e9c4:	bf00      	nop
 800e9c6:	bf00      	nop
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	2000001c 	.word	0x2000001c

0800e9d8 <init_filters>:


// init_filters
//  function called within init() that sets up all of the filters
static S8 init_filters(CAN_HandleTypeDef* hcan, BXCAN_TYPE bx_type)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b08e      	sub	sp, #56	; 0x38
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	70fb      	strb	r3, [r7, #3]
	CAN_FilterTypeDef filterConfig;
	U8 banknum = 0;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if (bx_type == BXTYPE_SLAVE)
 800e9ea:	78fb      	ldrb	r3, [r7, #3]
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d102      	bne.n	800e9f6 <init_filters+0x1e>
	{
		banknum = SLAVE_FIRST_FILTER;
 800e9f0:	230e      	movs	r3, #14
 800e9f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// DEBUG
#ifdef FILTER_SET_FAILED
//#ifdef CAN_ROUTER
	// Accept all messages on the CAN router
	filterConfig.FilterBank = banknum;                                // Modify bank 0 (of 13)
 800e9f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9fa:	623b      	str	r3, [r7, #32]
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;                // enable the filter
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 800ea00:	2300      	movs	r3, #0
 800ea02:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;                  // Use mask mode to filter
 800ea04:	2300      	movs	r3, #0
 800ea06:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;                 // 32 bit mask
 800ea08:	2301      	movs	r3, #1
 800ea0a:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.FilterIdLow = 0;                                     // Low bound of accepted values
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0xFFFF;                               // High bound of accepted values
 800ea10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea14:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = 0;                                 // Which bits matter when filtering (high)
 800ea16:	2300      	movs	r3, #0
 800ea18:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = 0;                                // Which bits matter when filtering (low)
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 800ea1e:	f107 030c 	add.w	r3, r7, #12
 800ea22:	4619      	mov	r1, r3
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7f3 fe17 	bl	8002658 <HAL_CAN_ConfigFilter>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d002      	beq.n	800ea36 <init_filters+0x5e>
	{
		return FILTER_SET_FAILED;
 800ea30:	f06f 0304 	mvn.w	r3, #4
 800ea34:	e000      	b.n	800ea38 <init_filters+0x60>
	{
		return FILTER_SET_FAILED;
	}
#endif // CAN_ROUTER

	return CAN_SUCCESS;
 800ea36:	2300      	movs	r3, #0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3738      	adds	r7, #56	; 0x38
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <HAL_CAN_RxFifo0MsgPendingCallback>:


// HAL_CAN_RxFifo0MsgPendingCallback
//  ISR called when CAN_RX_FIFO0 has a pending message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
    FIFO0_RX_CALLBACK
 800ea48:	2100      	movs	r1, #0
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f9f6 	bl	800ee3c <service_can_rx_hardware>
	//service_can_rx_hardware(hcan, CAN_RX_FIFO0);
}
 800ea50:	bf00      	nop
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <HAL_CAN_RxFifo1MsgPendingCallback>:


// HAL_CAN_RxFifo1MsgPendingCallback
//  ISR called when CAN_RX_FIFO1 has a pending message
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
    FIFO1_RX_CALLBACK
 800ea60:	2101      	movs	r1, #1
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 f9ea 	bl	800ee3c <service_can_rx_hardware>
	//service_can_rx_hardware(hcan, CAN_RX_FIFO1);
}
 800ea68:	bf00      	nop
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <send_can_command>:
//  U8 command_param_3:         parameter 3
// returns:
//  error codes specified in GopherCAN.h
S8 send_can_command(PRIORITY priority, MODULE_ID dest_module, GCAN_COMMAND_ID command_id,
	U8 command_param_0, U8 command_param_1, U8 command_param_2, U8 command_param_3)
{
 800ea70:	b590      	push	{r4, r7, lr}
 800ea72:	b089      	sub	sp, #36	; 0x24
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	4604      	mov	r4, r0
 800ea78:	4608      	mov	r0, r1
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	4623      	mov	r3, r4
 800ea80:	71fb      	strb	r3, [r7, #7]
 800ea82:	4603      	mov	r3, r0
 800ea84:	71bb      	strb	r3, [r7, #6]
 800ea86:	460b      	mov	r3, r1
 800ea88:	717b      	strb	r3, [r7, #5]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	713b      	strb	r3, [r7, #4]
	CAN_MSG message;
	CAN_ID id;

	if (dest_module < 0 || dest_module >= NUM_OF_MODULES)
 800ea8e:	79bb      	ldrb	r3, [r7, #6]
 800ea90:	2b06      	cmp	r3, #6
 800ea92:	d902      	bls.n	800ea9a <send_can_command+0x2a>
	{
		return BAD_MODULE_ID;
 800ea94:	f06f 0301 	mvn.w	r3, #1
 800ea98:	e02f      	b.n	800eafa <send_can_command+0x8a>
	}

	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 800ea9a:	797b      	ldrb	r3, [r7, #5]
 800ea9c:	2b08      	cmp	r3, #8
 800ea9e:	d902      	bls.n	800eaa6 <send_can_command+0x36>
	{
		return BAD_COMMAND_ID;
 800eaa0:	f06f 0303 	mvn.w	r3, #3
 800eaa4:	e029      	b.n	800eafa <send_can_command+0x8a>
	}

	id.priority = priority;
 800eaa6:	79fb      	ldrb	r3, [r7, #7]
 800eaa8:	723b      	strb	r3, [r7, #8]
	id.dest_module = dest_module;
 800eaaa:	79bb      	ldrb	r3, [r7, #6]
 800eaac:	727b      	strb	r3, [r7, #9]
	id.source_module = this_module_id;
 800eaae:	4b15      	ldr	r3, [pc, #84]	; (800eb04 <send_can_command+0x94>)
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	72bb      	strb	r3, [r7, #10]
	id.error = FALSE;
 800eab4:	2300      	movs	r3, #0
 800eab6:	72fb      	strb	r3, [r7, #11]
	id.parameter = CAN_COMMAND_ID;
 800eab8:	2300      	movs	r3, #0
 800eaba:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &id);
 800eabc:	f107 0208 	add.w	r2, r7, #8
 800eac0:	f107 0310 	add.w	r3, r7, #16
 800eac4:	4611      	mov	r1, r2
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 fc06 	bl	800f2d8 <build_message_id>

	// set the RTR bit to be a data message
	message.rtr_bit = DATA_MESSAGE;
 800eacc:	2300      	movs	r3, #0
 800eace:	753b      	strb	r3, [r7, #20]

	message.dlc = COMMAND_SIZE;
 800ead0:	2305      	movs	r3, #5
 800ead2:	757b      	strb	r3, [r7, #21]

	message.data[0] = command_id;
 800ead4:	797b      	ldrb	r3, [r7, #5]
 800ead6:	75bb      	strb	r3, [r7, #22]
	message.data[1] = command_param_0;
 800ead8:	793b      	ldrb	r3, [r7, #4]
 800eada:	75fb      	strb	r3, [r7, #23]
	message.data[2] = command_param_1;
 800eadc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800eae0:	763b      	strb	r3, [r7, #24]
	message.data[3] = command_param_2;
 800eae2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800eae6:	767b      	strb	r3, [r7, #25]
	message.data[4] = command_param_3;
 800eae8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800eaec:	76bb      	strb	r3, [r7, #26]

	return tx_can_message(&message);
 800eaee:	f107 0310 	add.w	r3, r7, #16
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f000 fa1c 	bl	800ef30 <tx_can_message>
 800eaf8:	4603      	mov	r3, r0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3724      	adds	r7, #36	; 0x24
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd90      	pop	{r4, r7, pc}
 800eb02:	bf00      	nop
 800eb04:	2000738c 	.word	0x2000738c

0800eb08 <send_parameter>:
//  MODULE_ID dest_module:    what module to send the parameter to
//  GCAN_PARAM_ID parameter:  what parameter to send
// returns:
//  error codes specified in GopherCAN.h
S8 send_parameter(PRIORITY priority, MODULE_ID dest_module, GCAN_PARAM_ID parameter)
{
 800eb08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb0c:	b092      	sub	sp, #72	; 0x48
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	4603      	mov	r3, r0
 800eb12:	77fb      	strb	r3, [r7, #31]
 800eb14:	460b      	mov	r3, r1
 800eb16:	77bb      	strb	r3, [r7, #30]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	777b      	strb	r3, [r7, #29]
	CAN_ID id;
	CAN_MSG message;
	U64 data = 0;
 800eb1c:	f04f 0200 	mov.w	r2, #0
 800eb20:	f04f 0300 	mov.w	r3, #0
 800eb24:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	S8 c;
	FLOAT_CONVERTER float_con;

	// make sure the parameter is valid
	if (parameter <= CAN_COMMAND_ID || parameter >= NUM_OF_PARAMETERS)
 800eb28:	7f7b      	ldrb	r3, [r7, #29]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d002      	beq.n	800eb34 <send_parameter+0x2c>
 800eb2e:	7f7b      	ldrb	r3, [r7, #29]
 800eb30:	2b14      	cmp	r3, #20
 800eb32:	d902      	bls.n	800eb3a <send_parameter+0x32>
	{
		return BAD_PARAMETER_ID;
 800eb34:	f06f 0302 	mvn.w	r3, #2
 800eb38:	e0f3      	b.n	800ed22 <send_parameter+0x21a>
	}

	// make sure the parameter is enabled
	if (!((CAN_INFO_STRUCT*)(all_parameter_structs[parameter]))->update_enabled)
 800eb3a:	7f7b      	ldrb	r3, [r7, #29]
 800eb3c:	4a7b      	ldr	r2, [pc, #492]	; (800ed2c <send_parameter+0x224>)
 800eb3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb42:	791b      	ldrb	r3, [r3, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d102      	bne.n	800eb4e <send_parameter+0x46>
	{
		return NOT_ENABLED_ERR;
 800eb48:	f06f 030a 	mvn.w	r3, #10
 800eb4c:	e0e9      	b.n	800ed22 <send_parameter+0x21a>
	}

	// build the return message ID
	id.priority = priority;
 800eb4e:	7ffb      	ldrb	r3, [r7, #31]
 800eb50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	id.dest_module = dest_module;
 800eb54:	7fbb      	ldrb	r3, [r7, #30]
 800eb56:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	id.source_module = this_module_id;
 800eb5a:	4b75      	ldr	r3, [pc, #468]	; (800ed30 <send_parameter+0x228>)
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	id.error = FALSE;
 800eb62:	2300      	movs	r3, #0
 800eb64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	id.parameter = parameter;
 800eb68:	7f7b      	ldrb	r3, [r7, #29]
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	87bb      	strh	r3, [r7, #60]	; 0x3c

	build_message_id(&message, &id);
 800eb6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eb72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb76:	4619      	mov	r1, r3
 800eb78:	4610      	mov	r0, r2
 800eb7a:	f000 fbad 	bl	800f2d8 <build_message_id>

	// set the RTR bit to data type
	message.rtr_bit = DATA_MESSAGE;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	// get the value of the data on this module and build the CAN message
	if (parameter_data_types[parameter] == UNSIGNED8
 800eb84:	7f7b      	ldrb	r3, [r7, #29]
 800eb86:	4a6b      	ldr	r2, [pc, #428]	; (800ed34 <send_parameter+0x22c>)
 800eb88:	5cd3      	ldrb	r3, [r2, r3]
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d004      	beq.n	800eb98 <send_parameter+0x90>
		|| parameter_data_types[parameter] == SIGNED8)
 800eb8e:	7f7b      	ldrb	r3, [r7, #29]
 800eb90:	4a68      	ldr	r2, [pc, #416]	; (800ed34 <send_parameter+0x22c>)
 800eb92:	5cd3      	ldrb	r3, [r2, r3]
 800eb94:	2b05      	cmp	r3, #5
 800eb96:	d116      	bne.n	800ebc6 <send_parameter+0xbe>
	{
		data |= ((U8_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 800eb98:	7f7b      	ldrb	r3, [r7, #29]
 800eb9a:	4a64      	ldr	r2, [pc, #400]	; (800ed2c <send_parameter+0x224>)
 800eb9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eba0:	79db      	ldrb	r3, [r3, #7]
 800eba2:	b2da      	uxtb	r2, r3
 800eba4:	f04f 0300 	mov.w	r3, #0
 800eba8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ebac:	ea40 0402 	orr.w	r4, r0, r2
 800ebb0:	613c      	str	r4, [r7, #16]
 800ebb2:	430b      	orrs	r3, r1
 800ebb4:	617b      	str	r3, [r7, #20]
 800ebb6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ebba:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		message.dlc = sizeof(U8);
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800ebc4:	e077      	b.n	800ecb6 <send_parameter+0x1ae>
	}

	else if (parameter_data_types[parameter] == UNSIGNED16
 800ebc6:	7f7b      	ldrb	r3, [r7, #29]
 800ebc8:	4a5a      	ldr	r2, [pc, #360]	; (800ed34 <send_parameter+0x22c>)
 800ebca:	5cd3      	ldrb	r3, [r2, r3]
 800ebcc:	2b02      	cmp	r3, #2
 800ebce:	d004      	beq.n	800ebda <send_parameter+0xd2>
		|| parameter_data_types[parameter] == SIGNED16)
 800ebd0:	7f7b      	ldrb	r3, [r7, #29]
 800ebd2:	4a58      	ldr	r2, [pc, #352]	; (800ed34 <send_parameter+0x22c>)
 800ebd4:	5cd3      	ldrb	r3, [r2, r3]
 800ebd6:	2b06      	cmp	r3, #6
 800ebd8:	d116      	bne.n	800ec08 <send_parameter+0x100>
	{
		data |= ((U16_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 800ebda:	7f7b      	ldrb	r3, [r7, #29]
 800ebdc:	4a53      	ldr	r2, [pc, #332]	; (800ed2c <send_parameter+0x224>)
 800ebde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebe2:	891b      	ldrh	r3, [r3, #8]
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	f04f 0300 	mov.w	r3, #0
 800ebea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ebee:	ea40 0402 	orr.w	r4, r0, r2
 800ebf2:	60bc      	str	r4, [r7, #8]
 800ebf4:	430b      	orrs	r3, r1
 800ebf6:	60fb      	str	r3, [r7, #12]
 800ebf8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ebfc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		message.dlc = sizeof(U16);
 800ec00:	2302      	movs	r3, #2
 800ec02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800ec06:	e056      	b.n	800ecb6 <send_parameter+0x1ae>
	}

	else if (parameter_data_types[parameter] == UNSIGNED32
 800ec08:	7f7b      	ldrb	r3, [r7, #29]
 800ec0a:	4a4a      	ldr	r2, [pc, #296]	; (800ed34 <send_parameter+0x22c>)
 800ec0c:	5cd3      	ldrb	r3, [r2, r3]
 800ec0e:	2b03      	cmp	r3, #3
 800ec10:	d004      	beq.n	800ec1c <send_parameter+0x114>
		|| parameter_data_types[parameter] == SIGNED32)
 800ec12:	7f7b      	ldrb	r3, [r7, #29]
 800ec14:	4a47      	ldr	r2, [pc, #284]	; (800ed34 <send_parameter+0x22c>)
 800ec16:	5cd3      	ldrb	r3, [r2, r3]
 800ec18:	2b07      	cmp	r3, #7
 800ec1a:	d116      	bne.n	800ec4a <send_parameter+0x142>
	{
		data |= ((U32_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 800ec1c:	7f7b      	ldrb	r3, [r7, #29]
 800ec1e:	4a43      	ldr	r2, [pc, #268]	; (800ed2c <send_parameter+0x224>)
 800ec20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec24:	689b      	ldr	r3, [r3, #8]
 800ec26:	461a      	mov	r2, r3
 800ec28:	f04f 0300 	mov.w	r3, #0
 800ec2c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ec30:	ea40 0402 	orr.w	r4, r0, r2
 800ec34:	603c      	str	r4, [r7, #0]
 800ec36:	430b      	orrs	r3, r1
 800ec38:	607b      	str	r3, [r7, #4]
 800ec3a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ec3e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		message.dlc = sizeof(U32);
 800ec42:	2304      	movs	r3, #4
 800ec44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800ec48:	e035      	b.n	800ecb6 <send_parameter+0x1ae>
	}

	else if (parameter_data_types[parameter] == UNSIGNED64
 800ec4a:	7f7b      	ldrb	r3, [r7, #29]
 800ec4c:	4a39      	ldr	r2, [pc, #228]	; (800ed34 <send_parameter+0x22c>)
 800ec4e:	5cd3      	ldrb	r3, [r2, r3]
 800ec50:	2b04      	cmp	r3, #4
 800ec52:	d004      	beq.n	800ec5e <send_parameter+0x156>
		|| parameter_data_types[parameter] == SIGNED64)
 800ec54:	7f7b      	ldrb	r3, [r7, #29]
 800ec56:	4a37      	ldr	r2, [pc, #220]	; (800ed34 <send_parameter+0x22c>)
 800ec58:	5cd3      	ldrb	r3, [r2, r3]
 800ec5a:	2b08      	cmp	r3, #8
 800ec5c:	d111      	bne.n	800ec82 <send_parameter+0x17a>
	{
		data |= ((U64_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 800ec5e:	7f7b      	ldrb	r3, [r7, #29]
 800ec60:	4a32      	ldr	r2, [pc, #200]	; (800ed2c <send_parameter+0x224>)
 800ec62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ec6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ec6e:	ea40 0a02 	orr.w	sl, r0, r2
 800ec72:	ea41 0b03 	orr.w	fp, r1, r3
 800ec76:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
		message.dlc = sizeof(U64);
 800ec7a:	2308      	movs	r3, #8
 800ec7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800ec80:	e019      	b.n	800ecb6 <send_parameter+0x1ae>
	}

	else if (parameter_data_types[parameter] == FLOATING)
 800ec82:	7f7b      	ldrb	r3, [r7, #29]
 800ec84:	4a2b      	ldr	r2, [pc, #172]	; (800ed34 <send_parameter+0x22c>)
 800ec86:	5cd3      	ldrb	r3, [r2, r3]
 800ec88:	2b09      	cmp	r3, #9
 800ec8a:	d114      	bne.n	800ecb6 <send_parameter+0x1ae>
	{
		// Union to get the bitwise data of the float
		float_con.f = ((FLOAT_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 800ec8c:	7f7b      	ldrb	r3, [r7, #29]
 800ec8e:	4a27      	ldr	r2, [pc, #156]	; (800ed2c <send_parameter+0x224>)
 800ec90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	627b      	str	r3, [r7, #36]	; 0x24

		data |= float_con.u32;
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	f04f 0300 	mov.w	r3, #0
 800eca0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800eca4:	ea40 0402 	orr.w	r4, r0, r2
 800eca8:	ea41 0503 	orr.w	r5, r1, r3
 800ecac:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
		message.dlc = sizeof(float);
 800ecb0:	2304      	movs	r3, #4
 800ecb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	}

	// build the data in the message (big endian)
	for (c = message.dlc - 1; c >= 0; c--)
 800ecb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ecc2:	e024      	b.n	800ed0e <send_parameter+0x206>
	{
		message.data[c] = (U8)(data >> (c * BITS_IN_BYTE));
 800ecc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ecc8:	00d9      	lsls	r1, r3, #3
 800ecca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ecce:	f1c1 0420 	rsb	r4, r1, #32
 800ecd2:	f1a1 0020 	sub.w	r0, r1, #32
 800ecd6:	fa22 f801 	lsr.w	r8, r2, r1
 800ecda:	fa03 f404 	lsl.w	r4, r3, r4
 800ecde:	ea48 0804 	orr.w	r8, r8, r4
 800ece2:	fa23 f000 	lsr.w	r0, r3, r0
 800ece6:	ea48 0800 	orr.w	r8, r8, r0
 800ecea:	fa23 f901 	lsr.w	r9, r3, r1
 800ecee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ecf2:	fa5f f288 	uxtb.w	r2, r8
 800ecf6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ecfa:	440b      	add	r3, r1
 800ecfc:	f803 2c1a 	strb.w	r2, [r3, #-26]
	for (c = message.dlc - 1; c >= 0; c--)
 800ed00:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	3b01      	subs	r3, #1
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ed0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	dad6      	bge.n	800ecc4 <send_parameter+0x1bc>
	}

	// send the built CAN message
	return tx_can_message(&message);
 800ed16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f000 f908 	bl	800ef30 <tx_can_message>
 800ed20:	4603      	mov	r3, r0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3748      	adds	r7, #72	; 0x48
 800ed26:	46bd      	mov	sp, r7
 800ed28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ed2c:	2000001c 	.word	0x2000001c
 800ed30:	2000738c 	.word	0x2000738c
 800ed34:	20000070 	.word	0x20000070

0800ed38 <add_custom_can_func>:
//                                                       data type (including NULL) as long as it is casted correctly
// returns:
//  error codes specified in GopherCAN.h
S8 add_custom_can_func(GCAN_COMMAND_ID command_id, void (*func_ptr)(MODULE_ID, void*, U8, U8, U8, U8),
	U8 init_state, void* param_ptr)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b087      	sub	sp, #28
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60b9      	str	r1, [r7, #8]
 800ed40:	607b      	str	r3, [r7, #4]
 800ed42:	4603      	mov	r3, r0
 800ed44:	73fb      	strb	r3, [r7, #15]
 800ed46:	4613      	mov	r3, r2
 800ed48:	73bb      	strb	r3, [r7, #14]
	CUST_FUNC* new_cust_func;

	// make sure the ID is valid
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
 800ed4c:	2b08      	cmp	r3, #8
 800ed4e:	d902      	bls.n	800ed56 <add_custom_can_func+0x1e>
	{
		return BAD_COMMAND_ID;
 800ed50:	f06f 0303 	mvn.w	r3, #3
 800ed54:	e017      	b.n	800ed86 <add_custom_can_func+0x4e>
	}

	new_cust_func = &(cust_funcs[command_id]);
 800ed56:	7bfa      	ldrb	r2, [r7, #15]
 800ed58:	4613      	mov	r3, r2
 800ed5a:	005b      	lsls	r3, r3, #1
 800ed5c:	4413      	add	r3, r2
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	4a0c      	ldr	r2, [pc, #48]	; (800ed94 <add_custom_can_func+0x5c>)
 800ed62:	4413      	add	r3, r2
 800ed64:	617b      	str	r3, [r7, #20]

	// set all of the values of the struct accordingly
	new_cust_func->func_ptr       = func_ptr;
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	601a      	str	r2, [r3, #0]
	new_cust_func->func_enabled   = !!init_state;
 800ed6c:	7bbb      	ldrb	r3, [r7, #14]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	bf14      	ite	ne
 800ed72:	2301      	movne	r3, #1
 800ed74:	2300      	moveq	r3, #0
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	461a      	mov	r2, r3
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	711a      	strb	r2, [r3, #4]
	new_cust_func->param_ptr      = param_ptr;
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	609a      	str	r2, [r3, #8]

	return CAN_SUCCESS;
 800ed84:	2300      	movs	r3, #0
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	371c      	adds	r7, #28
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	20007320 	.word	0x20007320

0800ed98 <service_can_tx_hardware>:
//  Method to interact directly with the CAN registers through the HAL_CAN commands.
//  then will fill as many tx mailboxes as possible from the tx_message_buffer
//
//  designed to be called at high priority on 1ms loop
void service_can_tx_hardware(CAN_HandleTypeDef* hcan)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b08c      	sub	sp, #48	; 0x30
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
	CAN_MSG* message;
	CAN_MSG_RING_BUFFER* buffer;

	// With multiple busses, choose the correct bus buffer to be working with
#ifdef MULTI_BUS
	buffer = choose_tx_buffer_from_hcan(hcan);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 fbcf 	bl	800f544 <choose_tx_buffer_from_hcan>
 800eda6:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
	buffer = &tx_buffer;
#endif // MULTI_BUS

	// add messages to the the TX mailboxes until they are full
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 800eda8:	e037      	b.n	800ee1a <service_can_tx_hardware+0x82>
	{
		U32 tx_mailbox_num;

		// Turn off the TX interrupt (if applicable)
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_DeactivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 800edaa:	2101      	movs	r1, #1
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7f3 fff3 	bl	8002d98 <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX

		// get the next CAN message from the TX buffer (FIFO)
		message = GET_FROM_BUFFER(buffer, 0);
 800edb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb4:	6819      	ldr	r1, [r3, #0]
 800edb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb8:	795b      	ldrb	r3, [r3, #5]
 800edba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edbc:	7912      	ldrb	r2, [r2, #4]
 800edbe:	fb93 f0f2 	sdiv	r0, r3, r2
 800edc2:	fb02 f200 	mul.w	r2, r2, r0
 800edc6:	1a9b      	subs	r3, r3, r2
 800edc8:	011b      	lsls	r3, r3, #4
 800edca:	440b      	add	r3, r1
 800edcc:	62bb      	str	r3, [r7, #40]	; 0x28

		// configure the settings/params of the CAN message
		tx_header.IDE = CAN_ID_EXT;                                          // 29 bit id
 800edce:	2304      	movs	r3, #4
 800edd0:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime = DISABLE;                              // do not send a timestamp
 800edd2:	2300      	movs	r3, #0
 800edd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		tx_header.ExtId = message->id;
 800edd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	617b      	str	r3, [r7, #20]
		tx_header.RTR = message->rtr_bit;
 800edde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede0:	791b      	ldrb	r3, [r3, #4]
 800ede2:	61fb      	str	r3, [r7, #28]
		tx_header.DLC = message->dlc;
 800ede4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede6:	795b      	ldrb	r3, [r3, #5]
 800ede8:	623b      	str	r3, [r7, #32]

		// add the message to the sending list
		if (HAL_CAN_AddTxMessage(hcan, &tx_header, message->data, &tx_mailbox_num) != HAL_OK)
 800edea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edec:	1d9a      	adds	r2, r3, #6
 800edee:	f107 030c 	add.w	r3, r7, #12
 800edf2:	f107 0110 	add.w	r1, r7, #16
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7f3 fd5e 	bl	80028b8 <HAL_CAN_AddTxMessage>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d004      	beq.n	800ee0c <service_can_tx_hardware+0x74>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee06:	4a0c      	ldr	r2, [pc, #48]	; (800ee38 <service_can_tx_hardware+0xa0>)
 800ee08:	6013      	str	r3, [r2, #0]
 800ee0a:	e011      	b.n	800ee30 <service_can_tx_hardware+0x98>
			return;
		}

		// move the head now that the first element has been removed
		remove_from_front(buffer);
 800ee0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee0e:	f000 fcea 	bl	800f7e6 <remove_from_front>

		// re-enable the RX interrupt
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 800ee12:	2101      	movs	r1, #1
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f7f3 ff99 	bl	8002d4c <HAL_CAN_ActivateNotification>
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 800ee1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1c:	799b      	ldrb	r3, [r3, #6]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d005      	beq.n	800ee2e <service_can_tx_hardware+0x96>
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7f3 fe23 	bl	8002a6e <HAL_CAN_GetTxMailboxesFreeLevel>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d1bd      	bne.n	800edaa <service_can_tx_hardware+0x12>
#endif // TARGET == F7XX || TARGET == F4XX
	}

	return;
 800ee2e:	bf00      	nop
}
 800ee30:	3730      	adds	r7, #48	; 0x30
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	20004334 	.word	0x20004334

0800ee3c <service_can_rx_hardware>:
//  U32 rx_mailbox:         the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//                           Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b08a      	sub	sp, #40	; 0x28
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (!IS_FULL(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 800ee46:	e03b      	b.n	800eec0 <service_can_rx_hardware+0x84>
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = GET_FROM_BUFFER(&rx_buffer, rx_buffer.fill_level);
 800ee48:	4b25      	ldr	r3, [pc, #148]	; (800eee0 <service_can_rx_hardware+0xa4>)
 800ee4a:	6819      	ldr	r1, [r3, #0]
 800ee4c:	4b24      	ldr	r3, [pc, #144]	; (800eee0 <service_can_rx_hardware+0xa4>)
 800ee4e:	795b      	ldrb	r3, [r3, #5]
 800ee50:	461a      	mov	r2, r3
 800ee52:	4b23      	ldr	r3, [pc, #140]	; (800eee0 <service_can_rx_hardware+0xa4>)
 800ee54:	799b      	ldrb	r3, [r3, #6]
 800ee56:	4413      	add	r3, r2
 800ee58:	4a21      	ldr	r2, [pc, #132]	; (800eee0 <service_can_rx_hardware+0xa4>)
 800ee5a:	7912      	ldrb	r2, [r2, #4]
 800ee5c:	fb93 f0f2 	sdiv	r0, r3, r2
 800ee60:	fb02 f200 	mul.w	r2, r2, r0
 800ee64:	1a9b      	subs	r3, r3, r2
 800ee66:	011b      	lsls	r3, r3, #4
 800ee68:	440b      	add	r3, r1
 800ee6a:	627b      	str	r3, [r7, #36]	; 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 800ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6e:	3306      	adds	r3, #6
 800ee70:	f107 0208 	add.w	r2, r7, #8
 800ee74:	6839      	ldr	r1, [r7, #0]
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7f3 fe2e 	bl	8002ad8 <HAL_CAN_GetRxMessage>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d004      	beq.n	800ee8c <service_can_rx_hardware+0x50>
		{
			// this will always return HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee86:	4a17      	ldr	r2, [pc, #92]	; (800eee4 <service_can_rx_hardware+0xa8>)
 800ee88:	6013      	str	r3, [r2, #0]
 800ee8a:	e026      	b.n	800eeda <service_can_rx_hardware+0x9e>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rx_buffer.fill_level++;
 800ee8c:	4b14      	ldr	r3, [pc, #80]	; (800eee0 <service_can_rx_hardware+0xa4>)
 800ee8e:	799b      	ldrb	r3, [r3, #6]
 800ee90:	3301      	adds	r3, #1
 800ee92:	b2da      	uxtb	r2, r3
 800ee94:	4b12      	ldr	r3, [pc, #72]	; (800eee0 <service_can_rx_hardware+0xa4>)
 800ee96:	719a      	strb	r2, [r3, #6]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->rtr_bit = rx_header.RTR;
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	b2da      	uxtb	r2, r3
 800ee9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9e:	711a      	strb	r2, [r3, #4]
		message->dlc = rx_header.DLC;
 800eea0:	69bb      	ldr	r3, [r7, #24]
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea6:	715a      	strb	r2, [r3, #5]
		message->id = (rx_header.IDE ? rx_header.ExtId : rx_header.StdId);
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d001      	beq.n	800eeb2 <service_can_rx_hardware+0x76>
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	e000      	b.n	800eeb4 <service_can_rx_hardware+0x78>
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeb6:	6013      	str	r3, [r2, #0]

#ifdef CAN_ROUTER
		// router specific functionality that directly adds messages that need to be routed
		//  directly to the correct TX buffer (if needed, that decision is made within the function)
		rout_can_message(hcan, message);
 800eeb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 fbd6 	bl	800f66c <rout_can_message>
	while (!IS_FULL(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 800eec0:	4b07      	ldr	r3, [pc, #28]	; (800eee0 <service_can_rx_hardware+0xa4>)
 800eec2:	799a      	ldrb	r2, [r3, #6]
 800eec4:	4b06      	ldr	r3, [pc, #24]	; (800eee0 <service_can_rx_hardware+0xa4>)
 800eec6:	791b      	ldrb	r3, [r3, #4]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d206      	bcs.n	800eeda <service_can_rx_hardware+0x9e>
 800eecc:	6839      	ldr	r1, [r7, #0]
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7f3 ff14 	bl	8002cfc <HAL_CAN_GetRxFifoFillLevel>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1b6      	bne.n	800ee48 <service_can_rx_hardware+0xc>
#endif // CAN_ROUTER
	}
}
 800eeda:	3728      	adds	r7, #40	; 0x28
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	200070fc 	.word	0x200070fc
 800eee4:	20004334 	.word	0x20004334

0800eee8 <service_can_rx_buffer>:
//   parameter requests. The request will not be completed and the other module will have to
//   send a new request
//
//  call in a 1 ms or faster loop
S8 service_can_rx_buffer(void)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
	CAN_MSG* current_message;

	// run through each message in the RX buffer and service it with service_can_rx_message() (FIFO)
	while (!IS_EMPTY(&rx_buffer))
 800eeee:	e013      	b.n	800ef18 <service_can_rx_buffer+0x30>
	{
		// get the message at the head of the array
		current_message = GET_FROM_BUFFER(&rx_buffer, 0);
 800eef0:	4b0e      	ldr	r3, [pc, #56]	; (800ef2c <service_can_rx_buffer+0x44>)
 800eef2:	6819      	ldr	r1, [r3, #0]
 800eef4:	4b0d      	ldr	r3, [pc, #52]	; (800ef2c <service_can_rx_buffer+0x44>)
 800eef6:	795b      	ldrb	r3, [r3, #5]
 800eef8:	4a0c      	ldr	r2, [pc, #48]	; (800ef2c <service_can_rx_buffer+0x44>)
 800eefa:	7912      	ldrb	r2, [r2, #4]
 800eefc:	fb93 f0f2 	sdiv	r0, r3, r2
 800ef00:	fb02 f200 	mul.w	r2, r2, r0
 800ef04:	1a9b      	subs	r3, r3, r2
 800ef06:	011b      	lsls	r3, r3, #4
 800ef08:	440b      	add	r3, r1
 800ef0a:	607b      	str	r3, [r7, #4]

		// WARNING: CAN errors from other modules are not handled in this version. The message is just discarded
		// Use a CAN bus analyzer to see what the message is for debugging
		service_can_rx_message(current_message);
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f859 	bl	800efc4 <service_can_rx_message>

		// move the head now that the first element has been removed
		remove_from_front(&rx_buffer);
 800ef12:	4806      	ldr	r0, [pc, #24]	; (800ef2c <service_can_rx_buffer+0x44>)
 800ef14:	f000 fc67 	bl	800f7e6 <remove_from_front>
	while (!IS_EMPTY(&rx_buffer))
 800ef18:	4b04      	ldr	r3, [pc, #16]	; (800ef2c <service_can_rx_buffer+0x44>)
 800ef1a:	799b      	ldrb	r3, [r3, #6]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d1e7      	bne.n	800eef0 <service_can_rx_buffer+0x8>
	}

	return CAN_SUCCESS;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	200070fc 	.word	0x200070fc

0800ef30 <tx_can_message>:


// tx_can_message
//  Takes in a CAN_MSG struct, adds it to the TX buffer
static S8 tx_can_message(CAN_MSG* message_to_add)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
	CAN_MSG_RING_BUFFER* buffer;

	// remove any trailing zeros in the CAN message. This is done by starting at the
	// back of the message and decrementing the DLC for each byte in the message that
	// is zero at the back. RX logic will add zero bytes as needed
	while (message_to_add->dlc > 0
 800ef38:	e005      	b.n	800ef46 <tx_can_message+0x16>
			&& message_to_add->data[message_to_add->dlc - 1] == 0)
	{
		message_to_add->dlc--;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	795b      	ldrb	r3, [r3, #5]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	715a      	strb	r2, [r3, #5]
	while (message_to_add->dlc > 0
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	795b      	ldrb	r3, [r3, #5]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d007      	beq.n	800ef5e <tx_can_message+0x2e>
			&& message_to_add->data[message_to_add->dlc - 1] == 0)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	795b      	ldrb	r3, [r3, #5]
 800ef52:	3b01      	subs	r3, #1
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	4413      	add	r3, r2
 800ef58:	799b      	ldrb	r3, [r3, #6]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d0ed      	beq.n	800ef3a <tx_can_message+0xa>
	}

#ifdef MULTI_BUS
	// Handle the case of the message being sent to all of the busses (ID 0)
	if (GET_ID_DEST(message_to_add->id) == ALL_MODULES_ID)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	0d9b      	lsrs	r3, r3, #22
 800ef64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d104      	bne.n	800ef76 <tx_can_message+0x46>
	{
		send_message_to_all_busses(message_to_add);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 fb3d 	bl	800f5ec <send_message_to_all_busses>
		return CAN_SUCCESS;
 800ef72:	2300      	movs	r3, #0
 800ef74:	e021      	b.n	800efba <tx_can_message+0x8a>
	}

	// If there are multiple busses, choose the correct bus based on the routing table
	buffer = choose_tx_buffer_from_dest_module(message_to_add);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 fb14 	bl	800f5a4 <choose_tx_buffer_from_dest_module>
 800ef7c:	60f8      	str	r0, [r7, #12]
#else
	buffer = &tx_buffer;
#endif // MULTI_BUS

	// check to make sure the buffer is not full, then add it to the back of the TX buffer
	if (IS_FULL(buffer))
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	799a      	ldrb	r2, [r3, #6]
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	791b      	ldrb	r3, [r3, #4]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d302      	bcc.n	800ef90 <tx_can_message+0x60>
	{
		return TX_BUFFER_FULL;
 800ef8a:	f06f 0307 	mvn.w	r3, #7
 800ef8e:	e014      	b.n	800efba <tx_can_message+0x8a>
	}

#ifdef MULTI_BUS
	// Turn off the TX interrupt (if applicable) and add the message to the buffer
#if TARGET == F7XX || TARGET == F4XX
	HAL_CAN_DeactivateNotification(choose_hcan_from_tx_buffer(buffer), CAN_IT_TX_MAILBOX_EMPTY);
 800ef90:	68f8      	ldr	r0, [r7, #12]
 800ef92:	f000 faef 	bl	800f574 <choose_hcan_from_tx_buffer>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2101      	movs	r1, #1
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7f3 fefc 	bl	8002d98 <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX
	add_message_by_highest_prio(buffer, message_to_add);
 800efa0:	6879      	ldr	r1, [r7, #4]
 800efa2:	68f8      	ldr	r0, [r7, #12]
 800efa4:	f000 fc41 	bl	800f82a <add_message_by_highest_prio>

#if TARGET == F7XX || TARGET == F4XX
	HAL_CAN_ActivateNotification(choose_hcan_from_tx_buffer(buffer), CAN_IT_TX_MAILBOX_EMPTY);
 800efa8:	68f8      	ldr	r0, [r7, #12]
 800efaa:	f000 fae3 	bl	800f574 <choose_hcan_from_tx_buffer>
 800efae:	4603      	mov	r3, r0
 800efb0:	2101      	movs	r1, #1
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7f3 feca 	bl	8002d4c <HAL_CAN_ActivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX

	return CAN_SUCCESS;
 800efb8:	2300      	movs	r3, #0
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3710      	adds	r7, #16
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
	...

0800efc4 <service_can_rx_message>:
//  CAN message bus interrupt function this will update all
//  the global variables or trigger the CAN functions if needed.
//  Designed to be called by service_can_rx_software to loop perform
//  this task for each pending CAN message
static S8 service_can_rx_message(CAN_MSG* message)
{
 800efc4:	b5b0      	push	{r4, r5, r7, lr}
 800efc6:	b08a      	sub	sp, #40	; 0x28
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
	CAN_ID id;
	CAN_INFO_STRUCT* data_struct = 0;
 800efcc:	2300      	movs	r3, #0
 800efce:	61bb      	str	r3, [r7, #24]
	FLOAT_CONVERTER float_con;
	U64 received_data = 0;
 800efd0:	f04f 0200 	mov.w	r2, #0
 800efd4:	f04f 0300 	mov.w	r3, #0
 800efd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	S8 c;

	get_message_id(&id, message);
 800efdc:	f107 0310 	add.w	r3, r7, #16
 800efe0:	6879      	ldr	r1, [r7, #4]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 f9d8 	bl	800f398 <get_message_id>

	// A double check to make sure this message is actually for this module (most useful in the CAN router)
	if (id.dest_module != this_module_id && id.dest_module != ALL_MODULES_ID)
 800efe8:	7c7a      	ldrb	r2, [r7, #17]
 800efea:	4b73      	ldr	r3, [pc, #460]	; (800f1b8 <service_can_rx_message+0x1f4>)
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d005      	beq.n	800effe <service_can_rx_message+0x3a>
 800eff2:	7c7b      	ldrb	r3, [r7, #17]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d002      	beq.n	800effe <service_can_rx_message+0x3a>
	{
		// This is not for this module. Do not process this message
		return WRONG_DEST_ERR;
 800eff8:	f06f 030c 	mvn.w	r3, #12
 800effc:	e0d8      	b.n	800f1b0 <service_can_rx_message+0x1ec>
	}

	// if the message received has the error flag high, put the details into the last_error struct, then return
	if (id.error)
 800effe:	7cfb      	ldrb	r3, [r7, #19]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d014      	beq.n	800f02e <service_can_rx_message+0x6a>
	{
		// this could possibly be changed into a ring buffer
		last_error.last_rx = HAL_GetTick();
 800f004:	f7f3 f9d4 	bl	80023b0 <HAL_GetTick>
 800f008:	4603      	mov	r3, r0
 800f00a:	4a6c      	ldr	r2, [pc, #432]	; (800f1bc <service_can_rx_message+0x1f8>)
 800f00c:	6013      	str	r3, [r2, #0]
		last_error.source_module = id.source_module;
 800f00e:	7cba      	ldrb	r2, [r7, #18]
 800f010:	4b6a      	ldr	r3, [pc, #424]	; (800f1bc <service_can_rx_message+0x1f8>)
 800f012:	711a      	strb	r2, [r3, #4]
		last_error.parameter = id.parameter;
 800f014:	8aba      	ldrh	r2, [r7, #20]
 800f016:	4b69      	ldr	r3, [pc, #420]	; (800f1bc <service_can_rx_message+0x1f8>)
 800f018:	80da      	strh	r2, [r3, #6]
		if (message->dlc > 0)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	795b      	ldrb	r3, [r3, #5]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d003      	beq.n	800f02a <service_can_rx_message+0x66>
		{
			last_error.error_id = message->data[0];
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	799a      	ldrb	r2, [r3, #6]
 800f026:	4b65      	ldr	r3, [pc, #404]	; (800f1bc <service_can_rx_message+0x1f8>)
 800f028:	721a      	strb	r2, [r3, #8]
		}

		// return success because the problem is not with the RX
		return CAN_SUCCESS;
 800f02a:	2300      	movs	r3, #0
 800f02c:	e0c0      	b.n	800f1b0 <service_can_rx_message+0x1ec>
	}

	// error checking on the parameter requested
	if (id.parameter < 0 || id.parameter >= NUM_OF_PARAMETERS)
 800f02e:	8abb      	ldrh	r3, [r7, #20]
 800f030:	2b14      	cmp	r3, #20
 800f032:	d908      	bls.n	800f046 <service_can_rx_message+0x82>
	{
		send_error_message(&id, ID_NOT_FOUND);
 800f034:	f107 0310 	add.w	r3, r7, #16
 800f038:	2100      	movs	r1, #0
 800f03a:	4618      	mov	r0, r3
 800f03c:	f000 f9e4 	bl	800f408 <send_error_message>

		return NOT_FOUND_ERR;
 800f040:	f06f 0309 	mvn.w	r3, #9
 800f044:	e0b4      	b.n	800f1b0 <service_can_rx_message+0x1ec>
	}
	
	// get the associated data struct and set last_rx
	data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[id.parameter]);
 800f046:	8abb      	ldrh	r3, [r7, #20]
 800f048:	461a      	mov	r2, r3
 800f04a:	4b5d      	ldr	r3, [pc, #372]	; (800f1c0 <service_can_rx_message+0x1fc>)
 800f04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f050:	61bb      	str	r3, [r7, #24]
	data_struct->last_rx = HAL_GetTick();
 800f052:	f7f3 f9ad 	bl	80023b0 <HAL_GetTick>
 800f056:	4602      	mov	r2, r0
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	601a      	str	r2, [r3, #0]

    // run command: run the command specified by the CAN message on this module
	if (parameter_data_types[id.parameter] == COMMAND)
 800f05c:	8abb      	ldrh	r3, [r7, #20]
 800f05e:	461a      	mov	r2, r3
 800f060:	4b58      	ldr	r3, [pc, #352]	; (800f1c4 <service_can_rx_message+0x200>)
 800f062:	5c9b      	ldrb	r3, [r3, r2]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d107      	bne.n	800f078 <service_can_rx_message+0xb4>
	{
		return run_can_command(message, &id);
 800f068:	f107 0310 	add.w	r3, r7, #16
 800f06c:	4619      	mov	r1, r3
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 f8d8 	bl	800f224 <run_can_command>
 800f074:	4603      	mov	r3, r0
 800f076:	e09b      	b.n	800f1b0 <service_can_rx_message+0x1ec>
	}

	// Check the update_enabled flag (if it is not a CAN command)
	if (!(data_struct->update_enabled))
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	791b      	ldrb	r3, [r3, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d108      	bne.n	800f092 <service_can_rx_message+0xce>
	{
		send_error_message(&id, PARAM_NOT_ENABLED);
 800f080:	f107 0310 	add.w	r3, r7, #16
 800f084:	2102      	movs	r1, #2
 800f086:	4618      	mov	r0, r3
 800f088:	f000 f9be 	bl	800f408 <send_error_message>
		return NOT_ENABLED_ERR;
 800f08c:	f06f 030a 	mvn.w	r3, #10
 800f090:	e08e      	b.n	800f1b0 <service_can_rx_message+0x1ec>
	}

	// request parameter: return a CAN message with the data taken from this module
	if (message->rtr_bit)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	791b      	ldrb	r3, [r3, #4]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d007      	beq.n	800f0aa <service_can_rx_message+0xe6>
	{
		return parameter_requested(message, &id);
 800f09a:	f107 0310 	add.w	r3, r7, #16
 800f09e:	4619      	mov	r1, r3
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 f891 	bl	800f1c8 <parameter_requested>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	e082      	b.n	800f1b0 <service_can_rx_message+0x1ec>
	}

	// this code should only be reached if the message is a data message

	// build the data U64 (big endian)
	for (c = (message->dlc - 1); c >= 0; c--)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	795b      	ldrb	r3, [r3, #5]
 800f0ae:	3b01      	subs	r3, #1
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	77fb      	strb	r3, [r7, #31]
 800f0b4:	e01b      	b.n	800f0ee <service_can_rx_message+0x12a>
	{
		received_data |= message->data[c] << (c * BITS_IN_BYTE);
 800f0b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	4413      	add	r3, r2
 800f0be:	799b      	ldrb	r3, [r3, #6]
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f0c6:	00db      	lsls	r3, r3, #3
 800f0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f0d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f0d6:	ea40 0402 	orr.w	r4, r0, r2
 800f0da:	ea41 0503 	orr.w	r5, r1, r3
 800f0de:	e9c7 4508 	strd	r4, r5, [r7, #32]
	for (c = (message->dlc - 1); c >= 0; c--)
 800f0e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	3b01      	subs	r3, #1
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	77fb      	strb	r3, [r7, #31]
 800f0ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	dadf      	bge.n	800f0b6 <service_can_rx_message+0xf2>
	}

	// Switch the pending_response flag
	data_struct->pending_response = FALSE;
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	715a      	strb	r2, [r3, #5]

	// this switch will handle all of the different possible data types
	// that can be sent over CAN
	switch (parameter_data_types[id.parameter])
 800f0fc:	8abb      	ldrh	r3, [r7, #20]
 800f0fe:	461a      	mov	r2, r3
 800f100:	4b30      	ldr	r3, [pc, #192]	; (800f1c4 <service_can_rx_message+0x200>)
 800f102:	5c9b      	ldrb	r3, [r3, r2]
 800f104:	3b01      	subs	r3, #1
 800f106:	2b08      	cmp	r3, #8
 800f108:	d84a      	bhi.n	800f1a0 <service_can_rx_message+0x1dc>
 800f10a:	a201      	add	r2, pc, #4	; (adr r2, 800f110 <service_can_rx_message+0x14c>)
 800f10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f110:	0800f135 	.word	0x0800f135
 800f114:	0800f141 	.word	0x0800f141
 800f118:	0800f14b 	.word	0x0800f14b
 800f11c:	0800f155 	.word	0x0800f155
 800f120:	0800f163 	.word	0x0800f163
 800f124:	0800f16f 	.word	0x0800f16f
 800f128:	0800f17b 	.word	0x0800f17b
 800f12c:	0800f185 	.word	0x0800f185
 800f130:	0800f193 	.word	0x0800f193
	{
	case UNSIGNED8:
		((U8_CAN_STRUCT*)(data_struct))->data = (U8)received_data;
 800f134:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f138:	69bb      	ldr	r3, [r7, #24]
 800f13a:	71da      	strb	r2, [r3, #7]
		return CAN_SUCCESS;
 800f13c:	2300      	movs	r3, #0
 800f13e:	e037      	b.n	800f1b0 <service_can_rx_message+0x1ec>

	case UNSIGNED16:
		((U16_CAN_STRUCT*)(data_struct))->data = (U16)received_data;
 800f140:	8c3a      	ldrh	r2, [r7, #32]
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	811a      	strh	r2, [r3, #8]
		return CAN_SUCCESS;
 800f146:	2300      	movs	r3, #0
 800f148:	e032      	b.n	800f1b0 <service_can_rx_message+0x1ec>

	case UNSIGNED32:
		((U32_CAN_STRUCT*)(data_struct))->data = (U32)received_data;
 800f14a:	6a3a      	ldr	r2, [r7, #32]
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 800f150:	2300      	movs	r3, #0
 800f152:	e02d      	b.n	800f1b0 <service_can_rx_message+0x1ec>

	case UNSIGNED64:
		((U64_CAN_STRUCT*)(data_struct))->data = (U64)received_data;
 800f154:	69b9      	ldr	r1, [r7, #24]
 800f156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f15a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return CAN_SUCCESS;
 800f15e:	2300      	movs	r3, #0
 800f160:	e026      	b.n	800f1b0 <service_can_rx_message+0x1ec>

	case SIGNED8:
		((S8_CAN_STRUCT*)(data_struct))->data = (S8)received_data;
 800f162:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	71da      	strb	r2, [r3, #7]
		return CAN_SUCCESS;
 800f16a:	2300      	movs	r3, #0
 800f16c:	e020      	b.n	800f1b0 <service_can_rx_message+0x1ec>

	case SIGNED16:
		((S16_CAN_STRUCT*)(data_struct))->data = (S16)received_data;
 800f16e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f172:	69bb      	ldr	r3, [r7, #24]
 800f174:	811a      	strh	r2, [r3, #8]
		return CAN_SUCCESS;
 800f176:	2300      	movs	r3, #0
 800f178:	e01a      	b.n	800f1b0 <service_can_rx_message+0x1ec>

	case SIGNED32:
		((S32_CAN_STRUCT*)(data_struct))->data = (S32)received_data;
 800f17a:	6a3a      	ldr	r2, [r7, #32]
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 800f180:	2300      	movs	r3, #0
 800f182:	e015      	b.n	800f1b0 <service_can_rx_message+0x1ec>

	case SIGNED64:
		((S64_CAN_STRUCT*)(data_struct))->data = (S64)received_data;
 800f184:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f188:	69b9      	ldr	r1, [r7, #24]
 800f18a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return CAN_SUCCESS;
 800f18e:	2300      	movs	r3, #0
 800f190:	e00e      	b.n	800f1b0 <service_can_rx_message+0x1ec>

	case FLOATING:
		// Union to get the bitwise data of the float
		float_con.u32 = (U32)received_data;
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	60fb      	str	r3, [r7, #12]

		((FLOAT_CAN_STRUCT*)(data_struct))->data = float_con.f;
 800f196:	68fa      	ldr	r2, [r7, #12]
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 800f19c:	2300      	movs	r3, #0
 800f19e:	e007      	b.n	800f1b0 <service_can_rx_message+0x1ec>

	default:
		send_error_message(&id, DATATYPE_NOT_FOUND);
 800f1a0:	f107 0310 	add.w	r3, r7, #16
 800f1a4:	2104      	movs	r1, #4
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f000 f92e 	bl	800f408 <send_error_message>
		return NOT_FOUND_ERR;
 800f1ac:	f06f 0309 	mvn.w	r3, #9
	}

	return CAN_SUCCESS;
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3728      	adds	r7, #40	; 0x28
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bdb0      	pop	{r4, r5, r7, pc}
 800f1b8:	2000738c 	.word	0x2000738c
 800f1bc:	200068f0 	.word	0x200068f0
 800f1c0:	2000001c 	.word	0x2000001c
 800f1c4:	20000070 	.word	0x20000070

0800f1c8 <parameter_requested>:


// parameter_requested
//  return a CAN message with the data taken from this module
static S8 parameter_requested(CAN_MSG* message, CAN_ID* id)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
	if (message->dlc != REQ_PARAM_SIZE)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	795b      	ldrb	r3, [r3, #5]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d006      	beq.n	800f1e8 <parameter_requested+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 800f1da:	2103      	movs	r1, #3
 800f1dc:	6838      	ldr	r0, [r7, #0]
 800f1de:	f000 f913 	bl	800f408 <send_error_message>

		return SIZE_ERR;
 800f1e2:	f06f 030b 	mvn.w	r3, #11
 800f1e6:	e019      	b.n	800f21c <parameter_requested+0x54>
	}

	// the requested parameter is stored in id->parameter of the received CAN message
	if (id->parameter <= CAN_COMMAND_ID || id->parameter >= NUM_OF_PARAMETERS)
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	889b      	ldrh	r3, [r3, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d003      	beq.n	800f1f8 <parameter_requested+0x30>
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	889b      	ldrh	r3, [r3, #4]
 800f1f4:	2b14      	cmp	r3, #20
 800f1f6:	d906      	bls.n	800f206 <parameter_requested+0x3e>
	{
		send_error_message(id, ID_NOT_FOUND);
 800f1f8:	2100      	movs	r1, #0
 800f1fa:	6838      	ldr	r0, [r7, #0]
 800f1fc:	f000 f904 	bl	800f408 <send_error_message>

		return NOT_FOUND_ERR;
 800f200:	f06f 0309 	mvn.w	r3, #9
 800f204:	e00a      	b.n	800f21c <parameter_requested+0x54>
	}

	// send the parameter data to the module that requested
	return send_parameter(id->priority, id->source_module, id->parameter);
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	7818      	ldrb	r0, [r3, #0]
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	7899      	ldrb	r1, [r3, #2]
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	889b      	ldrh	r3, [r3, #4]
 800f212:	b2db      	uxtb	r3, r3
 800f214:	461a      	mov	r2, r3
 800f216:	f7ff fc77 	bl	800eb08 <send_parameter>
 800f21a:	4603      	mov	r3, r0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3708      	adds	r7, #8
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <run_can_command>:


// run_can_command
//  run the command specified by the CAN message on this module
static S8 run_can_command(CAN_MSG* message, CAN_ID* id)
{
 800f224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f226:	b087      	sub	sp, #28
 800f228:	af02      	add	r7, sp, #8
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
	GCAN_COMMAND_ID command_id;
	CUST_FUNC* this_function;
	U8 c;

	// DLC error checking
	if (message->dlc > COMMAND_SIZE)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	795b      	ldrb	r3, [r3, #5]
 800f232:	2b05      	cmp	r3, #5
 800f234:	d906      	bls.n	800f244 <run_can_command+0x20>
	{
		// there is either no DLC (no function ID) or too many parameters sent
		send_error_message(id, SIZE_ERROR);
 800f236:	2103      	movs	r1, #3
 800f238:	6838      	ldr	r0, [r7, #0]
 800f23a:	f000 f8e5 	bl	800f408 <send_error_message>
		return SIZE_ERR;
 800f23e:	f06f 030b 	mvn.w	r3, #11
 800f242:	e042      	b.n	800f2ca <run_can_command+0xa6>
	}

	// fill in the extra DLC of the message with zeros
	for (c = message->dlc; c < COMMAND_SIZE; c++)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	795b      	ldrb	r3, [r3, #5]
 800f248:	73fb      	strb	r3, [r7, #15]
 800f24a:	e007      	b.n	800f25c <run_can_command+0x38>
	{
		message->data[c] = 0;
 800f24c:	7bfb      	ldrb	r3, [r7, #15]
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	4413      	add	r3, r2
 800f252:	2200      	movs	r2, #0
 800f254:	719a      	strb	r2, [r3, #6]
	for (c = message->dlc; c < COMMAND_SIZE; c++)
 800f256:	7bfb      	ldrb	r3, [r7, #15]
 800f258:	3301      	adds	r3, #1
 800f25a:	73fb      	strb	r3, [r7, #15]
 800f25c:	7bfb      	ldrb	r3, [r7, #15]
 800f25e:	2b04      	cmp	r3, #4
 800f260:	d9f4      	bls.n	800f24c <run_can_command+0x28>
	}

	// error checking on the command ID
	command_id = message->data[COMMAND_ID_POS];
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	799b      	ldrb	r3, [r3, #6]
 800f266:	73bb      	strb	r3, [r7, #14]
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 800f268:	7bbb      	ldrb	r3, [r7, #14]
 800f26a:	2b08      	cmp	r3, #8
 800f26c:	d906      	bls.n	800f27c <run_can_command+0x58>
	{
		send_error_message(id, COMMAND_ID_NOT_FOUND);
 800f26e:	2101      	movs	r1, #1
 800f270:	6838      	ldr	r0, [r7, #0]
 800f272:	f000 f8c9 	bl	800f408 <send_error_message>

		return NOT_FOUND_ERR;
 800f276:	f06f 0309 	mvn.w	r3, #9
 800f27a:	e026      	b.n	800f2ca <run_can_command+0xa6>
	}

	this_function = &(cust_funcs[command_id]);
 800f27c:	7bba      	ldrb	r2, [r7, #14]
 800f27e:	4613      	mov	r3, r2
 800f280:	005b      	lsls	r3, r3, #1
 800f282:	4413      	add	r3, r2
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	4a13      	ldr	r2, [pc, #76]	; (800f2d4 <run_can_command+0xb0>)
 800f288:	4413      	add	r3, r2
 800f28a:	60bb      	str	r3, [r7, #8]

	// check if the function is enabled
	if (!this_function->func_enabled)
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	791b      	ldrb	r3, [r3, #4]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d106      	bne.n	800f2a2 <run_can_command+0x7e>
	{
		send_error_message(id, COMMAND_NOT_ENABLED);
 800f294:	2105      	movs	r1, #5
 800f296:	6838      	ldr	r0, [r7, #0]
 800f298:	f000 f8b6 	bl	800f408 <send_error_message>

		return NOT_ENABLED_ERR;
 800f29c:	f06f 030a 	mvn.w	r3, #10
 800f2a0:	e013      	b.n	800f2ca <run_can_command+0xa6>
	}

	// run the function
	(*(this_function->func_ptr))(id->source_module, this_function->param_ptr,
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	681c      	ldr	r4, [r3, #0]
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	7898      	ldrb	r0, [r3, #2]
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	6899      	ldr	r1, [r3, #8]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	79dd      	ldrb	r5, [r3, #7]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	7a1e      	ldrb	r6, [r3, #8]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	7a5b      	ldrb	r3, [r3, #9]
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	7a92      	ldrb	r2, [r2, #10]
 800f2be:	9201      	str	r2, [sp, #4]
 800f2c0:	9300      	str	r3, [sp, #0]
 800f2c2:	4633      	mov	r3, r6
 800f2c4:	462a      	mov	r2, r5
 800f2c6:	47a0      	blx	r4
		message->data[COMMAND_PARAM_0], message->data[COMMAND_PARAM_1],
		message->data[COMMAND_PARAM_2], message->data[COMMAND_PARAM_3]);

	return CAN_SUCCESS;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3714      	adds	r7, #20
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	20007320 	.word	0x20007320

0800f2d8 <build_message_id>:

// build_can_id
//  this function will fill in the id of msg when called.
//  No error checking is preformed in this function besides masking
static void build_message_id(CAN_MSG* msg, CAN_ID* id)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b085      	sub	sp, #20
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
	U32 temp;

	msg->id = 0;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	601a      	str	r2, [r3, #0]

	// priority bit
	temp = !!id->priority;
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	bf14      	ite	ne
 800f2f0:	2301      	movne	r3, #1
 800f2f2:	2300      	moveq	r3, #0
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PRIORITY_POS - PRIORITY_SIZE);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	071b      	lsls	r3, r3, #28
 800f2fc:	60fb      	str	r3, [r7, #12]
	temp &= PRIORITY_MASK;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f304:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	431a      	orrs	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	601a      	str	r2, [r3, #0]

	// destination bits
	temp = id->dest_module;
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	785b      	ldrb	r3, [r3, #1]
 800f316:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - DEST_POS - DEST_SIZE);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	059b      	lsls	r3, r3, #22
 800f31c:	60fb      	str	r3, [r7, #12]
	temp &= DEST_MASK;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f003 637c 	and.w	r3, r3, #264241152	; 0xfc00000
 800f324:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	431a      	orrs	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	601a      	str	r2, [r3, #0]

    // source bits
	temp = id->source_module;
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	789b      	ldrb	r3, [r3, #2]
 800f336:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - SOURCE_POS - SOURCE_SIZE);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	041b      	lsls	r3, r3, #16
 800f33c:	60fb      	str	r3, [r7, #12]
	temp &= SOURCE_MASK;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800f344:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	431a      	orrs	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	601a      	str	r2, [r3, #0]

	// error bit
	temp = id->error;
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	78db      	ldrb	r3, [r3, #3]
 800f356:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - ERROR_POS - ERROR_SIZE);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	03db      	lsls	r3, r3, #15
 800f35c:	60fb      	str	r3, [r7, #12]
	temp &= ERROR_MASK;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f364:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	431a      	orrs	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	601a      	str	r2, [r3, #0]

	// parameter bits
	temp = id->parameter;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	889b      	ldrh	r3, [r3, #4]
 800f376:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PARAM_POS - PARAM_SIZE);
	temp &= PARAM_MASK;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f37e:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681a      	ldr	r2, [r3, #0]
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	431a      	orrs	r2, r3
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	601a      	str	r2, [r3, #0]
}
 800f38c:	bf00      	nop
 800f38e:	3714      	adds	r7, #20
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr

0800f398 <get_message_id>:

// get_message_id
//  this function will take in a CAN message and convert it to
//  a CAN id struct. No error checking is performed
static void get_message_id(CAN_ID* id, CAN_MSG* message)
{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
	id->priority = GET_ID_PRIO(message->id);
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	0f1b      	lsrs	r3, r3, #28
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	f003 0301 	and.w	r3, r3, #1
 800f3ae:	b2da      	uxtb	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	701a      	strb	r2, [r3, #0]
	id->dest_module = GET_ID_DEST(message->id);
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	0d9b      	lsrs	r3, r3, #22
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3c0:	b2da      	uxtb	r2, r3
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	705a      	strb	r2, [r3, #1]
	id->source_module = GET_ID_SOURCE(message->id);
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	0c1b      	lsrs	r3, r3, #16
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3d2:	b2da      	uxtb	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	709a      	strb	r2, [r3, #2]
	id->error = GET_ID_ERROR(message->id);
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	0bdb      	lsrs	r3, r3, #15
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	f003 0301 	and.w	r3, r3, #1
 800f3e4:	b2da      	uxtb	r2, r3
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	70da      	strb	r2, [r3, #3]
	id->parameter = GET_ID_PARAM(message->id);
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	809a      	strh	r2, [r3, #4]
}
 800f3fa:	bf00      	nop
 800f3fc:	370c      	adds	r7, #12
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
	...

0800f408 <send_error_message>:


// send_error_message
//  Sends a return message to the original sender with the ID specified
static S8 send_error_message(CAN_ID* rx_id, U8 error_id)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b088      	sub	sp, #32
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	460b      	mov	r3, r1
 800f412:	70fb      	strb	r3, [r7, #3]
	CAN_MSG message;
	CAN_ID tx_id;

	// create the CAN ID for the error message
	tx_id.priority = rx_id->priority;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	723b      	strb	r3, [r7, #8]
	tx_id.dest_module = rx_id->source_module;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	789b      	ldrb	r3, [r3, #2]
 800f41e:	727b      	strb	r3, [r7, #9]
	tx_id.source_module = this_module_id;
 800f420:	4b0f      	ldr	r3, [pc, #60]	; (800f460 <send_error_message+0x58>)
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	72bb      	strb	r3, [r7, #10]
	tx_id.error = TRUE;
 800f426:	2301      	movs	r3, #1
 800f428:	72fb      	strb	r3, [r7, #11]
	tx_id.parameter = rx_id->parameter;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	889b      	ldrh	r3, [r3, #4]
 800f42e:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &tx_id);
 800f430:	f107 0208 	add.w	r2, r7, #8
 800f434:	f107 0310 	add.w	r3, r7, #16
 800f438:	4611      	mov	r1, r2
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7ff ff4c 	bl	800f2d8 <build_message_id>

	// set the RTR bit to a data message
	message.rtr_bit = DATA_MESSAGE;
 800f440:	2300      	movs	r3, #0
 800f442:	753b      	strb	r3, [r7, #20]

	// set the DLC and data
	message.dlc = sizeof(error_id);
 800f444:	2301      	movs	r3, #1
 800f446:	757b      	strb	r3, [r7, #21]
	message.data[0] = error_id;
 800f448:	78fb      	ldrb	r3, [r7, #3]
 800f44a:	75bb      	strb	r3, [r7, #22]

	// send the CAN message
	return tx_can_message(&message);
 800f44c:	f107 0310 	add.w	r3, r7, #16
 800f450:	4618      	mov	r0, r3
 800f452:	f7ff fd6d 	bl	800ef30 <tx_can_message>
 800f456:	4603      	mov	r3, r0
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3720      	adds	r7, #32
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	2000738c 	.word	0x2000738c

0800f464 <define_can_bus>:
//
// WARNING: if MULTI_BUS is defined, this function must be called as part of the initialization step,
//           right after init() has been called for all active busses
#ifdef MULTI_BUS
void define_can_bus(CAN_HandleTypeDef* hcan, U8 gophercan_bus_id, U8 bus_number)
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	460b      	mov	r3, r1
 800f46e:	70fb      	strb	r3, [r7, #3]
 800f470:	4613      	mov	r3, r2
 800f472:	70bb      	strb	r3, [r7, #2]
	switch (bus_number)
 800f474:	78bb      	ldrb	r3, [r7, #2]
 800f476:	2b01      	cmp	r3, #1
 800f478:	d109      	bne.n	800f48e <define_can_bus+0x2a>
		break;
#endif // NUM_OF_BUSSES > 2

#if NUM_OF_BUSSES > 1
	case 1:
		gbus1.tx_buffer = &tx_buffer_1;
 800f47a:	4b0d      	ldr	r3, [pc, #52]	; (800f4b0 <define_can_bus+0x4c>)
 800f47c:	4a0d      	ldr	r2, [pc, #52]	; (800f4b4 <define_can_bus+0x50>)
 800f47e:	601a      	str	r2, [r3, #0]
		gbus1.hcan = hcan;
 800f480:	4a0b      	ldr	r2, [pc, #44]	; (800f4b0 <define_can_bus+0x4c>)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6053      	str	r3, [r2, #4]
		gbus1.gopher_can_id = gophercan_bus_id;
 800f486:	4a0a      	ldr	r2, [pc, #40]	; (800f4b0 <define_can_bus+0x4c>)
 800f488:	78fb      	ldrb	r3, [r7, #3]
 800f48a:	7213      	strb	r3, [r2, #8]
		break;
 800f48c:	e009      	b.n	800f4a2 <define_can_bus+0x3e>
#endif // NUM_OF_BUSSES > 1

	default:
		gbus0.tx_buffer = &tx_buffer;
 800f48e:	4b0a      	ldr	r3, [pc, #40]	; (800f4b8 <define_can_bus+0x54>)
 800f490:	4a0a      	ldr	r2, [pc, #40]	; (800f4bc <define_can_bus+0x58>)
 800f492:	601a      	str	r2, [r3, #0]
		gbus0.hcan = hcan;
 800f494:	4a08      	ldr	r2, [pc, #32]	; (800f4b8 <define_can_bus+0x54>)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6053      	str	r3, [r2, #4]
		gbus0.gopher_can_id = gophercan_bus_id;
 800f49a:	4a07      	ldr	r2, [pc, #28]	; (800f4b8 <define_can_bus+0x54>)
 800f49c:	78fb      	ldrb	r3, [r7, #3]
 800f49e:	7213      	strb	r3, [r2, #8]
		break;
 800f4a0:	bf00      	nop
	}
}
 800f4a2:	bf00      	nop
 800f4a4:	370c      	adds	r7, #12
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr
 800f4ae:	bf00      	nop
 800f4b0:	20007390 	.word	0x20007390
 800f4b4:	20007318 	.word	0x20007318
 800f4b8:	2000730c 	.word	0x2000730c
 800f4bc:	20007304 	.word	0x20007304

0800f4c0 <HAL_CAN_TxMailbox0CompleteCallback>:


// the F7xx has ISRs for available TX mailboxes having an opening. All callbacks should service the TX hardware
#if TARGET == F7XX || TARGET == F4XX
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f7ff fc65 	bl	800ed98 <service_can_tx_hardware>
}
 800f4ce:	bf00      	nop
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}

0800f4d6 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 800f4d6:	b580      	push	{r7, lr}
 800f4d8:	b082      	sub	sp, #8
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f7ff fc5a 	bl	800ed98 <service_can_tx_hardware>
}
 800f4e4:	bf00      	nop
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f7ff fc4f 	bl	800ed98 <service_can_tx_hardware>
}
 800f4fa:	bf00      	nop
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef* hcan)
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b082      	sub	sp, #8
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7ff fc44 	bl	800ed98 <service_can_tx_hardware>
}
 800f510:	bf00      	nop
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef* hcan)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f7ff fc39 	bl	800ed98 <service_can_tx_hardware>
}
 800f526:	bf00      	nop
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef* hcan)
{
 800f52e:	b580      	push	{r7, lr}
 800f530:	b082      	sub	sp, #8
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7ff fc2e 	bl	800ed98 <service_can_tx_hardware>
}
 800f53c:	bf00      	nop
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <choose_tx_buffer_from_hcan>:
// choose_tx_buffer_from_hcan
//  Chooses what buffer the hcan pointer inputed is referring to based on the function define_can_bus().
//  If the hcan pointer is not found, defaults to module bus 0
#ifdef MULTI_BUS
static CAN_MSG_RING_BUFFER* choose_tx_buffer_from_hcan(CAN_HandleTypeDef* hcan)
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	{
		return gbus2.tx_buffer;
	}
#endif // NUM_OF_BUSSES > 2
#if NUM_OF_BUSSES > 1
	if (hcan == gbus1.hcan)
 800f54c:	4b07      	ldr	r3, [pc, #28]	; (800f56c <choose_tx_buffer_from_hcan+0x28>)
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	429a      	cmp	r2, r3
 800f554:	d102      	bne.n	800f55c <choose_tx_buffer_from_hcan+0x18>
	{
		return gbus1.tx_buffer;
 800f556:	4b05      	ldr	r3, [pc, #20]	; (800f56c <choose_tx_buffer_from_hcan+0x28>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	e001      	b.n	800f560 <choose_tx_buffer_from_hcan+0x1c>
	}
#endif // NUM_OF_BUSSES > 1
	return gbus0.tx_buffer;
 800f55c:	4b04      	ldr	r3, [pc, #16]	; (800f570 <choose_tx_buffer_from_hcan+0x2c>)
 800f55e:	681b      	ldr	r3, [r3, #0]
}
 800f560:	4618      	mov	r0, r3
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr
 800f56c:	20007390 	.word	0x20007390
 800f570:	2000730c 	.word	0x2000730c

0800f574 <choose_hcan_from_tx_buffer>:

// choose_hcan_from_tx_buffer
//  Returns the correct HCAN from the inputed buffer. Defaults to hcan0
#ifdef MULTI_BUS
static CAN_HandleTypeDef* choose_hcan_from_tx_buffer(CAN_MSG_RING_BUFFER* buffer)
{
 800f574:	b480      	push	{r7}
 800f576:	b083      	sub	sp, #12
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
	{
		return gbus2.hcan;
	}
#endif // NUM_OF_BUSSES > 2
#if NUM_OF_BUSSES > 1
	if (buffer == gbus1.tx_buffer)
 800f57c:	4b07      	ldr	r3, [pc, #28]	; (800f59c <choose_hcan_from_tx_buffer+0x28>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	429a      	cmp	r2, r3
 800f584:	d102      	bne.n	800f58c <choose_hcan_from_tx_buffer+0x18>
	{
		return gbus1.hcan;
 800f586:	4b05      	ldr	r3, [pc, #20]	; (800f59c <choose_hcan_from_tx_buffer+0x28>)
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	e001      	b.n	800f590 <choose_hcan_from_tx_buffer+0x1c>
	}
#endif // NUM_OF_BUSSES > 1
	return gbus0.hcan;
 800f58c:	4b04      	ldr	r3, [pc, #16]	; (800f5a0 <choose_hcan_from_tx_buffer+0x2c>)
 800f58e:	685b      	ldr	r3, [r3, #4]
}
 800f590:	4618      	mov	r0, r3
 800f592:	370c      	adds	r7, #12
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr
 800f59c:	20007390 	.word	0x20007390
 800f5a0:	2000730c 	.word	0x2000730c

0800f5a4 <choose_tx_buffer_from_dest_module>:
// choose_tx_buffer_from_dest_module
//  Chooses which buffer the the dest_module in message_to_add is on
//  If the module is not found, defaults to module bus 0
#ifdef MULTI_BUS
static CAN_MSG_RING_BUFFER* choose_tx_buffer_from_dest_module(CAN_MSG* message_to_add)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b085      	sub	sp, #20
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
	MODULE_ID dest_module;
	dest_module = GET_ID_DEST(message_to_add->id);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	0d9b      	lsrs	r3, r3, #22
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5b8:	73fb      	strb	r3, [r7, #15]
		return gbus2.tx_buffer;
	}
	else
#endif // NUM_OF_BUSSES > 2
#if NUM_OF_BUSSES > 1
	if (module_bus_number[dest_module] == gbus1.gopher_can_id)
 800f5ba:	7bfb      	ldrb	r3, [r7, #15]
 800f5bc:	4a08      	ldr	r2, [pc, #32]	; (800f5e0 <choose_tx_buffer_from_dest_module+0x3c>)
 800f5be:	5cd2      	ldrb	r2, [r2, r3]
 800f5c0:	4b08      	ldr	r3, [pc, #32]	; (800f5e4 <choose_tx_buffer_from_dest_module+0x40>)
 800f5c2:	7a1b      	ldrb	r3, [r3, #8]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d102      	bne.n	800f5ce <choose_tx_buffer_from_dest_module+0x2a>
	{
		return gbus1.tx_buffer;
 800f5c8:	4b06      	ldr	r3, [pc, #24]	; (800f5e4 <choose_tx_buffer_from_dest_module+0x40>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	e001      	b.n	800f5d2 <choose_tx_buffer_from_dest_module+0x2e>
	}
	else
#endif // NUM_OF_BUSSES > 1
	return gbus0.tx_buffer;
 800f5ce:	4b06      	ldr	r3, [pc, #24]	; (800f5e8 <choose_tx_buffer_from_dest_module+0x44>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3714      	adds	r7, #20
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	20000014 	.word	0x20000014
 800f5e4:	20007390 	.word	0x20007390
 800f5e8:	2000730c 	.word	0x2000730c

0800f5ec <send_message_to_all_busses>:

// send_message_to_all_busses
//  This function will add the message to all of the TX buffers active
#ifdef MULTI_BUS
static void send_message_to_all_busses(CAN_MSG* message_to_add)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
#endif // TARGET == F7XX || TARGET == F4XX
	}
#endif // NUM_OF_BUSSES > 2
#if NUM_OF_BUSSES > 1
	// check to make sure the buffer is not full
	if (!IS_FULL(&tx_buffer_1))
 800f5f4:	4b1b      	ldr	r3, [pc, #108]	; (800f664 <send_message_to_all_busses+0x78>)
 800f5f6:	799a      	ldrb	r2, [r3, #6]
 800f5f8:	4b1a      	ldr	r3, [pc, #104]	; (800f664 <send_message_to_all_busses+0x78>)
 800f5fa:	791b      	ldrb	r3, [r3, #4]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d213      	bcs.n	800f628 <send_message_to_all_busses+0x3c>
	{
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_DeactivateNotification(choose_hcan_from_tx_buffer(&tx_buffer_1), CAN_IT_TX_MAILBOX_EMPTY);
 800f600:	4818      	ldr	r0, [pc, #96]	; (800f664 <send_message_to_all_busses+0x78>)
 800f602:	f7ff ffb7 	bl	800f574 <choose_hcan_from_tx_buffer>
 800f606:	4603      	mov	r3, r0
 800f608:	2101      	movs	r1, #1
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7f3 fbc4 	bl	8002d98 <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX
		add_message_by_highest_prio(&tx_buffer_1, message_to_add);
 800f610:	6879      	ldr	r1, [r7, #4]
 800f612:	4814      	ldr	r0, [pc, #80]	; (800f664 <send_message_to_all_busses+0x78>)
 800f614:	f000 f909 	bl	800f82a <add_message_by_highest_prio>

#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_ActivateNotification(choose_hcan_from_tx_buffer(&tx_buffer_1), CAN_IT_TX_MAILBOX_EMPTY);
 800f618:	4812      	ldr	r0, [pc, #72]	; (800f664 <send_message_to_all_busses+0x78>)
 800f61a:	f7ff ffab 	bl	800f574 <choose_hcan_from_tx_buffer>
 800f61e:	4603      	mov	r3, r0
 800f620:	2101      	movs	r1, #1
 800f622:	4618      	mov	r0, r3
 800f624:	f7f3 fb92 	bl	8002d4c <HAL_CAN_ActivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX
	}
#endif // NUM_OF_BUSSES > 1
	// check to make sure the buffer is not full
	if (!IS_FULL(&tx_buffer))
 800f628:	4b0f      	ldr	r3, [pc, #60]	; (800f668 <send_message_to_all_busses+0x7c>)
 800f62a:	799a      	ldrb	r2, [r3, #6]
 800f62c:	4b0e      	ldr	r3, [pc, #56]	; (800f668 <send_message_to_all_busses+0x7c>)
 800f62e:	791b      	ldrb	r3, [r3, #4]
 800f630:	429a      	cmp	r2, r3
 800f632:	d213      	bcs.n	800f65c <send_message_to_all_busses+0x70>
	{
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_DeactivateNotification(choose_hcan_from_tx_buffer(&tx_buffer), CAN_IT_TX_MAILBOX_EMPTY);
 800f634:	480c      	ldr	r0, [pc, #48]	; (800f668 <send_message_to_all_busses+0x7c>)
 800f636:	f7ff ff9d 	bl	800f574 <choose_hcan_from_tx_buffer>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2101      	movs	r1, #1
 800f63e:	4618      	mov	r0, r3
 800f640:	f7f3 fbaa 	bl	8002d98 <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX
		add_message_by_highest_prio(&tx_buffer, message_to_add);
 800f644:	6879      	ldr	r1, [r7, #4]
 800f646:	4808      	ldr	r0, [pc, #32]	; (800f668 <send_message_to_all_busses+0x7c>)
 800f648:	f000 f8ef 	bl	800f82a <add_message_by_highest_prio>

#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_ActivateNotification(choose_hcan_from_tx_buffer(&tx_buffer), CAN_IT_TX_MAILBOX_EMPTY);
 800f64c:	4806      	ldr	r0, [pc, #24]	; (800f668 <send_message_to_all_busses+0x7c>)
 800f64e:	f7ff ff91 	bl	800f574 <choose_hcan_from_tx_buffer>
 800f652:	4603      	mov	r3, r0
 800f654:	2101      	movs	r1, #1
 800f656:	4618      	mov	r0, r3
 800f658:	f7f3 fb78 	bl	8002d4c <HAL_CAN_ActivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX
	}
}
 800f65c:	bf00      	nop
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	20007318 	.word	0x20007318
 800f668:	20007304 	.word	0x20007304

0800f66c <rout_can_message>:
// rout_can_message
//  Function to be called in service_can_rx_hardware() that will take messages that are
//  destined for modules on another bus and put that message into the correct TX buffer
#ifdef CAN_ROUTER
static void rout_can_message(CAN_HandleTypeDef* hcan, CAN_MSG* message)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
	CAN_MSG_RING_BUFFER* buffer;
	MODULE_ID dest_module;
	dest_module = GET_ID_DEST(message->id);
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	0d9b      	lsrs	r3, r3, #22
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f682:	73fb      	strb	r3, [r7, #15]

	// Get the buffer this message should go on if it needs to be routed
	buffer = choose_tx_buffer_from_dest_module(message);
 800f684:	6838      	ldr	r0, [r7, #0]
 800f686:	f7ff ff8d 	bl	800f5a4 <choose_tx_buffer_from_dest_module>
 800f68a:	60b8      	str	r0, [r7, #8]

	// Handle the special case of a message that needs to be sent out to all busses (ID 0)
	if (dest_module == ALL_MODULES_ID)
 800f68c:	7bfb      	ldrb	r3, [r7, #15]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d142      	bne.n	800f718 <rout_can_message+0xac>
#endif // TARGET == F7XX || TARGET == F4XX
		}
#endif // NUM_OF_BUSSES > 2
#if NUM_OF_BUSSES > 1
		// check to make sure the buffer is not full and the message did not come from this buffer
		if (!IS_FULL(&tx_buffer_1)
 800f692:	4b3b      	ldr	r3, [pc, #236]	; (800f780 <rout_can_message+0x114>)
 800f694:	799a      	ldrb	r2, [r3, #6]
 800f696:	4b3a      	ldr	r3, [pc, #232]	; (800f780 <rout_can_message+0x114>)
 800f698:	791b      	ldrb	r3, [r3, #4]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d21a      	bcs.n	800f6d4 <rout_can_message+0x68>
				&& &tx_buffer_1 != choose_tx_buffer_from_hcan(hcan))
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7ff ff50 	bl	800f544 <choose_tx_buffer_from_hcan>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	4a36      	ldr	r2, [pc, #216]	; (800f780 <rout_can_message+0x114>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d013      	beq.n	800f6d4 <rout_can_message+0x68>
		{
#if TARGET == F7XX || TARGET == F4XX
			HAL_CAN_DeactivateNotification(choose_hcan_from_tx_buffer(&tx_buffer_1), CAN_IT_TX_MAILBOX_EMPTY);
 800f6ac:	4834      	ldr	r0, [pc, #208]	; (800f780 <rout_can_message+0x114>)
 800f6ae:	f7ff ff61 	bl	800f574 <choose_hcan_from_tx_buffer>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2101      	movs	r1, #1
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7f3 fb6e 	bl	8002d98 <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX
			add_message_by_highest_prio(&tx_buffer_1, message);
 800f6bc:	6839      	ldr	r1, [r7, #0]
 800f6be:	4830      	ldr	r0, [pc, #192]	; (800f780 <rout_can_message+0x114>)
 800f6c0:	f000 f8b3 	bl	800f82a <add_message_by_highest_prio>

#if TARGET == F7XX || TARGET == F4XX
			HAL_CAN_ActivateNotification(choose_hcan_from_tx_buffer(&tx_buffer_1), CAN_IT_TX_MAILBOX_EMPTY);
 800f6c4:	482e      	ldr	r0, [pc, #184]	; (800f780 <rout_can_message+0x114>)
 800f6c6:	f7ff ff55 	bl	800f574 <choose_hcan_from_tx_buffer>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2101      	movs	r1, #1
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7f3 fb3c 	bl	8002d4c <HAL_CAN_ActivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX
		}
#endif // NUM_OF_BUSSES > 1
		// check to make sure the buffer is not full and the message did not come from this buffer
		if (!IS_FULL(&tx_buffer)
 800f6d4:	4b2b      	ldr	r3, [pc, #172]	; (800f784 <rout_can_message+0x118>)
 800f6d6:	799a      	ldrb	r2, [r3, #6]
 800f6d8:	4b2a      	ldr	r3, [pc, #168]	; (800f784 <rout_can_message+0x118>)
 800f6da:	791b      	ldrb	r3, [r3, #4]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d247      	bcs.n	800f770 <rout_can_message+0x104>
				&& &tx_buffer != choose_tx_buffer_from_hcan(hcan))
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f7ff ff2f 	bl	800f544 <choose_tx_buffer_from_hcan>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	4a26      	ldr	r2, [pc, #152]	; (800f784 <rout_can_message+0x118>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d040      	beq.n	800f770 <rout_can_message+0x104>
		{
#if TARGET == F7XX || TARGET == F4XX
			HAL_CAN_DeactivateNotification(choose_hcan_from_tx_buffer(&tx_buffer), CAN_IT_TX_MAILBOX_EMPTY);
 800f6ee:	4825      	ldr	r0, [pc, #148]	; (800f784 <rout_can_message+0x118>)
 800f6f0:	f7ff ff40 	bl	800f574 <choose_hcan_from_tx_buffer>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2101      	movs	r1, #1
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7f3 fb4d 	bl	8002d98 <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX
			add_message_by_highest_prio(&tx_buffer, message);
 800f6fe:	6839      	ldr	r1, [r7, #0]
 800f700:	4820      	ldr	r0, [pc, #128]	; (800f784 <rout_can_message+0x118>)
 800f702:	f000 f892 	bl	800f82a <add_message_by_highest_prio>

#if TARGET == F7XX || TARGET == F4XX
			HAL_CAN_ActivateNotification(choose_hcan_from_tx_buffer(&tx_buffer), CAN_IT_TX_MAILBOX_EMPTY);
 800f706:	481f      	ldr	r0, [pc, #124]	; (800f784 <rout_can_message+0x118>)
 800f708:	f7ff ff34 	bl	800f574 <choose_hcan_from_tx_buffer>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2101      	movs	r1, #1
 800f710:	4618      	mov	r0, r3
 800f712:	f7f3 fb1b 	bl	8002d4c <HAL_CAN_ActivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX
		}

		return;
 800f716:	e02b      	b.n	800f770 <rout_can_message+0x104>
	}

	// Make sure this message isn't for the module that is acting as the router
	if (dest_module == this_module_id)
 800f718:	4b1b      	ldr	r3, [pc, #108]	; (800f788 <rout_can_message+0x11c>)
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	7bfa      	ldrb	r2, [r7, #15]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d028      	beq.n	800f774 <rout_can_message+0x108>
		// This message is for the router module. Return and process the message as normal
		return;
	}

	// Determine if this message needs to be routed (if the destination module is on another bus)
	if (buffer == choose_tx_buffer_from_hcan(hcan))
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f7ff ff0e 	bl	800f544 <choose_tx_buffer_from_hcan>
 800f728:	4602      	mov	r2, r0
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d023      	beq.n	800f778 <rout_can_message+0x10c>
		// This message does not need to be routed. It came from the bus it should be on
		return;
	}

#if TARGET == F7XX || TARGET == F4XX
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 800f730:	2101      	movs	r1, #1
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f7f3 fb30 	bl	8002d98 <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX

	// check to make sure the buffer is not full. If it is, the message will be discarded
	if (IS_FULL(buffer))
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	799a      	ldrb	r2, [r3, #6]
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	791b      	ldrb	r3, [r3, #4]
 800f740:	429a      	cmp	r2, r3
 800f742:	d306      	bcc.n	800f752 <rout_can_message+0xe6>
	{
		rx_buffer.fill_level--;
 800f744:	4b11      	ldr	r3, [pc, #68]	; (800f78c <rout_can_message+0x120>)
 800f746:	799b      	ldrb	r3, [r3, #6]
 800f748:	3b01      	subs	r3, #1
 800f74a:	b2da      	uxtb	r2, r3
 800f74c:	4b0f      	ldr	r3, [pc, #60]	; (800f78c <rout_can_message+0x120>)
 800f74e:	719a      	strb	r2, [r3, #6]
		return;
 800f750:	e013      	b.n	800f77a <rout_can_message+0x10e>
	}

	// Add the message to the selected TX buffer
	add_message_by_highest_prio(buffer, message);
 800f752:	6839      	ldr	r1, [r7, #0]
 800f754:	68b8      	ldr	r0, [r7, #8]
 800f756:	f000 f868 	bl	800f82a <add_message_by_highest_prio>

	// Remove the message from the RX buffer, it is now on a TX buffer
	rx_buffer.fill_level--;
 800f75a:	4b0c      	ldr	r3, [pc, #48]	; (800f78c <rout_can_message+0x120>)
 800f75c:	799b      	ldrb	r3, [r3, #6]
 800f75e:	3b01      	subs	r3, #1
 800f760:	b2da      	uxtb	r2, r3
 800f762:	4b0a      	ldr	r3, [pc, #40]	; (800f78c <rout_can_message+0x120>)
 800f764:	719a      	strb	r2, [r3, #6]

#if TARGET == F7XX || TARGET == F4XX
	HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 800f766:	2101      	movs	r1, #1
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7f3 faef 	bl	8002d4c <HAL_CAN_ActivateNotification>
 800f76e:	e004      	b.n	800f77a <rout_can_message+0x10e>
		return;
 800f770:	bf00      	nop
 800f772:	e002      	b.n	800f77a <rout_can_message+0x10e>
		return;
 800f774:	bf00      	nop
 800f776:	e000      	b.n	800f77a <rout_can_message+0x10e>
		return;
 800f778:	bf00      	nop
#endif // TARGET == F7XX || TARGET == F4XX
}
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	20007318 	.word	0x20007318
 800f784:	20007304 	.word	0x20007304
 800f788:	2000738c 	.word	0x2000738c
 800f78c:	200070fc 	.word	0x200070fc

0800f790 <do_nothing>:
// do_nothing
//  this exists to give a default function pointer to all of the CAN commands
//  to avoid errors from bad function pointers
void do_nothing(U8 sending_module, void* param,
	U8 remote_param0, U8 remote_param1, U8 remote_param2, U8 remote_param3)
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6039      	str	r1, [r7, #0]
 800f798:	4611      	mov	r1, r2
 800f79a:	461a      	mov	r2, r3
 800f79c:	4603      	mov	r3, r0
 800f79e:	71fb      	strb	r3, [r7, #7]
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	71bb      	strb	r3, [r7, #6]
 800f7a4:	4613      	mov	r3, r2
 800f7a6:	717b      	strb	r3, [r7, #5]
	// this function has successfully done nothing
}
 800f7a8:	bf00      	nop
 800f7aa:	370c      	adds	r7, #12
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <init_buffer>:


// init_buffer
//  initialize the buffer with the values passed in as parameters
void init_buffer(CAN_MSG_RING_BUFFER* buffer, CAN_MSG buffer_memory_ptr[], U8 buffer_size)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b085      	sub	sp, #20
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	60b9      	str	r1, [r7, #8]
 800f7be:	4613      	mov	r3, r2
 800f7c0:	71fb      	strb	r3, [r7, #7]
	buffer->head = 0;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	715a      	strb	r2, [r3, #5]
	buffer->fill_level = 0;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	719a      	strb	r2, [r3, #6]
	buffer->size = buffer_size;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	79fa      	ldrb	r2, [r7, #7]
 800f7d2:	711a      	strb	r2, [r3, #4]
	buffer->message_buffer = buffer_memory_ptr;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	601a      	str	r2, [r3, #0]
}
 800f7da:	bf00      	nop
 800f7dc:	3714      	adds	r7, #20
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr

0800f7e6 <remove_from_front>:


// remove_from_front
//  will remove the first element of the ring buffer. If the buffer is empty it will do nothing
void remove_from_front(CAN_MSG_RING_BUFFER* buffer)
{
 800f7e6:	b480      	push	{r7}
 800f7e8:	b083      	sub	sp, #12
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
	// don't do anything if the buffer is empty
	if (IS_EMPTY(buffer))
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	799b      	ldrb	r3, [r3, #6]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d013      	beq.n	800f81e <remove_from_front+0x38>
	{
		return;
	}

	// move the head to the next element
	buffer->head = (buffer->head + 1) % buffer->size;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	795b      	ldrb	r3, [r3, #5]
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	7912      	ldrb	r2, [r2, #4]
 800f800:	fb93 f1f2 	sdiv	r1, r3, r2
 800f804:	fb02 f201 	mul.w	r2, r2, r1
 800f808:	1a9b      	subs	r3, r3, r2
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	715a      	strb	r2, [r3, #5]

	// decrement the fill level
	buffer->fill_level--;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	799b      	ldrb	r3, [r3, #6]
 800f814:	3b01      	subs	r3, #1
 800f816:	b2da      	uxtb	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	719a      	strb	r2, [r3, #6]
 800f81c:	e000      	b.n	800f820 <remove_from_front+0x3a>
		return;
 800f81e:	bf00      	nop
}
 800f820:	370c      	adds	r7, #12
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr

0800f82a <add_message_by_highest_prio>:
//  This function will add message to the buffer based on the ID of the message. Higher
//  priority messages (lower ID) will be towards the front, with lower priority
//  messages (greater ID) will be towards the back. Removing from the front will get
//  the highest priority message. This function assumes the buffer is not full
void add_message_by_highest_prio(CAN_MSG_RING_BUFFER* buffer, CAN_MSG* message)
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b084      	sub	sp, #16
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
 800f832:	6039      	str	r1, [r7, #0]
	CAN_MSG* buffer_message = GET_FROM_BUFFER(buffer, 0);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6819      	ldr	r1, [r3, #0]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	795b      	ldrb	r3, [r3, #5]
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	7912      	ldrb	r2, [r2, #4]
 800f840:	fb93 f0f2 	sdiv	r0, r3, r2
 800f844:	fb02 f200 	mul.w	r2, r2, r0
 800f848:	1a9b      	subs	r3, r3, r2
 800f84a:	011b      	lsls	r3, r3, #4
 800f84c:	440b      	add	r3, r1
 800f84e:	60fb      	str	r3, [r7, #12]

	// start from the back of the buffer, moving each message towards the back
	// by one and put the new message in the correct spot by ID. If the buffer
	// was empty when the message first went through here, it will put the new
	// message in position 0
	buffer->fill_level++;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	799b      	ldrb	r3, [r3, #6]
 800f854:	3301      	adds	r3, #1
 800f856:	b2da      	uxtb	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	719a      	strb	r2, [r3, #6]
	for (c = buffer->fill_level - 2; c >= 0; c--)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	799b      	ldrb	r3, [r3, #6]
 800f860:	b29b      	uxth	r3, r3
 800f862:	3b02      	subs	r3, #2
 800f864:	b29b      	uxth	r3, r3
 800f866:	817b      	strh	r3, [r7, #10]
 800f868:	e047      	b.n	800f8fa <add_message_by_highest_prio+0xd0>
	{
		buffer_message = GET_FROM_BUFFER(buffer, c);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6819      	ldr	r1, [r3, #0]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	795b      	ldrb	r3, [r3, #5]
 800f872:	461a      	mov	r2, r3
 800f874:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f878:	4413      	add	r3, r2
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	7912      	ldrb	r2, [r2, #4]
 800f87e:	fb93 f0f2 	sdiv	r0, r3, r2
 800f882:	fb02 f200 	mul.w	r2, r2, r0
 800f886:	1a9b      	subs	r3, r3, r2
 800f888:	011b      	lsls	r3, r3, #4
 800f88a:	440b      	add	r3, r1
 800f88c:	60fb      	str	r3, [r7, #12]
		if (message->id >= buffer_message->id)
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	429a      	cmp	r2, r3
 800f898:	d313      	bcc.n	800f8c2 <add_message_by_highest_prio+0x98>
		{
			// we have found the correct place for the new message
			buffer_message = GET_FROM_BUFFER(buffer, c + 1);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6819      	ldr	r1, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	795b      	ldrb	r3, [r3, #5]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f8a8:	4413      	add	r3, r2
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	7912      	ldrb	r2, [r2, #4]
 800f8b0:	fb93 f0f2 	sdiv	r0, r3, r2
 800f8b4:	fb02 f200 	mul.w	r2, r2, r0
 800f8b8:	1a9b      	subs	r3, r3, r2
 800f8ba:	011b      	lsls	r3, r3, #4
 800f8bc:	440b      	add	r3, r1
 800f8be:	60fb      	str	r3, [r7, #12]
			break;
 800f8c0:	e01f      	b.n	800f902 <add_message_by_highest_prio+0xd8>
		}

		// move this message back by 1 and try again
		copy_message(buffer_message, GET_FROM_BUFFER(buffer, c + 1));
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6819      	ldr	r1, [r3, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	795b      	ldrb	r3, [r3, #5]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	687a      	ldr	r2, [r7, #4]
 800f8d6:	7912      	ldrb	r2, [r2, #4]
 800f8d8:	fb93 f0f2 	sdiv	r0, r3, r2
 800f8dc:	fb02 f200 	mul.w	r2, r2, r0
 800f8e0:	1a9b      	subs	r3, r3, r2
 800f8e2:	011b      	lsls	r3, r3, #4
 800f8e4:	440b      	add	r3, r1
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	f000 f812 	bl	800f912 <copy_message>
	for (c = buffer->fill_level - 2; c >= 0; c--)
 800f8ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	3b01      	subs	r3, #1
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	817b      	strh	r3, [r7, #10]
 800f8fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	dab3      	bge.n	800f86a <add_message_by_highest_prio+0x40>
	}

	// put the message into the buffer at this position
	copy_message(message, buffer_message);
 800f902:	68f9      	ldr	r1, [r7, #12]
 800f904:	6838      	ldr	r0, [r7, #0]
 800f906:	f000 f804 	bl	800f912 <copy_message>
}
 800f90a:	bf00      	nop
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}

0800f912 <copy_message>:


// copy_message
//  function to copy all of the data in source to dest by value, not by refernce
static void copy_message(CAN_MSG* source, CAN_MSG* dest)
{
 800f912:	b480      	push	{r7}
 800f914:	b085      	sub	sp, #20
 800f916:	af00      	add	r7, sp, #0
 800f918:	6078      	str	r0, [r7, #4]
 800f91a:	6039      	str	r1, [r7, #0]
	U8 c;

	dest->id = source->id;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	601a      	str	r2, [r3, #0]
	dest->dlc = source->dlc;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	795a      	ldrb	r2, [r3, #5]
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	715a      	strb	r2, [r3, #5]
	dest->rtr_bit = source->rtr_bit;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	791a      	ldrb	r2, [r3, #4]
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	711a      	strb	r2, [r3, #4]

	for (c = 0; c < dest->dlc; c++)
 800f934:	2300      	movs	r3, #0
 800f936:	73fb      	strb	r3, [r7, #15]
 800f938:	e00b      	b.n	800f952 <copy_message+0x40>
	{
		dest->data[c] = source->data[c];
 800f93a:	7bfa      	ldrb	r2, [r7, #15]
 800f93c:	7bfb      	ldrb	r3, [r7, #15]
 800f93e:	6879      	ldr	r1, [r7, #4]
 800f940:	440a      	add	r2, r1
 800f942:	7991      	ldrb	r1, [r2, #6]
 800f944:	683a      	ldr	r2, [r7, #0]
 800f946:	4413      	add	r3, r2
 800f948:	460a      	mov	r2, r1
 800f94a:	719a      	strb	r2, [r3, #6]
	for (c = 0; c < dest->dlc; c++)
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
 800f94e:	3301      	adds	r3, #1
 800f950:	73fb      	strb	r3, [r7, #15]
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	795b      	ldrb	r3, [r3, #5]
 800f956:	7bfa      	ldrb	r2, [r7, #15]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d3ee      	bcc.n	800f93a <copy_message+0x28>
	}
}
 800f95c:	bf00      	nop
 800f95e:	bf00      	nop
 800f960:	3714      	adds	r7, #20
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr
	...

0800f96c <__errno>:
 800f96c:	4b01      	ldr	r3, [pc, #4]	; (800f974 <__errno+0x8>)
 800f96e:	6818      	ldr	r0, [r3, #0]
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	20000088 	.word	0x20000088

0800f978 <__libc_init_array>:
 800f978:	b570      	push	{r4, r5, r6, lr}
 800f97a:	4d0d      	ldr	r5, [pc, #52]	; (800f9b0 <__libc_init_array+0x38>)
 800f97c:	4c0d      	ldr	r4, [pc, #52]	; (800f9b4 <__libc_init_array+0x3c>)
 800f97e:	1b64      	subs	r4, r4, r5
 800f980:	10a4      	asrs	r4, r4, #2
 800f982:	2600      	movs	r6, #0
 800f984:	42a6      	cmp	r6, r4
 800f986:	d109      	bne.n	800f99c <__libc_init_array+0x24>
 800f988:	4d0b      	ldr	r5, [pc, #44]	; (800f9b8 <__libc_init_array+0x40>)
 800f98a:	4c0c      	ldr	r4, [pc, #48]	; (800f9bc <__libc_init_array+0x44>)
 800f98c:	f000 fc76 	bl	801027c <_init>
 800f990:	1b64      	subs	r4, r4, r5
 800f992:	10a4      	asrs	r4, r4, #2
 800f994:	2600      	movs	r6, #0
 800f996:	42a6      	cmp	r6, r4
 800f998:	d105      	bne.n	800f9a6 <__libc_init_array+0x2e>
 800f99a:	bd70      	pop	{r4, r5, r6, pc}
 800f99c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9a0:	4798      	blx	r3
 800f9a2:	3601      	adds	r6, #1
 800f9a4:	e7ee      	b.n	800f984 <__libc_init_array+0xc>
 800f9a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9aa:	4798      	blx	r3
 800f9ac:	3601      	adds	r6, #1
 800f9ae:	e7f2      	b.n	800f996 <__libc_init_array+0x1e>
 800f9b0:	08010860 	.word	0x08010860
 800f9b4:	08010860 	.word	0x08010860
 800f9b8:	08010860 	.word	0x08010860
 800f9bc:	08010864 	.word	0x08010864

0800f9c0 <malloc>:
 800f9c0:	4b02      	ldr	r3, [pc, #8]	; (800f9cc <malloc+0xc>)
 800f9c2:	4601      	mov	r1, r0
 800f9c4:	6818      	ldr	r0, [r3, #0]
 800f9c6:	f000 b871 	b.w	800faac <_malloc_r>
 800f9ca:	bf00      	nop
 800f9cc:	20000088 	.word	0x20000088

0800f9d0 <free>:
 800f9d0:	4b02      	ldr	r3, [pc, #8]	; (800f9dc <free+0xc>)
 800f9d2:	4601      	mov	r1, r0
 800f9d4:	6818      	ldr	r0, [r3, #0]
 800f9d6:	f000 b819 	b.w	800fa0c <_free_r>
 800f9da:	bf00      	nop
 800f9dc:	20000088 	.word	0x20000088

0800f9e0 <memcpy>:
 800f9e0:	440a      	add	r2, r1
 800f9e2:	4291      	cmp	r1, r2
 800f9e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f9e8:	d100      	bne.n	800f9ec <memcpy+0xc>
 800f9ea:	4770      	bx	lr
 800f9ec:	b510      	push	{r4, lr}
 800f9ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9f6:	4291      	cmp	r1, r2
 800f9f8:	d1f9      	bne.n	800f9ee <memcpy+0xe>
 800f9fa:	bd10      	pop	{r4, pc}

0800f9fc <memset>:
 800f9fc:	4402      	add	r2, r0
 800f9fe:	4603      	mov	r3, r0
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d100      	bne.n	800fa06 <memset+0xa>
 800fa04:	4770      	bx	lr
 800fa06:	f803 1b01 	strb.w	r1, [r3], #1
 800fa0a:	e7f9      	b.n	800fa00 <memset+0x4>

0800fa0c <_free_r>:
 800fa0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa0e:	2900      	cmp	r1, #0
 800fa10:	d048      	beq.n	800faa4 <_free_r+0x98>
 800fa12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa16:	9001      	str	r0, [sp, #4]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	f1a1 0404 	sub.w	r4, r1, #4
 800fa1e:	bfb8      	it	lt
 800fa20:	18e4      	addlt	r4, r4, r3
 800fa22:	f000 f8e5 	bl	800fbf0 <__malloc_lock>
 800fa26:	4a20      	ldr	r2, [pc, #128]	; (800faa8 <_free_r+0x9c>)
 800fa28:	9801      	ldr	r0, [sp, #4]
 800fa2a:	6813      	ldr	r3, [r2, #0]
 800fa2c:	4615      	mov	r5, r2
 800fa2e:	b933      	cbnz	r3, 800fa3e <_free_r+0x32>
 800fa30:	6063      	str	r3, [r4, #4]
 800fa32:	6014      	str	r4, [r2, #0]
 800fa34:	b003      	add	sp, #12
 800fa36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa3a:	f000 b8df 	b.w	800fbfc <__malloc_unlock>
 800fa3e:	42a3      	cmp	r3, r4
 800fa40:	d90b      	bls.n	800fa5a <_free_r+0x4e>
 800fa42:	6821      	ldr	r1, [r4, #0]
 800fa44:	1862      	adds	r2, r4, r1
 800fa46:	4293      	cmp	r3, r2
 800fa48:	bf04      	itt	eq
 800fa4a:	681a      	ldreq	r2, [r3, #0]
 800fa4c:	685b      	ldreq	r3, [r3, #4]
 800fa4e:	6063      	str	r3, [r4, #4]
 800fa50:	bf04      	itt	eq
 800fa52:	1852      	addeq	r2, r2, r1
 800fa54:	6022      	streq	r2, [r4, #0]
 800fa56:	602c      	str	r4, [r5, #0]
 800fa58:	e7ec      	b.n	800fa34 <_free_r+0x28>
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	b10b      	cbz	r3, 800fa64 <_free_r+0x58>
 800fa60:	42a3      	cmp	r3, r4
 800fa62:	d9fa      	bls.n	800fa5a <_free_r+0x4e>
 800fa64:	6811      	ldr	r1, [r2, #0]
 800fa66:	1855      	adds	r5, r2, r1
 800fa68:	42a5      	cmp	r5, r4
 800fa6a:	d10b      	bne.n	800fa84 <_free_r+0x78>
 800fa6c:	6824      	ldr	r4, [r4, #0]
 800fa6e:	4421      	add	r1, r4
 800fa70:	1854      	adds	r4, r2, r1
 800fa72:	42a3      	cmp	r3, r4
 800fa74:	6011      	str	r1, [r2, #0]
 800fa76:	d1dd      	bne.n	800fa34 <_free_r+0x28>
 800fa78:	681c      	ldr	r4, [r3, #0]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	6053      	str	r3, [r2, #4]
 800fa7e:	4421      	add	r1, r4
 800fa80:	6011      	str	r1, [r2, #0]
 800fa82:	e7d7      	b.n	800fa34 <_free_r+0x28>
 800fa84:	d902      	bls.n	800fa8c <_free_r+0x80>
 800fa86:	230c      	movs	r3, #12
 800fa88:	6003      	str	r3, [r0, #0]
 800fa8a:	e7d3      	b.n	800fa34 <_free_r+0x28>
 800fa8c:	6825      	ldr	r5, [r4, #0]
 800fa8e:	1961      	adds	r1, r4, r5
 800fa90:	428b      	cmp	r3, r1
 800fa92:	bf04      	itt	eq
 800fa94:	6819      	ldreq	r1, [r3, #0]
 800fa96:	685b      	ldreq	r3, [r3, #4]
 800fa98:	6063      	str	r3, [r4, #4]
 800fa9a:	bf04      	itt	eq
 800fa9c:	1949      	addeq	r1, r1, r5
 800fa9e:	6021      	streq	r1, [r4, #0]
 800faa0:	6054      	str	r4, [r2, #4]
 800faa2:	e7c7      	b.n	800fa34 <_free_r+0x28>
 800faa4:	b003      	add	sp, #12
 800faa6:	bd30      	pop	{r4, r5, pc}
 800faa8:	20004338 	.word	0x20004338

0800faac <_malloc_r>:
 800faac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faae:	1ccd      	adds	r5, r1, #3
 800fab0:	f025 0503 	bic.w	r5, r5, #3
 800fab4:	3508      	adds	r5, #8
 800fab6:	2d0c      	cmp	r5, #12
 800fab8:	bf38      	it	cc
 800faba:	250c      	movcc	r5, #12
 800fabc:	2d00      	cmp	r5, #0
 800fabe:	4606      	mov	r6, r0
 800fac0:	db01      	blt.n	800fac6 <_malloc_r+0x1a>
 800fac2:	42a9      	cmp	r1, r5
 800fac4:	d903      	bls.n	800face <_malloc_r+0x22>
 800fac6:	230c      	movs	r3, #12
 800fac8:	6033      	str	r3, [r6, #0]
 800faca:	2000      	movs	r0, #0
 800facc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800face:	f000 f88f 	bl	800fbf0 <__malloc_lock>
 800fad2:	4921      	ldr	r1, [pc, #132]	; (800fb58 <_malloc_r+0xac>)
 800fad4:	680a      	ldr	r2, [r1, #0]
 800fad6:	4614      	mov	r4, r2
 800fad8:	b99c      	cbnz	r4, 800fb02 <_malloc_r+0x56>
 800fada:	4f20      	ldr	r7, [pc, #128]	; (800fb5c <_malloc_r+0xb0>)
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	b923      	cbnz	r3, 800faea <_malloc_r+0x3e>
 800fae0:	4621      	mov	r1, r4
 800fae2:	4630      	mov	r0, r6
 800fae4:	f000 f83c 	bl	800fb60 <_sbrk_r>
 800fae8:	6038      	str	r0, [r7, #0]
 800faea:	4629      	mov	r1, r5
 800faec:	4630      	mov	r0, r6
 800faee:	f000 f837 	bl	800fb60 <_sbrk_r>
 800faf2:	1c43      	adds	r3, r0, #1
 800faf4:	d123      	bne.n	800fb3e <_malloc_r+0x92>
 800faf6:	230c      	movs	r3, #12
 800faf8:	6033      	str	r3, [r6, #0]
 800fafa:	4630      	mov	r0, r6
 800fafc:	f000 f87e 	bl	800fbfc <__malloc_unlock>
 800fb00:	e7e3      	b.n	800faca <_malloc_r+0x1e>
 800fb02:	6823      	ldr	r3, [r4, #0]
 800fb04:	1b5b      	subs	r3, r3, r5
 800fb06:	d417      	bmi.n	800fb38 <_malloc_r+0x8c>
 800fb08:	2b0b      	cmp	r3, #11
 800fb0a:	d903      	bls.n	800fb14 <_malloc_r+0x68>
 800fb0c:	6023      	str	r3, [r4, #0]
 800fb0e:	441c      	add	r4, r3
 800fb10:	6025      	str	r5, [r4, #0]
 800fb12:	e004      	b.n	800fb1e <_malloc_r+0x72>
 800fb14:	6863      	ldr	r3, [r4, #4]
 800fb16:	42a2      	cmp	r2, r4
 800fb18:	bf0c      	ite	eq
 800fb1a:	600b      	streq	r3, [r1, #0]
 800fb1c:	6053      	strne	r3, [r2, #4]
 800fb1e:	4630      	mov	r0, r6
 800fb20:	f000 f86c 	bl	800fbfc <__malloc_unlock>
 800fb24:	f104 000b 	add.w	r0, r4, #11
 800fb28:	1d23      	adds	r3, r4, #4
 800fb2a:	f020 0007 	bic.w	r0, r0, #7
 800fb2e:	1ac2      	subs	r2, r0, r3
 800fb30:	d0cc      	beq.n	800facc <_malloc_r+0x20>
 800fb32:	1a1b      	subs	r3, r3, r0
 800fb34:	50a3      	str	r3, [r4, r2]
 800fb36:	e7c9      	b.n	800facc <_malloc_r+0x20>
 800fb38:	4622      	mov	r2, r4
 800fb3a:	6864      	ldr	r4, [r4, #4]
 800fb3c:	e7cc      	b.n	800fad8 <_malloc_r+0x2c>
 800fb3e:	1cc4      	adds	r4, r0, #3
 800fb40:	f024 0403 	bic.w	r4, r4, #3
 800fb44:	42a0      	cmp	r0, r4
 800fb46:	d0e3      	beq.n	800fb10 <_malloc_r+0x64>
 800fb48:	1a21      	subs	r1, r4, r0
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	f000 f808 	bl	800fb60 <_sbrk_r>
 800fb50:	3001      	adds	r0, #1
 800fb52:	d1dd      	bne.n	800fb10 <_malloc_r+0x64>
 800fb54:	e7cf      	b.n	800faf6 <_malloc_r+0x4a>
 800fb56:	bf00      	nop
 800fb58:	20004338 	.word	0x20004338
 800fb5c:	2000433c 	.word	0x2000433c

0800fb60 <_sbrk_r>:
 800fb60:	b538      	push	{r3, r4, r5, lr}
 800fb62:	4d06      	ldr	r5, [pc, #24]	; (800fb7c <_sbrk_r+0x1c>)
 800fb64:	2300      	movs	r3, #0
 800fb66:	4604      	mov	r4, r0
 800fb68:	4608      	mov	r0, r1
 800fb6a:	602b      	str	r3, [r5, #0]
 800fb6c:	f7f2 fb8e 	bl	800228c <_sbrk>
 800fb70:	1c43      	adds	r3, r0, #1
 800fb72:	d102      	bne.n	800fb7a <_sbrk_r+0x1a>
 800fb74:	682b      	ldr	r3, [r5, #0]
 800fb76:	b103      	cbz	r3, 800fb7a <_sbrk_r+0x1a>
 800fb78:	6023      	str	r3, [r4, #0]
 800fb7a:	bd38      	pop	{r3, r4, r5, pc}
 800fb7c:	20007498 	.word	0x20007498

0800fb80 <siprintf>:
 800fb80:	b40e      	push	{r1, r2, r3}
 800fb82:	b500      	push	{lr}
 800fb84:	b09c      	sub	sp, #112	; 0x70
 800fb86:	ab1d      	add	r3, sp, #116	; 0x74
 800fb88:	9002      	str	r0, [sp, #8]
 800fb8a:	9006      	str	r0, [sp, #24]
 800fb8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fb90:	4809      	ldr	r0, [pc, #36]	; (800fbb8 <siprintf+0x38>)
 800fb92:	9107      	str	r1, [sp, #28]
 800fb94:	9104      	str	r1, [sp, #16]
 800fb96:	4909      	ldr	r1, [pc, #36]	; (800fbbc <siprintf+0x3c>)
 800fb98:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb9c:	9105      	str	r1, [sp, #20]
 800fb9e:	6800      	ldr	r0, [r0, #0]
 800fba0:	9301      	str	r3, [sp, #4]
 800fba2:	a902      	add	r1, sp, #8
 800fba4:	f000 f88c 	bl	800fcc0 <_svfiprintf_r>
 800fba8:	9b02      	ldr	r3, [sp, #8]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	701a      	strb	r2, [r3, #0]
 800fbae:	b01c      	add	sp, #112	; 0x70
 800fbb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbb4:	b003      	add	sp, #12
 800fbb6:	4770      	bx	lr
 800fbb8:	20000088 	.word	0x20000088
 800fbbc:	ffff0208 	.word	0xffff0208

0800fbc0 <strcat>:
 800fbc0:	b510      	push	{r4, lr}
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	7814      	ldrb	r4, [r2, #0]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	3201      	adds	r2, #1
 800fbca:	2c00      	cmp	r4, #0
 800fbcc:	d1fa      	bne.n	800fbc4 <strcat+0x4>
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbd8:	2a00      	cmp	r2, #0
 800fbda:	d1f9      	bne.n	800fbd0 <strcat+0x10>
 800fbdc:	bd10      	pop	{r4, pc}

0800fbde <strcpy>:
 800fbde:	4603      	mov	r3, r0
 800fbe0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbe4:	f803 2b01 	strb.w	r2, [r3], #1
 800fbe8:	2a00      	cmp	r2, #0
 800fbea:	d1f9      	bne.n	800fbe0 <strcpy+0x2>
 800fbec:	4770      	bx	lr
	...

0800fbf0 <__malloc_lock>:
 800fbf0:	4801      	ldr	r0, [pc, #4]	; (800fbf8 <__malloc_lock+0x8>)
 800fbf2:	f000 baf9 	b.w	80101e8 <__retarget_lock_acquire_recursive>
 800fbf6:	bf00      	nop
 800fbf8:	200074a0 	.word	0x200074a0

0800fbfc <__malloc_unlock>:
 800fbfc:	4801      	ldr	r0, [pc, #4]	; (800fc04 <__malloc_unlock+0x8>)
 800fbfe:	f000 baf4 	b.w	80101ea <__retarget_lock_release_recursive>
 800fc02:	bf00      	nop
 800fc04:	200074a0 	.word	0x200074a0

0800fc08 <__ssputs_r>:
 800fc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc0c:	688e      	ldr	r6, [r1, #8]
 800fc0e:	429e      	cmp	r6, r3
 800fc10:	4682      	mov	sl, r0
 800fc12:	460c      	mov	r4, r1
 800fc14:	4690      	mov	r8, r2
 800fc16:	461f      	mov	r7, r3
 800fc18:	d838      	bhi.n	800fc8c <__ssputs_r+0x84>
 800fc1a:	898a      	ldrh	r2, [r1, #12]
 800fc1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc20:	d032      	beq.n	800fc88 <__ssputs_r+0x80>
 800fc22:	6825      	ldr	r5, [r4, #0]
 800fc24:	6909      	ldr	r1, [r1, #16]
 800fc26:	eba5 0901 	sub.w	r9, r5, r1
 800fc2a:	6965      	ldr	r5, [r4, #20]
 800fc2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc34:	3301      	adds	r3, #1
 800fc36:	444b      	add	r3, r9
 800fc38:	106d      	asrs	r5, r5, #1
 800fc3a:	429d      	cmp	r5, r3
 800fc3c:	bf38      	it	cc
 800fc3e:	461d      	movcc	r5, r3
 800fc40:	0553      	lsls	r3, r2, #21
 800fc42:	d531      	bpl.n	800fca8 <__ssputs_r+0xa0>
 800fc44:	4629      	mov	r1, r5
 800fc46:	f7ff ff31 	bl	800faac <_malloc_r>
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	b950      	cbnz	r0, 800fc64 <__ssputs_r+0x5c>
 800fc4e:	230c      	movs	r3, #12
 800fc50:	f8ca 3000 	str.w	r3, [sl]
 800fc54:	89a3      	ldrh	r3, [r4, #12]
 800fc56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc5a:	81a3      	strh	r3, [r4, #12]
 800fc5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc64:	6921      	ldr	r1, [r4, #16]
 800fc66:	464a      	mov	r2, r9
 800fc68:	f7ff feba 	bl	800f9e0 <memcpy>
 800fc6c:	89a3      	ldrh	r3, [r4, #12]
 800fc6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc76:	81a3      	strh	r3, [r4, #12]
 800fc78:	6126      	str	r6, [r4, #16]
 800fc7a:	6165      	str	r5, [r4, #20]
 800fc7c:	444e      	add	r6, r9
 800fc7e:	eba5 0509 	sub.w	r5, r5, r9
 800fc82:	6026      	str	r6, [r4, #0]
 800fc84:	60a5      	str	r5, [r4, #8]
 800fc86:	463e      	mov	r6, r7
 800fc88:	42be      	cmp	r6, r7
 800fc8a:	d900      	bls.n	800fc8e <__ssputs_r+0x86>
 800fc8c:	463e      	mov	r6, r7
 800fc8e:	4632      	mov	r2, r6
 800fc90:	6820      	ldr	r0, [r4, #0]
 800fc92:	4641      	mov	r1, r8
 800fc94:	f000 faaa 	bl	80101ec <memmove>
 800fc98:	68a3      	ldr	r3, [r4, #8]
 800fc9a:	6822      	ldr	r2, [r4, #0]
 800fc9c:	1b9b      	subs	r3, r3, r6
 800fc9e:	4432      	add	r2, r6
 800fca0:	60a3      	str	r3, [r4, #8]
 800fca2:	6022      	str	r2, [r4, #0]
 800fca4:	2000      	movs	r0, #0
 800fca6:	e7db      	b.n	800fc60 <__ssputs_r+0x58>
 800fca8:	462a      	mov	r2, r5
 800fcaa:	f000 fab9 	bl	8010220 <_realloc_r>
 800fcae:	4606      	mov	r6, r0
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	d1e1      	bne.n	800fc78 <__ssputs_r+0x70>
 800fcb4:	6921      	ldr	r1, [r4, #16]
 800fcb6:	4650      	mov	r0, sl
 800fcb8:	f7ff fea8 	bl	800fa0c <_free_r>
 800fcbc:	e7c7      	b.n	800fc4e <__ssputs_r+0x46>
	...

0800fcc0 <_svfiprintf_r>:
 800fcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	4698      	mov	r8, r3
 800fcc6:	898b      	ldrh	r3, [r1, #12]
 800fcc8:	061b      	lsls	r3, r3, #24
 800fcca:	b09d      	sub	sp, #116	; 0x74
 800fccc:	4607      	mov	r7, r0
 800fcce:	460d      	mov	r5, r1
 800fcd0:	4614      	mov	r4, r2
 800fcd2:	d50e      	bpl.n	800fcf2 <_svfiprintf_r+0x32>
 800fcd4:	690b      	ldr	r3, [r1, #16]
 800fcd6:	b963      	cbnz	r3, 800fcf2 <_svfiprintf_r+0x32>
 800fcd8:	2140      	movs	r1, #64	; 0x40
 800fcda:	f7ff fee7 	bl	800faac <_malloc_r>
 800fcde:	6028      	str	r0, [r5, #0]
 800fce0:	6128      	str	r0, [r5, #16]
 800fce2:	b920      	cbnz	r0, 800fcee <_svfiprintf_r+0x2e>
 800fce4:	230c      	movs	r3, #12
 800fce6:	603b      	str	r3, [r7, #0]
 800fce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcec:	e0d1      	b.n	800fe92 <_svfiprintf_r+0x1d2>
 800fcee:	2340      	movs	r3, #64	; 0x40
 800fcf0:	616b      	str	r3, [r5, #20]
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	9309      	str	r3, [sp, #36]	; 0x24
 800fcf6:	2320      	movs	r3, #32
 800fcf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd00:	2330      	movs	r3, #48	; 0x30
 800fd02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800feac <_svfiprintf_r+0x1ec>
 800fd06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd0a:	f04f 0901 	mov.w	r9, #1
 800fd0e:	4623      	mov	r3, r4
 800fd10:	469a      	mov	sl, r3
 800fd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd16:	b10a      	cbz	r2, 800fd1c <_svfiprintf_r+0x5c>
 800fd18:	2a25      	cmp	r2, #37	; 0x25
 800fd1a:	d1f9      	bne.n	800fd10 <_svfiprintf_r+0x50>
 800fd1c:	ebba 0b04 	subs.w	fp, sl, r4
 800fd20:	d00b      	beq.n	800fd3a <_svfiprintf_r+0x7a>
 800fd22:	465b      	mov	r3, fp
 800fd24:	4622      	mov	r2, r4
 800fd26:	4629      	mov	r1, r5
 800fd28:	4638      	mov	r0, r7
 800fd2a:	f7ff ff6d 	bl	800fc08 <__ssputs_r>
 800fd2e:	3001      	adds	r0, #1
 800fd30:	f000 80aa 	beq.w	800fe88 <_svfiprintf_r+0x1c8>
 800fd34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd36:	445a      	add	r2, fp
 800fd38:	9209      	str	r2, [sp, #36]	; 0x24
 800fd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f000 80a2 	beq.w	800fe88 <_svfiprintf_r+0x1c8>
 800fd44:	2300      	movs	r3, #0
 800fd46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd4e:	f10a 0a01 	add.w	sl, sl, #1
 800fd52:	9304      	str	r3, [sp, #16]
 800fd54:	9307      	str	r3, [sp, #28]
 800fd56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd5a:	931a      	str	r3, [sp, #104]	; 0x68
 800fd5c:	4654      	mov	r4, sl
 800fd5e:	2205      	movs	r2, #5
 800fd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd64:	4851      	ldr	r0, [pc, #324]	; (800feac <_svfiprintf_r+0x1ec>)
 800fd66:	f7f0 fa73 	bl	8000250 <memchr>
 800fd6a:	9a04      	ldr	r2, [sp, #16]
 800fd6c:	b9d8      	cbnz	r0, 800fda6 <_svfiprintf_r+0xe6>
 800fd6e:	06d0      	lsls	r0, r2, #27
 800fd70:	bf44      	itt	mi
 800fd72:	2320      	movmi	r3, #32
 800fd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd78:	0711      	lsls	r1, r2, #28
 800fd7a:	bf44      	itt	mi
 800fd7c:	232b      	movmi	r3, #43	; 0x2b
 800fd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd82:	f89a 3000 	ldrb.w	r3, [sl]
 800fd86:	2b2a      	cmp	r3, #42	; 0x2a
 800fd88:	d015      	beq.n	800fdb6 <_svfiprintf_r+0xf6>
 800fd8a:	9a07      	ldr	r2, [sp, #28]
 800fd8c:	4654      	mov	r4, sl
 800fd8e:	2000      	movs	r0, #0
 800fd90:	f04f 0c0a 	mov.w	ip, #10
 800fd94:	4621      	mov	r1, r4
 800fd96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd9a:	3b30      	subs	r3, #48	; 0x30
 800fd9c:	2b09      	cmp	r3, #9
 800fd9e:	d94e      	bls.n	800fe3e <_svfiprintf_r+0x17e>
 800fda0:	b1b0      	cbz	r0, 800fdd0 <_svfiprintf_r+0x110>
 800fda2:	9207      	str	r2, [sp, #28]
 800fda4:	e014      	b.n	800fdd0 <_svfiprintf_r+0x110>
 800fda6:	eba0 0308 	sub.w	r3, r0, r8
 800fdaa:	fa09 f303 	lsl.w	r3, r9, r3
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	9304      	str	r3, [sp, #16]
 800fdb2:	46a2      	mov	sl, r4
 800fdb4:	e7d2      	b.n	800fd5c <_svfiprintf_r+0x9c>
 800fdb6:	9b03      	ldr	r3, [sp, #12]
 800fdb8:	1d19      	adds	r1, r3, #4
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	9103      	str	r1, [sp, #12]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	bfbb      	ittet	lt
 800fdc2:	425b      	neglt	r3, r3
 800fdc4:	f042 0202 	orrlt.w	r2, r2, #2
 800fdc8:	9307      	strge	r3, [sp, #28]
 800fdca:	9307      	strlt	r3, [sp, #28]
 800fdcc:	bfb8      	it	lt
 800fdce:	9204      	strlt	r2, [sp, #16]
 800fdd0:	7823      	ldrb	r3, [r4, #0]
 800fdd2:	2b2e      	cmp	r3, #46	; 0x2e
 800fdd4:	d10c      	bne.n	800fdf0 <_svfiprintf_r+0x130>
 800fdd6:	7863      	ldrb	r3, [r4, #1]
 800fdd8:	2b2a      	cmp	r3, #42	; 0x2a
 800fdda:	d135      	bne.n	800fe48 <_svfiprintf_r+0x188>
 800fddc:	9b03      	ldr	r3, [sp, #12]
 800fdde:	1d1a      	adds	r2, r3, #4
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	9203      	str	r2, [sp, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	bfb8      	it	lt
 800fde8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fdec:	3402      	adds	r4, #2
 800fdee:	9305      	str	r3, [sp, #20]
 800fdf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800febc <_svfiprintf_r+0x1fc>
 800fdf4:	7821      	ldrb	r1, [r4, #0]
 800fdf6:	2203      	movs	r2, #3
 800fdf8:	4650      	mov	r0, sl
 800fdfa:	f7f0 fa29 	bl	8000250 <memchr>
 800fdfe:	b140      	cbz	r0, 800fe12 <_svfiprintf_r+0x152>
 800fe00:	2340      	movs	r3, #64	; 0x40
 800fe02:	eba0 000a 	sub.w	r0, r0, sl
 800fe06:	fa03 f000 	lsl.w	r0, r3, r0
 800fe0a:	9b04      	ldr	r3, [sp, #16]
 800fe0c:	4303      	orrs	r3, r0
 800fe0e:	3401      	adds	r4, #1
 800fe10:	9304      	str	r3, [sp, #16]
 800fe12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe16:	4826      	ldr	r0, [pc, #152]	; (800feb0 <_svfiprintf_r+0x1f0>)
 800fe18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe1c:	2206      	movs	r2, #6
 800fe1e:	f7f0 fa17 	bl	8000250 <memchr>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d038      	beq.n	800fe98 <_svfiprintf_r+0x1d8>
 800fe26:	4b23      	ldr	r3, [pc, #140]	; (800feb4 <_svfiprintf_r+0x1f4>)
 800fe28:	bb1b      	cbnz	r3, 800fe72 <_svfiprintf_r+0x1b2>
 800fe2a:	9b03      	ldr	r3, [sp, #12]
 800fe2c:	3307      	adds	r3, #7
 800fe2e:	f023 0307 	bic.w	r3, r3, #7
 800fe32:	3308      	adds	r3, #8
 800fe34:	9303      	str	r3, [sp, #12]
 800fe36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe38:	4433      	add	r3, r6
 800fe3a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe3c:	e767      	b.n	800fd0e <_svfiprintf_r+0x4e>
 800fe3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe42:	460c      	mov	r4, r1
 800fe44:	2001      	movs	r0, #1
 800fe46:	e7a5      	b.n	800fd94 <_svfiprintf_r+0xd4>
 800fe48:	2300      	movs	r3, #0
 800fe4a:	3401      	adds	r4, #1
 800fe4c:	9305      	str	r3, [sp, #20]
 800fe4e:	4619      	mov	r1, r3
 800fe50:	f04f 0c0a 	mov.w	ip, #10
 800fe54:	4620      	mov	r0, r4
 800fe56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe5a:	3a30      	subs	r2, #48	; 0x30
 800fe5c:	2a09      	cmp	r2, #9
 800fe5e:	d903      	bls.n	800fe68 <_svfiprintf_r+0x1a8>
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d0c5      	beq.n	800fdf0 <_svfiprintf_r+0x130>
 800fe64:	9105      	str	r1, [sp, #20]
 800fe66:	e7c3      	b.n	800fdf0 <_svfiprintf_r+0x130>
 800fe68:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe6c:	4604      	mov	r4, r0
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e7f0      	b.n	800fe54 <_svfiprintf_r+0x194>
 800fe72:	ab03      	add	r3, sp, #12
 800fe74:	9300      	str	r3, [sp, #0]
 800fe76:	462a      	mov	r2, r5
 800fe78:	4b0f      	ldr	r3, [pc, #60]	; (800feb8 <_svfiprintf_r+0x1f8>)
 800fe7a:	a904      	add	r1, sp, #16
 800fe7c:	4638      	mov	r0, r7
 800fe7e:	f3af 8000 	nop.w
 800fe82:	1c42      	adds	r2, r0, #1
 800fe84:	4606      	mov	r6, r0
 800fe86:	d1d6      	bne.n	800fe36 <_svfiprintf_r+0x176>
 800fe88:	89ab      	ldrh	r3, [r5, #12]
 800fe8a:	065b      	lsls	r3, r3, #25
 800fe8c:	f53f af2c 	bmi.w	800fce8 <_svfiprintf_r+0x28>
 800fe90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe92:	b01d      	add	sp, #116	; 0x74
 800fe94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe98:	ab03      	add	r3, sp, #12
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	462a      	mov	r2, r5
 800fe9e:	4b06      	ldr	r3, [pc, #24]	; (800feb8 <_svfiprintf_r+0x1f8>)
 800fea0:	a904      	add	r1, sp, #16
 800fea2:	4638      	mov	r0, r7
 800fea4:	f000 f87a 	bl	800ff9c <_printf_i>
 800fea8:	e7eb      	b.n	800fe82 <_svfiprintf_r+0x1c2>
 800feaa:	bf00      	nop
 800feac:	08010824 	.word	0x08010824
 800feb0:	0801082e 	.word	0x0801082e
 800feb4:	00000000 	.word	0x00000000
 800feb8:	0800fc09 	.word	0x0800fc09
 800febc:	0801082a 	.word	0x0801082a

0800fec0 <_printf_common>:
 800fec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fec4:	4616      	mov	r6, r2
 800fec6:	4699      	mov	r9, r3
 800fec8:	688a      	ldr	r2, [r1, #8]
 800feca:	690b      	ldr	r3, [r1, #16]
 800fecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fed0:	4293      	cmp	r3, r2
 800fed2:	bfb8      	it	lt
 800fed4:	4613      	movlt	r3, r2
 800fed6:	6033      	str	r3, [r6, #0]
 800fed8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fedc:	4607      	mov	r7, r0
 800fede:	460c      	mov	r4, r1
 800fee0:	b10a      	cbz	r2, 800fee6 <_printf_common+0x26>
 800fee2:	3301      	adds	r3, #1
 800fee4:	6033      	str	r3, [r6, #0]
 800fee6:	6823      	ldr	r3, [r4, #0]
 800fee8:	0699      	lsls	r1, r3, #26
 800feea:	bf42      	ittt	mi
 800feec:	6833      	ldrmi	r3, [r6, #0]
 800feee:	3302      	addmi	r3, #2
 800fef0:	6033      	strmi	r3, [r6, #0]
 800fef2:	6825      	ldr	r5, [r4, #0]
 800fef4:	f015 0506 	ands.w	r5, r5, #6
 800fef8:	d106      	bne.n	800ff08 <_printf_common+0x48>
 800fefa:	f104 0a19 	add.w	sl, r4, #25
 800fefe:	68e3      	ldr	r3, [r4, #12]
 800ff00:	6832      	ldr	r2, [r6, #0]
 800ff02:	1a9b      	subs	r3, r3, r2
 800ff04:	42ab      	cmp	r3, r5
 800ff06:	dc26      	bgt.n	800ff56 <_printf_common+0x96>
 800ff08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff0c:	1e13      	subs	r3, r2, #0
 800ff0e:	6822      	ldr	r2, [r4, #0]
 800ff10:	bf18      	it	ne
 800ff12:	2301      	movne	r3, #1
 800ff14:	0692      	lsls	r2, r2, #26
 800ff16:	d42b      	bmi.n	800ff70 <_printf_common+0xb0>
 800ff18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff1c:	4649      	mov	r1, r9
 800ff1e:	4638      	mov	r0, r7
 800ff20:	47c0      	blx	r8
 800ff22:	3001      	adds	r0, #1
 800ff24:	d01e      	beq.n	800ff64 <_printf_common+0xa4>
 800ff26:	6823      	ldr	r3, [r4, #0]
 800ff28:	68e5      	ldr	r5, [r4, #12]
 800ff2a:	6832      	ldr	r2, [r6, #0]
 800ff2c:	f003 0306 	and.w	r3, r3, #6
 800ff30:	2b04      	cmp	r3, #4
 800ff32:	bf08      	it	eq
 800ff34:	1aad      	subeq	r5, r5, r2
 800ff36:	68a3      	ldr	r3, [r4, #8]
 800ff38:	6922      	ldr	r2, [r4, #16]
 800ff3a:	bf0c      	ite	eq
 800ff3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff40:	2500      	movne	r5, #0
 800ff42:	4293      	cmp	r3, r2
 800ff44:	bfc4      	itt	gt
 800ff46:	1a9b      	subgt	r3, r3, r2
 800ff48:	18ed      	addgt	r5, r5, r3
 800ff4a:	2600      	movs	r6, #0
 800ff4c:	341a      	adds	r4, #26
 800ff4e:	42b5      	cmp	r5, r6
 800ff50:	d11a      	bne.n	800ff88 <_printf_common+0xc8>
 800ff52:	2000      	movs	r0, #0
 800ff54:	e008      	b.n	800ff68 <_printf_common+0xa8>
 800ff56:	2301      	movs	r3, #1
 800ff58:	4652      	mov	r2, sl
 800ff5a:	4649      	mov	r1, r9
 800ff5c:	4638      	mov	r0, r7
 800ff5e:	47c0      	blx	r8
 800ff60:	3001      	adds	r0, #1
 800ff62:	d103      	bne.n	800ff6c <_printf_common+0xac>
 800ff64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff6c:	3501      	adds	r5, #1
 800ff6e:	e7c6      	b.n	800fefe <_printf_common+0x3e>
 800ff70:	18e1      	adds	r1, r4, r3
 800ff72:	1c5a      	adds	r2, r3, #1
 800ff74:	2030      	movs	r0, #48	; 0x30
 800ff76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff7a:	4422      	add	r2, r4
 800ff7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff84:	3302      	adds	r3, #2
 800ff86:	e7c7      	b.n	800ff18 <_printf_common+0x58>
 800ff88:	2301      	movs	r3, #1
 800ff8a:	4622      	mov	r2, r4
 800ff8c:	4649      	mov	r1, r9
 800ff8e:	4638      	mov	r0, r7
 800ff90:	47c0      	blx	r8
 800ff92:	3001      	adds	r0, #1
 800ff94:	d0e6      	beq.n	800ff64 <_printf_common+0xa4>
 800ff96:	3601      	adds	r6, #1
 800ff98:	e7d9      	b.n	800ff4e <_printf_common+0x8e>
	...

0800ff9c <_printf_i>:
 800ff9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa0:	460c      	mov	r4, r1
 800ffa2:	4691      	mov	r9, r2
 800ffa4:	7e27      	ldrb	r7, [r4, #24]
 800ffa6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ffa8:	2f78      	cmp	r7, #120	; 0x78
 800ffaa:	4680      	mov	r8, r0
 800ffac:	469a      	mov	sl, r3
 800ffae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ffb2:	d807      	bhi.n	800ffc4 <_printf_i+0x28>
 800ffb4:	2f62      	cmp	r7, #98	; 0x62
 800ffb6:	d80a      	bhi.n	800ffce <_printf_i+0x32>
 800ffb8:	2f00      	cmp	r7, #0
 800ffba:	f000 80d8 	beq.w	801016e <_printf_i+0x1d2>
 800ffbe:	2f58      	cmp	r7, #88	; 0x58
 800ffc0:	f000 80a3 	beq.w	801010a <_printf_i+0x16e>
 800ffc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ffc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ffcc:	e03a      	b.n	8010044 <_printf_i+0xa8>
 800ffce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ffd2:	2b15      	cmp	r3, #21
 800ffd4:	d8f6      	bhi.n	800ffc4 <_printf_i+0x28>
 800ffd6:	a001      	add	r0, pc, #4	; (adr r0, 800ffdc <_printf_i+0x40>)
 800ffd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ffdc:	08010035 	.word	0x08010035
 800ffe0:	08010049 	.word	0x08010049
 800ffe4:	0800ffc5 	.word	0x0800ffc5
 800ffe8:	0800ffc5 	.word	0x0800ffc5
 800ffec:	0800ffc5 	.word	0x0800ffc5
 800fff0:	0800ffc5 	.word	0x0800ffc5
 800fff4:	08010049 	.word	0x08010049
 800fff8:	0800ffc5 	.word	0x0800ffc5
 800fffc:	0800ffc5 	.word	0x0800ffc5
 8010000:	0800ffc5 	.word	0x0800ffc5
 8010004:	0800ffc5 	.word	0x0800ffc5
 8010008:	08010155 	.word	0x08010155
 801000c:	08010079 	.word	0x08010079
 8010010:	08010137 	.word	0x08010137
 8010014:	0800ffc5 	.word	0x0800ffc5
 8010018:	0800ffc5 	.word	0x0800ffc5
 801001c:	08010177 	.word	0x08010177
 8010020:	0800ffc5 	.word	0x0800ffc5
 8010024:	08010079 	.word	0x08010079
 8010028:	0800ffc5 	.word	0x0800ffc5
 801002c:	0800ffc5 	.word	0x0800ffc5
 8010030:	0801013f 	.word	0x0801013f
 8010034:	680b      	ldr	r3, [r1, #0]
 8010036:	1d1a      	adds	r2, r3, #4
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	600a      	str	r2, [r1, #0]
 801003c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010044:	2301      	movs	r3, #1
 8010046:	e0a3      	b.n	8010190 <_printf_i+0x1f4>
 8010048:	6825      	ldr	r5, [r4, #0]
 801004a:	6808      	ldr	r0, [r1, #0]
 801004c:	062e      	lsls	r6, r5, #24
 801004e:	f100 0304 	add.w	r3, r0, #4
 8010052:	d50a      	bpl.n	801006a <_printf_i+0xce>
 8010054:	6805      	ldr	r5, [r0, #0]
 8010056:	600b      	str	r3, [r1, #0]
 8010058:	2d00      	cmp	r5, #0
 801005a:	da03      	bge.n	8010064 <_printf_i+0xc8>
 801005c:	232d      	movs	r3, #45	; 0x2d
 801005e:	426d      	negs	r5, r5
 8010060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010064:	485e      	ldr	r0, [pc, #376]	; (80101e0 <_printf_i+0x244>)
 8010066:	230a      	movs	r3, #10
 8010068:	e019      	b.n	801009e <_printf_i+0x102>
 801006a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801006e:	6805      	ldr	r5, [r0, #0]
 8010070:	600b      	str	r3, [r1, #0]
 8010072:	bf18      	it	ne
 8010074:	b22d      	sxthne	r5, r5
 8010076:	e7ef      	b.n	8010058 <_printf_i+0xbc>
 8010078:	680b      	ldr	r3, [r1, #0]
 801007a:	6825      	ldr	r5, [r4, #0]
 801007c:	1d18      	adds	r0, r3, #4
 801007e:	6008      	str	r0, [r1, #0]
 8010080:	0628      	lsls	r0, r5, #24
 8010082:	d501      	bpl.n	8010088 <_printf_i+0xec>
 8010084:	681d      	ldr	r5, [r3, #0]
 8010086:	e002      	b.n	801008e <_printf_i+0xf2>
 8010088:	0669      	lsls	r1, r5, #25
 801008a:	d5fb      	bpl.n	8010084 <_printf_i+0xe8>
 801008c:	881d      	ldrh	r5, [r3, #0]
 801008e:	4854      	ldr	r0, [pc, #336]	; (80101e0 <_printf_i+0x244>)
 8010090:	2f6f      	cmp	r7, #111	; 0x6f
 8010092:	bf0c      	ite	eq
 8010094:	2308      	moveq	r3, #8
 8010096:	230a      	movne	r3, #10
 8010098:	2100      	movs	r1, #0
 801009a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801009e:	6866      	ldr	r6, [r4, #4]
 80100a0:	60a6      	str	r6, [r4, #8]
 80100a2:	2e00      	cmp	r6, #0
 80100a4:	bfa2      	ittt	ge
 80100a6:	6821      	ldrge	r1, [r4, #0]
 80100a8:	f021 0104 	bicge.w	r1, r1, #4
 80100ac:	6021      	strge	r1, [r4, #0]
 80100ae:	b90d      	cbnz	r5, 80100b4 <_printf_i+0x118>
 80100b0:	2e00      	cmp	r6, #0
 80100b2:	d04d      	beq.n	8010150 <_printf_i+0x1b4>
 80100b4:	4616      	mov	r6, r2
 80100b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80100ba:	fb03 5711 	mls	r7, r3, r1, r5
 80100be:	5dc7      	ldrb	r7, [r0, r7]
 80100c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80100c4:	462f      	mov	r7, r5
 80100c6:	42bb      	cmp	r3, r7
 80100c8:	460d      	mov	r5, r1
 80100ca:	d9f4      	bls.n	80100b6 <_printf_i+0x11a>
 80100cc:	2b08      	cmp	r3, #8
 80100ce:	d10b      	bne.n	80100e8 <_printf_i+0x14c>
 80100d0:	6823      	ldr	r3, [r4, #0]
 80100d2:	07df      	lsls	r7, r3, #31
 80100d4:	d508      	bpl.n	80100e8 <_printf_i+0x14c>
 80100d6:	6923      	ldr	r3, [r4, #16]
 80100d8:	6861      	ldr	r1, [r4, #4]
 80100da:	4299      	cmp	r1, r3
 80100dc:	bfde      	ittt	le
 80100de:	2330      	movle	r3, #48	; 0x30
 80100e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100e4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80100e8:	1b92      	subs	r2, r2, r6
 80100ea:	6122      	str	r2, [r4, #16]
 80100ec:	f8cd a000 	str.w	sl, [sp]
 80100f0:	464b      	mov	r3, r9
 80100f2:	aa03      	add	r2, sp, #12
 80100f4:	4621      	mov	r1, r4
 80100f6:	4640      	mov	r0, r8
 80100f8:	f7ff fee2 	bl	800fec0 <_printf_common>
 80100fc:	3001      	adds	r0, #1
 80100fe:	d14c      	bne.n	801019a <_printf_i+0x1fe>
 8010100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010104:	b004      	add	sp, #16
 8010106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801010a:	4835      	ldr	r0, [pc, #212]	; (80101e0 <_printf_i+0x244>)
 801010c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010110:	6823      	ldr	r3, [r4, #0]
 8010112:	680e      	ldr	r6, [r1, #0]
 8010114:	061f      	lsls	r7, r3, #24
 8010116:	f856 5b04 	ldr.w	r5, [r6], #4
 801011a:	600e      	str	r6, [r1, #0]
 801011c:	d514      	bpl.n	8010148 <_printf_i+0x1ac>
 801011e:	07d9      	lsls	r1, r3, #31
 8010120:	bf44      	itt	mi
 8010122:	f043 0320 	orrmi.w	r3, r3, #32
 8010126:	6023      	strmi	r3, [r4, #0]
 8010128:	b91d      	cbnz	r5, 8010132 <_printf_i+0x196>
 801012a:	6823      	ldr	r3, [r4, #0]
 801012c:	f023 0320 	bic.w	r3, r3, #32
 8010130:	6023      	str	r3, [r4, #0]
 8010132:	2310      	movs	r3, #16
 8010134:	e7b0      	b.n	8010098 <_printf_i+0xfc>
 8010136:	6823      	ldr	r3, [r4, #0]
 8010138:	f043 0320 	orr.w	r3, r3, #32
 801013c:	6023      	str	r3, [r4, #0]
 801013e:	2378      	movs	r3, #120	; 0x78
 8010140:	4828      	ldr	r0, [pc, #160]	; (80101e4 <_printf_i+0x248>)
 8010142:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010146:	e7e3      	b.n	8010110 <_printf_i+0x174>
 8010148:	065e      	lsls	r6, r3, #25
 801014a:	bf48      	it	mi
 801014c:	b2ad      	uxthmi	r5, r5
 801014e:	e7e6      	b.n	801011e <_printf_i+0x182>
 8010150:	4616      	mov	r6, r2
 8010152:	e7bb      	b.n	80100cc <_printf_i+0x130>
 8010154:	680b      	ldr	r3, [r1, #0]
 8010156:	6826      	ldr	r6, [r4, #0]
 8010158:	6960      	ldr	r0, [r4, #20]
 801015a:	1d1d      	adds	r5, r3, #4
 801015c:	600d      	str	r5, [r1, #0]
 801015e:	0635      	lsls	r5, r6, #24
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	d501      	bpl.n	8010168 <_printf_i+0x1cc>
 8010164:	6018      	str	r0, [r3, #0]
 8010166:	e002      	b.n	801016e <_printf_i+0x1d2>
 8010168:	0671      	lsls	r1, r6, #25
 801016a:	d5fb      	bpl.n	8010164 <_printf_i+0x1c8>
 801016c:	8018      	strh	r0, [r3, #0]
 801016e:	2300      	movs	r3, #0
 8010170:	6123      	str	r3, [r4, #16]
 8010172:	4616      	mov	r6, r2
 8010174:	e7ba      	b.n	80100ec <_printf_i+0x150>
 8010176:	680b      	ldr	r3, [r1, #0]
 8010178:	1d1a      	adds	r2, r3, #4
 801017a:	600a      	str	r2, [r1, #0]
 801017c:	681e      	ldr	r6, [r3, #0]
 801017e:	6862      	ldr	r2, [r4, #4]
 8010180:	2100      	movs	r1, #0
 8010182:	4630      	mov	r0, r6
 8010184:	f7f0 f864 	bl	8000250 <memchr>
 8010188:	b108      	cbz	r0, 801018e <_printf_i+0x1f2>
 801018a:	1b80      	subs	r0, r0, r6
 801018c:	6060      	str	r0, [r4, #4]
 801018e:	6863      	ldr	r3, [r4, #4]
 8010190:	6123      	str	r3, [r4, #16]
 8010192:	2300      	movs	r3, #0
 8010194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010198:	e7a8      	b.n	80100ec <_printf_i+0x150>
 801019a:	6923      	ldr	r3, [r4, #16]
 801019c:	4632      	mov	r2, r6
 801019e:	4649      	mov	r1, r9
 80101a0:	4640      	mov	r0, r8
 80101a2:	47d0      	blx	sl
 80101a4:	3001      	adds	r0, #1
 80101a6:	d0ab      	beq.n	8010100 <_printf_i+0x164>
 80101a8:	6823      	ldr	r3, [r4, #0]
 80101aa:	079b      	lsls	r3, r3, #30
 80101ac:	d413      	bmi.n	80101d6 <_printf_i+0x23a>
 80101ae:	68e0      	ldr	r0, [r4, #12]
 80101b0:	9b03      	ldr	r3, [sp, #12]
 80101b2:	4298      	cmp	r0, r3
 80101b4:	bfb8      	it	lt
 80101b6:	4618      	movlt	r0, r3
 80101b8:	e7a4      	b.n	8010104 <_printf_i+0x168>
 80101ba:	2301      	movs	r3, #1
 80101bc:	4632      	mov	r2, r6
 80101be:	4649      	mov	r1, r9
 80101c0:	4640      	mov	r0, r8
 80101c2:	47d0      	blx	sl
 80101c4:	3001      	adds	r0, #1
 80101c6:	d09b      	beq.n	8010100 <_printf_i+0x164>
 80101c8:	3501      	adds	r5, #1
 80101ca:	68e3      	ldr	r3, [r4, #12]
 80101cc:	9903      	ldr	r1, [sp, #12]
 80101ce:	1a5b      	subs	r3, r3, r1
 80101d0:	42ab      	cmp	r3, r5
 80101d2:	dcf2      	bgt.n	80101ba <_printf_i+0x21e>
 80101d4:	e7eb      	b.n	80101ae <_printf_i+0x212>
 80101d6:	2500      	movs	r5, #0
 80101d8:	f104 0619 	add.w	r6, r4, #25
 80101dc:	e7f5      	b.n	80101ca <_printf_i+0x22e>
 80101de:	bf00      	nop
 80101e0:	08010835 	.word	0x08010835
 80101e4:	08010846 	.word	0x08010846

080101e8 <__retarget_lock_acquire_recursive>:
 80101e8:	4770      	bx	lr

080101ea <__retarget_lock_release_recursive>:
 80101ea:	4770      	bx	lr

080101ec <memmove>:
 80101ec:	4288      	cmp	r0, r1
 80101ee:	b510      	push	{r4, lr}
 80101f0:	eb01 0402 	add.w	r4, r1, r2
 80101f4:	d902      	bls.n	80101fc <memmove+0x10>
 80101f6:	4284      	cmp	r4, r0
 80101f8:	4623      	mov	r3, r4
 80101fa:	d807      	bhi.n	801020c <memmove+0x20>
 80101fc:	1e43      	subs	r3, r0, #1
 80101fe:	42a1      	cmp	r1, r4
 8010200:	d008      	beq.n	8010214 <memmove+0x28>
 8010202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010206:	f803 2f01 	strb.w	r2, [r3, #1]!
 801020a:	e7f8      	b.n	80101fe <memmove+0x12>
 801020c:	4402      	add	r2, r0
 801020e:	4601      	mov	r1, r0
 8010210:	428a      	cmp	r2, r1
 8010212:	d100      	bne.n	8010216 <memmove+0x2a>
 8010214:	bd10      	pop	{r4, pc}
 8010216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801021a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801021e:	e7f7      	b.n	8010210 <memmove+0x24>

08010220 <_realloc_r>:
 8010220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010222:	4607      	mov	r7, r0
 8010224:	4614      	mov	r4, r2
 8010226:	460e      	mov	r6, r1
 8010228:	b921      	cbnz	r1, 8010234 <_realloc_r+0x14>
 801022a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801022e:	4611      	mov	r1, r2
 8010230:	f7ff bc3c 	b.w	800faac <_malloc_r>
 8010234:	b922      	cbnz	r2, 8010240 <_realloc_r+0x20>
 8010236:	f7ff fbe9 	bl	800fa0c <_free_r>
 801023a:	4625      	mov	r5, r4
 801023c:	4628      	mov	r0, r5
 801023e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010240:	f000 f814 	bl	801026c <_malloc_usable_size_r>
 8010244:	42a0      	cmp	r0, r4
 8010246:	d20f      	bcs.n	8010268 <_realloc_r+0x48>
 8010248:	4621      	mov	r1, r4
 801024a:	4638      	mov	r0, r7
 801024c:	f7ff fc2e 	bl	800faac <_malloc_r>
 8010250:	4605      	mov	r5, r0
 8010252:	2800      	cmp	r0, #0
 8010254:	d0f2      	beq.n	801023c <_realloc_r+0x1c>
 8010256:	4631      	mov	r1, r6
 8010258:	4622      	mov	r2, r4
 801025a:	f7ff fbc1 	bl	800f9e0 <memcpy>
 801025e:	4631      	mov	r1, r6
 8010260:	4638      	mov	r0, r7
 8010262:	f7ff fbd3 	bl	800fa0c <_free_r>
 8010266:	e7e9      	b.n	801023c <_realloc_r+0x1c>
 8010268:	4635      	mov	r5, r6
 801026a:	e7e7      	b.n	801023c <_realloc_r+0x1c>

0801026c <_malloc_usable_size_r>:
 801026c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010270:	1f18      	subs	r0, r3, #4
 8010272:	2b00      	cmp	r3, #0
 8010274:	bfbc      	itt	lt
 8010276:	580b      	ldrlt	r3, [r1, r0]
 8010278:	18c0      	addlt	r0, r0, r3
 801027a:	4770      	bx	lr

0801027c <_init>:
 801027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801027e:	bf00      	nop
 8010280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010282:	bc08      	pop	{r3}
 8010284:	469e      	mov	lr, r3
 8010286:	4770      	bx	lr

08010288 <_fini>:
 8010288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801028a:	bf00      	nop
 801028c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801028e:	bc08      	pop	{r3}
 8010290:	469e      	mov	lr, r3
 8010292:	4770      	bx	lr
