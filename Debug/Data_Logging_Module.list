
Data_Logging_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fbc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005234  08005234  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800523c  0800523c  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08005244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047a8  200000b8  080052fc  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004860  080052fc  00024860  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fef  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003268  00000000  00000000  000360d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d8  00000000  00000000  00039340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  0003a518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029841  00000000  00000000  0003b568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea46  00000000  00000000  00064da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff9d0  00000000  00000000  000737ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001731bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e8  00000000  00000000  0017323c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b8 	.word	0x200000b8
 800021c:	00000000 	.word	0x00000000
 8000220:	080051a4 	.word	0x080051a4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000bc 	.word	0x200000bc
 800023c:	080051a4 	.word	0x080051a4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <init_can>:
// params:
//  MODULE_ID module_id: what module this is (ex. PDM_ID, ACM_ID)
// returns:
//  error codes specified in GopherCAN.h
S8 init_can(CAN_HandleTypeDef* hcan, MODULE_ID module_id)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
	U8 c;
	CAN_INFO_STRUCT* data_struct;

	// set the current module
	this_module_id = module_id;
 800054c:	4a41      	ldr	r2, [pc, #260]	; (8000654 <init_can+0x114>)
 800054e:	78fb      	ldrb	r3, [r7, #3]
 8000550:	7013      	strb	r3, [r2, #0]

	// init HAL_GetTick()
	HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 8000552:	2001      	movs	r0, #1
 8000554:	f001 fd04 	bl	8001f60 <HAL_SetTickFreq>

	// setup the two buffers
	init_buffer(&rx_buffer, rx_buffer_mem, RX_BUFFER_SIZE);
 8000558:	2220      	movs	r2, #32
 800055a:	493f      	ldr	r1, [pc, #252]	; (8000658 <init_can+0x118>)
 800055c:	483f      	ldr	r0, [pc, #252]	; (800065c <init_can+0x11c>)
 800055e:	f000 fe4f 	bl	8001200 <init_buffer>
	init_buffer(&tx_buffer, tx_buffer_mem, TX_BUFFER_SIZE);
 8000562:	2220      	movs	r2, #32
 8000564:	493e      	ldr	r1, [pc, #248]	; (8000660 <init_can+0x120>)
 8000566:	483f      	ldr	r0, [pc, #252]	; (8000664 <init_can+0x124>)
 8000568:	f000 fe4a 	bl	8001200 <init_buffer>

	// if there are more CAN busses, set up the additional TX buffers
#ifdef MULTI_BUS
#if NUM_OF_BUSSES > 1
	init_buffer(&tx_buffer_1, tx_buffer_mem_1, TX_BUFFER_SIZE);
 800056c:	2220      	movs	r2, #32
 800056e:	493e      	ldr	r1, [pc, #248]	; (8000668 <init_can+0x128>)
 8000570:	483e      	ldr	r0, [pc, #248]	; (800066c <init_can+0x12c>)
 8000572:	f000 fe45 	bl	8001200 <init_buffer>
	init_buffer(&tx_buffer_2, tx_buffer_mem_2, TX_BUFFER_SIZE);
#endif
#endif

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8000576:	2301      	movs	r3, #1
 8000578:	73fb      	strb	r3, [r7, #15]
 800057a:	e010      	b.n	800059e <init_can+0x5e>
	{
		data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[c]);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a3c      	ldr	r2, [pc, #240]	; (8000670 <init_can+0x130>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	60bb      	str	r3, [r7, #8]

		data_struct->last_rx = 0;
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
		data_struct->update_enabled = FALSE;
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	2200      	movs	r2, #0
 8000590:	711a      	strb	r2, [r3, #4]
		data_struct->pending_response = FALSE;
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	2200      	movs	r2, #0
 8000596:	715a      	strb	r2, [r3, #5]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b0b      	cmp	r3, #11
 80005a2:	d9eb      	bls.n	800057c <init_can+0x3c>
	}

	// set each function pointer to the do_nothing() function
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	e01f      	b.n	80005ea <init_can+0xaa>
	{
		cust_funcs[c].func_ptr = &do_nothing;
 80005aa:	7bfa      	ldrb	r2, [r7, #15]
 80005ac:	4931      	ldr	r1, [pc, #196]	; (8000674 <init_can+0x134>)
 80005ae:	4613      	mov	r3, r2
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	440b      	add	r3, r1
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <init_can+0x138>)
 80005ba:	601a      	str	r2, [r3, #0]
		cust_funcs[c].func_enabled = FALSE;
 80005bc:	7bfa      	ldrb	r2, [r7, #15]
 80005be:	492d      	ldr	r1, [pc, #180]	; (8000674 <init_can+0x134>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	440b      	add	r3, r1
 80005ca:	3304      	adds	r3, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
		cust_funcs[c].param_ptr = NULL;
 80005d0:	7bfa      	ldrb	r2, [r7, #15]
 80005d2:	4928      	ldr	r1, [pc, #160]	; (8000674 <init_can+0x134>)
 80005d4:	4613      	mov	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	4413      	add	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	440b      	add	r3, r1
 80005de:	3308      	adds	r3, #8
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	3301      	adds	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d9dc      	bls.n	80005aa <init_can+0x6a>

	}

	if (init_filters(hcan))
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f843 	bl	800067c <init_filters>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <init_can+0xc2>
	{
		return FILTER_SET_FAILED;
 80005fc:	f06f 0304 	mvn.w	r3, #4
 8000600:	e024      	b.n	800064c <init_can+0x10c>
	}

	// Setup the rx interrupt function to interrupt on any pending message
	// will call methods following the format HAL_CAN_xxxCallback()
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK
 8000602:	2102      	movs	r1, #2
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f002 f949 	bl	800289c <HAL_CAN_ActivateNotification>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d106      	bne.n	800061e <init_can+0xde>
			|| HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000610:	2110      	movs	r1, #16
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f002 f942 	bl	800289c <HAL_CAN_ActivateNotification>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <init_can+0xe4>
	{
		return IRQ_SET_FAILED;
 800061e:	f06f 0305 	mvn.w	r3, #5
 8000622:	e013      	b.n	800064c <init_can+0x10c>
	}

	// The F7xx includes interrupts for when a message is complete. Activate them here
#if TARGET == F7XX
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000624:	2101      	movs	r1, #1
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f002 f938 	bl	800289c <HAL_CAN_ActivateNotification>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <init_can+0xf8>
	{
		return IRQ_SET_FAILED;
 8000632:	f06f 0305 	mvn.w	r3, #5
 8000636:	e009      	b.n	800064c <init_can+0x10c>
	}
#endif

	// start can!
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f001 fea1 	bl	8002380 <HAL_CAN_Start>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <init_can+0x10a>
	{
		return CAN_START_FAILED;
 8000644:	f06f 0306 	mvn.w	r3, #6
 8000648:	e000      	b.n	800064c <init_can+0x10c>
	}

	return CAN_SUCCESS;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20004798 	.word	0x20004798
 8000658:	200042ac 	.word	0x200042ac
 800065c:	200044d0 	.word	0x200044d0
 8000660:	200044d8 	.word	0x200044d8
 8000664:	200046d8 	.word	0x200046d8
 8000668:	200040a0 	.word	0x200040a0
 800066c:	20004728 	.word	0x20004728
 8000670:	20000000 	.word	0x20000000
 8000674:	20004730 	.word	0x20004730
 8000678:	080011dd 	.word	0x080011dd

0800067c <init_filters>:


// init_filters
//  function called within init() that sets up all of the filters
static S8 init_filters(CAN_HandleTypeDef* hcan)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08c      	sub	sp, #48	; 0x30
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filterConfig;

#ifdef CAN_ROUTER
	// Accept all messages on the CAN router
	filterConfig.FilterBank = 0;                                      // Modify bank 0 (of 13)
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;                // enable the filter
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;                  // Use mask mode to filter
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;                 // 32 bit mask
 8000694:	2301      	movs	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterIdLow = 0;                                     // Low bound of accepted values
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterIdHigh = 0xFFFF;                               // High bound of accepted values
 800069c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a0:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0;                                 // Which bits matter when filtering (high)
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMaskIdHigh = 0;                                // Which bits matter when filtering (low)
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	4619      	mov	r1, r3
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f001 fd79 	bl	80021a8 <HAL_CAN_ConfigFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <init_filters+0x46>
	{
		return FILTER_SET_FAILED;
 80006bc:	f06f 0304 	mvn.w	r3, #4
 80006c0:	e000      	b.n	80006c4 <init_filters+0x48>
	{
		return FILTER_SET_FAILED;
	}
#endif

	return CAN_SUCCESS;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3730      	adds	r7, #48	; 0x30
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <send_can_command>:
//  U8 command_param_3:     parameter 3
// returns:
//  error codes specified in GopherCAN.h
S8 send_can_command(PRIORITY priority, MODULE_ID dest_module, GCAN_COMMAND command_id,
	U8 command_param_0, U8 command_param_1, U8 command_param_2, U8 command_param_3)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4604      	mov	r4, r0
 80006d4:	4608      	mov	r0, r1
 80006d6:	4611      	mov	r1, r2
 80006d8:	461a      	mov	r2, r3
 80006da:	4623      	mov	r3, r4
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	4603      	mov	r3, r0
 80006e0:	71bb      	strb	r3, [r7, #6]
 80006e2:	460b      	mov	r3, r1
 80006e4:	717b      	strb	r3, [r7, #5]
 80006e6:	4613      	mov	r3, r2
 80006e8:	713b      	strb	r3, [r7, #4]
	CAN_MSG message;
	CAN_ID id;

	if (dest_module < 0 || dest_module >= NUM_OF_MODULES)
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	2b06      	cmp	r3, #6
 80006ee:	d902      	bls.n	80006f6 <send_can_command+0x2a>
	{
		return BAD_MODULE_ID;
 80006f0:	f06f 0301 	mvn.w	r3, #1
 80006f4:	e02f      	b.n	8000756 <send_can_command+0x8a>
	}

	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	2b06      	cmp	r3, #6
 80006fa:	d902      	bls.n	8000702 <send_can_command+0x36>
	{
		return BAD_COMMAND_ID;
 80006fc:	f06f 0303 	mvn.w	r3, #3
 8000700:	e029      	b.n	8000756 <send_can_command+0x8a>
	}

	id.priority = priority;
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	723b      	strb	r3, [r7, #8]
	id.dest_module = dest_module;
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	727b      	strb	r3, [r7, #9]
	id.source_module = this_module_id;
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <send_can_command+0x94>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	72bb      	strb	r3, [r7, #10]
	id.error = FALSE;
 8000710:	2300      	movs	r3, #0
 8000712:	72fb      	strb	r3, [r7, #11]
	id.parameter = CAN_COMMAND_ID;
 8000714:	2300      	movs	r3, #0
 8000716:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &id);
 8000718:	f107 0208 	add.w	r2, r7, #8
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fba0 	bl	8000e68 <build_message_id>

	// set the RTR bit to be a data message
	message.rtr_bit = DATA_MESSAGE;
 8000728:	2300      	movs	r3, #0
 800072a:	753b      	strb	r3, [r7, #20]

	message.dlc = COMMAND_SIZE;
 800072c:	2305      	movs	r3, #5
 800072e:	757b      	strb	r3, [r7, #21]

	message.data[0] = command_id;
 8000730:	797b      	ldrb	r3, [r7, #5]
 8000732:	75bb      	strb	r3, [r7, #22]
	message.data[1] = command_param_0;
 8000734:	793b      	ldrb	r3, [r7, #4]
 8000736:	75fb      	strb	r3, [r7, #23]
	message.data[2] = command_param_1;
 8000738:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800073c:	763b      	strb	r3, [r7, #24]
	message.data[3] = command_param_2;
 800073e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000742:	767b      	strb	r3, [r7, #25]
	message.data[4] = command_param_3;
 8000744:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000748:	76bb      	strb	r3, [r7, #26]

	return tx_can_message(&message);
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f9e6 	bl	8000b20 <tx_can_message>
 8000754:	4603      	mov	r3, r0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd90      	pop	{r4, r7, pc}
 800075e:	bf00      	nop
 8000760:	20004798 	.word	0x20004798

08000764 <send_parameter>:
//  MODULE_ID dest_module: what module to send the parameter to
//  GCAN_PARAM parameter:  what parameter to send
// returns:
//  error codes specified in GopherCAN.h
S8 send_parameter(PRIORITY priority, MODULE_ID dest_module, GCAN_PARAM parameter)
{
 8000764:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8000768:	b08c      	sub	sp, #48	; 0x30
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	460b      	mov	r3, r1
 8000772:	71bb      	strb	r3, [r7, #6]
 8000774:	4613      	mov	r3, r2
 8000776:	717b      	strb	r3, [r7, #5]
	CAN_ID id;
	CAN_MSG message;
	U64 data = 0;
 8000778:	f04f 0200 	mov.w	r2, #0
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	S8 c;
	FLOAT_CONVERTER float_con;

	// make sure the parameter is valid
	if (parameter <= CAN_COMMAND_ID || parameter >= NUM_OF_PARAMETERS)
 8000784:	797b      	ldrb	r3, [r7, #5]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <send_parameter+0x2c>
 800078a:	797b      	ldrb	r3, [r7, #5]
 800078c:	2b0b      	cmp	r3, #11
 800078e:	d902      	bls.n	8000796 <send_parameter+0x32>
	{
		return BAD_PARAMETER_ID;
 8000790:	f06f 0302 	mvn.w	r3, #2
 8000794:	e0e2      	b.n	800095c <send_parameter+0x1f8>
	}

	// make sure the parameter is enabled
	if (!((CAN_INFO_STRUCT*)(all_parameter_structs[parameter]))->update_enabled)
 8000796:	797b      	ldrb	r3, [r7, #5]
 8000798:	4a73      	ldr	r2, [pc, #460]	; (8000968 <send_parameter+0x204>)
 800079a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <send_parameter+0x46>
	{
		return NOT_ENABLED_ERR;
 80007a4:	f06f 030a 	mvn.w	r3, #10
 80007a8:	e0d8      	b.n	800095c <send_parameter+0x1f8>
	}

	// build the return message ID
	id.priority = priority;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f887 3020 	strb.w	r3, [r7, #32]
	id.dest_module = dest_module;
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	id.source_module = this_module_id;
 80007b6:	4b6d      	ldr	r3, [pc, #436]	; (800096c <send_parameter+0x208>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	id.error = FALSE;
 80007be:	2300      	movs	r3, #0
 80007c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	id.parameter = parameter;
 80007c4:	797b      	ldrb	r3, [r7, #5]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	84bb      	strh	r3, [r7, #36]	; 0x24

	build_message_id(&message, &id);
 80007ca:	f107 0220 	add.w	r2, r7, #32
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fb47 	bl	8000e68 <build_message_id>

	// set the RTR bit to data type
	message.rtr_bit = DATA_MESSAGE;
 80007da:	2300      	movs	r3, #0
 80007dc:	753b      	strb	r3, [r7, #20]

	// get the value of the data on this module and build the CAN message
	if (parameter_data_types[parameter] == UNSIGNED8
 80007de:	797b      	ldrb	r3, [r7, #5]
 80007e0:	4a63      	ldr	r2, [pc, #396]	; (8000970 <send_parameter+0x20c>)
 80007e2:	5cd3      	ldrb	r3, [r2, r3]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d004      	beq.n	80007f2 <send_parameter+0x8e>
		|| parameter_data_types[parameter] == SIGNED8)
 80007e8:	797b      	ldrb	r3, [r7, #5]
 80007ea:	4a61      	ldr	r2, [pc, #388]	; (8000970 <send_parameter+0x20c>)
 80007ec:	5cd3      	ldrb	r3, [r2, r3]
 80007ee:	2b05      	cmp	r3, #5
 80007f0:	d113      	bne.n	800081a <send_parameter+0xb6>
	{
		data |= ((U8_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 80007f2:	797b      	ldrb	r3, [r7, #5]
 80007f4:	4a5c      	ldr	r2, [pc, #368]	; (8000968 <send_parameter+0x204>)
 80007f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007fa:	799b      	ldrb	r3, [r3, #6]
 80007fc:	fa5f fb83 	uxtb.w	fp, r3
 8000800:	f04f 0c00 	mov.w	ip, #0
 8000804:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000808:	ea4b 0200 	orr.w	r2, fp, r0
 800080c:	ea4c 0301 	orr.w	r3, ip, r1
 8000810:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U8);
 8000814:	2301      	movs	r3, #1
 8000816:	757b      	strb	r3, [r7, #21]
 8000818:	e06e      	b.n	80008f8 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == UNSIGNED16
 800081a:	797b      	ldrb	r3, [r7, #5]
 800081c:	4a54      	ldr	r2, [pc, #336]	; (8000970 <send_parameter+0x20c>)
 800081e:	5cd3      	ldrb	r3, [r2, r3]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d004      	beq.n	800082e <send_parameter+0xca>
		|| parameter_data_types[parameter] == SIGNED16)
 8000824:	797b      	ldrb	r3, [r7, #5]
 8000826:	4a52      	ldr	r2, [pc, #328]	; (8000970 <send_parameter+0x20c>)
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	2b06      	cmp	r3, #6
 800082c:	d113      	bne.n	8000856 <send_parameter+0xf2>
	{
		data |= ((U16_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 800082e:	797b      	ldrb	r3, [r7, #5]
 8000830:	4a4d      	ldr	r2, [pc, #308]	; (8000968 <send_parameter+0x204>)
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	88db      	ldrh	r3, [r3, #6]
 8000838:	fa1f fb83 	uxth.w	fp, r3
 800083c:	f04f 0c00 	mov.w	ip, #0
 8000840:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000844:	ea4b 0200 	orr.w	r2, fp, r0
 8000848:	ea4c 0301 	orr.w	r3, ip, r1
 800084c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U16);
 8000850:	2302      	movs	r3, #2
 8000852:	757b      	strb	r3, [r7, #21]
 8000854:	e050      	b.n	80008f8 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == UNSIGNED32
 8000856:	797b      	ldrb	r3, [r7, #5]
 8000858:	4a45      	ldr	r2, [pc, #276]	; (8000970 <send_parameter+0x20c>)
 800085a:	5cd3      	ldrb	r3, [r2, r3]
 800085c:	2b03      	cmp	r3, #3
 800085e:	d004      	beq.n	800086a <send_parameter+0x106>
		|| parameter_data_types[parameter] == SIGNED32)
 8000860:	797b      	ldrb	r3, [r7, #5]
 8000862:	4a43      	ldr	r2, [pc, #268]	; (8000970 <send_parameter+0x20c>)
 8000864:	5cd3      	ldrb	r3, [r2, r3]
 8000866:	2b07      	cmp	r3, #7
 8000868:	d112      	bne.n	8000890 <send_parameter+0x12c>
	{
		data |= ((U32_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 800086a:	797b      	ldrb	r3, [r7, #5]
 800086c:	4a3e      	ldr	r2, [pc, #248]	; (8000968 <send_parameter+0x204>)
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	469b      	mov	fp, r3
 8000876:	f04f 0c00 	mov.w	ip, #0
 800087a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800087e:	ea4b 0200 	orr.w	r2, fp, r0
 8000882:	ea4c 0301 	orr.w	r3, ip, r1
 8000886:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U32);
 800088a:	2304      	movs	r3, #4
 800088c:	757b      	strb	r3, [r7, #21]
 800088e:	e033      	b.n	80008f8 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == UNSIGNED64
 8000890:	797b      	ldrb	r3, [r7, #5]
 8000892:	4a37      	ldr	r2, [pc, #220]	; (8000970 <send_parameter+0x20c>)
 8000894:	5cd3      	ldrb	r3, [r2, r3]
 8000896:	2b04      	cmp	r3, #4
 8000898:	d004      	beq.n	80008a4 <send_parameter+0x140>
		|| parameter_data_types[parameter] == SIGNED64)
 800089a:	797b      	ldrb	r3, [r7, #5]
 800089c:	4a34      	ldr	r2, [pc, #208]	; (8000970 <send_parameter+0x20c>)
 800089e:	5cd3      	ldrb	r3, [r2, r3]
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d110      	bne.n	80008c6 <send_parameter+0x162>
	{
		data |= ((U64_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	4a30      	ldr	r2, [pc, #192]	; (8000968 <send_parameter+0x204>)
 80008a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ac:	e9d3 bc02 	ldrd	fp, ip, [r3, #8]
 80008b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80008b4:	ea4b 0200 	orr.w	r2, fp, r0
 80008b8:	ea4c 0301 	orr.w	r3, ip, r1
 80008bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U64);
 80008c0:	2308      	movs	r3, #8
 80008c2:	757b      	strb	r3, [r7, #21]
 80008c4:	e018      	b.n	80008f8 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == FLOATING)
 80008c6:	797b      	ldrb	r3, [r7, #5]
 80008c8:	4a29      	ldr	r2, [pc, #164]	; (8000970 <send_parameter+0x20c>)
 80008ca:	5cd3      	ldrb	r3, [r2, r3]
 80008cc:	2b09      	cmp	r3, #9
 80008ce:	d113      	bne.n	80008f8 <send_parameter+0x194>
	{
		// Union to get the bitwise data of the float
		float_con.f = ((FLOAT_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 80008d0:	797b      	ldrb	r3, [r7, #5]
 80008d2:	4a25      	ldr	r2, [pc, #148]	; (8000968 <send_parameter+0x204>)
 80008d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	60fb      	str	r3, [r7, #12]

		data |= float_con.u32;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	469b      	mov	fp, r3
 80008e0:	f04f 0c00 	mov.w	ip, #0
 80008e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80008e8:	ea4b 0200 	orr.w	r2, fp, r0
 80008ec:	ea4c 0301 	orr.w	r3, ip, r1
 80008f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(float);
 80008f4:	2304      	movs	r3, #4
 80008f6:	757b      	strb	r3, [r7, #21]
	}

	// build the data in the message (big endian)
	for (c = message.dlc - 1; c >= 0; c--)
 80008f8:	7d7b      	ldrb	r3, [r7, #21]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000902:	e021      	b.n	8000948 <send_parameter+0x1e4>
	{
		message.data[c] = (U8)(data >> (c * BITS_IN_BYTE));
 8000904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000908:	00d9      	lsls	r1, r3, #3
 800090a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800090e:	f1c1 0620 	rsb	r6, r1, #32
 8000912:	f1a1 0020 	sub.w	r0, r1, #32
 8000916:	fa22 f401 	lsr.w	r4, r2, r1
 800091a:	fa03 f606 	lsl.w	r6, r3, r6
 800091e:	4334      	orrs	r4, r6
 8000920:	fa23 f000 	lsr.w	r0, r3, r0
 8000924:	4304      	orrs	r4, r0
 8000926:	fa23 f501 	lsr.w	r5, r3, r1
 800092a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800092e:	b2e2      	uxtb	r2, r4
 8000930:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000934:	440b      	add	r3, r1
 8000936:	f803 2c1a 	strb.w	r2, [r3, #-26]
	for (c = message.dlc - 1; c >= 0; c--)
 800093a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800093e:	b2db      	uxtb	r3, r3
 8000940:	3b01      	subs	r3, #1
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000948:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800094c:	2b00      	cmp	r3, #0
 800094e:	dad9      	bge.n	8000904 <send_parameter+0x1a0>
	}

	// send the built CAN message
	return tx_can_message(&message);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f8e3 	bl	8000b20 <tx_can_message>
 800095a:	4603      	mov	r3, r0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3730      	adds	r7, #48	; 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8000966:	bf00      	nop
 8000968:	20000000 	.word	0x20000000
 800096c:	20004798 	.word	0x20004798
 8000970:	20000030 	.word	0x20000030

08000974 <add_custom_can_func>:
//                                                       data type (including NULL) as long as it is casted correctly
// returns:
//  error codes specified in GopherCAN.h
S8 add_custom_can_func(GCAN_COMMAND command_id, void (*func_ptr)(MODULE_ID, void*, U8, U8, U8, U8),
	U8 init_state, void* param_ptr)
{
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4603      	mov	r3, r0
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	4613      	mov	r3, r2
 8000984:	73bb      	strb	r3, [r7, #14]
	CUST_FUNC* new_cust_func;

	// make sure the ID is valid
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b06      	cmp	r3, #6
 800098a:	d902      	bls.n	8000992 <add_custom_can_func+0x1e>
	{
		return BAD_COMMAND_ID;
 800098c:	f06f 0303 	mvn.w	r3, #3
 8000990:	e017      	b.n	80009c2 <add_custom_can_func+0x4e>
	}

	new_cust_func = &(cust_funcs[command_id]);
 8000992:	7bfa      	ldrb	r2, [r7, #15]
 8000994:	4613      	mov	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4413      	add	r3, r2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <add_custom_can_func+0x5c>)
 800099e:	4413      	add	r3, r2
 80009a0:	617b      	str	r3, [r7, #20]

	// set all of the values of the struct accordingly
	new_cust_func->func_ptr       = func_ptr;
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	601a      	str	r2, [r3, #0]
	new_cust_func->func_enabled   = !!init_state;
 80009a8:	7bbb      	ldrb	r3, [r7, #14]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	bf14      	ite	ne
 80009ae:	2301      	movne	r3, #1
 80009b0:	2300      	moveq	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	711a      	strb	r2, [r3, #4]
	new_cust_func->param_ptr      = param_ptr;
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]

	return CAN_SUCCESS;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20004730 	.word	0x20004730

080009d4 <service_can_tx_hardware>:
//  Method to interact directly with the CAN registers through the HAL_CAN commands.
//  then will fill as many tx mailboxes as possible from the tx_message_buffer
//
//  designed to be called at high priority on 1ms loop
void service_can_tx_hardware(CAN_HandleTypeDef* hcan)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	CAN_MSG* message;
	CAN_MSG_RING_BUFFER* buffer;

	// With multiple busses, choose the correct bus buffer to be working with
#ifdef MULTI_BUS
	buffer = choose_tx_buffer_from_hcan(hcan);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 fb37 	bl	8001050 <choose_tx_buffer_from_hcan>
 80009e2:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
	buffer = &tx_buffer;
#endif

	// add messages to the the TX mailboxes until they are full
	while (!is_empty(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 80009e4:	e026      	b.n	8000a34 <service_can_tx_hardware+0x60>
	{
		U32 tx_mailbox_num;

		// get the next CAN message from the TX buffer (FIFO)
		message = get_from_buffer(buffer, 0);
 80009e6:	2100      	movs	r1, #0
 80009e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80009ea:	f000 fc46 	bl	800127a <get_from_buffer>
 80009ee:	62b8      	str	r0, [r7, #40]	; 0x28

		// configure the settings/params of the CAN message
		tx_header.IDE = CAN_ID_EXT;                                          // 29 bit id
 80009f0:	2304      	movs	r3, #4
 80009f2:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime = DISABLE;                              // do not send a timestamp
 80009f4:	2300      	movs	r3, #0
 80009f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		tx_header.ExtId = message->id;
 80009fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	617b      	str	r3, [r7, #20]
		tx_header.RTR = message->rtr_bit;
 8000a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a02:	791b      	ldrb	r3, [r3, #4]
 8000a04:	61fb      	str	r3, [r7, #28]
		tx_header.DLC = message->dlc;
 8000a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a08:	795b      	ldrb	r3, [r3, #5]
 8000a0a:	623b      	str	r3, [r7, #32]

		// add the message to the sending list
		if (HAL_CAN_AddTxMessage(hcan, &tx_header, message->data, &tx_mailbox_num) != HAL_OK)
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	1d9a      	adds	r2, r3, #6
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	f107 0110 	add.w	r1, r7, #16
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f001 fcf5 	bl	8002408 <HAL_CAN_AddTxMessage>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d004      	beq.n	8000a2e <service_can_tx_hardware+0x5a>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a28:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <service_can_tx_hardware+0x84>)
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	e010      	b.n	8000a50 <service_can_tx_hardware+0x7c>
			return;
		}

		// move the head now that the first element has been removed
		remove_from_front(buffer);
 8000a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a30:	f000 fc3f 	bl	80012b2 <remove_from_front>
	while (!is_empty(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8000a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a36:	f000 fc0f 	bl	8001258 <is_empty>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d106      	bne.n	8000a4e <service_can_tx_hardware+0x7a>
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f001 fdbc 	bl	80025be <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1cc      	bne.n	80009e6 <service_can_tx_hardware+0x12>
	}

	return;
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
}
 8000a50:	3730      	adds	r7, #48	; 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000d4 	.word	0x200000d4

08000a5c <service_can_rx_hardware>:
//  U32 rx_mailbox: the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//    Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (!is_full(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8000a66:	e02b      	b.n	8000ac0 <service_can_rx_hardware+0x64>
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = get_from_buffer(&rx_buffer, rx_buffer.fill_level);
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <service_can_rx_hardware+0x84>)
 8000a6a:	799b      	ldrb	r3, [r3, #6]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <service_can_rx_hardware+0x84>)
 8000a70:	f000 fc03 	bl	800127a <get_from_buffer>
 8000a74:	6278      	str	r0, [r7, #36]	; 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	3306      	adds	r3, #6
 8000a7a:	f107 0208 	add.w	r2, r7, #8
 8000a7e:	6839      	ldr	r1, [r7, #0]
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fdd1 	bl	8002628 <HAL_CAN_GetRxMessage>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d004      	beq.n	8000a96 <service_can_rx_hardware+0x3a>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <service_can_rx_hardware+0x88>)
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e021      	b.n	8000ada <service_can_rx_hardware+0x7e>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rx_buffer.fill_level++;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <service_can_rx_hardware+0x84>)
 8000a98:	799b      	ldrb	r3, [r3, #6]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <service_can_rx_hardware+0x84>)
 8000aa0:	719a      	strb	r2, [r3, #6]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->rtr_bit = rx_header.RTR;
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	711a      	strb	r2, [r3, #4]
		message->id = rx_header.ExtId;
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	601a      	str	r2, [r3, #0]
		message->dlc = rx_header.DLC;
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	715a      	strb	r2, [r3, #5]

#ifdef CAN_ROUTER
		// router specific functionality that directly adds messages that need to be routed
		//  directly to the correct TX buffer (if needed, that decision is made within the function)
		rout_can_message(hcan, message);
 8000ab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 fb24 	bl	8001108 <rout_can_message>
	while (!is_full(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <service_can_rx_hardware+0x84>)
 8000ac2:	f000 fbb6 	bl	8001232 <is_full>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d106      	bne.n	8000ada <service_can_rx_hardware+0x7e>
 8000acc:	6839      	ldr	r1, [r7, #0]
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f001 febc 	bl	800284c <HAL_CAN_GetRxFifoFillLevel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1c6      	bne.n	8000a68 <service_can_rx_hardware+0xc>
#endif
	}
}
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200044d0 	.word	0x200044d0
 8000ae4:	200000d4 	.word	0x200000d4

08000ae8 <service_can_rx_buffer>:
//   parameter requests. The request will not be completed and the other module will have to
//   send a new request
//
//  call in a 1 ms or faster loop
S8 service_can_rx_buffer(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	CAN_MSG* current_message;

	// run through each message in the RX buffer and service it with service_can_rx_message() (FIFO)
	while (!is_empty(&rx_buffer))
 8000aee:	e00a      	b.n	8000b06 <service_can_rx_buffer+0x1e>
	{
		// get the message at the head of the array
		current_message = get_from_buffer(&rx_buffer, 0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	480a      	ldr	r0, [pc, #40]	; (8000b1c <service_can_rx_buffer+0x34>)
 8000af4:	f000 fbc1 	bl	800127a <get_from_buffer>
 8000af8:	6078      	str	r0, [r7, #4]

		// WARNING: CAN errors from other modules are not handled in this version. The message is just discarded
		// Use a CAN bus analyzer to see what the message is for debugging
		service_can_rx_message(current_message);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 f836 	bl	8000b6c <service_can_rx_message>

		// move the head now that the first element has been removed
		remove_from_front(&rx_buffer);
 8000b00:	4806      	ldr	r0, [pc, #24]	; (8000b1c <service_can_rx_buffer+0x34>)
 8000b02:	f000 fbd6 	bl	80012b2 <remove_from_front>
	while (!is_empty(&rx_buffer))
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <service_can_rx_buffer+0x34>)
 8000b08:	f000 fba6 	bl	8001258 <is_empty>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0ee      	beq.n	8000af0 <service_can_rx_buffer+0x8>
	}

	return CAN_SUCCESS;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200044d0 	.word	0x200044d0

08000b20 <tx_can_message>:


// tx_can_message
//  Takes in a CAN_MSG struct, adds it to the TX buffer
static S8 tx_can_message(CAN_MSG* message_to_add)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	CAN_MSG_RING_BUFFER* buffer;

#ifdef MULTI_BUS
	// Handle the case of the message being sent to all of the busses (ID 0)
	if (GET_ID_DEST(message_to_add->id) == ALL_MODULES_ID)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	0d9b      	lsrs	r3, r3, #22
 8000b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d104      	bne.n	8000b40 <tx_can_message+0x20>
	{
		send_message_to_all_busses(message_to_add);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 fac6 	bl	80010c8 <send_message_to_all_busses>
		return CAN_SUCCESS;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e011      	b.n	8000b64 <tx_can_message+0x44>
	}

	// If there are multiple busses, choose the correct bus based on the routing table
	buffer = choose_tx_buffer_from_dest_module(message_to_add);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 fa9d 	bl	8001080 <choose_tx_buffer_from_dest_module>
 8000b46:	60f8      	str	r0, [r7, #12]
#else
	buffer = &tx_buffer;
#endif

	// check to make sure the buffer is not full, then add it to the back of the TX buffer
	if (is_full(buffer))
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f000 fb72 	bl	8001232 <is_full>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <tx_can_message+0x3a>
	{
		return TX_BUFFER_FULL;
 8000b54:	f06f 0307 	mvn.w	r3, #7
 8000b58:	e004      	b.n	8000b64 <tx_can_message+0x44>
	}

	add_message_to_back(buffer, message_to_add);
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f000 fbca 	bl	80012f6 <add_message_to_back>

	return CAN_SUCCESS;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <service_can_rx_message>:
//  CAN message bus interrupt function this will update all
//  the global variables or trigger the CAN functions if needed.
//  Designed to be called by service_can_rx_software to loop perform
//  this task for each pending CAN message
static S8 service_can_rx_message(CAN_MSG* message)
{
 8000b6c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000b70:	b08a      	sub	sp, #40	; 0x28
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	CAN_ID id;
	CAN_INFO_STRUCT* data_struct = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
	FLOAT_CONVERTER float_con;
	U64 recieved_data = 0;
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	f04f 0400 	mov.w	r4, #0
 8000b82:	e9c7 3408 	strd	r3, r4, [r7, #32]
	S8 c;

	get_message_id(&id, message);
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 f9cb 	bl	8000f28 <get_message_id>

	// A double check to make sure this message is actually for this module (most useful in the CAN router)
	if (id.dest_module != this_module_id && id.dest_module != ALL_MODULES_ID)
 8000b92:	7c7a      	ldrb	r2, [r7, #17]
 8000b94:	4b74      	ldr	r3, [pc, #464]	; (8000d68 <service_can_rx_message+0x1fc>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d005      	beq.n	8000ba8 <service_can_rx_message+0x3c>
 8000b9c:	7c7b      	ldrb	r3, [r7, #17]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <service_can_rx_message+0x3c>
	{
		// This is not for this module. Do not process this message
		return WRONG_DEST_ERR;
 8000ba2:	f06f 030c 	mvn.w	r3, #12
 8000ba6:	e0d9      	b.n	8000d5c <service_can_rx_message+0x1f0>
	}

	// if the message received has the error flag high, put the details into the last_error struct, then return
	if (id.error)
 8000ba8:	7cfb      	ldrb	r3, [r7, #19]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d014      	beq.n	8000bd8 <service_can_rx_message+0x6c>
	{
		// this could possibly be changed into a ring buffer
		last_error.last_rx = HAL_GetTick();
 8000bae:	f001 f9cb 	bl	8001f48 <HAL_GetTick>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4b6d      	ldr	r3, [pc, #436]	; (8000d6c <service_can_rx_message+0x200>)
 8000bb6:	601a      	str	r2, [r3, #0]
		last_error.source_module = id.source_module;
 8000bb8:	7cba      	ldrb	r2, [r7, #18]
 8000bba:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <service_can_rx_message+0x200>)
 8000bbc:	711a      	strb	r2, [r3, #4]
		last_error.parameter = id.parameter;
 8000bbe:	8aba      	ldrh	r2, [r7, #20]
 8000bc0:	4b6a      	ldr	r3, [pc, #424]	; (8000d6c <service_can_rx_message+0x200>)
 8000bc2:	80da      	strh	r2, [r3, #6]
		if (message->dlc > 0)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	795b      	ldrb	r3, [r3, #5]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <service_can_rx_message+0x68>
		{
			last_error.error_id = message->data[0];
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	799a      	ldrb	r2, [r3, #6]
 8000bd0:	4b66      	ldr	r3, [pc, #408]	; (8000d6c <service_can_rx_message+0x200>)
 8000bd2:	721a      	strb	r2, [r3, #8]
		}

		// return success because the problem is not with the RX
		return CAN_SUCCESS;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e0c1      	b.n	8000d5c <service_can_rx_message+0x1f0>
	}

	// error checking on the parameter requested
	if (id.parameter < 0 || id.parameter >= NUM_OF_PARAMETERS)
 8000bd8:	8abb      	ldrh	r3, [r7, #20]
 8000bda:	2b0b      	cmp	r3, #11
 8000bdc:	d908      	bls.n	8000bf0 <service_can_rx_message+0x84>
	{
		send_error_message(&id, ID_NOT_FOUND);
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f9d7 	bl	8000f98 <send_error_message>

		return NOT_FOUND_ERR;
 8000bea:	f06f 0309 	mvn.w	r3, #9
 8000bee:	e0b5      	b.n	8000d5c <service_can_rx_message+0x1f0>
	}
	
	// get the associated data struct and set last_rx
	data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[id.parameter]);
 8000bf0:	8abb      	ldrh	r3, [r7, #20]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b5e      	ldr	r3, [pc, #376]	; (8000d70 <service_can_rx_message+0x204>)
 8000bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfa:	61bb      	str	r3, [r7, #24]
	data_struct->last_rx = HAL_GetTick();
 8000bfc:	f001 f9a4 	bl	8001f48 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	601a      	str	r2, [r3, #0]

    // run command: run the command specified by the CAN message on this module
	if (parameter_data_types[id.parameter] == COMMAND)
 8000c06:	8abb      	ldrh	r3, [r7, #20]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b5a      	ldr	r3, [pc, #360]	; (8000d74 <service_can_rx_message+0x208>)
 8000c0c:	5c9b      	ldrb	r3, [r3, r2]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d107      	bne.n	8000c22 <service_can_rx_message+0xb6>
	{
		return run_can_command(message, &id);
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4619      	mov	r1, r3
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f000 f8db 	bl	8000dd4 <run_can_command>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	e09c      	b.n	8000d5c <service_can_rx_message+0x1f0>
	}

	// Check the update_enabled flag (if it is not a CAN command)
	if (!(data_struct->update_enabled))
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d108      	bne.n	8000c3c <service_can_rx_message+0xd0>
	{
		send_error_message(&id, PARAM_NOT_ENABLED);
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 f9b1 	bl	8000f98 <send_error_message>
		return NOT_ENABLED_ERR;
 8000c36:	f06f 030a 	mvn.w	r3, #10
 8000c3a:	e08f      	b.n	8000d5c <service_can_rx_message+0x1f0>
	}

	// request parameter: return a CAN message with the data taken from this module
	if (message->rtr_bit)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	791b      	ldrb	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d007      	beq.n	8000c54 <service_can_rx_message+0xe8>
	{
		return parameter_requested(message, &id);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f894 	bl	8000d78 <parameter_requested>
 8000c50:	4603      	mov	r3, r0
 8000c52:	e083      	b.n	8000d5c <service_can_rx_message+0x1f0>
	}

	// this code should only be reached if the message is a data message

	// build the data U64 (big endian)
	for (c = (message->dlc - 1); c >= 0; c--)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	795b      	ldrb	r3, [r3, #5]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	77fb      	strb	r3, [r7, #31]
 8000c5e:	e01b      	b.n	8000c98 <service_can_rx_message+0x12c>
	{
		recieved_data |= message->data[c] << (c * BITS_IN_BYTE);
 8000c60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	799b      	ldrb	r3, [r3, #6]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	469b      	mov	fp, r3
 8000c78:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8000c7c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000c80:	ea4b 0301 	orr.w	r3, fp, r1
 8000c84:	ea4c 0402 	orr.w	r4, ip, r2
 8000c88:	e9c7 3408 	strd	r3, r4, [r7, #32]
	for (c = (message->dlc - 1); c >= 0; c--)
 8000c8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	3b01      	subs	r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	77fb      	strb	r3, [r7, #31]
 8000c98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	dadf      	bge.n	8000c60 <service_can_rx_message+0xf4>
	}

	// Switch the pending_response flag
	data_struct->pending_response = FALSE;
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	715a      	strb	r2, [r3, #5]

	// this switch will handle all of the different possible data types
	// that can be sent over CAN
	switch (parameter_data_types[id.parameter])
 8000ca6:	8abb      	ldrh	r3, [r7, #20]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <service_can_rx_message+0x208>)
 8000cac:	5c9b      	ldrb	r3, [r3, r2]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d84b      	bhi.n	8000d4c <service_can_rx_message+0x1e0>
 8000cb4:	a201      	add	r2, pc, #4	; (adr r2, 8000cbc <service_can_rx_message+0x150>)
 8000cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cba:	bf00      	nop
 8000cbc:	08000ce1 	.word	0x08000ce1
 8000cc0:	08000ced 	.word	0x08000ced
 8000cc4:	08000cf7 	.word	0x08000cf7
 8000cc8:	08000d01 	.word	0x08000d01
 8000ccc:	08000d0f 	.word	0x08000d0f
 8000cd0:	08000d1b 	.word	0x08000d1b
 8000cd4:	08000d27 	.word	0x08000d27
 8000cd8:	08000d31 	.word	0x08000d31
 8000cdc:	08000d3f 	.word	0x08000d3f
	{
	case UNSIGNED8:
		((U8_CAN_STRUCT*)(data_struct))->data = (U8)recieved_data;
 8000ce0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	719a      	strb	r2, [r3, #6]
		return CAN_SUCCESS;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e037      	b.n	8000d5c <service_can_rx_message+0x1f0>

	case UNSIGNED16:
		((U16_CAN_STRUCT*)(data_struct))->data = (U16)recieved_data;
 8000cec:	8c3a      	ldrh	r2, [r7, #32]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	80da      	strh	r2, [r3, #6]
		return CAN_SUCCESS;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e032      	b.n	8000d5c <service_can_rx_message+0x1f0>

	case UNSIGNED32:
		((U32_CAN_STRUCT*)(data_struct))->data = (U32)recieved_data;
 8000cf6:	6a3a      	ldr	r2, [r7, #32]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e02d      	b.n	8000d5c <service_can_rx_message+0x1f0>

	case UNSIGNED64:
		((U64_CAN_STRUCT*)(data_struct))->data = (U64)recieved_data;
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000d06:	e9c2 3402 	strd	r3, r4, [r2, #8]
		return CAN_SUCCESS;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e026      	b.n	8000d5c <service_can_rx_message+0x1f0>

	case SIGNED8:
		((S8_CAN_STRUCT*)(data_struct))->data = (S8)recieved_data;
 8000d0e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	719a      	strb	r2, [r3, #6]
		return CAN_SUCCESS;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e020      	b.n	8000d5c <service_can_rx_message+0x1f0>

	case SIGNED16:
		((S16_CAN_STRUCT*)(data_struct))->data = (S16)recieved_data;
 8000d1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	80da      	strh	r2, [r3, #6]
		return CAN_SUCCESS;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e01a      	b.n	8000d5c <service_can_rx_message+0x1f0>

	case SIGNED32:
		((S32_CAN_STRUCT*)(data_struct))->data = (S32)recieved_data;
 8000d26:	6a3a      	ldr	r2, [r7, #32]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e015      	b.n	8000d5c <service_can_rx_message+0x1f0>

	case SIGNED64:
		((S64_CAN_STRUCT*)(data_struct))->data = (S64)recieved_data;
 8000d30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	e9c2 3402 	strd	r3, r4, [r2, #8]
		return CAN_SUCCESS;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e00e      	b.n	8000d5c <service_can_rx_message+0x1f0>

	case FLOATING:
		// Union to get the bitwise data of the float
		float_con.u32 = (U32)recieved_data;
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	60fb      	str	r3, [r7, #12]

		((FLOAT_CAN_STRUCT*)(data_struct))->data = float_con.f;
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e007      	b.n	8000d5c <service_can_rx_message+0x1f0>

	default:
		send_error_message(&id, DATATYPE_NOT_FOUND);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2104      	movs	r1, #4
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f920 	bl	8000f98 <send_error_message>
		return NOT_FOUND_ERR;
 8000d58:	f06f 0309 	mvn.w	r3, #9
	}

	return CAN_SUCCESS;
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000d66:	bf00      	nop
 8000d68:	20004798 	.word	0x20004798
 8000d6c:	200042a0 	.word	0x200042a0
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000030 	.word	0x20000030

08000d78 <parameter_requested>:


// parameter_requested
//  return a CAN message with the data taken from this module
static S8 parameter_requested(CAN_MSG* message, CAN_ID* id)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	if (message->dlc != REQ_PARAM_SIZE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	795b      	ldrb	r3, [r3, #5]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <parameter_requested+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	6838      	ldr	r0, [r7, #0]
 8000d8e:	f000 f903 	bl	8000f98 <send_error_message>

		return SIZE_ERR;
 8000d92:	f06f 030b 	mvn.w	r3, #11
 8000d96:	e019      	b.n	8000dcc <parameter_requested+0x54>
	}

	// the requested parameter is stored in id->parameter of the received CAN message
	if (id->parameter <= CAN_COMMAND_ID || id->parameter >= NUM_OF_PARAMETERS)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	889b      	ldrh	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <parameter_requested+0x30>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	889b      	ldrh	r3, [r3, #4]
 8000da4:	2b0b      	cmp	r3, #11
 8000da6:	d906      	bls.n	8000db6 <parameter_requested+0x3e>
	{
		send_error_message(id, ID_NOT_FOUND);
 8000da8:	2100      	movs	r1, #0
 8000daa:	6838      	ldr	r0, [r7, #0]
 8000dac:	f000 f8f4 	bl	8000f98 <send_error_message>

		return NOT_FOUND_ERR;
 8000db0:	f06f 0309 	mvn.w	r3, #9
 8000db4:	e00a      	b.n	8000dcc <parameter_requested+0x54>
	}

	// send the parameter data to the module that requested
	return send_parameter(id->priority, id->source_module, id->parameter);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	7818      	ldrb	r0, [r3, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	7899      	ldrb	r1, [r3, #2]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	889b      	ldrh	r3, [r3, #4]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f7ff fccd 	bl	8000764 <send_parameter>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <run_can_command>:


// run_can_command
//  run the command specified by the CAN message on this module
static S8 run_can_command(CAN_MSG* message, CAN_ID* id)
{
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	GCAN_COMMAND command_id;
	CUST_FUNC* this_function;

	// DLC error checking
	if (message->dlc != COMMAND_SIZE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	795b      	ldrb	r3, [r3, #5]
 8000de2:	2b05      	cmp	r3, #5
 8000de4:	d006      	beq.n	8000df4 <run_can_command+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 8000de6:	2103      	movs	r1, #3
 8000de8:	6838      	ldr	r0, [r7, #0]
 8000dea:	f000 f8d5 	bl	8000f98 <send_error_message>

		return SIZE_ERR;
 8000dee:	f06f 030b 	mvn.w	r3, #11
 8000df2:	e033      	b.n	8000e5c <run_can_command+0x88>
	}

	// error checking on the command ID
	command_id = message->data[COMMAND_ID_POS];
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	799b      	ldrb	r3, [r3, #6]
 8000df8:	73fb      	strb	r3, [r7, #15]
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d906      	bls.n	8000e0e <run_can_command+0x3a>
	{
		send_error_message(id, COMMAND_ID_NOT_FOUND);
 8000e00:	2101      	movs	r1, #1
 8000e02:	6838      	ldr	r0, [r7, #0]
 8000e04:	f000 f8c8 	bl	8000f98 <send_error_message>

		return NOT_FOUND_ERR;
 8000e08:	f06f 0309 	mvn.w	r3, #9
 8000e0c:	e026      	b.n	8000e5c <run_can_command+0x88>
	}

	this_function = &(cust_funcs[command_id]);
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <run_can_command+0x90>)
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60bb      	str	r3, [r7, #8]

	// check if the function is enabled
	if (!this_function->func_enabled)
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	791b      	ldrb	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d106      	bne.n	8000e34 <run_can_command+0x60>
	{
		send_error_message(id, COMMAND_NOT_ENABLED);
 8000e26:	2105      	movs	r1, #5
 8000e28:	6838      	ldr	r0, [r7, #0]
 8000e2a:	f000 f8b5 	bl	8000f98 <send_error_message>

		return NOT_ENABLED_ERR;
 8000e2e:	f06f 030a 	mvn.w	r3, #10
 8000e32:	e013      	b.n	8000e5c <run_can_command+0x88>
	}

	// run the function
	(*(this_function->func_ptr))(id->source_module, this_function->param_ptr,
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	681c      	ldr	r4, [r3, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	7898      	ldrb	r0, [r3, #2]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	6899      	ldr	r1, [r3, #8]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	79dd      	ldrb	r5, [r3, #7]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7a1e      	ldrb	r6, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7a5b      	ldrb	r3, [r3, #9]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	7a92      	ldrb	r2, [r2, #10]
 8000e50:	9201      	str	r2, [sp, #4]
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	4633      	mov	r3, r6
 8000e56:	462a      	mov	r2, r5
 8000e58:	47a0      	blx	r4
		message->data[COMMAND_PARAM_0], message->data[COMMAND_PARAM_1],
		message->data[COMMAND_PARAM_2], message->data[COMMAND_PARAM_3]);

	return CAN_SUCCESS;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e64:	20004730 	.word	0x20004730

08000e68 <build_message_id>:

// build_can_id
//  this function will fill in the id of msg when called.
//  No error checking is preformed in this function besides masking
static void build_message_id(CAN_MSG* msg, CAN_ID* id)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	U32 temp;

	msg->id = 0;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]

	// priority bit
	temp = !!id->priority;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PRIORITY_POS - PRIORITY_SIZE);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	071b      	lsls	r3, r3, #28
 8000e8c:	60fb      	str	r3, [r7, #12]
	temp &= PRIORITY_MASK;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e94:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]

	// destination bits
	temp = id->dest_module;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	785b      	ldrb	r3, [r3, #1]
 8000ea6:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - DEST_POS - DEST_SIZE);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	059b      	lsls	r3, r3, #22
 8000eac:	60fb      	str	r3, [r7, #12]
	temp &= DEST_MASK;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f003 637c 	and.w	r3, r3, #264241152	; 0xfc00000
 8000eb4:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]

    // source bits
	temp = id->source_module;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	789b      	ldrb	r3, [r3, #2]
 8000ec6:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - SOURCE_POS - SOURCE_SIZE);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	041b      	lsls	r3, r3, #16
 8000ecc:	60fb      	str	r3, [r7, #12]
	temp &= SOURCE_MASK;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8000ed4:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]

	// error bit
	temp = id->error;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	78db      	ldrb	r3, [r3, #3]
 8000ee6:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - ERROR_POS - ERROR_SIZE);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	03db      	lsls	r3, r3, #15
 8000eec:	60fb      	str	r3, [r7, #12]
	temp &= ERROR_MASK;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ef4:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	601a      	str	r2, [r3, #0]

	// parameter bits
	temp = id->parameter;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	889b      	ldrh	r3, [r3, #4]
 8000f06:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PARAM_POS - PARAM_SIZE);
	temp &= PARAM_MASK;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f0e:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <get_message_id>:

// get_message_id
//  this function will take in a CAN message and convert it to
//  a CAN id struct. No error checking is performed
static void get_message_id(CAN_ID* id, CAN_MSG* message)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	id->priority = GET_ID_PRIO(message->id);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	0f1b      	lsrs	r3, r3, #28
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	701a      	strb	r2, [r3, #0]
	id->dest_module = GET_ID_DEST(message->id);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0d9b      	lsrs	r3, r3, #22
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	705a      	strb	r2, [r3, #1]
	id->source_module = GET_ID_SOURCE(message->id);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	0c1b      	lsrs	r3, r3, #16
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	709a      	strb	r2, [r3, #2]
	id->error = GET_ID_ERROR(message->id);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	0bdb      	lsrs	r3, r3, #15
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	70da      	strb	r2, [r3, #3]
	id->parameter = GET_ID_PARAM(message->id);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	809a      	strh	r2, [r3, #4]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <send_error_message>:


// send_error_message
//  Sends a return message to the original sender with the ID specified
static S8 send_error_message(CAN_ID* rx_id, U8 error_id)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	CAN_MSG message;
	CAN_ID tx_id;

	// create the CAN ID for the error message
	tx_id.priority = rx_id->priority;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	723b      	strb	r3, [r7, #8]
	tx_id.dest_module = rx_id->source_module;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	789b      	ldrb	r3, [r3, #2]
 8000fae:	727b      	strb	r3, [r7, #9]
	tx_id.source_module = this_module_id;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <send_error_message+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	72bb      	strb	r3, [r7, #10]
	tx_id.error = TRUE;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	72fb      	strb	r3, [r7, #11]
	tx_id.parameter = rx_id->parameter;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	889b      	ldrh	r3, [r3, #4]
 8000fbe:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &tx_id);
 8000fc0:	f107 0208 	add.w	r2, r7, #8
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff4c 	bl	8000e68 <build_message_id>

	// set the RTR bit to a data message
	message.rtr_bit = DATA_MESSAGE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	753b      	strb	r3, [r7, #20]

	// set the DLC and data
	message.dlc = sizeof(error_id);
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	757b      	strb	r3, [r7, #21]
	message.data[0] = error_id;
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	75bb      	strb	r3, [r7, #22]

	// send the CAN message
	return tx_can_message(&message);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fd9d 	bl	8000b20 <tx_can_message>
 8000fe6:	4603      	mov	r3, r0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20004798 	.word	0x20004798

08000ff4 <define_can_bus>:
//
// WARNING: if MULTI_BUS is defined, this function must be called as part of the initialization step,
//           right after init() has been called for all active busses
#ifdef MULTI_BUS
void define_can_bus(CAN_HandleTypeDef* hcan, U8 gophercan_bus_id, U8 bus_number)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
 8001000:	4613      	mov	r3, r2
 8001002:	70bb      	strb	r3, [r7, #2]
	switch (bus_number)
 8001004:	78bb      	ldrb	r3, [r7, #2]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d109      	bne.n	800101e <define_can_bus+0x2a>
		break;
#endif

#if NUM_OF_BUSSES > 1
	case 1:
		gbus1.tx_buffer = &tx_buffer_1;
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <define_can_bus+0x4c>)
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <define_can_bus+0x50>)
 800100e:	601a      	str	r2, [r3, #0]
		gbus1.hcan = hcan;
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <define_can_bus+0x4c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6053      	str	r3, [r2, #4]
		gbus1.gopher_can_id = gophercan_bus_id;
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <define_can_bus+0x4c>)
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	7213      	strb	r3, [r2, #8]
		break;
 800101c:	e009      	b.n	8001032 <define_can_bus+0x3e>
#endif

	default:
		gbus0.tx_buffer = &tx_buffer;
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <define_can_bus+0x54>)
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <define_can_bus+0x58>)
 8001022:	601a      	str	r2, [r3, #0]
		gbus0.hcan = hcan;
 8001024:	4a08      	ldr	r2, [pc, #32]	; (8001048 <define_can_bus+0x54>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6053      	str	r3, [r2, #4]
		gbus0.gopher_can_id = gophercan_bus_id;
 800102a:	4a07      	ldr	r2, [pc, #28]	; (8001048 <define_can_bus+0x54>)
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	7213      	strb	r3, [r2, #8]
		break;
 8001030:	bf00      	nop
	}
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200047a4 	.word	0x200047a4
 8001044:	20004728 	.word	0x20004728
 8001048:	200046f4 	.word	0x200046f4
 800104c:	200046d8 	.word	0x200046d8

08001050 <choose_tx_buffer_from_hcan>:
// choose_tx_buffer_from_hcan
//  Chooses what buffer the hcan pointer inputed is referring to based on the function define_can_bus().
//  If the hcan pointer is not found, defaults to module bus 0
#ifdef MULTI_BUS
static CAN_MSG_RING_BUFFER* choose_tx_buffer_from_hcan(CAN_HandleTypeDef* hcan)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	{
		return gbus2.tx_buffer;
	}
#endif
#if NUM_OF_BUSSES > 1
	if (hcan == gbus1.hcan)
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <choose_tx_buffer_from_hcan+0x28>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	d102      	bne.n	8001068 <choose_tx_buffer_from_hcan+0x18>
	{
		return gbus1.tx_buffer;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <choose_tx_buffer_from_hcan+0x28>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	e001      	b.n	800106c <choose_tx_buffer_from_hcan+0x1c>
	}
#endif
	return gbus0.tx_buffer;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <choose_tx_buffer_from_hcan+0x2c>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	200047a4 	.word	0x200047a4
 800107c:	200046f4 	.word	0x200046f4

08001080 <choose_tx_buffer_from_dest_module>:
// choose_tx_buffer_from_dest_module
//  Chooses which buffer the the dest_module in message_to_add is on
//  If the module is not found, defaults to module bus 0
#ifdef MULTI_BUS
static CAN_MSG_RING_BUFFER* choose_tx_buffer_from_dest_module(CAN_MSG* message_to_add)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	MODULE_ID dest_module;
	dest_module = GET_ID_DEST(message_to_add->id);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	0d9b      	lsrs	r3, r3, #22
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001094:	73fb      	strb	r3, [r7, #15]
		return gbus2.tx_buffer;
	}
	else
#endif
#if NUM_OF_BUSSES > 1
	if (module_bus_number[dest_module] == gbus1.gopher_can_id)
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	4a08      	ldr	r2, [pc, #32]	; (80010bc <choose_tx_buffer_from_dest_module+0x3c>)
 800109a:	5cd2      	ldrb	r2, [r2, r3]
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <choose_tx_buffer_from_dest_module+0x40>)
 800109e:	7a1b      	ldrb	r3, [r3, #8]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d102      	bne.n	80010aa <choose_tx_buffer_from_dest_module+0x2a>
	{
		return gbus1.tx_buffer;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <choose_tx_buffer_from_dest_module+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	e001      	b.n	80010ae <choose_tx_buffer_from_dest_module+0x2e>
	}
	else
#endif
	return gbus0.tx_buffer;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <choose_tx_buffer_from_dest_module+0x44>)
 80010ac:	681b      	ldr	r3, [r3, #0]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000003c 	.word	0x2000003c
 80010c0:	200047a4 	.word	0x200047a4
 80010c4:	200046f4 	.word	0x200046f4

080010c8 <send_message_to_all_busses>:

// send_message_to_all_busses
//  This function will add the message to all of the TX buffers active
#ifdef MULTI_BUS
static void send_message_to_all_busses(CAN_MSG* message_to_add)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
		add_message_to_back(&tx_buffer_2, message_to_add);
	}
#endif
#if NUM_OF_BUSSES > 1
	// check to make sure the buffer is not full
	if (!is_full(&tx_buffer_1))
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <send_message_to_all_busses+0x38>)
 80010d2:	f000 f8ae 	bl	8001232 <is_full>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d103      	bne.n	80010e4 <send_message_to_all_busses+0x1c>
	{
		add_message_to_back(&tx_buffer_1, message_to_add);
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <send_message_to_all_busses+0x38>)
 80010e0:	f000 f909 	bl	80012f6 <add_message_to_back>
	}
#endif
	// check to make sure the buffer is not full
	if (!is_full(&tx_buffer))
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <send_message_to_all_busses+0x3c>)
 80010e6:	f000 f8a4 	bl	8001232 <is_full>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <send_message_to_all_busses+0x30>
	{
		add_message_to_back(&tx_buffer, message_to_add);
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <send_message_to_all_busses+0x3c>)
 80010f4:	f000 f8ff 	bl	80012f6 <add_message_to_back>
	}
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20004728 	.word	0x20004728
 8001104:	200046d8 	.word	0x200046d8

08001108 <rout_can_message>:
// rout_can_message
//  Function to be called in service_can_rx_hardware() that will take messages that are
//  destined for modules on another bus and put that message into the correct TX buffer
#ifdef CAN_ROUTER
static void rout_can_message(CAN_HandleTypeDef* hcan, CAN_MSG* message)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
	CAN_MSG_RING_BUFFER* buffer;
	MODULE_ID dest_module;
	dest_module = GET_ID_DEST(message->id);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0d9b      	lsrs	r3, r3, #22
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800111e:	73fb      	strb	r3, [r7, #15]

	// Get the buffer this message should go on if it needs to be routed
	buffer = choose_tx_buffer_from_dest_module(message);
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f7ff ffad 	bl	8001080 <choose_tx_buffer_from_dest_module>
 8001126:	60b8      	str	r0, [r7, #8]

	// Handle the special case of a message that needs to be sent out to all busses (ID 0)
	if (dest_module == ALL_MODULES_ID)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d122      	bne.n	8001174 <rout_can_message+0x6c>
			add_message_to_back(&tx_buffer_2, message);
		}
#endif
#if NUM_OF_BUSSES > 1
		// check to make sure the buffer is not full and the message did not come from this buffer
		if (!is_full(&tx_buffer_1)
 800112e:	4827      	ldr	r0, [pc, #156]	; (80011cc <rout_can_message+0xc4>)
 8001130:	f000 f87f 	bl	8001232 <is_full>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10a      	bne.n	8001150 <rout_can_message+0x48>
				&& &tx_buffer_1 != choose_tx_buffer_from_hcan(hcan))
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff88 	bl	8001050 <choose_tx_buffer_from_hcan>
 8001140:	4602      	mov	r2, r0
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <rout_can_message+0xc4>)
 8001144:	429a      	cmp	r2, r3
 8001146:	d003      	beq.n	8001150 <rout_can_message+0x48>
		{
			add_message_to_back(&tx_buffer_1, message);
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	4820      	ldr	r0, [pc, #128]	; (80011cc <rout_can_message+0xc4>)
 800114c:	f000 f8d3 	bl	80012f6 <add_message_to_back>
		}
#endif
		// check to make sure the buffer is not full and the message did not come from this buffer
		if (!is_full(&tx_buffer)
 8001150:	481f      	ldr	r0, [pc, #124]	; (80011d0 <rout_can_message+0xc8>)
 8001152:	f000 f86e 	bl	8001232 <is_full>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d12f      	bne.n	80011bc <rout_can_message+0xb4>
				&& &tx_buffer != choose_tx_buffer_from_hcan(hcan))
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff77 	bl	8001050 <choose_tx_buffer_from_hcan>
 8001162:	4602      	mov	r2, r0
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <rout_can_message+0xc8>)
 8001166:	429a      	cmp	r2, r3
 8001168:	d028      	beq.n	80011bc <rout_can_message+0xb4>
		{
			add_message_to_back(&tx_buffer, message);
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	4818      	ldr	r0, [pc, #96]	; (80011d0 <rout_can_message+0xc8>)
 800116e:	f000 f8c2 	bl	80012f6 <add_message_to_back>
		}

		return;
 8001172:	e023      	b.n	80011bc <rout_can_message+0xb4>
	}

	// Make sure this message isn't for the module that is acting as the router
	if (dest_module == this_module_id)
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <rout_can_message+0xcc>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	429a      	cmp	r2, r3
 800117c:	d020      	beq.n	80011c0 <rout_can_message+0xb8>
		// This message is for the router module. Return and process the message as normal
		return;
	}

	// Determine if this message needs to be routed (if the destination module is on another bus)
	if (buffer == choose_tx_buffer_from_hcan(hcan))
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff66 	bl	8001050 <choose_tx_buffer_from_hcan>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	4293      	cmp	r3, r2
 800118a:	d01b      	beq.n	80011c4 <rout_can_message+0xbc>
		// This message does not need to be routed. It came from the bus it should be on
		return;
	}

	// check to make sure the buffer is not full. If it is, the message will be discarded
	if (is_full(buffer))
 800118c:	68b8      	ldr	r0, [r7, #8]
 800118e:	f000 f850 	bl	8001232 <is_full>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <rout_can_message+0x9e>
	{
		rx_buffer.fill_level--;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <rout_can_message+0xd0>)
 800119a:	799b      	ldrb	r3, [r3, #6]
 800119c:	3b01      	subs	r3, #1
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <rout_can_message+0xd0>)
 80011a2:	719a      	strb	r2, [r3, #6]
		return;
 80011a4:	e00f      	b.n	80011c6 <rout_can_message+0xbe>
	}

	// Add the message to the selected TX buffer
	add_message_to_back(buffer, message);
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	68b8      	ldr	r0, [r7, #8]
 80011aa:	f000 f8a4 	bl	80012f6 <add_message_to_back>

	// Remove the message from the RX buffer, it is now on a TX buffer
	rx_buffer.fill_level--;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <rout_can_message+0xd0>)
 80011b0:	799b      	ldrb	r3, [r3, #6]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <rout_can_message+0xd0>)
 80011b8:	719a      	strb	r2, [r3, #6]
 80011ba:	e004      	b.n	80011c6 <rout_can_message+0xbe>
		return;
 80011bc:	bf00      	nop
 80011be:	e002      	b.n	80011c6 <rout_can_message+0xbe>
		return;
 80011c0:	bf00      	nop
 80011c2:	e000      	b.n	80011c6 <rout_can_message+0xbe>
		return;
 80011c4:	bf00      	nop
}
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20004728 	.word	0x20004728
 80011d0:	200046d8 	.word	0x200046d8
 80011d4:	20004798 	.word	0x20004798
 80011d8:	200044d0 	.word	0x200044d0

080011dc <do_nothing>:
// do_nothing
//  this exists to give a default function pointer to all of the CAN commands
//  to avoid errors from bad function pointers
void do_nothing(U8 sending_module, void* param,
	U8 remote_param0, U8 remote_param1, U8 remote_param2, U8 remote_param3)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6039      	str	r1, [r7, #0]
 80011e4:	4611      	mov	r1, r2
 80011e6:	461a      	mov	r2, r3
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	460b      	mov	r3, r1
 80011ee:	71bb      	strb	r3, [r7, #6]
 80011f0:	4613      	mov	r3, r2
 80011f2:	717b      	strb	r3, [r7, #5]
	// this function has successfully done nothing
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <init_buffer>:


// init_buffer
//  initialize the buffer with the values passed in as parameters
void init_buffer(CAN_MSG_RING_BUFFER* buffer, CAN_MSG buffer_memory_ptr[], U8 buffer_size)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	4613      	mov	r3, r2
 800120c:	71fb      	strb	r3, [r7, #7]
	buffer->head = 0;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	715a      	strb	r2, [r3, #5]
	buffer->fill_level = 0;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2200      	movs	r2, #0
 8001218:	719a      	strb	r2, [r3, #6]
	buffer->size = buffer_size;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	711a      	strb	r2, [r3, #4]
	buffer->message_buffer = buffer_memory_ptr;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <is_full>:


// is_full
//  return true if the buffer is full, false otherwise
boolean is_full(CAN_MSG_RING_BUFFER* buffer)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
	if (buffer->fill_level >= buffer->size)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	799a      	ldrb	r2, [r3, #6]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	791b      	ldrb	r3, [r3, #4]
 8001242:	429a      	cmp	r2, r3
 8001244:	d301      	bcc.n	800124a <is_full+0x18>
	{
		return TRUE;
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <is_full+0x1a>
	}

	return FALSE;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <is_empty>:


// is_empty
//  return true if the buffer has no elements, false otherwise
boolean is_empty(CAN_MSG_RING_BUFFER* buffer)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	if (buffer->fill_level > 0)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	799b      	ldrb	r3, [r3, #6]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <is_empty+0x14>
	{
		return FALSE;
 8001268:	2300      	movs	r3, #0
 800126a:	e000      	b.n	800126e <is_empty+0x16>
	}

	return TRUE;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <get_from_buffer>:


// get_from_buffer
//  gets the message at index as if it was a normal array
CAN_MSG* get_from_buffer(CAN_MSG_RING_BUFFER* buffer, U8 index)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	70fb      	strb	r3, [r7, #3]
	return buffer->message_buffer + ((buffer->head + index) % buffer->size);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6819      	ldr	r1, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	795b      	ldrb	r3, [r3, #5]
 800128e:	461a      	mov	r2, r3
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	4413      	add	r3, r2
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	7912      	ldrb	r2, [r2, #4]
 8001298:	fb93 f0f2 	sdiv	r0, r3, r2
 800129c:	fb02 f200 	mul.w	r2, r2, r0
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	440b      	add	r3, r1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <remove_from_front>:


// remove_from_front
//  will remove the first element of the ring buffer. If the buffer is empty it will do nothing
void remove_from_front(CAN_MSG_RING_BUFFER* buffer)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	// don't do anything if the buffer is empty
	if (is_empty(buffer))
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffcc 	bl	8001258 <is_empty>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d113      	bne.n	80012ee <remove_from_front+0x3c>
	{
		return;
	}

	// move the head to the next element
	buffer->head = (buffer->head + 1) % buffer->size;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	795b      	ldrb	r3, [r3, #5]
 80012ca:	3301      	adds	r3, #1
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	7912      	ldrb	r2, [r2, #4]
 80012d0:	fb93 f1f2 	sdiv	r1, r3, r2
 80012d4:	fb02 f201 	mul.w	r2, r2, r1
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	715a      	strb	r2, [r3, #5]

	// decrement the fill level
	buffer->fill_level--;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	799b      	ldrb	r3, [r3, #6]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	719a      	strb	r2, [r3, #6]
 80012ec:	e000      	b.n	80012f0 <remove_from_front+0x3e>
		return;
 80012ee:	bf00      	nop
}
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <add_message_to_back>:
// add_message_to_back
//  This function will add message to the first open slot in the ring buffer. Note no
//  error checking is done in this function, so it will need to be done somewhere else
//  before calling this function
void add_message_to_back(CAN_MSG_RING_BUFFER* buffer, CAN_MSG* message)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
	CAN_MSG* buffer_message;
	U8 c;

	// set the message in the next open element in the buffer to message_to_add (by value, not by reference)
	buffer_message = get_from_buffer(buffer, buffer->fill_level);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	799b      	ldrb	r3, [r3, #6]
 8001304:	4619      	mov	r1, r3
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffb7 	bl	800127a <get_from_buffer>
 800130c:	60b8      	str	r0, [r7, #8]

	buffer_message->id = message->id;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	601a      	str	r2, [r3, #0]
	buffer_message->dlc = message->dlc;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	795a      	ldrb	r2, [r3, #5]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	715a      	strb	r2, [r3, #5]
	buffer_message->rtr_bit = message->rtr_bit;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	791a      	ldrb	r2, [r3, #4]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	711a      	strb	r2, [r3, #4]

	for (c = 0; c < buffer_message->dlc; c++)
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	e00b      	b.n	8001344 <add_message_to_back+0x4e>
	{
		buffer_message->data[c] = message->data[c];
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	440a      	add	r2, r1
 8001334:	7991      	ldrb	r1, [r2, #6]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	4413      	add	r3, r2
 800133a:	460a      	mov	r2, r1
 800133c:	719a      	strb	r2, [r3, #6]
	for (c = 0; c < buffer_message->dlc; c++)
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3301      	adds	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	795b      	ldrb	r3, [r3, #5]
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	429a      	cmp	r2, r3
 800134c:	d3ee      	bcc.n	800132c <add_message_to_back+0x36>
	}

	// adjust the fill_level to reflect the new message added
	buffer->fill_level++;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	799b      	ldrb	r3, [r3, #6]
 8001352:	3301      	adds	r3, #1
 8001354:	b2da      	uxtb	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	719a      	strb	r2, [r3, #6]
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <dlm_init>:

// dlm_init
//  This function will handle power-on behavior, all completely TBD
//  according to everthing else the module does
void dlm_init(CAN_HandleTypeDef* hcan_ptr0, CAN_HandleTypeDef* hcan_ptr1)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
    // init GopherCAN
	dlm_hcan0 = hcan_ptr0;
 800136e:	4a26      	ldr	r2, [pc, #152]	; (8001408 <dlm_init+0xa4>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6013      	str	r3, [r2, #0]
	dlm_hcan1 = hcan_ptr1;
 8001374:	4a25      	ldr	r2, [pc, #148]	; (800140c <dlm_init+0xa8>)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	6013      	str	r3, [r2, #0]

	// initialize CAN
	// NOTE: CAN will also need to be added in CubeMX and code must be generated
	// Check the STM_CAN repo for the file "F0xx CAN Config Settings.pptx" for the correct settings
	if (init_can(dlm_hcan0, DLM_ID)
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <dlm_init+0xa4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2101      	movs	r1, #1
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8dd 	bl	8000540 <init_can>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d108      	bne.n	800139e <dlm_init+0x3a>
			|| init_can(dlm_hcan1, DLM_ID))
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <dlm_init+0xa8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2101      	movs	r1, #1
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8d4 	bl	8000540 <init_can>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d000      	beq.n	80013a0 <dlm_init+0x3c>
	{
		// an error has occurred, stay here
		while (1);
 800139e:	e7fe      	b.n	800139e <dlm_init+0x3a>
	}

	// Declare which bus is which using define_can_bus
	define_can_bus(dlm_hcan1, GCAN0, 0);
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <dlm_init+0xa8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe23 	bl	8000ff4 <define_can_bus>
	define_can_bus(dlm_hcan0, GCAN1, 1);
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <dlm_init+0xa4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	2101      	movs	r1, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe1c 	bl	8000ff4 <define_can_bus>

	// enable the tester variables
	u8_tester.update_enabled = TRUE;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <dlm_init+0xac>)
 80013be:	2201      	movs	r2, #1
 80013c0:	711a      	strb	r2, [r3, #4]
	u16_tester.update_enabled = TRUE;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <dlm_init+0xb0>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	711a      	strb	r2, [r3, #4]
	u32_tester.update_enabled = TRUE;
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <dlm_init+0xb4>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	711a      	strb	r2, [r3, #4]
	u64_tester.update_enabled = TRUE;
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <dlm_init+0xb8>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	711a      	strb	r2, [r3, #4]
	s8_tester.update_enabled = TRUE;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <dlm_init+0xbc>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	711a      	strb	r2, [r3, #4]
	s16_tester.update_enabled = TRUE;
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <dlm_init+0xc0>)
 80013dc:	2201      	movs	r2, #1
 80013de:	711a      	strb	r2, [r3, #4]
	s32_tester.update_enabled = TRUE;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <dlm_init+0xc4>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	711a      	strb	r2, [r3, #4]
	s64_tester.update_enabled = TRUE;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <dlm_init+0xc8>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	711a      	strb	r2, [r3, #4]
	float_tester.update_enabled = TRUE;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <dlm_init+0xcc>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	711a      	strb	r2, [r3, #4]

    manage_data_aquisition_init(&ram_data);
 80013f2:	4810      	ldr	r0, [pc, #64]	; (8001434 <dlm_init+0xd0>)
 80013f4:	f000 f854 	bl	80014a0 <manage_data_aquisition_init>
    move_ram_data_to_storage_init(&ram_data);
 80013f8:	480e      	ldr	r0, [pc, #56]	; (8001434 <dlm_init+0xd0>)
 80013fa:	f000 fa59 	bl	80018b0 <move_ram_data_to_storage_init>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200047b0 	.word	0x200047b0
 800140c:	200047b4 	.word	0x200047b4
 8001410:	20004098 	.word	0x20004098
 8001414:	200046ec 	.word	0x200046ec
 8001418:	20004710 	.word	0x20004710
 800141c:	200044b8 	.word	0x200044b8
 8001420:	2000479c 	.word	0x2000479c
 8001424:	20004700 	.word	0x20004700
 8001428:	200046e0 	.word	0x200046e0
 800142c:	20004788 	.word	0x20004788
 8001430:	2000471c 	.word	0x2000471c
 8001434:	200000d8 	.word	0x200000d8

08001438 <manage_data_aquisition>:
//
// Call FRQ:
//  This function will need to be called at the maximum parameter
//  request rate the DLM should support.
void manage_data_aquisition()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    request_all_buckets();
 800143c:	f000 f8f4 	bl	8001628 <request_all_buckets>
    store_new_data();
 8001440:	f000 f934 	bl	80016ac <store_new_data>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <can_service_loop>:
//  if it has been recieved
//
// Call FRQ:
//  100us because we can
void can_service_loop()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	// This is needed to account for a case where the RX buffer fills up, as the ISR is only
	//  triggered directly on reciving the message
	// TODO enable interrupts when not debugging
	service_can_rx_hardware(dlm_hcan0, CAN_RX_FIFO0);
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <can_service_loop+0x50>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fb02 	bl	8000a5c <service_can_rx_hardware>
	service_can_rx_hardware(dlm_hcan0, CAN_RX_FIFO1);
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <can_service_loop+0x50>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fafc 	bl	8000a5c <service_can_rx_hardware>
	service_can_rx_hardware(dlm_hcan1, CAN_RX_FIFO0);
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <can_service_loop+0x54>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff faf6 	bl	8000a5c <service_can_rx_hardware>
	service_can_rx_hardware(dlm_hcan1, CAN_RX_FIFO1);
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <can_service_loop+0x54>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff faf0 	bl	8000a5c <service_can_rx_hardware>

	// handle each RX message in the buffer
	if (service_can_rx_buffer())
 800147c:	f7ff fb34 	bl	8000ae8 <service_can_rx_buffer>
	{
		// an error has occurred
	}

	service_can_tx_hardware(dlm_hcan0);
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <can_service_loop+0x50>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff faa5 	bl	80009d4 <service_can_tx_hardware>
	service_can_tx_hardware(dlm_hcan1);
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <can_service_loop+0x54>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff faa0 	bl	80009d4 <service_can_tx_hardware>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200047b0 	.word	0x200047b0
 800149c:	200047b4 	.word	0x200047b4

080014a0 <manage_data_aquisition_init>:


// manage_data_aquisition_init
//  TODO DOCS
void manage_data_aquisition_init(DATA_INFO_NODE* ram_data)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af04      	add	r7, sp, #16
 80014a6:	6078      	str	r0, [r7, #4]
    ram_data_head = ram_data;
 80014a8:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <manage_data_aquisition_init+0x48>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]

    // Add the correct CAN command functions
    add_custom_can_func(ADD_PARAM_TO_BUCKET, &add_param_to_bucket, TRUE, NULL);
 80014ae:	2300      	movs	r3, #0
 80014b0:	2201      	movs	r2, #1
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <manage_data_aquisition_init+0x4c>)
 80014b4:	2003      	movs	r0, #3
 80014b6:	f7ff fa5d 	bl	8000974 <add_custom_can_func>
    add_custom_can_func(ASSIGN_BUCKET_TO_FRQ, &assign_bucket_to_frq, TRUE, NULL);
 80014ba:	2300      	movs	r3, #0
 80014bc:	2201      	movs	r2, #1
 80014be:	490c      	ldr	r1, [pc, #48]	; (80014f0 <manage_data_aquisition_init+0x50>)
 80014c0:	2004      	movs	r0, #4
 80014c2:	f7ff fa57 	bl	8000974 <add_custom_can_func>

    // Send CAN commands to all modules (specifically to the DAMs) that
    // this module is ready to be interacted with to add buckets
    send_can_command(PRIO_HIGH, DAM_ID, SEND_BUCKET_PARAMS, 0, 0, 0, 0);
 80014c6:	2300      	movs	r3, #0
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	2300      	movs	r3, #0
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	2300      	movs	r3, #0
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	2205      	movs	r2, #5
 80014d6:	2102      	movs	r1, #2
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff f8f7 	bl	80006cc <send_can_command>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200047b8 	.word	0x200047b8
 80014ec:	080014f5 	.word	0x080014f5
 80014f0:	080015c1 	.word	0x080015c1

080014f4 <add_param_to_bucket>:
//  This function is a CAN command, designed to be activated by the DAM. When
//  called, this will add the param inputted to the correct bucket with the assosiated
//  DAM included. Built to handle a general amount of DAMs, params, and buckets
void add_param_to_bucket(U8 sending_dam, void* UNUSED,
    U8 param_id_msb, U8 param_id_lsb, U8 bucket_id, U8 UNUSED3)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6039      	str	r1, [r7, #0]
 80014fc:	4611      	mov	r1, r2
 80014fe:	461a      	mov	r2, r3
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	460b      	mov	r3, r1
 8001506:	71bb      	strb	r3, [r7, #6]
 8001508:	4613      	mov	r3, r2
 800150a:	717b      	strb	r3, [r7, #5]
    BUCKET_NODE* bucket_node = first_bucket;
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <add_param_to_bucket+0xc8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	617b      	str	r3, [r7, #20]
    U16_LIST_NODE* param_node;
    U16 param_id;

    // create the param_id from the two 8-bit chunks
    param_id = (param_id_msb << BITS_IN_BYTE) | param_id_lsb;
 8001512:	79bb      	ldrb	r3, [r7, #6]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	797b      	ldrb	r3, [r7, #5]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21b      	sxth	r3, r3
 8001520:	827b      	strh	r3, [r7, #18]

    // check if there exists a bucket with this ID on this DAM in the bucket list
    while (bucket_node != NULL)
 8001522:	e00d      	b.n	8001540 <add_param_to_bucket+0x4c>
    {
        if ((bucket_node->bucket.dam_id == sending_dam)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	79fa      	ldrb	r2, [r7, #7]
 800152a:	429a      	cmp	r2, r3
 800152c:	d105      	bne.n	800153a <add_param_to_bucket+0x46>
            && (bucket_node->bucket.bucket_id == bucket_id))
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	785b      	ldrb	r3, [r3, #1]
 8001532:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001536:	429a      	cmp	r2, r3
 8001538:	d006      	beq.n	8001548 <add_param_to_bucket+0x54>
            // This is the correct bucket. Move on to the next step
            break;
        }

        // this is not the correct bucket. Try the next one
        bucket_node = bucket_node->next;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	617b      	str	r3, [r7, #20]
    while (bucket_node != NULL)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1ee      	bne.n	8001524 <add_param_to_bucket+0x30>
 8001546:	e000      	b.n	800154a <add_param_to_bucket+0x56>
            break;
 8001548:	bf00      	nop
    }

    // if the bucket does not exist, make a new one and use it
    if (bucket_node->next == NULL)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d115      	bne.n	800157e <add_param_to_bucket+0x8a>
    {
        bucket_node->next = (BUCKET_NODE*)malloc(sizeof(BUCKET_NODE));
 8001552:	2010      	movs	r0, #16
 8001554:	f003 fdaa 	bl	80050ac <malloc>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	60da      	str	r2, [r3, #12]
        bucket_node = bucket_node->next;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	617b      	str	r3, [r7, #20]

        // test if malloc failed
        if (bucket_node == NULL)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <add_param_to_bucket+0xba>
            // TODO handle a malloc error
            return;
        }

        // this is needed to make sure the list knows to stop at the end
        bucket_node->next = NULL;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
        bucket_node->bucket.param_ids = NULL;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
        bucket_node->bucket.ms_between_requests = 0;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2200      	movs	r2, #0
 800157c:	805a      	strh	r2, [r3, #2]
    }

    // malloc some new memory for the U16 node to store the parameter
    param_node = (U16_LIST_NODE*)malloc(sizeof(U16_LIST_NODE));
 800157e:	200c      	movs	r0, #12
 8001580:	f003 fd94 	bl	80050ac <malloc>
 8001584:	4603      	mov	r3, r0
 8001586:	60fb      	str	r3, [r7, #12]

    // test if malloc failed
    if (param_node == NULL)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d011      	beq.n	80015b2 <add_param_to_bucket+0xbe>
        return;
    }

    // add this param to the front of the param linked list. It can be added to
    // the front because order does not matter in this list
    param_node->next = bucket_node->bucket.param_ids->next;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	605a      	str	r2, [r3, #4]
    bucket_node->bucket.param_ids->next = param_node;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	605a      	str	r2, [r3, #4]

    // set the details of the param_node
    param_node->data = param_id;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8a7a      	ldrh	r2, [r7, #18]
 80015a4:	801a      	strh	r2, [r3, #0]
    param_node->pending_responce = FALSE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	721a      	strb	r2, [r3, #8]
 80015ac:	e002      	b.n	80015b4 <add_param_to_bucket+0xc0>
            return;
 80015ae:	bf00      	nop
 80015b0:	e000      	b.n	80015b4 <add_param_to_bucket+0xc0>
        return;
 80015b2:	bf00      	nop


}
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200000e4 	.word	0x200000e4

080015c0 <assign_bucket_to_frq>:
// assign_bucket_to_frq
//  This will take the inputted DAM and bucket ID and set the time to wait between each request
//  in ms. Designed to be called as a CAN command coming from a DAM
void assign_bucket_to_frq(U8 sending_dam, void* UNUSED,
    U8 bucket_id, U8 ms_between_requests_msb, U8 ms_between_requests_lsb, U8 UNUSED3)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6039      	str	r1, [r7, #0]
 80015c8:	4611      	mov	r1, r2
 80015ca:	461a      	mov	r2, r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	460b      	mov	r3, r1
 80015d2:	71bb      	strb	r3, [r7, #6]
 80015d4:	4613      	mov	r3, r2
 80015d6:	717b      	strb	r3, [r7, #5]
    BUCKET_NODE* bucket_node = first_bucket;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <assign_bucket_to_frq+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
    U16 ms_between_requests;

    // create the U16 for ms_between_requests out of the 2 U8s
    ms_between_requests = (ms_between_requests_msb << BITS_IN_BYTE) | ms_between_requests_lsb;
 80015de:	797b      	ldrb	r3, [r7, #5]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	7e3b      	ldrb	r3, [r7, #24]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	817b      	strh	r3, [r7, #10]

    // check if there exists a bucket with this ID on this DAM in the bucket list
    while (bucket_node != NULL)
 80015ee:	e010      	b.n	8001612 <assign_bucket_to_frq+0x52>
    {
        if ((bucket_node->bucket.dam_id == sending_dam)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d108      	bne.n	800160c <assign_bucket_to_frq+0x4c>
            && (bucket_node->bucket.bucket_id == bucket_id))
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	785b      	ldrb	r3, [r3, #1]
 80015fe:	79ba      	ldrb	r2, [r7, #6]
 8001600:	429a      	cmp	r2, r3
 8001602:	d103      	bne.n	800160c <assign_bucket_to_frq+0x4c>
        {
            // This is the correct bucket. Assign the ms_between_request variable in the struct as needed
            bucket_node->bucket.ms_between_requests = ms_between_requests;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	897a      	ldrh	r2, [r7, #10]
 8001608:	805a      	strh	r2, [r3, #2]
            return;
 800160a:	e005      	b.n	8001618 <assign_bucket_to_frq+0x58>
        }

        // this is not the correct bucket. Try the next one
        bucket_node = bucket_node->next;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60fb      	str	r3, [r7, #12]
    while (bucket_node != NULL)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1eb      	bne.n	80015f0 <assign_bucket_to_frq+0x30>
    }

    // The correct bucket was not found. Return
}
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200000e4 	.word	0x200000e4

08001628 <request_all_buckets>:

// request_all_buckets
//  Function to run through the list of buckets and checks if they need to be requested. If they do,
//  request it
void request_all_buckets()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af04      	add	r7, sp, #16
    BUCKET_NODE* bucket_node = first_bucket;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <request_all_buckets+0x80>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	607b      	str	r3, [r7, #4]
    U16_LIST_NODE* param_node;

    while(bucket_node != NULL)
 8001634:	e031      	b.n	800169a <request_all_buckets+0x72>
    {
        // check if it is the correct time to send a new message. 0ms between requests means the
        // bucket is not fully initialized
        if ((bucket_node->bucket.ms_between_requests != 0)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	885b      	ldrh	r3, [r3, #2]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02a      	beq.n	8001694 <request_all_buckets+0x6c>
            && (HAL_GetTick() >= bucket_node->bucket.last_request + bucket_node->bucket.ms_between_requests))
 800163e:	f000 fc83 	bl	8001f48 <HAL_GetTick>
 8001642:	4601      	mov	r1, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	8852      	ldrh	r2, [r2, #2]
 800164c:	4413      	add	r3, r2
 800164e:	4299      	cmp	r1, r3
 8001650:	d320      	bcc.n	8001694 <request_all_buckets+0x6c>
        {
            // send the command to request the bucket
            if (send_can_command(PRIO_HIGH, bucket_node->bucket.dam_id,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7819      	ldrb	r1, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	785a      	ldrb	r2, [r3, #1]
 800165a:	2300      	movs	r3, #0
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	2300      	movs	r3, #0
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	2300      	movs	r3, #0
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4613      	mov	r3, r2
 8001668:	2206      	movs	r2, #6
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff f82e 	bl	80006cc <send_can_command>
            {
                // TODO error handling
            }

            // set the pending responce flag for each parameter in this bucket to true
            param_node = bucket_node->bucket.param_ids;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	603b      	str	r3, [r7, #0]
            while (param_node != NULL)
 8001676:	e005      	b.n	8001684 <request_all_buckets+0x5c>
            {
                param_node->pending_responce = TRUE;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2201      	movs	r2, #1
 800167c:	721a      	strb	r2, [r3, #8]
                param_node = param_node->next;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	603b      	str	r3, [r7, #0]
            while (param_node != NULL)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f6      	bne.n	8001678 <request_all_buckets+0x50>
            }

            // update the last request tick
            bucket_node->bucket.last_request = HAL_GetTick();
 800168a:	f000 fc5d 	bl	8001f48 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	605a      	str	r2, [r3, #4]
        }

        // move on to the next bucket
        bucket_node = bucket_node->next;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	607b      	str	r3, [r7, #4]
    while(bucket_node != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1ca      	bne.n	8001636 <request_all_buckets+0xe>
    }
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200000e4 	.word	0x200000e4

080016ac <store_new_data>:
// store_new_data
//  Function to figure out what data stored in the GopherCAN parameters is new
//  based on data in the bucket linked list. If it deturmines the data is new,
//  store that data to the data ring buffer
void store_new_data()
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
    BUCKET_NODE* bucket_node = first_bucket;
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <store_new_data+0x68>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]
    U16_LIST_NODE* param_node;
    CAN_INFO_STRUCT* param_info;

    // For each parameter in each bucket, check if the last time it was
    // recieved is sooner than its bucket was requested and has not been already written
    while (bucket_node != NULL)
 80016b8:	e024      	b.n	8001704 <store_new_data+0x58>
    {
        param_node = bucket_node->bucket.param_ids;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	60bb      	str	r3, [r7, #8]

        // run through each parameter in the bucket
        while (param_node != NULL)
 80016c0:	e01a      	b.n	80016f8 <store_new_data+0x4c>
        {
            // get the CAN_INFO_STRUCT related to this parameter. Data stores the parameter ID in the node struct
            param_info = (CAN_INFO_STRUCT*)(all_parameter_structs[param_node->data]);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <store_new_data+0x6c>)
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	607b      	str	r3, [r7, #4]

            // if the parameter is pending an update and the last RX of the param is after the
            // request was sent, it needs to be added to RAM
            if (param_node->pending_responce == TRUE
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	7a1b      	ldrb	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d10c      	bne.n	80016f2 <store_new_data+0x46>
                && param_info->last_rx >= bucket_node->bucket.last_request)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d306      	bcc.n	80016f2 <store_new_data+0x46>
            {
                // add the param data to RAM
                add_param_to_ram(param_node, bucket_node);
 80016e4:	68f9      	ldr	r1, [r7, #12]
 80016e6:	68b8      	ldr	r0, [r7, #8]
 80016e8:	f000 f818 	bl	800171c <add_param_to_ram>

                // disable the pending responce flag
                param_node->pending_responce = FALSE;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2200      	movs	r2, #0
 80016f0:	721a      	strb	r2, [r3, #8]
            }

            // move on to the next parameter
            param_node = param_node->next;
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	60bb      	str	r3, [r7, #8]
        while (param_node != NULL)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1e1      	bne.n	80016c2 <store_new_data+0x16>
        }
        
        // move on to the next bucket
        bucket_node = bucket_node->next;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	60fb      	str	r3, [r7, #12]
    while (bucket_node != NULL)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1d7      	bne.n	80016ba <store_new_data+0xe>
    }
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200000e4 	.word	0x200000e4
 8001718:	20000000 	.word	0x20000000

0800171c <add_param_to_ram>:


// add_param_to_ram
//  Function to add the data of a specific parameter to the RAM buffer
void add_param_to_ram(U16_LIST_NODE* param_node, BUCKET_NODE* bucket_node)
{
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b08f      	sub	sp, #60	; 0x3c
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
    //  The size of the data can be obtained using the luckup table in GopherCAN

    DATA_INFO_NODE* data_node;
    CAN_INFO_STRUCT* can_param_struct;

    can_param_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[param_node->data]);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <add_param_to_ram+0x18c>)
 800172e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001732:	637b      	str	r3, [r7, #52]	; 0x34

    // Choose the correct type of data node based on the parameter data type, then malloc the memory needed
    switch (parameter_data_types[param_node->data])
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <add_param_to_ram+0x190>)
 800173c:	5c9b      	ldrb	r3, [r3, r2]
 800173e:	3b01      	subs	r3, #1
 8001740:	2b08      	cmp	r3, #8
 8001742:	f200 809a 	bhi.w	800187a <add_param_to_ram+0x15e>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <add_param_to_ram+0x30>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	08001771 	.word	0x08001771
 8001750:	0800178d 	.word	0x0800178d
 8001754:	080017a9 	.word	0x080017a9
 8001758:	080017c5 	.word	0x080017c5
 800175c:	080017e5 	.word	0x080017e5
 8001760:	08001803 	.word	0x08001803
 8001764:	08001821 	.word	0x08001821
 8001768:	0800183d 	.word	0x0800183d
 800176c:	0800185d 	.word	0x0800185d
	{
	case UNSIGNED8: ;
        U8_DATA_NODE* u8_data_node = (U8_DATA_NODE*)malloc(sizeof(U8_DATA_NODE));
 8001770:	2010      	movs	r0, #16
 8001772:	f003 fc9b 	bl	80050ac <malloc>
 8001776:	4603      	mov	r3, r0
 8001778:	633b      	str	r3, [r7, #48]	; 0x30

        // check for malloc failure
        if (u8_data_node == NULL)
 800177a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177c:	2b00      	cmp	r3, #0
 800177e:	d07e      	beq.n	800187e <add_param_to_ram+0x162>
        {
            return;
        }

		u8_data_node->data = ((U8_CAN_STRUCT*)(can_param_struct))->data;
 8001780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001782:	799a      	ldrb	r2, [r3, #6]
 8001784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001786:	731a      	strb	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u8_data_node;
 8001788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c

	case UNSIGNED16: ;
		U16_DATA_NODE* u16_data_node = (U16_DATA_NODE*)malloc(sizeof(U16_DATA_NODE));
 800178c:	2010      	movs	r0, #16
 800178e:	f003 fc8d 	bl	80050ac <malloc>
 8001792:	4603      	mov	r3, r0
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28

        // check for malloc failure
        if (u16_data_node == NULL)
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	2b00      	cmp	r3, #0
 800179a:	d072      	beq.n	8001882 <add_param_to_ram+0x166>
        {
            return;
        }

		u16_data_node->data = ((U16_CAN_STRUCT*)(can_param_struct))->data;
 800179c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179e:	88da      	ldrh	r2, [r3, #6]
 80017a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a2:	819a      	strh	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u16_data_node;
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c

	case UNSIGNED32: ;
		U32_DATA_NODE* u32_data_node = (U32_DATA_NODE*)malloc(sizeof(U32_DATA_NODE));
 80017a8:	2010      	movs	r0, #16
 80017aa:	f003 fc7f 	bl	80050ac <malloc>
 80017ae:	4603      	mov	r3, r0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24

        // check for malloc failure
        if (u32_data_node == NULL)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d066      	beq.n	8001886 <add_param_to_ram+0x16a>
        {
            return;
        }

		u32_data_node->data = ((U32_CAN_STRUCT*)(can_param_struct))->data;
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u32_data_node;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c

	case UNSIGNED64: ;
		U64_DATA_NODE* u64_data_node = (U64_DATA_NODE*)malloc(sizeof(U64_DATA_NODE));
 80017c4:	2018      	movs	r0, #24
 80017c6:	f003 fc71 	bl	80050ac <malloc>
 80017ca:	4603      	mov	r3, r0
 80017cc:	623b      	str	r3, [r7, #32]

        // check for malloc failure
        if (u64_data_node == NULL)
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d05a      	beq.n	800188a <add_param_to_ram+0x16e>
        {
            return;
        }

		u64_data_node->data = ((U64_CAN_STRUCT*)(can_param_struct))->data;
 80017d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80017da:	6a3a      	ldr	r2, [r7, #32]
 80017dc:	e9c2 3404 	strd	r3, r4, [r2, #16]
        data_node = (DATA_INFO_NODE*)u64_data_node;
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c

	case SIGNED8: ;
		S8_DATA_NODE* s8_data_node = (S8_DATA_NODE*)malloc(sizeof(S8_DATA_NODE));
 80017e4:	2010      	movs	r0, #16
 80017e6:	f003 fc61 	bl	80050ac <malloc>
 80017ea:	4603      	mov	r3, r0
 80017ec:	61fb      	str	r3, [r7, #28]

        // check for malloc failure
        if (s8_data_node == NULL)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d04c      	beq.n	800188e <add_param_to_ram+0x172>
        {
            return;
        }

		s8_data_node->data = ((S8_CAN_STRUCT*)(can_param_struct))->data;
 80017f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f6:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	731a      	strb	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s8_data_node;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c

	case SIGNED16: ;
		S16_DATA_NODE* s16_data_node = (S16_DATA_NODE*)malloc(sizeof(S16_DATA_NODE));
 8001802:	2010      	movs	r0, #16
 8001804:	f003 fc52 	bl	80050ac <malloc>
 8001808:	4603      	mov	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]

        // check for malloc failure
        if (s16_data_node == NULL)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d03f      	beq.n	8001892 <add_param_to_ram+0x176>
        {
            return;
        }

		s16_data_node->data = ((S16_CAN_STRUCT*)(can_param_struct))->data;
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	819a      	strh	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s16_data_node;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c

	case SIGNED32: ;
		S32_DATA_NODE* s32_data_node = (S32_DATA_NODE*)malloc(sizeof(S32_DATA_NODE));
 8001820:	2010      	movs	r0, #16
 8001822:	f003 fc43 	bl	80050ac <malloc>
 8001826:	4603      	mov	r3, r0
 8001828:	617b      	str	r3, [r7, #20]

        // check for malloc failure
        if (s32_data_node == NULL)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d032      	beq.n	8001896 <add_param_to_ram+0x17a>
        {
            return;
        }

		s32_data_node->data = ((S32_CAN_STRUCT*)(can_param_struct))->data;
 8001830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s32_data_node;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c

	case SIGNED64: ;
		S64_DATA_NODE* s64_data_node = (S64_DATA_NODE*)malloc(sizeof(S64_DATA_NODE));
 800183c:	2018      	movs	r0, #24
 800183e:	f003 fc35 	bl	80050ac <malloc>
 8001842:	4603      	mov	r3, r0
 8001844:	613b      	str	r3, [r7, #16]

        // check for malloc failure
        if (s64_data_node == NULL)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d026      	beq.n	800189a <add_param_to_ram+0x17e>
        {
            return;
        }

		s64_data_node->data = ((S64_CAN_STRUCT*)(can_param_struct))->data;
 800184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	e9c2 3404 	strd	r3, r4, [r2, #16]
        data_node = (DATA_INFO_NODE*)s64_data_node;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c

	case FLOATING: ;
		FLOAT_DATA_NODE* float_data_node = (FLOAT_DATA_NODE*)malloc(sizeof(FLOAT_DATA_NODE));
 800185c:	2010      	movs	r0, #16
 800185e:	f003 fc25 	bl	80050ac <malloc>
 8001862:	4603      	mov	r3, r0
 8001864:	60fb      	str	r3, [r7, #12]

        // check for malloc failure
        if (float_data_node == NULL)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d018      	beq.n	800189e <add_param_to_ram+0x182>
        {
            return;
        }

		float_data_node->data = ((FLOAT_CAN_STRUCT*)(can_param_struct))->data;
 800186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)float_data_node;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c

	default:
		// the datatype is not found for some reason
        return;
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	e010      	b.n	80018a0 <add_param_to_ram+0x184>
            return;
 800187e:	bf00      	nop
 8001880:	e00e      	b.n	80018a0 <add_param_to_ram+0x184>
            return;
 8001882:	bf00      	nop
 8001884:	e00c      	b.n	80018a0 <add_param_to_ram+0x184>
            return;
 8001886:	bf00      	nop
 8001888:	e00a      	b.n	80018a0 <add_param_to_ram+0x184>
            return;
 800188a:	bf00      	nop
 800188c:	e008      	b.n	80018a0 <add_param_to_ram+0x184>
            return;
 800188e:	bf00      	nop
 8001890:	e006      	b.n	80018a0 <add_param_to_ram+0x184>
            return;
 8001892:	bf00      	nop
 8001894:	e004      	b.n	80018a0 <add_param_to_ram+0x184>
            return;
 8001896:	bf00      	nop
 8001898:	e002      	b.n	80018a0 <add_param_to_ram+0x184>
            return;
 800189a:	bf00      	nop
 800189c:	e000      	b.n	80018a0 <add_param_to_ram+0x184>
            return;
 800189e:	bf00      	nop

    // add the new node to the front of the list, after the head node
    data_node->next = ram_data_head->next;
    ram_data_head->next = data_node;

}
 80018a0:	373c      	adds	r7, #60	; 0x3c
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000030 	.word	0x20000030

080018b0 <move_ram_data_to_storage_init>:


// move_ram_data_to_storage_init
//  TODO DOCS
void move_ram_data_to_storage_init(DATA_INFO_NODE* storage_ptr)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    ram_data_head_ptr = storage_ptr;
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <move_ram_data_to_storage_init+0x1c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]

    // TODO file name, metadata, lots of other things im sure
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200047bc 	.word	0x200047bc

080018d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a07      	ldr	r2, [pc, #28]	; (80018fc <vApplicationGetIdleTaskMemory+0x2c>)
 80018e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <vApplicationGetIdleTaskMemory+0x30>)
 80018e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2280      	movs	r2, #128	; 0x80
 80018ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200000e8 	.word	0x200000e8
 8001900:	2000013c 	.word	0x2000013c

08001904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b08e      	sub	sp, #56	; 0x38
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190a:	f000 fafc 	bl	8001f06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800190e:	f000 f83d 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001912:	f000 f903 	bl	8001b1c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001916:	f000 f895 	bl	8001a44 <MX_CAN1_Init>
  MX_CAN2_Init();
 800191a:	f000 f8c9 	bl	8001ab0 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  dlm_init(&hcan1, &hcan2);
 800191e:	4915      	ldr	r1, [pc, #84]	; (8001974 <main+0x70>)
 8001920:	4815      	ldr	r0, [pc, #84]	; (8001978 <main+0x74>)
 8001922:	f7ff fd1f 	bl	8001364 <dlm_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of can_loop_task */
  osThreadDef(can_loop_task, can_loop, osPriorityHigh, 0, 128);
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <main+0x78>)
 8001928:	f107 041c 	add.w	r4, r7, #28
 800192c:	461d      	mov	r5, r3
 800192e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001932:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  can_loop_taskHandle = osThreadCreate(osThread(can_loop_task), NULL);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f002 f980 	bl	8003c46 <osThreadCreate>
 8001946:	4602      	mov	r2, r0
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <main+0x7c>)
 800194a:	601a      	str	r2, [r3, #0]

  /* definition and creation of dlm_main_loop */
  osThreadDef(dlm_main_loop, dlm_main, osPriorityNormal, 0, 128);
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <main+0x80>)
 800194e:	463c      	mov	r4, r7
 8001950:	461d      	mov	r5, r3
 8001952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001956:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800195a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dlm_main_loopHandle = osThreadCreate(osThread(dlm_main_loop), NULL);
 800195e:	463b      	mov	r3, r7
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f002 f96f 	bl	8003c46 <osThreadCreate>
 8001968:	4602      	mov	r2, r0
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <main+0x84>)
 800196c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800196e:	f002 f963 	bl	8003c38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001972:	e7fe      	b.n	8001972 <main+0x6e>
 8001974:	200047c0 	.word	0x200047c0
 8001978:	200047f0 	.word	0x200047f0
 800197c:	080051cc 	.word	0x080051cc
 8001980:	200047ec 	.word	0x200047ec
 8001984:	080051f8 	.word	0x080051f8
 8001988:	200047e8 	.word	0x200047e8

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b094      	sub	sp, #80	; 0x50
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	2234      	movs	r2, #52	; 0x34
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fb8e 	bl	80050bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <SystemClock_Config+0xb0>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <SystemClock_Config+0xb0>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <SystemClock_Config+0xb0>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <SystemClock_Config+0xb4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019d0:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <SystemClock_Config+0xb4>)
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <SystemClock_Config+0xb4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e4:	2302      	movs	r3, #2
 80019e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ec:	2310      	movs	r3, #16
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 fa01 	bl	8002e00 <HAL_RCC_OscConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001a04:	f000 f8c8 	bl	8001b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a08:	230f      	movs	r3, #15
 8001a0a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 fc9a 	bl	800335c <HAL_RCC_ClockConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001a2e:	f000 f8b3 	bl	8001b98 <Error_Handler>
  }
}
 8001a32:	bf00      	nop
 8001a34:	3750      	adds	r7, #80	; 0x50
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40007000 	.word	0x40007000

08001a44 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a4a:	4a18      	ldr	r2, [pc, #96]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a50:	2202      	movs	r2, #2
 8001a52:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a62:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001a66:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_CAN1_Init+0x64>)
 8001a94:	f000 fa8c 	bl	8001fb0 <HAL_CAN_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001a9e:	f000 f87b 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200047f0 	.word	0x200047f0
 8001aac:	40006400 	.word	0x40006400

08001ab0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001ab6:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <MX_CAN2_Init+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001abc:	2202      	movs	r2, #2
 8001abe:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001ace:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001ad2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <MX_CAN2_Init+0x64>)
 8001b00:	f000 fa56 	bl	8001fb0 <HAL_CAN_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001b0a:	f000 f845 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200047c0 	.word	0x200047c0
 8001b18:	40006800 	.word	0x40006800

08001b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_GPIO_Init+0x2c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <MX_GPIO_Init+0x2c>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_GPIO_Init+0x2c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]

}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <can_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_can_loop */
void can_loop(void const * argument)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  can_service_loop();
 8001b54:	f7ff fc78 	bl	8001448 <can_service_loop>
    osDelay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f002 f8c0 	bl	8003cde <osDelay>
  {
 8001b5e:	e7f9      	b.n	8001b54 <can_loop+0x8>

08001b60 <dlm_main>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dlm_main */
void dlm_main(void const * argument)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dlm_main */
  /* Infinite loop */
  for(;;)
  {
	  manage_data_aquisition();
 8001b68:	f7ff fc66 	bl	8001438 <manage_data_aquisition>
    osDelay(1);
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f002 f8b6 	bl	8003cde <osDelay>
  {
 8001b72:	e7f9      	b.n	8001b68 <dlm_main+0x8>

08001b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b86:	f000 f9cb 	bl	8001f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40001000 	.word	0x40001000

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <Error_Handler+0x6>

08001ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_MspInit+0x4c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_MspInit+0x4c>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_MspInit+0x4c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	210f      	movs	r1, #15
 8001bda:	f06f 0001 	mvn.w	r0, #1
 8001bde:	f000 ff3b 	bl	8002a58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	; 0x38
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a43      	ldr	r2, [pc, #268]	; (8001d1c <HAL_CAN_MspInit+0x12c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d132      	bne.n	8001c78 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c12:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <HAL_CAN_MspInit+0x130>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a41      	ldr	r2, [pc, #260]	; (8001d20 <HAL_CAN_MspInit+0x130>)
 8001c1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c1c:	4b40      	ldr	r3, [pc, #256]	; (8001d20 <HAL_CAN_MspInit+0x130>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10b      	bne.n	8001c3c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c24:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	4a3e      	ldr	r2, [pc, #248]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c30:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	623b      	str	r3, [r7, #32]
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a38      	ldr	r2, [pc, #224]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001c42:	f043 0302 	orr.w	r3, r3, #2
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c66:	2309      	movs	r3, #9
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	482d      	ldr	r0, [pc, #180]	; (8001d28 <HAL_CAN_MspInit+0x138>)
 8001c72:	f000 ff1b 	bl	8002aac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001c76:	e04d      	b.n	8001d14 <HAL_CAN_MspInit+0x124>
  else if(hcan->Instance==CAN2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <HAL_CAN_MspInit+0x13c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d148      	bne.n	8001d14 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a27      	ldr	r2, [pc, #156]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001c88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001ca0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_CAN_MspInit+0x130>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_CAN_MspInit+0x130>)
 8001cba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <HAL_CAN_MspInit+0x130>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d10b      	bne.n	8001cdc <HAL_CAN_MspInit+0xec>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001cca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cce:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001ce2:	f043 0302 	orr.w	r3, r3, #2
 8001ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_CAN_MspInit+0x134>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cf4:	2360      	movs	r3, #96	; 0x60
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001d04:	2309      	movs	r3, #9
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4806      	ldr	r0, [pc, #24]	; (8001d28 <HAL_CAN_MspInit+0x138>)
 8001d10:	f000 fecc 	bl	8002aac <HAL_GPIO_Init>
}
 8001d14:	bf00      	nop
 8001d16:	3738      	adds	r7, #56	; 0x38
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40006400 	.word	0x40006400
 8001d20:	2000033c 	.word	0x2000033c
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40006800 	.word	0x40006800

08001d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	2036      	movs	r0, #54	; 0x36
 8001d46:	f000 fe87 	bl	8002a58 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d4a:	2036      	movs	r0, #54	; 0x36
 8001d4c:	f000 fea0 	bl	8002a90 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_InitTick+0x9c>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <HAL_InitTick+0x9c>)
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_InitTick+0x9c>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d68:	f107 0210 	add.w	r2, r7, #16
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 fcb0 	bl	80036d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d78:	f001 fc9a 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8001d7c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <HAL_InitTick+0xa0>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0c9b      	lsrs	r3, r3, #18
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_InitTick+0xa4>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <HAL_InitTick+0xa8>)
 8001d90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_InitTick+0xa4>)
 8001d94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_InitTick+0xa4>)
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_InitTick+0xa4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_InitTick+0xa4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001dac:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <HAL_InitTick+0xa4>)
 8001dae:	f001 fcc5 	bl	800373c <HAL_TIM_Base_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d104      	bne.n	8001dc2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001db8:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <HAL_InitTick+0xa4>)
 8001dba:	f001 fcf5 	bl	80037a8 <HAL_TIM_Base_Start_IT>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	e000      	b.n	8001dc4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3730      	adds	r7, #48	; 0x30
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	431bde83 	.word	0x431bde83
 8001dd4:	20004818 	.word	0x20004818
 8001dd8:	40001000 	.word	0x40001000

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <NMI_Handler+0x4>

08001de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <MemManage_Handler+0x4>

08001dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <TIM6_DAC_IRQHandler+0x10>)
 8001e0e:	f001 fcf5 	bl	80037fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20004818 	.word	0x20004818

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f003 f904 	bl	8005058 <__errno>
 8001e50:	4602      	mov	r2, r0
 8001e52:	230c      	movs	r3, #12
 8001e54:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20080000 	.word	0x20080000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	20000340 	.word	0x20000340
 8001e84:	20004860 	.word	0x20004860

08001e88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <SystemInit+0x28>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <SystemInit+0x28>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SystemInit+0x28>)
 8001e9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ea2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001eb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eba:	e003      	b.n	8001ec4 <LoopCopyDataInit>

08001ebc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ebe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ec0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ec2:	3104      	adds	r1, #4

08001ec4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ec4:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ec8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ecc:	d3f6      	bcc.n	8001ebc <CopyDataInit>
  ldr  r2, =_sbss
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ed0:	e002      	b.n	8001ed8 <LoopFillZerobss>

08001ed2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ed2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ed4:	f842 3b04 	str.w	r3, [r2], #4

08001ed8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001edc:	d3f9      	bcc.n	8001ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ede:	f7ff ffd3 	bl	8001e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f003 f8bf 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7ff fd0d 	bl	8001904 <main>
  bx  lr    
 8001eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001ef0:	08005244 	.word	0x08005244
  ldr  r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ef8:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 8001efc:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8001f00:	20004860 	.word	0x20004860

08001f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC_IRQHandler>

08001f06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f000 fd99 	bl	8002a42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff ff0d 	bl	8001d30 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f16:	f7ff fe43 	bl	8001ba0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x20>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_IncTick+0x24>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <HAL_IncTick+0x24>)
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	2000004c 	.word	0x2000004c
 8001f44:	20004858 	.word	0x20004858

08001f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_GetTick+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20004858 	.word	0x20004858

08001f60 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_SetTickFreq+0x48>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	79fa      	ldrb	r2, [r7, #7]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d012      	beq.n	8001f9e <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_SetTickFreq+0x48>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_SetTickFreq+0x48>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_SetTickFreq+0x4c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fed1 	bl	8001d30 <HAL_InitTick>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8001f98:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <HAL_SetTickFreq+0x48>)
 8001f9a:	7bbb      	ldrb	r3, [r7, #14]
 8001f9c:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000004c 	.word	0x2000004c
 8001fac:	20000048 	.word	0x20000048

08001fb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0ed      	b.n	800219e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff fe0e 	bl	8001bf0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0202 	bic.w	r2, r2, #2
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe4:	f7ff ffb0 	bl	8001f48 <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fea:	e012      	b.n	8002012 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fec:	f7ff ffac 	bl	8001f48 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b0a      	cmp	r3, #10
 8001ff8:	d90b      	bls.n	8002012 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2205      	movs	r2, #5
 800200a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0c5      	b.n	800219e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e5      	bne.n	8001fec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002030:	f7ff ff8a 	bl	8001f48 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002036:	e012      	b.n	800205e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002038:	f7ff ff86 	bl	8001f48 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b0a      	cmp	r3, #10
 8002044:	d90b      	bls.n	800205e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2205      	movs	r2, #5
 8002056:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e09f      	b.n	800219e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0e5      	beq.n	8002038 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7e1b      	ldrb	r3, [r3, #24]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d108      	bne.n	8002086 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	e007      	b.n	8002096 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7e5b      	ldrb	r3, [r3, #25]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d108      	bne.n	80020b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	e007      	b.n	80020c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7e9b      	ldrb	r3, [r3, #26]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d108      	bne.n	80020da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0220 	orr.w	r2, r2, #32
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e007      	b.n	80020ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0220 	bic.w	r2, r2, #32
 80020e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	7edb      	ldrb	r3, [r3, #27]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d108      	bne.n	8002104 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0210 	bic.w	r2, r2, #16
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e007      	b.n	8002114 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0210 	orr.w	r2, r2, #16
 8002112:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7f1b      	ldrb	r3, [r3, #28]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d108      	bne.n	800212e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0208 	orr.w	r2, r2, #8
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e007      	b.n	800213e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0208 	bic.w	r2, r2, #8
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7f5b      	ldrb	r3, [r3, #29]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d108      	bne.n	8002158 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0204 	orr.w	r2, r2, #4
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e007      	b.n	8002168 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0204 	bic.w	r2, r2, #4
 8002166:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	ea42 0103 	orr.w	r1, r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021be:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d003      	beq.n	80021ce <HAL_CAN_ConfigFilter+0x26>
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	f040 80c7 	bne.w	800235c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a69      	ldr	r2, [pc, #420]	; (8002378 <HAL_CAN_ConfigFilter+0x1d0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d001      	beq.n	80021dc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80021d8:	4b68      	ldr	r3, [pc, #416]	; (800237c <HAL_CAN_ConfigFilter+0x1d4>)
 80021da:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	4a63      	ldr	r2, [pc, #396]	; (800237c <HAL_CAN_ConfigFilter+0x1d4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d111      	bne.n	8002218 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021fa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	431a      	orrs	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d123      	bne.n	800228a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43db      	mvns	r3, r3
 800224c:	401a      	ands	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002264:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3248      	adds	r2, #72	; 0x48
 800226a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800227e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002280:	6979      	ldr	r1, [r7, #20]
 8002282:	3348      	adds	r3, #72	; 0x48
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d122      	bne.n	80022d8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	431a      	orrs	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3248      	adds	r2, #72	; 0x48
 80022b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022ce:	6979      	ldr	r1, [r7, #20]
 80022d0:	3348      	adds	r3, #72	; 0x48
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80022f2:	e007      	b.n	8002304 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800231e:	e007      	b.n	8002330 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	431a      	orrs	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	431a      	orrs	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800234e:	f023 0201 	bic.w	r2, r3, #1
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e006      	b.n	800236a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
  }
}
 800236a:	4618      	mov	r0, r3
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40003400 	.word	0x40003400
 800237c:	40006400 	.word	0x40006400

08002380 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d12e      	bne.n	80023f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ac:	f7ff fdcc 	bl	8001f48 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023b2:	e012      	b.n	80023da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023b4:	f7ff fdc8 	bl	8001f48 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b0a      	cmp	r3, #10
 80023c0:	d90b      	bls.n	80023da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2205      	movs	r2, #5
 80023d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e012      	b.n	8002400 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e5      	bne.n	80023b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e006      	b.n	8002400 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
  }
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002426:	7ffb      	ldrb	r3, [r7, #31]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d003      	beq.n	8002434 <HAL_CAN_AddTxMessage+0x2c>
 800242c:	7ffb      	ldrb	r3, [r7, #31]
 800242e:	2b02      	cmp	r3, #2
 8002430:	f040 80b8 	bne.w	80025a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80a0 	beq.w	8002594 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	0e1b      	lsrs	r3, r3, #24
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d907      	bls.n	8002474 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e09e      	b.n	80025b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002474:	2201      	movs	r2, #1
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	409a      	lsls	r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10d      	bne.n	80024a2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002490:	68f9      	ldr	r1, [r7, #12]
 8002492:	6809      	ldr	r1, [r1, #0]
 8002494:	431a      	orrs	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3318      	adds	r3, #24
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	440b      	add	r3, r1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e00f      	b.n	80024c2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024b2:	68f9      	ldr	r1, [r7, #12]
 80024b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3318      	adds	r3, #24
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	440b      	add	r3, r1
 80024c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3318      	adds	r3, #24
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	440b      	add	r3, r1
 80024d2:	3304      	adds	r3, #4
 80024d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	7d1b      	ldrb	r3, [r3, #20]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d111      	bne.n	8002502 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3318      	adds	r3, #24
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	4413      	add	r3, r2
 80024ea:	3304      	adds	r3, #4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3318      	adds	r3, #24
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	440b      	add	r3, r1
 80024fe:	3304      	adds	r3, #4
 8002500:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3307      	adds	r3, #7
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	061a      	lsls	r2, r3, #24
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3306      	adds	r3, #6
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3305      	adds	r3, #5
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	4313      	orrs	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	3204      	adds	r2, #4
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	4610      	mov	r0, r2
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	6811      	ldr	r1, [r2, #0]
 800252a:	ea43 0200 	orr.w	r2, r3, r0
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	440b      	add	r3, r1
 8002534:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002538:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3303      	adds	r3, #3
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	061a      	lsls	r2, r3, #24
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3302      	adds	r3, #2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	041b      	lsls	r3, r3, #16
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3301      	adds	r3, #1
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	4313      	orrs	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	4610      	mov	r0, r2
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	6811      	ldr	r1, [r2, #0]
 8002560:	ea43 0200 	orr.w	r2, r3, r0
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	440b      	add	r3, r1
 800256a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800256e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3318      	adds	r3, #24
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	4413      	add	r3, r2
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6811      	ldr	r1, [r2, #0]
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3318      	adds	r3, #24
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	440b      	add	r3, r1
 800258e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e00e      	b.n	80025b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e006      	b.n	80025b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80025be:	b480      	push	{r7}
 80025c0:	b085      	sub	sp, #20
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80025d2:	7afb      	ldrb	r3, [r7, #11]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d002      	beq.n	80025de <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80025d8:	7afb      	ldrb	r3, [r7, #11]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d11d      	bne.n	800261a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3301      	adds	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3301      	adds	r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800263c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d003      	beq.n	800264c <HAL_CAN_GetRxMessage+0x24>
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b02      	cmp	r3, #2
 8002648:	f040 80f3 	bne.w	8002832 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10e      	bne.n	8002670 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d116      	bne.n	800268e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0e7      	b.n	8002840 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d107      	bne.n	800268e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0d8      	b.n	8002840 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	331b      	adds	r3, #27
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	4413      	add	r3, r2
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0204 	and.w	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10c      	bne.n	80026c6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	331b      	adds	r3, #27
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	4413      	add	r3, r2
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	0d5b      	lsrs	r3, r3, #21
 80026bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e00b      	b.n	80026de <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	331b      	adds	r3, #27
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	08db      	lsrs	r3, r3, #3
 80026d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	331b      	adds	r3, #27
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4413      	add	r3, r2
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0202 	and.w	r2, r3, #2
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	331b      	adds	r3, #27
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	4413      	add	r3, r2
 8002700:	3304      	adds	r3, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 020f 	and.w	r2, r3, #15
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	331b      	adds	r3, #27
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	4413      	add	r3, r2
 8002718:	3304      	adds	r3, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b2da      	uxtb	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	331b      	adds	r3, #27
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	4413      	add	r3, r2
 8002730:	3304      	adds	r3, #4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	b29a      	uxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	4413      	add	r3, r2
 8002746:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	4413      	add	r3, r2
 800275c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0a1a      	lsrs	r2, r3, #8
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	4413      	add	r3, r2
 8002776:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0c1a      	lsrs	r2, r3, #16
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	3302      	adds	r3, #2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4413      	add	r3, r2
 8002790:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0e1a      	lsrs	r2, r3, #24
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	3303      	adds	r3, #3
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	3304      	adds	r3, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0a1a      	lsrs	r2, r3, #8
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	3305      	adds	r3, #5
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	4413      	add	r3, r2
 80027dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0c1a      	lsrs	r2, r3, #16
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3306      	adds	r3, #6
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e1a      	lsrs	r2, r3, #24
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3307      	adds	r3, #7
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d108      	bne.n	800281e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0220 	orr.w	r2, r2, #32
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	e007      	b.n	800282e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0220 	orr.w	r2, r2, #32
 800282c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e006      	b.n	8002840 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002862:	7afb      	ldrb	r3, [r7, #11]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d002      	beq.n	800286e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002868:	7afb      	ldrb	r3, [r7, #11]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d10f      	bne.n	800288e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e005      	b.n	800288e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d002      	beq.n	80028ba <HAL_CAN_ActivateNotification+0x1e>
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d109      	bne.n	80028ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6959      	ldr	r1, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e006      	b.n	80028dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
  }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <__NVIC_SetPriorityGrouping+0x40>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002904:	4013      	ands	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <__NVIC_SetPriorityGrouping+0x44>)
 8002912:	4313      	orrs	r3, r2
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <__NVIC_SetPriorityGrouping+0x40>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00
 800292c:	05fa0000 	.word	0x05fa0000

08002930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <__NVIC_GetPriorityGrouping+0x18>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	f003 0307 	and.w	r3, r3, #7
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	2b00      	cmp	r3, #0
 800295c:	db0b      	blt.n	8002976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	f003 021f 	and.w	r2, r3, #31
 8002964:	4907      	ldr	r1, [pc, #28]	; (8002984 <__NVIC_EnableIRQ+0x38>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	2001      	movs	r0, #1
 800296e:	fa00 f202 	lsl.w	r2, r0, r2
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000e100 	.word	0xe000e100

08002988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	2b00      	cmp	r3, #0
 800299a:	db0a      	blt.n	80029b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	490c      	ldr	r1, [pc, #48]	; (80029d4 <__NVIC_SetPriority+0x4c>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	440b      	add	r3, r1
 80029ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b0:	e00a      	b.n	80029c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4908      	ldr	r1, [pc, #32]	; (80029d8 <__NVIC_SetPriority+0x50>)
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	3b04      	subs	r3, #4
 80029c0:	0112      	lsls	r2, r2, #4
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	440b      	add	r3, r1
 80029c6:	761a      	strb	r2, [r3, #24]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000e100 	.word	0xe000e100
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f1c3 0307 	rsb	r3, r3, #7
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	bf28      	it	cs
 80029fa:	2304      	movcs	r3, #4
 80029fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d902      	bls.n	8002a0c <NVIC_EncodePriority+0x30>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3b03      	subs	r3, #3
 8002a0a:	e000      	b.n	8002a0e <NVIC_EncodePriority+0x32>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	401a      	ands	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a24:	f04f 31ff 	mov.w	r1, #4294967295
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43d9      	mvns	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	4313      	orrs	r3, r2
         );
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	; 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ff4c 	bl	80028e8 <__NVIC_SetPriorityGrouping>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6a:	f7ff ff61 	bl	8002930 <__NVIC_GetPriorityGrouping>
 8002a6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	6978      	ldr	r0, [r7, #20]
 8002a76:	f7ff ffb1 	bl	80029dc <NVIC_EncodePriority>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff80 	bl	8002988 <__NVIC_SetPriority>
}
 8002a88:	bf00      	nop
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff54 	bl	800294c <__NVIC_EnableIRQ>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e175      	b.n	8002db8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	f040 8164 	bne.w	8002db2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d00b      	beq.n	8002b0a <HAL_GPIO_Init+0x5e>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d007      	beq.n	8002b0a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002afe:	2b11      	cmp	r3, #17
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b12      	cmp	r3, #18
 8002b08:	d130      	bne.n	8002b6c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 0201 	and.w	r2, r3, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x100>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d123      	bne.n	8002bf4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	08da      	lsrs	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3208      	adds	r2, #8
 8002bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	08da      	lsrs	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3208      	adds	r2, #8
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0203 	and.w	r2, r3, #3
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80be 	beq.w	8002db2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	4b65      	ldr	r3, [pc, #404]	; (8002dcc <HAL_GPIO_Init+0x320>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	4a64      	ldr	r2, [pc, #400]	; (8002dcc <HAL_GPIO_Init+0x320>)
 8002c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c40:	6453      	str	r3, [r2, #68]	; 0x44
 8002c42:	4b62      	ldr	r3, [pc, #392]	; (8002dcc <HAL_GPIO_Init+0x320>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c4e:	4a60      	ldr	r2, [pc, #384]	; (8002dd0 <HAL_GPIO_Init+0x324>)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a57      	ldr	r2, [pc, #348]	; (8002dd4 <HAL_GPIO_Init+0x328>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d037      	beq.n	8002cea <HAL_GPIO_Init+0x23e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a56      	ldr	r2, [pc, #344]	; (8002dd8 <HAL_GPIO_Init+0x32c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d031      	beq.n	8002ce6 <HAL_GPIO_Init+0x23a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a55      	ldr	r2, [pc, #340]	; (8002ddc <HAL_GPIO_Init+0x330>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d02b      	beq.n	8002ce2 <HAL_GPIO_Init+0x236>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a54      	ldr	r2, [pc, #336]	; (8002de0 <HAL_GPIO_Init+0x334>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d025      	beq.n	8002cde <HAL_GPIO_Init+0x232>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a53      	ldr	r2, [pc, #332]	; (8002de4 <HAL_GPIO_Init+0x338>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01f      	beq.n	8002cda <HAL_GPIO_Init+0x22e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a52      	ldr	r2, [pc, #328]	; (8002de8 <HAL_GPIO_Init+0x33c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d019      	beq.n	8002cd6 <HAL_GPIO_Init+0x22a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a51      	ldr	r2, [pc, #324]	; (8002dec <HAL_GPIO_Init+0x340>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_GPIO_Init+0x226>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a50      	ldr	r2, [pc, #320]	; (8002df0 <HAL_GPIO_Init+0x344>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00d      	beq.n	8002cce <HAL_GPIO_Init+0x222>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4f      	ldr	r2, [pc, #316]	; (8002df4 <HAL_GPIO_Init+0x348>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d007      	beq.n	8002cca <HAL_GPIO_Init+0x21e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4e      	ldr	r2, [pc, #312]	; (8002df8 <HAL_GPIO_Init+0x34c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_GPIO_Init+0x21a>
 8002cc2:	2309      	movs	r3, #9
 8002cc4:	e012      	b.n	8002cec <HAL_GPIO_Init+0x240>
 8002cc6:	230a      	movs	r3, #10
 8002cc8:	e010      	b.n	8002cec <HAL_GPIO_Init+0x240>
 8002cca:	2308      	movs	r3, #8
 8002ccc:	e00e      	b.n	8002cec <HAL_GPIO_Init+0x240>
 8002cce:	2307      	movs	r3, #7
 8002cd0:	e00c      	b.n	8002cec <HAL_GPIO_Init+0x240>
 8002cd2:	2306      	movs	r3, #6
 8002cd4:	e00a      	b.n	8002cec <HAL_GPIO_Init+0x240>
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	e008      	b.n	8002cec <HAL_GPIO_Init+0x240>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	e006      	b.n	8002cec <HAL_GPIO_Init+0x240>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e004      	b.n	8002cec <HAL_GPIO_Init+0x240>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_Init+0x240>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_GPIO_Init+0x240>
 8002cea:	2300      	movs	r3, #0
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f002 0203 	and.w	r2, r2, #3
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	4093      	lsls	r3, r2
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cfc:	4934      	ldr	r1, [pc, #208]	; (8002dd0 <HAL_GPIO_Init+0x324>)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3302      	adds	r3, #2
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d0a:	4b3c      	ldr	r3, [pc, #240]	; (8002dfc <HAL_GPIO_Init+0x350>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d2e:	4a33      	ldr	r2, [pc, #204]	; (8002dfc <HAL_GPIO_Init+0x350>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d34:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_GPIO_Init+0x350>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d58:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <HAL_GPIO_Init+0x350>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d5e:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <HAL_GPIO_Init+0x350>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d82:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <HAL_GPIO_Init+0x350>)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d88:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <HAL_GPIO_Init+0x350>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <HAL_GPIO_Init+0x350>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	f67f ae86 	bls.w	8002acc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3724      	adds	r7, #36	; 0x24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40021400 	.word	0x40021400
 8002dec:	40021800 	.word	0x40021800
 8002df0:	40021c00 	.word	0x40021c00
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40022400 	.word	0x40022400
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e29b      	b.n	800334e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8087 	beq.w	8002f32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e24:	4b96      	ldr	r3, [pc, #600]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d00c      	beq.n	8002e4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e30:	4b93      	ldr	r3, [pc, #588]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d112      	bne.n	8002e62 <HAL_RCC_OscConfig+0x62>
 8002e3c:	4b90      	ldr	r3, [pc, #576]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e48:	d10b      	bne.n	8002e62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4a:	4b8d      	ldr	r3, [pc, #564]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d06c      	beq.n	8002f30 <HAL_RCC_OscConfig+0x130>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d168      	bne.n	8002f30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e275      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCC_OscConfig+0x7a>
 8002e6c:	4b84      	ldr	r3, [pc, #528]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a83      	ldr	r2, [pc, #524]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e02e      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x9c>
 8002e82:	4b7f      	ldr	r3, [pc, #508]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7e      	ldr	r2, [pc, #504]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b7c      	ldr	r3, [pc, #496]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7b      	ldr	r2, [pc, #492]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e01d      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0xc0>
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a72      	ldr	r2, [pc, #456]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd8>
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6e      	ldr	r2, [pc, #440]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a6b      	ldr	r2, [pc, #428]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7ff f832 	bl	8001f48 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7ff f82e 	bl	8001f48 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e229      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b61      	ldr	r3, [pc, #388]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xe8>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7ff f81e 	bl	8001f48 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f10:	f7ff f81a 	bl	8001f48 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e215      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	4b57      	ldr	r3, [pc, #348]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x110>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d069      	beq.n	8003012 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f3e:	4b50      	ldr	r3, [pc, #320]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d11c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x190>
 8002f56:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d116      	bne.n	8002f90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x17a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1e9      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	493d      	ldr	r1, [pc, #244]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	e040      	b.n	8003012 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d023      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f98:	4b39      	ldr	r3, [pc, #228]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a38      	ldr	r2, [pc, #224]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe ffd0 	bl	8001f48 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fac:	f7fe ffcc 	bl	8001f48 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e1c7      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fca:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4929      	ldr	r1, [pc, #164]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]
 8002fde:	e018      	b.n	8003012 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe ffac 	bl	8001f48 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fe ffa8 	bl	8001f48 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1a3      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d038      	beq.n	8003090 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d019      	beq.n	800305a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	4b16      	ldr	r3, [pc, #88]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8003028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302a:	4a15      	ldr	r2, [pc, #84]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003032:	f7fe ff89 	bl	8001f48 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303a:	f7fe ff85 	bl	8001f48 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e180      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x23a>
 8003058:	e01a      	b.n	8003090 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7fe ff6f 	bl	8001f48 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306e:	f7fe ff6b 	bl	8001f48 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d903      	bls.n	8003084 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e166      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
 8003080:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003084:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ee      	bne.n	800306e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80a4 	beq.w	80031e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b8c      	ldr	r3, [pc, #560]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10d      	bne.n	80030c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b89      	ldr	r3, [pc, #548]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	4a88      	ldr	r2, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	6413      	str	r3, [r2, #64]	; 0x40
 80030b6:	4b86      	ldr	r3, [pc, #536]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c6:	4b83      	ldr	r3, [pc, #524]	; (80032d4 <HAL_RCC_OscConfig+0x4d4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d118      	bne.n	8003104 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030d2:	4b80      	ldr	r3, [pc, #512]	; (80032d4 <HAL_RCC_OscConfig+0x4d4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7f      	ldr	r2, [pc, #508]	; (80032d4 <HAL_RCC_OscConfig+0x4d4>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fe ff33 	bl	8001f48 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e6:	f7fe ff2f 	bl	8001f48 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b64      	cmp	r3, #100	; 0x64
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e12a      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f8:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCC_OscConfig+0x4d4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d106      	bne.n	800311a <HAL_RCC_OscConfig+0x31a>
 800310c:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a6f      	ldr	r2, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
 8003118:	e02d      	b.n	8003176 <HAL_RCC_OscConfig+0x376>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x33c>
 8003122:	4b6b      	ldr	r3, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a6a      	ldr	r2, [pc, #424]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
 800312e:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a67      	ldr	r2, [pc, #412]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003134:	f023 0304 	bic.w	r3, r3, #4
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	e01c      	b.n	8003176 <HAL_RCC_OscConfig+0x376>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b05      	cmp	r3, #5
 8003142:	d10c      	bne.n	800315e <HAL_RCC_OscConfig+0x35e>
 8003144:	4b62      	ldr	r3, [pc, #392]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	4a61      	ldr	r2, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	6713      	str	r3, [r2, #112]	; 0x70
 8003150:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	4a5e      	ldr	r2, [pc, #376]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6713      	str	r3, [r2, #112]	; 0x70
 800315c:	e00b      	b.n	8003176 <HAL_RCC_OscConfig+0x376>
 800315e:	4b5c      	ldr	r3, [pc, #368]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a5b      	ldr	r2, [pc, #364]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
 800316a:	4b59      	ldr	r3, [pc, #356]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	4a58      	ldr	r2, [pc, #352]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d015      	beq.n	80031aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe fee3 	bl	8001f48 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe fedf 	bl	8001f48 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0d8      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319c:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ee      	beq.n	8003186 <HAL_RCC_OscConfig+0x386>
 80031a8:	e014      	b.n	80031d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031aa:	f7fe fecd 	bl	8001f48 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe fec9 	bl	8001f48 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0c2      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c8:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ee      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d105      	bne.n	80031e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	4a3c      	ldr	r2, [pc, #240]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 80031e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80ae 	beq.w	800334c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f0:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d06d      	beq.n	80032d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d14b      	bne.n	800329c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 800320a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe fe9a 	bl	8001f48 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003218:	f7fe fe96 	bl	8001f48 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e091      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	019b      	lsls	r3, r3, #6
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	3b01      	subs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	071b      	lsls	r3, r3, #28
 8003262:	491b      	ldr	r1, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe fe68 	bl	8001f48 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe fe64 	bl	8001f48 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e05f      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x47c>
 800329a:	e057      	b.n	800334c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0b      	ldr	r2, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 80032a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe fe4e 	bl	8001f48 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe fe4a 	bl	8001f48 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e045      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_RCC_OscConfig+0x4d0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4b0>
 80032ce:	e03d      	b.n	800334c <HAL_RCC_OscConfig+0x54c>
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80032d8:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <HAL_RCC_OscConfig+0x558>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d030      	beq.n	8003348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d129      	bne.n	8003348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d122      	bne.n	8003348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003308:	4013      	ands	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800330e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003310:	4293      	cmp	r3, r2
 8003312:	d119      	bne.n	8003348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	3b01      	subs	r3, #1
 8003322:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d10f      	bne.n	8003348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800

0800335c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0d0      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d910      	bls.n	80033a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b67      	ldr	r3, [pc, #412]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 020f 	bic.w	r2, r3, #15
 800338a:	4965      	ldr	r1, [pc, #404]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b63      	ldr	r3, [pc, #396]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0b8      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d020      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033bc:	4b59      	ldr	r3, [pc, #356]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a58      	ldr	r2, [pc, #352]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80033c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d4:	4b53      	ldr	r3, [pc, #332]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a52      	ldr	r2, [pc, #328]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80033da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e0:	4b50      	ldr	r3, [pc, #320]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	494d      	ldr	r1, [pc, #308]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d040      	beq.n	8003480 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d115      	bne.n	800343e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e07f      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e073      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b3d      	ldr	r3, [pc, #244]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e06b      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343e:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4936      	ldr	r1, [pc, #216]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003450:	f7fe fd7a 	bl	8001f48 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fe fd76 	bl	8001f48 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e053      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d210      	bcs.n	80034b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 020f 	bic.w	r2, r3, #15
 8003496:	4922      	ldr	r1, [pc, #136]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e032      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034bc:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4916      	ldr	r1, [pc, #88]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034da:	4b12      	ldr	r3, [pc, #72]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	490e      	ldr	r1, [pc, #56]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ee:	f000 f821 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80034f2:	4601      	mov	r1, r0
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <HAL_RCC_ClockConfig+0x1cc>)
 8003500:	5cd3      	ldrb	r3, [r2, r3]
 8003502:	fa21 f303 	lsr.w	r3, r1, r3
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <HAL_RCC_ClockConfig+0x1d0>)
 8003508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_ClockConfig+0x1d4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fc0e 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40023c00 	.word	0x40023c00
 8003524:	40023800 	.word	0x40023800
 8003528:	0800521c 	.word	0x0800521c
 800352c:	20000044 	.word	0x20000044
 8003530:	20000048 	.word	0x20000048

08003534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	2300      	movs	r3, #0
 8003544:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800354a:	4b50      	ldr	r3, [pc, #320]	; (800368c <HAL_RCC_GetSysClockFreq+0x158>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b04      	cmp	r3, #4
 8003554:	d007      	beq.n	8003566 <HAL_RCC_GetSysClockFreq+0x32>
 8003556:	2b08      	cmp	r3, #8
 8003558:	d008      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x38>
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 808d 	bne.w	800367a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003562:	60bb      	str	r3, [r7, #8]
      break;
 8003564:	e08c      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003566:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <HAL_RCC_GetSysClockFreq+0x160>)
 8003568:	60bb      	str	r3, [r7, #8]
      break;
 800356a:	e089      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800356c:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_GetSysClockFreq+0x158>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003574:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003576:	4b45      	ldr	r3, [pc, #276]	; (800368c <HAL_RCC_GetSysClockFreq+0x158>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d023      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003582:	4b42      	ldr	r3, [pc, #264]	; (800368c <HAL_RCC_GetSysClockFreq+0x158>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	099b      	lsrs	r3, r3, #6
 8003588:	f04f 0400 	mov.w	r4, #0
 800358c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	ea03 0501 	and.w	r5, r3, r1
 8003598:	ea04 0602 	and.w	r6, r4, r2
 800359c:	4a3d      	ldr	r2, [pc, #244]	; (8003694 <HAL_RCC_GetSysClockFreq+0x160>)
 800359e:	fb02 f106 	mul.w	r1, r2, r6
 80035a2:	2200      	movs	r2, #0
 80035a4:	fb02 f205 	mul.w	r2, r2, r5
 80035a8:	440a      	add	r2, r1
 80035aa:	493a      	ldr	r1, [pc, #232]	; (8003694 <HAL_RCC_GetSysClockFreq+0x160>)
 80035ac:	fba5 0101 	umull	r0, r1, r5, r1
 80035b0:	1853      	adds	r3, r2, r1
 80035b2:	4619      	mov	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f04f 0400 	mov.w	r4, #0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4623      	mov	r3, r4
 80035be:	f7fc fe3f 	bl	8000240 <__aeabi_uldivmod>
 80035c2:	4603      	mov	r3, r0
 80035c4:	460c      	mov	r4, r1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e049      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ca:	4b30      	ldr	r3, [pc, #192]	; (800368c <HAL_RCC_GetSysClockFreq+0x158>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	099b      	lsrs	r3, r3, #6
 80035d0:	f04f 0400 	mov.w	r4, #0
 80035d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	ea03 0501 	and.w	r5, r3, r1
 80035e0:	ea04 0602 	and.w	r6, r4, r2
 80035e4:	4629      	mov	r1, r5
 80035e6:	4632      	mov	r2, r6
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	f04f 0400 	mov.w	r4, #0
 80035f0:	0154      	lsls	r4, r2, #5
 80035f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035f6:	014b      	lsls	r3, r1, #5
 80035f8:	4619      	mov	r1, r3
 80035fa:	4622      	mov	r2, r4
 80035fc:	1b49      	subs	r1, r1, r5
 80035fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	f04f 0400 	mov.w	r4, #0
 800360a:	0194      	lsls	r4, r2, #6
 800360c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003610:	018b      	lsls	r3, r1, #6
 8003612:	1a5b      	subs	r3, r3, r1
 8003614:	eb64 0402 	sbc.w	r4, r4, r2
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	00e2      	lsls	r2, r4, #3
 8003622:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003626:	00d9      	lsls	r1, r3, #3
 8003628:	460b      	mov	r3, r1
 800362a:	4614      	mov	r4, r2
 800362c:	195b      	adds	r3, r3, r5
 800362e:	eb44 0406 	adc.w	r4, r4, r6
 8003632:	f04f 0100 	mov.w	r1, #0
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	02a2      	lsls	r2, r4, #10
 800363c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003640:	0299      	lsls	r1, r3, #10
 8003642:	460b      	mov	r3, r1
 8003644:	4614      	mov	r4, r2
 8003646:	4618      	mov	r0, r3
 8003648:	4621      	mov	r1, r4
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f04f 0400 	mov.w	r4, #0
 8003650:	461a      	mov	r2, r3
 8003652:	4623      	mov	r3, r4
 8003654:	f7fc fdf4 	bl	8000240 <__aeabi_uldivmod>
 8003658:	4603      	mov	r3, r0
 800365a:	460c      	mov	r4, r1
 800365c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_GetSysClockFreq+0x158>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	0c1b      	lsrs	r3, r3, #16
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	3301      	adds	r3, #1
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	fbb2 f3f3 	udiv	r3, r2, r3
 8003676:	60bb      	str	r3, [r7, #8]
      break;
 8003678:	e002      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCC_GetSysClockFreq+0x15c>)
 800367c:	60bb      	str	r3, [r7, #8]
      break;
 800367e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003680:	68bb      	ldr	r3, [r7, #8]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	00f42400 	.word	0x00f42400
 8003694:	017d7840 	.word	0x017d7840

08003698 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_RCC_GetHCLKFreq+0x14>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000044 	.word	0x20000044

080036b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b4:	f7ff fff0 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036b8:	4601      	mov	r1, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0a9b      	lsrs	r3, r3, #10
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4a03      	ldr	r2, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c6:	5cd3      	ldrb	r3, [r2, r3]
 80036c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	0800522c 	.word	0x0800522c

080036d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	220f      	movs	r2, #15
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0203 	and.w	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <HAL_RCC_GetClockConfig+0x60>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 020f 	and.w	r2, r3, #15
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40023c00 	.word	0x40023c00

0800373c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e01d      	b.n	800378a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f815 	bl	8003792 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f000 f986 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_TIM_Base_Start_IT+0x50>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d00b      	beq.n	80037ea <HAL_TIM_Base_Start_IT+0x42>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d8:	d007      	beq.n	80037ea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	00010007 	.word	0x00010007

080037fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d122      	bne.n	8003858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d11b      	bne.n	8003858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0202 	mvn.w	r2, #2
 8003828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f905 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8f7 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f908 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b04      	cmp	r3, #4
 8003864:	d122      	bne.n	80038ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b04      	cmp	r3, #4
 8003872:	d11b      	bne.n	80038ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0204 	mvn.w	r2, #4
 800387c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8db 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8cd 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f8de 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d122      	bne.n	8003900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d11b      	bne.n	8003900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0208 	mvn.w	r2, #8
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2204      	movs	r2, #4
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8b1 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8a3 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f8b4 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b10      	cmp	r3, #16
 800390c:	d122      	bne.n	8003954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b10      	cmp	r3, #16
 800391a:	d11b      	bne.n	8003954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0210 	mvn.w	r2, #16
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2208      	movs	r2, #8
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f887 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f879 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f88a 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10e      	bne.n	8003980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0201 	mvn.w	r2, #1
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe f8fa 	bl	8001b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	2b80      	cmp	r3, #128	; 0x80
 800398c:	d10e      	bne.n	80039ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b80      	cmp	r3, #128	; 0x80
 800399a:	d107      	bne.n	80039ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f91a 	bl	8003be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ba:	d10e      	bne.n	80039da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b80      	cmp	r3, #128	; 0x80
 80039c8:	d107      	bne.n	80039da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f90d 	bl	8003bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d10e      	bne.n	8003a06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d107      	bne.n	8003a06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f838 	bl	8003a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d10e      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d107      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f06f 0220 	mvn.w	r2, #32
 8003a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f8cd 	bl	8003bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a40      	ldr	r2, [pc, #256]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d00f      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3d      	ldr	r2, [pc, #244]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3c      	ldr	r2, [pc, #240]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d007      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3b      	ldr	r2, [pc, #236]	; (8003bac <TIM_Base_SetConfig+0x120>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d108      	bne.n	8003ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2f      	ldr	r2, [pc, #188]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d027      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2c      	ldr	r2, [pc, #176]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d023      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <TIM_Base_SetConfig+0x120>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d017      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <TIM_Base_SetConfig+0x128>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <TIM_Base_SetConfig+0x12c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <TIM_Base_SetConfig+0x130>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <TIM_Base_SetConfig+0x134>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <TIM_Base_SetConfig+0x138>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <TIM_Base_SetConfig+0x13c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0xf8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d103      	bne.n	8003b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	615a      	str	r2, [r3, #20]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40010400 	.word	0x40010400
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800
 8003bc0:	40001800 	.word	0x40001800
 8003bc4:	40001c00 	.word	0x40001c00
 8003bc8:	40002000 	.word	0x40002000

08003bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1a:	2b84      	cmp	r3, #132	; 0x84
 8003c1c:	d005      	beq.n	8003c2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	3303      	adds	r3, #3
 8003c28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c3c:	f000 fae4 	bl	8004208 <vTaskStartScheduler>
  
  return osOK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c48:	b089      	sub	sp, #36	; 0x24
 8003c4a:	af04      	add	r7, sp, #16
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <osThreadCreate+0x54>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01c      	beq.n	8003c9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685c      	ldr	r4, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681d      	ldr	r5, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691e      	ldr	r6, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff ffc8 	bl	8003c08 <makeFreeRtosPriority>
 8003c78:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c82:	9202      	str	r2, [sp, #8]
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	9100      	str	r1, [sp, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4632      	mov	r2, r6
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f000 f8ed 	bl	8003e6e <xTaskCreateStatic>
 8003c94:	4603      	mov	r3, r0
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e01c      	b.n	8003cd4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685c      	ldr	r4, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ca6:	b29e      	uxth	r6, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ffaa 	bl	8003c08 <makeFreeRtosPriority>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	9200      	str	r2, [sp, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f000 f932 	bl	8003f2e <xTaskCreate>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d001      	beq.n	8003cd4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cde <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <osDelay+0x16>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	e000      	b.n	8003cf6 <osDelay+0x18>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fa50 	bl	800419c <vTaskDelay>
  
  return osOK;
 8003cfc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f103 0208 	add.w	r2, r3, #8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f103 0208 	add.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f103 0208 	add.w	r2, r3, #8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	601a      	str	r2, [r3, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d103      	bne.n	8003dc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e00c      	b.n	8003de2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3308      	adds	r3, #8
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	e002      	b.n	8003dd6 <vListInsert+0x2e>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d2f6      	bcs.n	8003dd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6892      	ldr	r2, [r2, #8]
 8003e30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6852      	ldr	r2, [r2, #4]
 8003e3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d103      	bne.n	8003e4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b08e      	sub	sp, #56	; 0x38
 8003e72:	af04      	add	r7, sp, #16
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	b672      	cpsid	i
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	b662      	cpsie	i
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	e7fe      	b.n	8003e98 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <xTaskCreateStatic+0x4a>
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	b672      	cpsid	i
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	b662      	cpsie	i
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	e7fe      	b.n	8003eb6 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003eb8:	2354      	movs	r3, #84	; 0x54
 8003eba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b54      	cmp	r3, #84	; 0x54
 8003ec0:	d00b      	beq.n	8003eda <xTaskCreateStatic+0x6c>
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	b672      	cpsid	i
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	b662      	cpsie	i
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	e7fe      	b.n	8003ed8 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003eda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01e      	beq.n	8003f20 <xTaskCreateStatic+0xb2>
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01b      	beq.n	8003f20 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003efa:	2300      	movs	r3, #0
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	9302      	str	r3, [sp, #8]
 8003f02:	f107 0314 	add.w	r3, r7, #20
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f850 	bl	8003fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f1a:	f000 f8d5 	bl	80040c8 <prvAddNewTaskToReadyList>
 8003f1e:	e001      	b.n	8003f24 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f24:	697b      	ldr	r3, [r7, #20]
	}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3728      	adds	r7, #40	; 0x28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b08c      	sub	sp, #48	; 0x30
 8003f32:	af04      	add	r7, sp, #16
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fea8 	bl	8004c98 <pvPortMalloc>
 8003f48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00e      	beq.n	8003f6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f50:	2054      	movs	r0, #84	; 0x54
 8003f52:	f000 fea1 	bl	8004c98 <pvPortMalloc>
 8003f56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
 8003f64:	e005      	b.n	8003f72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f000 ff5e 	bl	8004e28 <vPortFree>
 8003f6c:	e001      	b.n	8003f72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d017      	beq.n	8003fa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	2300      	movs	r3, #0
 8003f84:	9303      	str	r3, [sp, #12]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	9302      	str	r3, [sp, #8]
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f80e 	bl	8003fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f9c:	69f8      	ldr	r0, [r7, #28]
 8003f9e:	f000 f893 	bl	80040c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	e002      	b.n	8003fae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fae:	69bb      	ldr	r3, [r7, #24]
	}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003fd0:	440b      	add	r3, r1
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f023 0307 	bic.w	r3, r3, #7
 8003fde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <prvInitialiseNewTask+0x4a>
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	b672      	cpsid	i
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	b662      	cpsie	i
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e7fe      	b.n	8004000 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01f      	beq.n	8004048 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004008:	2300      	movs	r3, #0
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	e012      	b.n	8004034 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	7819      	ldrb	r1, [r3, #0]
 8004016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	4413      	add	r3, r2
 800401c:	3334      	adds	r3, #52	; 0x34
 800401e:	460a      	mov	r2, r1
 8004020:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3301      	adds	r3, #1
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b0f      	cmp	r3, #15
 8004038:	d9e9      	bls.n	800400e <prvInitialiseNewTask+0x56>
 800403a:	e000      	b.n	800403e <prvInitialiseNewTask+0x86>
			{
				break;
 800403c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004046:	e003      	b.n	8004050 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	2b06      	cmp	r3, #6
 8004054:	d901      	bls.n	800405a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004056:	2306      	movs	r3, #6
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004064:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	2200      	movs	r2, #0
 800406a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	3304      	adds	r3, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fe68 	bl	8003d46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	3318      	adds	r3, #24
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fe63 	bl	8003d46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004084:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	f1c3 0207 	rsb	r2, r3, #7
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004094:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	2200      	movs	r2, #0
 800409a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	68f9      	ldr	r1, [r7, #12]
 80040a8:	69b8      	ldr	r0, [r7, #24]
 80040aa:	f000 fc0b 	bl	80048c4 <pxPortInitialiseStack>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040c0:	bf00      	nop
 80040c2:	3720      	adds	r7, #32
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040d0:	f000 fd02 	bl	8004ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <prvAddNewTaskToReadyList+0xb8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3301      	adds	r3, #1
 80040da:	4a29      	ldr	r2, [pc, #164]	; (8004180 <prvAddNewTaskToReadyList+0xb8>)
 80040dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040de:	4b29      	ldr	r3, [pc, #164]	; (8004184 <prvAddNewTaskToReadyList+0xbc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040e6:	4a27      	ldr	r2, [pc, #156]	; (8004184 <prvAddNewTaskToReadyList+0xbc>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <prvAddNewTaskToReadyList+0xb8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d110      	bne.n	8004116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040f4:	f000 fac4 	bl	8004680 <prvInitialiseTaskLists>
 80040f8:	e00d      	b.n	8004116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040fa:	4b23      	ldr	r3, [pc, #140]	; (8004188 <prvAddNewTaskToReadyList+0xc0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <prvAddNewTaskToReadyList+0xbc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	429a      	cmp	r2, r3
 800410e:	d802      	bhi.n	8004116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004110:	4a1c      	ldr	r2, [pc, #112]	; (8004184 <prvAddNewTaskToReadyList+0xbc>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004116:	4b1d      	ldr	r3, [pc, #116]	; (800418c <prvAddNewTaskToReadyList+0xc4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3301      	adds	r3, #1
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <prvAddNewTaskToReadyList+0xc4>)
 800411e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	2201      	movs	r2, #1
 8004126:	409a      	lsls	r2, r3
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <prvAddNewTaskToReadyList+0xc8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4313      	orrs	r3, r2
 800412e:	4a18      	ldr	r2, [pc, #96]	; (8004190 <prvAddNewTaskToReadyList+0xc8>)
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <prvAddNewTaskToReadyList+0xcc>)
 8004140:	441a      	add	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f7ff fe09 	bl	8003d60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800414e:	f000 fcf5 	bl	8004b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <prvAddNewTaskToReadyList+0xc0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00e      	beq.n	8004178 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <prvAddNewTaskToReadyList+0xbc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	429a      	cmp	r2, r3
 8004166:	d207      	bcs.n	8004178 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <prvAddNewTaskToReadyList+0xd0>)
 800416a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000444 	.word	0x20000444
 8004184:	20000344 	.word	0x20000344
 8004188:	20000450 	.word	0x20000450
 800418c:	20000460 	.word	0x20000460
 8004190:	2000044c 	.word	0x2000044c
 8004194:	20000348 	.word	0x20000348
 8004198:	e000ed04 	.word	0xe000ed04

0800419c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <vTaskDelay+0x64>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <vTaskDelay+0x32>
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	b672      	cpsid	i
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	b662      	cpsie	i
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	e7fe      	b.n	80041cc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80041ce:	f000 f87d 	bl	80042cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041d2:	2100      	movs	r1, #0
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb0f 	bl	80047f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041da:	f000 f885 	bl	80042e8 <xTaskResumeAll>
 80041de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d107      	bne.n	80041f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <vTaskDelay+0x68>)
 80041e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	2000046c 	.word	0x2000046c
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004216:	463a      	mov	r2, r7
 8004218:	1d39      	adds	r1, r7, #4
 800421a:	f107 0308 	add.w	r3, r7, #8
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd fb56 	bl	80018d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	9202      	str	r2, [sp, #8]
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	2300      	movs	r3, #0
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	2300      	movs	r3, #0
 8004234:	460a      	mov	r2, r1
 8004236:	491f      	ldr	r1, [pc, #124]	; (80042b4 <vTaskStartScheduler+0xac>)
 8004238:	481f      	ldr	r0, [pc, #124]	; (80042b8 <vTaskStartScheduler+0xb0>)
 800423a:	f7ff fe18 	bl	8003e6e <xTaskCreateStatic>
 800423e:	4602      	mov	r2, r0
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <vTaskStartScheduler+0xb4>)
 8004242:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004244:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <vTaskStartScheduler+0xb4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800424c:	2301      	movs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e001      	b.n	8004256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d117      	bne.n	800428c <vTaskStartScheduler+0x84>
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	b672      	cpsid	i
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	b662      	cpsie	i
 8004270:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <vTaskStartScheduler+0xb8>)
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
 8004278:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <vTaskStartScheduler+0xbc>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004280:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <vTaskStartScheduler+0xc0>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004286:	f000 fbab 	bl	80049e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800428a:	e00f      	b.n	80042ac <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d10b      	bne.n	80042ac <vTaskStartScheduler+0xa4>
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	b672      	cpsid	i
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	b662      	cpsie	i
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e7fe      	b.n	80042aa <vTaskStartScheduler+0xa2>
}
 80042ac:	bf00      	nop
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	08005214 	.word	0x08005214
 80042b8:	08004651 	.word	0x08004651
 80042bc:	20000468 	.word	0x20000468
 80042c0:	20000464 	.word	0x20000464
 80042c4:	20000450 	.word	0x20000450
 80042c8:	20000448 	.word	0x20000448

080042cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <vTaskSuspendAll+0x18>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	4a03      	ldr	r2, [pc, #12]	; (80042e4 <vTaskSuspendAll+0x18>)
 80042d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80042da:	bf00      	nop
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	2000046c 	.word	0x2000046c

080042e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042f6:	4b42      	ldr	r3, [pc, #264]	; (8004400 <xTaskResumeAll+0x118>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <xTaskResumeAll+0x2e>
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	b672      	cpsid	i
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	b662      	cpsie	i
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	e7fe      	b.n	8004314 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004316:	f000 fbdf 	bl	8004ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800431a:	4b39      	ldr	r3, [pc, #228]	; (8004400 <xTaskResumeAll+0x118>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3b01      	subs	r3, #1
 8004320:	4a37      	ldr	r2, [pc, #220]	; (8004400 <xTaskResumeAll+0x118>)
 8004322:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004324:	4b36      	ldr	r3, [pc, #216]	; (8004400 <xTaskResumeAll+0x118>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d161      	bne.n	80043f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <xTaskResumeAll+0x11c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d05d      	beq.n	80043f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004334:	e02e      	b.n	8004394 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004336:	4b34      	ldr	r3, [pc, #208]	; (8004408 <xTaskResumeAll+0x120>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3318      	adds	r3, #24
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fd69 	bl	8003e1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3304      	adds	r3, #4
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fd64 	bl	8003e1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	2201      	movs	r2, #1
 8004358:	409a      	lsls	r2, r3
 800435a:	4b2c      	ldr	r3, [pc, #176]	; (800440c <xTaskResumeAll+0x124>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	4a2a      	ldr	r2, [pc, #168]	; (800440c <xTaskResumeAll+0x124>)
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4a27      	ldr	r2, [pc, #156]	; (8004410 <xTaskResumeAll+0x128>)
 8004372:	441a      	add	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f7ff fcf0 	bl	8003d60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	4b23      	ldr	r3, [pc, #140]	; (8004414 <xTaskResumeAll+0x12c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800438e:	4b22      	ldr	r3, [pc, #136]	; (8004418 <xTaskResumeAll+0x130>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004394:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <xTaskResumeAll+0x120>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1cc      	bne.n	8004336 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043a2:	f000 fa09 	bl	80047b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <xTaskResumeAll+0x134>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043b2:	f000 f837 	bl	8004424 <xTaskIncrementTick>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <xTaskResumeAll+0x130>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f1      	bne.n	80043b2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80043ce:	4b13      	ldr	r3, [pc, #76]	; (800441c <xTaskResumeAll+0x134>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <xTaskResumeAll+0x130>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d009      	beq.n	80043f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <xTaskResumeAll+0x138>)
 80043e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043f0:	f000 fba4 	bl	8004b3c <vPortExitCritical>

	return xAlreadyYielded;
 80043f4:	68bb      	ldr	r3, [r7, #8]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	2000046c 	.word	0x2000046c
 8004404:	20000444 	.word	0x20000444
 8004408:	20000404 	.word	0x20000404
 800440c:	2000044c 	.word	0x2000044c
 8004410:	20000348 	.word	0x20000348
 8004414:	20000344 	.word	0x20000344
 8004418:	20000458 	.word	0x20000458
 800441c:	20000454 	.word	0x20000454
 8004420:	e000ed04 	.word	0xe000ed04

08004424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800442e:	4b4f      	ldr	r3, [pc, #316]	; (800456c <xTaskIncrementTick+0x148>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 8089 	bne.w	800454a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004438:	4b4d      	ldr	r3, [pc, #308]	; (8004570 <xTaskIncrementTick+0x14c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3301      	adds	r3, #1
 800443e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004440:	4a4b      	ldr	r2, [pc, #300]	; (8004570 <xTaskIncrementTick+0x14c>)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d121      	bne.n	8004490 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800444c:	4b49      	ldr	r3, [pc, #292]	; (8004574 <xTaskIncrementTick+0x150>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <xTaskIncrementTick+0x4a>
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	b672      	cpsid	i
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	b662      	cpsie	i
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	e7fe      	b.n	800446c <xTaskIncrementTick+0x48>
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <xTaskIncrementTick+0x150>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	4b40      	ldr	r3, [pc, #256]	; (8004578 <xTaskIncrementTick+0x154>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a3e      	ldr	r2, [pc, #248]	; (8004574 <xTaskIncrementTick+0x150>)
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	4a3e      	ldr	r2, [pc, #248]	; (8004578 <xTaskIncrementTick+0x154>)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	4b3e      	ldr	r3, [pc, #248]	; (800457c <xTaskIncrementTick+0x158>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	4a3c      	ldr	r2, [pc, #240]	; (800457c <xTaskIncrementTick+0x158>)
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	f000 f994 	bl	80047b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004490:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <xTaskIncrementTick+0x15c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	429a      	cmp	r2, r3
 8004498:	d348      	bcc.n	800452c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800449a:	4b36      	ldr	r3, [pc, #216]	; (8004574 <xTaskIncrementTick+0x150>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a4:	4b36      	ldr	r3, [pc, #216]	; (8004580 <xTaskIncrementTick+0x15c>)
 80044a6:	f04f 32ff 	mov.w	r2, #4294967295
 80044aa:	601a      	str	r2, [r3, #0]
					break;
 80044ac:	e03e      	b.n	800452c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ae:	4b31      	ldr	r3, [pc, #196]	; (8004574 <xTaskIncrementTick+0x150>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d203      	bcs.n	80044ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044c6:	4a2e      	ldr	r2, [pc, #184]	; (8004580 <xTaskIncrementTick+0x15c>)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044cc:	e02e      	b.n	800452c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fca1 	bl	8003e1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	3318      	adds	r3, #24
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fc98 	bl	8003e1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	2201      	movs	r2, #1
 80044f0:	409a      	lsls	r2, r3
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <xTaskIncrementTick+0x160>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	4a22      	ldr	r2, [pc, #136]	; (8004584 <xTaskIncrementTick+0x160>)
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <xTaskIncrementTick+0x164>)
 800450a:	441a      	add	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	3304      	adds	r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f7ff fc24 	bl	8003d60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	4b1b      	ldr	r3, [pc, #108]	; (800458c <xTaskIncrementTick+0x168>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	429a      	cmp	r2, r3
 8004524:	d3b9      	bcc.n	800449a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004526:	2301      	movs	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800452a:	e7b6      	b.n	800449a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800452c:	4b17      	ldr	r3, [pc, #92]	; (800458c <xTaskIncrementTick+0x168>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	4915      	ldr	r1, [pc, #84]	; (8004588 <xTaskIncrementTick+0x164>)
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d907      	bls.n	8004554 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e004      	b.n	8004554 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800454a:	4b11      	ldr	r3, [pc, #68]	; (8004590 <xTaskIncrementTick+0x16c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3301      	adds	r3, #1
 8004550:	4a0f      	ldr	r2, [pc, #60]	; (8004590 <xTaskIncrementTick+0x16c>)
 8004552:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <xTaskIncrementTick+0x170>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800455c:	2301      	movs	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004560:	697b      	ldr	r3, [r7, #20]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	2000046c 	.word	0x2000046c
 8004570:	20000448 	.word	0x20000448
 8004574:	200003fc 	.word	0x200003fc
 8004578:	20000400 	.word	0x20000400
 800457c:	2000045c 	.word	0x2000045c
 8004580:	20000464 	.word	0x20000464
 8004584:	2000044c 	.word	0x2000044c
 8004588:	20000348 	.word	0x20000348
 800458c:	20000344 	.word	0x20000344
 8004590:	20000454 	.word	0x20000454
 8004594:	20000458 	.word	0x20000458

08004598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800459e:	4b27      	ldr	r3, [pc, #156]	; (800463c <vTaskSwitchContext+0xa4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045a6:	4b26      	ldr	r3, [pc, #152]	; (8004640 <vTaskSwitchContext+0xa8>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045ac:	e040      	b.n	8004630 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <vTaskSwitchContext+0xa8>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b4:	4b23      	ldr	r3, [pc, #140]	; (8004644 <vTaskSwitchContext+0xac>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	fab3 f383 	clz	r3, r3
 80045c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045c2:	7afb      	ldrb	r3, [r7, #11]
 80045c4:	f1c3 031f 	rsb	r3, r3, #31
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	491f      	ldr	r1, [pc, #124]	; (8004648 <vTaskSwitchContext+0xb0>)
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10b      	bne.n	80045f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	b672      	cpsid	i
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	b662      	cpsie	i
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	e7fe      	b.n	80045f4 <vTaskSwitchContext+0x5c>
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4a11      	ldr	r2, [pc, #68]	; (8004648 <vTaskSwitchContext+0xb0>)
 8004602:	4413      	add	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	3308      	adds	r3, #8
 8004618:	429a      	cmp	r2, r3
 800461a:	d104      	bne.n	8004626 <vTaskSwitchContext+0x8e>
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4a07      	ldr	r2, [pc, #28]	; (800464c <vTaskSwitchContext+0xb4>)
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	2000046c 	.word	0x2000046c
 8004640:	20000458 	.word	0x20000458
 8004644:	2000044c 	.word	0x2000044c
 8004648:	20000348 	.word	0x20000348
 800464c:	20000344 	.word	0x20000344

08004650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004658:	f000 f852 	bl	8004700 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <prvIdleTask+0x28>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d9f9      	bls.n	8004658 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <prvIdleTask+0x2c>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004674:	e7f0      	b.n	8004658 <prvIdleTask+0x8>
 8004676:	bf00      	nop
 8004678:	20000348 	.word	0x20000348
 800467c:	e000ed04 	.word	0xe000ed04

08004680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004686:	2300      	movs	r3, #0
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	e00c      	b.n	80046a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4a12      	ldr	r2, [pc, #72]	; (80046e0 <prvInitialiseTaskLists+0x60>)
 8004698:	4413      	add	r3, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fb33 	bl	8003d06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3301      	adds	r3, #1
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d9ef      	bls.n	800468c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046ac:	480d      	ldr	r0, [pc, #52]	; (80046e4 <prvInitialiseTaskLists+0x64>)
 80046ae:	f7ff fb2a 	bl	8003d06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046b2:	480d      	ldr	r0, [pc, #52]	; (80046e8 <prvInitialiseTaskLists+0x68>)
 80046b4:	f7ff fb27 	bl	8003d06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046b8:	480c      	ldr	r0, [pc, #48]	; (80046ec <prvInitialiseTaskLists+0x6c>)
 80046ba:	f7ff fb24 	bl	8003d06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046be:	480c      	ldr	r0, [pc, #48]	; (80046f0 <prvInitialiseTaskLists+0x70>)
 80046c0:	f7ff fb21 	bl	8003d06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046c4:	480b      	ldr	r0, [pc, #44]	; (80046f4 <prvInitialiseTaskLists+0x74>)
 80046c6:	f7ff fb1e 	bl	8003d06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046ca:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <prvInitialiseTaskLists+0x78>)
 80046cc:	4a05      	ldr	r2, [pc, #20]	; (80046e4 <prvInitialiseTaskLists+0x64>)
 80046ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <prvInitialiseTaskLists+0x7c>)
 80046d2:	4a05      	ldr	r2, [pc, #20]	; (80046e8 <prvInitialiseTaskLists+0x68>)
 80046d4:	601a      	str	r2, [r3, #0]
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000348 	.word	0x20000348
 80046e4:	200003d4 	.word	0x200003d4
 80046e8:	200003e8 	.word	0x200003e8
 80046ec:	20000404 	.word	0x20000404
 80046f0:	20000418 	.word	0x20000418
 80046f4:	20000430 	.word	0x20000430
 80046f8:	200003fc 	.word	0x200003fc
 80046fc:	20000400 	.word	0x20000400

08004700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004706:	e019      	b.n	800473c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004708:	f000 f9e6 	bl	8004ad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <prvCheckTasksWaitingTermination+0x4c>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3304      	adds	r3, #4
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fb7e 	bl	8003e1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <prvCheckTasksWaitingTermination+0x50>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3b01      	subs	r3, #1
 8004724:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <prvCheckTasksWaitingTermination+0x50>)
 8004726:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <prvCheckTasksWaitingTermination+0x54>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3b01      	subs	r3, #1
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <prvCheckTasksWaitingTermination+0x54>)
 8004730:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004732:	f000 fa03 	bl	8004b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f80e 	bl	8004758 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <prvCheckTasksWaitingTermination+0x54>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e1      	bne.n	8004708 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000418 	.word	0x20000418
 8004750:	20000444 	.word	0x20000444
 8004754:	2000042c 	.word	0x2000042c

08004758 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004766:	2b00      	cmp	r3, #0
 8004768:	d108      	bne.n	800477c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fb5a 	bl	8004e28 <vPortFree>
				vPortFree( pxTCB );
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fb57 	bl	8004e28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800477a:	e019      	b.n	80047b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004782:	2b01      	cmp	r3, #1
 8004784:	d103      	bne.n	800478e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fb4e 	bl	8004e28 <vPortFree>
	}
 800478c:	e010      	b.n	80047b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004794:	2b02      	cmp	r3, #2
 8004796:	d00b      	beq.n	80047b0 <prvDeleteTCB+0x58>
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	b672      	cpsid	i
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	b662      	cpsie	i
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e7fe      	b.n	80047ae <prvDeleteTCB+0x56>
	}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <prvResetNextTaskUnblockTime+0x38>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047c8:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <prvResetNextTaskUnblockTime+0x3c>)
 80047ca:	f04f 32ff 	mov.w	r2, #4294967295
 80047ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047d0:	e008      	b.n	80047e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d2:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <prvResetNextTaskUnblockTime+0x38>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <prvResetNextTaskUnblockTime+0x3c>)
 80047e2:	6013      	str	r3, [r2, #0]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	200003fc 	.word	0x200003fc
 80047f4:	20000464 	.word	0x20000464

080047f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004802:	4b29      	ldr	r3, [pc, #164]	; (80048a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004808:	4b28      	ldr	r3, [pc, #160]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3304      	adds	r3, #4
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fb03 	bl	8003e1a <uxListRemove>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	2201      	movs	r2, #1
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43da      	mvns	r2, r3
 8004828:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4013      	ands	r3, r2
 800482e:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004830:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d10a      	bne.n	8004850 <prvAddCurrentTaskToDelayedList+0x58>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004840:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	481a      	ldr	r0, [pc, #104]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800484a:	f7ff fa89 	bl	8003d60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800484e:	e026      	b.n	800489e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	429a      	cmp	r2, r3
 8004866:	d209      	bcs.n	800487c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7ff fa97 	bl	8003da8 <vListInsert>
}
 800487a:	e010      	b.n	800489e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f7ff fa8d 	bl	8003da8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800488e:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	429a      	cmp	r2, r3
 8004896:	d202      	bcs.n	800489e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6013      	str	r3, [r2, #0]
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000448 	.word	0x20000448
 80048ac:	20000344 	.word	0x20000344
 80048b0:	2000044c 	.word	0x2000044c
 80048b4:	20000430 	.word	0x20000430
 80048b8:	20000400 	.word	0x20000400
 80048bc:	200003fc 	.word	0x200003fc
 80048c0:	20000464 	.word	0x20000464

080048c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3b04      	subs	r3, #4
 80048d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3b04      	subs	r3, #4
 80048e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b04      	subs	r3, #4
 80048f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048f4:	4a0c      	ldr	r2, [pc, #48]	; (8004928 <pxPortInitialiseStack+0x64>)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3b14      	subs	r3, #20
 80048fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b04      	subs	r3, #4
 800490a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f06f 0202 	mvn.w	r2, #2
 8004912:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3b20      	subs	r3, #32
 8004918:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800491a:	68fb      	ldr	r3, [r7, #12]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	0800492d 	.word	0x0800492d

0800492c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <prvTaskExitError+0x58>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d00b      	beq.n	8004958 <prvTaskExitError+0x2c>
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	b672      	cpsid	i
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	b662      	cpsie	i
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e7fe      	b.n	8004956 <prvTaskExitError+0x2a>
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	b672      	cpsid	i
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	b662      	cpsie	i
 800496c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800496e:	bf00      	nop
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0fc      	beq.n	8004970 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000050 	.word	0x20000050
	...

08004990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <pxCurrentTCBConst2>)
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	6808      	ldr	r0, [r1, #0]
 8004996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	f380 8809 	msr	PSP, r0
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f380 8811 	msr	BASEPRI, r0
 80049aa:	4770      	bx	lr
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst2>:
 80049b0:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049b8:	4808      	ldr	r0, [pc, #32]	; (80049dc <prvPortStartFirstTask+0x24>)
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	6800      	ldr	r0, [r0, #0]
 80049be:	f380 8808 	msr	MSP, r0
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8814 	msr	CONTROL, r0
 80049ca:	b662      	cpsie	i
 80049cc:	b661      	cpsie	f
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	df00      	svc	0
 80049d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049da:	bf00      	nop
 80049dc:	e000ed08 	.word	0xe000ed08

080049e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049e6:	4b36      	ldr	r3, [pc, #216]	; (8004ac0 <xPortStartScheduler+0xe0>)
 80049e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b2e      	ldr	r3, [pc, #184]	; (8004ac4 <xPortStartScheduler+0xe4>)
 8004a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <xPortStartScheduler+0xe8>)
 8004a10:	2207      	movs	r2, #7
 8004a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a14:	e009      	b.n	8004a2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a16:	4b2c      	ldr	r3, [pc, #176]	; (8004ac8 <xPortStartScheduler+0xe8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ac8 <xPortStartScheduler+0xe8>)
 8004a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d0ef      	beq.n	8004a16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <xPortStartScheduler+0xe8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1c3 0307 	rsb	r3, r3, #7
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d00b      	beq.n	8004a5a <xPortStartScheduler+0x7a>
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	b672      	cpsid	i
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	b662      	cpsie	i
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	e7fe      	b.n	8004a58 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <xPortStartScheduler+0xe8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <xPortStartScheduler+0xe8>)
 8004a62:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a64:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <xPortStartScheduler+0xe8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a6c:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <xPortStartScheduler+0xe8>)
 8004a6e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <xPortStartScheduler+0xec>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a13      	ldr	r2, [pc, #76]	; (8004acc <xPortStartScheduler+0xec>)
 8004a7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a82:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <xPortStartScheduler+0xec>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a10      	ldr	r2, [pc, #64]	; (8004acc <xPortStartScheduler+0xec>)
 8004a8a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a8e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a90:	f000 f8d4 	bl	8004c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <xPortStartScheduler+0xf0>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a9a:	f000 f8f3 	bl	8004c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <xPortStartScheduler+0xf4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <xPortStartScheduler+0xf4>)
 8004aa4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004aa8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004aaa:	f7ff ff85 	bl	80049b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004aae:	f7ff fd73 	bl	8004598 <vTaskSwitchContext>
	prvTaskExitError();
 8004ab2:	f7ff ff3b 	bl	800492c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	e000e400 	.word	0xe000e400
 8004ac4:	20000470 	.word	0x20000470
 8004ac8:	20000474 	.word	0x20000474
 8004acc:	e000ed20 	.word	0xe000ed20
 8004ad0:	20000050 	.word	0x20000050
 8004ad4:	e000ef34 	.word	0xe000ef34

08004ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	b672      	cpsid	i
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	b662      	cpsie	i
 8004af2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <vPortEnterCritical+0x5c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <vPortEnterCritical+0x5c>)
 8004afc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004afe:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <vPortEnterCritical+0x5c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d110      	bne.n	8004b28 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b06:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <vPortEnterCritical+0x60>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00b      	beq.n	8004b28 <vPortEnterCritical+0x50>
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	b672      	cpsid	i
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	b662      	cpsie	i
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	e7fe      	b.n	8004b26 <vPortEnterCritical+0x4e>
	}
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	20000050 	.word	0x20000050
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <vPortExitCritical+0x50>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <vPortExitCritical+0x26>
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	b672      	cpsid	i
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	b662      	cpsie	i
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	e7fe      	b.n	8004b60 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <vPortExitCritical+0x50>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <vPortExitCritical+0x50>)
 8004b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <vPortExitCritical+0x50>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <vPortExitCritical+0x42>
 8004b74:	2300      	movs	r3, #0
 8004b76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000050 	.word	0x20000050

08004b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b90:	f3ef 8009 	mrs	r0, PSP
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <pxCurrentTCBConst>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f01e 0f10 	tst.w	lr, #16
 8004ba0:	bf08      	it	eq
 8004ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	6010      	str	r0, [r2, #0]
 8004bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bb4:	b672      	cpsid	i
 8004bb6:	f380 8811 	msr	BASEPRI, r0
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	b662      	cpsie	i
 8004bc4:	f7ff fce8 	bl	8004598 <vTaskSwitchContext>
 8004bc8:	f04f 0000 	mov.w	r0, #0
 8004bcc:	f380 8811 	msr	BASEPRI, r0
 8004bd0:	bc09      	pop	{r0, r3}
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bda:	f01e 0f10 	tst.w	lr, #16
 8004bde:	bf08      	it	eq
 8004be0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004be4:	f380 8809 	msr	PSP, r0
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop

08004bf0 <pxCurrentTCBConst>:
 8004bf0:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	b672      	cpsid	i
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	b662      	cpsie	i
 8004c12:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c14:	f7ff fc06 	bl	8004424 <xTaskIncrementTick>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <SysTick_Handler+0x40>)
 8004c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortSetupTimerInterrupt+0x34>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <vPortSetupTimerInterrupt+0x38>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <vPortSetupTimerInterrupt+0x3c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <vPortSetupTimerInterrupt+0x40>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	099b      	lsrs	r3, r3, #6
 8004c58:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <vPortSetupTimerInterrupt+0x44>)
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c5e:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <vPortSetupTimerInterrupt+0x34>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000e010 	.word	0xe000e010
 8004c74:	e000e018 	.word	0xe000e018
 8004c78:	20000044 	.word	0x20000044
 8004c7c:	10624dd3 	.word	0x10624dd3
 8004c80:	e000e014 	.word	0xe000e014

08004c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c94 <vPortEnableVFP+0x10>
 8004c88:	6801      	ldr	r1, [r0, #0]
 8004c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c8e:	6001      	str	r1, [r0, #0]
 8004c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c92:	bf00      	nop
 8004c94:	e000ed88 	.word	0xe000ed88

08004c98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08a      	sub	sp, #40	; 0x28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ca4:	f7ff fb12 	bl	80042cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ca8:	4b5a      	ldr	r3, [pc, #360]	; (8004e14 <pvPortMalloc+0x17c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cb0:	f000 f916 	bl	8004ee0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cb4:	4b58      	ldr	r3, [pc, #352]	; (8004e18 <pvPortMalloc+0x180>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f040 8090 	bne.w	8004de2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01e      	beq.n	8004d06 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004cc8:	2208      	movs	r2, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4413      	add	r3, r2
 8004cce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d015      	beq.n	8004d06 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f023 0307 	bic.w	r3, r3, #7
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <pvPortMalloc+0x6e>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	b672      	cpsid	i
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	b662      	cpsie	i
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e7fe      	b.n	8004d04 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d06a      	beq.n	8004de2 <pvPortMalloc+0x14a>
 8004d0c:	4b43      	ldr	r3, [pc, #268]	; (8004e1c <pvPortMalloc+0x184>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d865      	bhi.n	8004de2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d16:	4b42      	ldr	r3, [pc, #264]	; (8004e20 <pvPortMalloc+0x188>)
 8004d18:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d1a:	4b41      	ldr	r3, [pc, #260]	; (8004e20 <pvPortMalloc+0x188>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d20:	e004      	b.n	8004d2c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d903      	bls.n	8004d3e <pvPortMalloc+0xa6>
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f1      	bne.n	8004d22 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d3e:	4b35      	ldr	r3, [pc, #212]	; (8004e14 <pvPortMalloc+0x17c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d04c      	beq.n	8004de2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	4413      	add	r3, r2
 8004d50:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	1ad2      	subs	r2, r2, r3
 8004d62:	2308      	movs	r3, #8
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d920      	bls.n	8004dac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <pvPortMalloc+0xfc>
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	b672      	cpsid	i
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	b662      	cpsie	i
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	e7fe      	b.n	8004d92 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	1ad2      	subs	r2, r2, r3
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004da6:	69b8      	ldr	r0, [r7, #24]
 8004da8:	f000 f8fc 	bl	8004fa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dac:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <pvPortMalloc+0x184>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <pvPortMalloc+0x184>)
 8004db8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dba:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <pvPortMalloc+0x184>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <pvPortMalloc+0x18c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d203      	bcs.n	8004dce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dc6:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <pvPortMalloc+0x184>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a16      	ldr	r2, [pc, #88]	; (8004e24 <pvPortMalloc+0x18c>)
 8004dcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <pvPortMalloc+0x180>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004de2:	f7ff fa81 	bl	80042e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00b      	beq.n	8004e08 <pvPortMalloc+0x170>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	b672      	cpsid	i
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	b662      	cpsie	i
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	e7fe      	b.n	8004e06 <pvPortMalloc+0x16e>
	return pvReturn;
 8004e08:	69fb      	ldr	r3, [r7, #28]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3728      	adds	r7, #40	; 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20004080 	.word	0x20004080
 8004e18:	2000408c 	.word	0x2000408c
 8004e1c:	20004084 	.word	0x20004084
 8004e20:	20004078 	.word	0x20004078
 8004e24:	20004088 	.word	0x20004088

08004e28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d04a      	beq.n	8004ed0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	425b      	negs	r3, r3
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4413      	add	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <vPortFree+0xb0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <vPortFree+0x46>
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	b672      	cpsid	i
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	b662      	cpsie	i
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e7fe      	b.n	8004e6c <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <vPortFree+0x66>
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	b672      	cpsid	i
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	b662      	cpsie	i
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	e7fe      	b.n	8004e8c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <vPortFree+0xb0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d019      	beq.n	8004ed0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d115      	bne.n	8004ed0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <vPortFree+0xb0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004eb4:	f7ff fa0a 	bl	80042cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	4b07      	ldr	r3, [pc, #28]	; (8004edc <vPortFree+0xb4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	4a06      	ldr	r2, [pc, #24]	; (8004edc <vPortFree+0xb4>)
 8004ec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ec6:	6938      	ldr	r0, [r7, #16]
 8004ec8:	f000 f86c 	bl	8004fa4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ecc:	f7ff fa0c 	bl	80042e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	2000408c 	.word	0x2000408c
 8004edc:	20004084 	.word	0x20004084

08004ee0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ee6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004eea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004eec:	4b27      	ldr	r3, [pc, #156]	; (8004f8c <prvHeapInit+0xac>)
 8004eee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3307      	adds	r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0307 	bic.w	r3, r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <prvHeapInit+0xac>)
 8004f10:	4413      	add	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f18:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <prvHeapInit+0xb0>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f1e:	4b1c      	ldr	r3, [pc, #112]	; (8004f90 <prvHeapInit+0xb0>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	4413      	add	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <prvHeapInit+0xb4>)
 8004f40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f42:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <prvHeapInit+0xb4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2200      	movs	r2, #0
 8004f48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f4a:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <prvHeapInit+0xb4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	1ad2      	subs	r2, r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <prvHeapInit+0xb4>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <prvHeapInit+0xb8>)
 8004f6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <prvHeapInit+0xbc>)
 8004f76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f78:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <prvHeapInit+0xc0>)
 8004f7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f7e:	601a      	str	r2, [r3, #0]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	20000478 	.word	0x20000478
 8004f90:	20004078 	.word	0x20004078
 8004f94:	20004080 	.word	0x20004080
 8004f98:	20004088 	.word	0x20004088
 8004f9c:	20004084 	.word	0x20004084
 8004fa0:	2000408c 	.word	0x2000408c

08004fa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fac:	4b28      	ldr	r3, [pc, #160]	; (8005050 <prvInsertBlockIntoFreeList+0xac>)
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e002      	b.n	8004fb8 <prvInsertBlockIntoFreeList+0x14>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d8f7      	bhi.n	8004fb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4413      	add	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d108      	bne.n	8004fe6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	441a      	add	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d118      	bne.n	800502c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <prvInsertBlockIntoFreeList+0xb0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d00d      	beq.n	8005022 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	441a      	add	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e008      	b.n	8005034 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <prvInsertBlockIntoFreeList+0xb0>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e003      	b.n	8005034 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d002      	beq.n	8005042 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20004078 	.word	0x20004078
 8005054:	20004080 	.word	0x20004080

08005058 <__errno>:
 8005058:	4b01      	ldr	r3, [pc, #4]	; (8005060 <__errno+0x8>)
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000054 	.word	0x20000054

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4e0d      	ldr	r6, [pc, #52]	; (800509c <__libc_init_array+0x38>)
 8005068:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506a:	1ba4      	subs	r4, r4, r6
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	2500      	movs	r5, #0
 8005070:	42a5      	cmp	r5, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	4e0b      	ldr	r6, [pc, #44]	; (80050a4 <__libc_init_array+0x40>)
 8005076:	4c0c      	ldr	r4, [pc, #48]	; (80050a8 <__libc_init_array+0x44>)
 8005078:	f000 f894 	bl	80051a4 <_init>
 800507c:	1ba4      	subs	r4, r4, r6
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	2500      	movs	r5, #0
 8005082:	42a5      	cmp	r5, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800508c:	4798      	blx	r3
 800508e:	3501      	adds	r5, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005096:	4798      	blx	r3
 8005098:	3501      	adds	r5, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	0800523c 	.word	0x0800523c
 80050a0:	0800523c 	.word	0x0800523c
 80050a4:	0800523c 	.word	0x0800523c
 80050a8:	08005240 	.word	0x08005240

080050ac <malloc>:
 80050ac:	4b02      	ldr	r3, [pc, #8]	; (80050b8 <malloc+0xc>)
 80050ae:	4601      	mov	r1, r0
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	f000 b80b 	b.w	80050cc <_malloc_r>
 80050b6:	bf00      	nop
 80050b8:	20000054 	.word	0x20000054

080050bc <memset>:
 80050bc:	4402      	add	r2, r0
 80050be:	4603      	mov	r3, r0
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d100      	bne.n	80050c6 <memset+0xa>
 80050c4:	4770      	bx	lr
 80050c6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ca:	e7f9      	b.n	80050c0 <memset+0x4>

080050cc <_malloc_r>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	1ccd      	adds	r5, r1, #3
 80050d0:	f025 0503 	bic.w	r5, r5, #3
 80050d4:	3508      	adds	r5, #8
 80050d6:	2d0c      	cmp	r5, #12
 80050d8:	bf38      	it	cc
 80050da:	250c      	movcc	r5, #12
 80050dc:	2d00      	cmp	r5, #0
 80050de:	4606      	mov	r6, r0
 80050e0:	db01      	blt.n	80050e6 <_malloc_r+0x1a>
 80050e2:	42a9      	cmp	r1, r5
 80050e4:	d903      	bls.n	80050ee <_malloc_r+0x22>
 80050e6:	230c      	movs	r3, #12
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	2000      	movs	r0, #0
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	f000 f857 	bl	80051a0 <__malloc_lock>
 80050f2:	4a21      	ldr	r2, [pc, #132]	; (8005178 <_malloc_r+0xac>)
 80050f4:	6814      	ldr	r4, [r2, #0]
 80050f6:	4621      	mov	r1, r4
 80050f8:	b991      	cbnz	r1, 8005120 <_malloc_r+0x54>
 80050fa:	4c20      	ldr	r4, [pc, #128]	; (800517c <_malloc_r+0xb0>)
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	b91b      	cbnz	r3, 8005108 <_malloc_r+0x3c>
 8005100:	4630      	mov	r0, r6
 8005102:	f000 f83d 	bl	8005180 <_sbrk_r>
 8005106:	6020      	str	r0, [r4, #0]
 8005108:	4629      	mov	r1, r5
 800510a:	4630      	mov	r0, r6
 800510c:	f000 f838 	bl	8005180 <_sbrk_r>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d124      	bne.n	800515e <_malloc_r+0x92>
 8005114:	230c      	movs	r3, #12
 8005116:	6033      	str	r3, [r6, #0]
 8005118:	4630      	mov	r0, r6
 800511a:	f000 f842 	bl	80051a2 <__malloc_unlock>
 800511e:	e7e4      	b.n	80050ea <_malloc_r+0x1e>
 8005120:	680b      	ldr	r3, [r1, #0]
 8005122:	1b5b      	subs	r3, r3, r5
 8005124:	d418      	bmi.n	8005158 <_malloc_r+0x8c>
 8005126:	2b0b      	cmp	r3, #11
 8005128:	d90f      	bls.n	800514a <_malloc_r+0x7e>
 800512a:	600b      	str	r3, [r1, #0]
 800512c:	50cd      	str	r5, [r1, r3]
 800512e:	18cc      	adds	r4, r1, r3
 8005130:	4630      	mov	r0, r6
 8005132:	f000 f836 	bl	80051a2 <__malloc_unlock>
 8005136:	f104 000b 	add.w	r0, r4, #11
 800513a:	1d23      	adds	r3, r4, #4
 800513c:	f020 0007 	bic.w	r0, r0, #7
 8005140:	1ac3      	subs	r3, r0, r3
 8005142:	d0d3      	beq.n	80050ec <_malloc_r+0x20>
 8005144:	425a      	negs	r2, r3
 8005146:	50e2      	str	r2, [r4, r3]
 8005148:	e7d0      	b.n	80050ec <_malloc_r+0x20>
 800514a:	428c      	cmp	r4, r1
 800514c:	684b      	ldr	r3, [r1, #4]
 800514e:	bf16      	itet	ne
 8005150:	6063      	strne	r3, [r4, #4]
 8005152:	6013      	streq	r3, [r2, #0]
 8005154:	460c      	movne	r4, r1
 8005156:	e7eb      	b.n	8005130 <_malloc_r+0x64>
 8005158:	460c      	mov	r4, r1
 800515a:	6849      	ldr	r1, [r1, #4]
 800515c:	e7cc      	b.n	80050f8 <_malloc_r+0x2c>
 800515e:	1cc4      	adds	r4, r0, #3
 8005160:	f024 0403 	bic.w	r4, r4, #3
 8005164:	42a0      	cmp	r0, r4
 8005166:	d005      	beq.n	8005174 <_malloc_r+0xa8>
 8005168:	1a21      	subs	r1, r4, r0
 800516a:	4630      	mov	r0, r6
 800516c:	f000 f808 	bl	8005180 <_sbrk_r>
 8005170:	3001      	adds	r0, #1
 8005172:	d0cf      	beq.n	8005114 <_malloc_r+0x48>
 8005174:	6025      	str	r5, [r4, #0]
 8005176:	e7db      	b.n	8005130 <_malloc_r+0x64>
 8005178:	20004090 	.word	0x20004090
 800517c:	20004094 	.word	0x20004094

08005180 <_sbrk_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4c06      	ldr	r4, [pc, #24]	; (800519c <_sbrk_r+0x1c>)
 8005184:	2300      	movs	r3, #0
 8005186:	4605      	mov	r5, r0
 8005188:	4608      	mov	r0, r1
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	f7fc fe46 	bl	8001e1c <_sbrk>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_sbrk_r+0x1a>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	b103      	cbz	r3, 800519a <_sbrk_r+0x1a>
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	2000485c 	.word	0x2000485c

080051a0 <__malloc_lock>:
 80051a0:	4770      	bx	lr

080051a2 <__malloc_unlock>:
 80051a2:	4770      	bx	lr

080051a4 <_init>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	bf00      	nop
 80051a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051aa:	bc08      	pop	{r3}
 80051ac:	469e      	mov	lr, r3
 80051ae:	4770      	bx	lr

080051b0 <_fini>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	bf00      	nop
 80051b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b6:	bc08      	pop	{r3}
 80051b8:	469e      	mov	lr, r3
 80051ba:	4770      	bx	lr
