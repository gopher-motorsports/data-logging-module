
Data_Logging_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f50  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08011150  08011150  00021150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112f4  080112f4  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  080112f4  080112f4  000212f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112fc  080112fc  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112fc  080112fc  000212fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011300  08011300  00021300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08011304  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f78  200000d8  080113dc  000300d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007050  080113dc  00037050  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036d12  00000000  00000000  00030106  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006974  00000000  00000000  00066e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dc8  00000000  00000000  0006d790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b00  00000000  00000000  0006f558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030bea  00000000  00000000  00071058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020a62  00000000  00000000  000a1c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108117  00000000  00000000  000c26a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ca7bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b6c  00000000  00000000  001ca838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000d8 	.word	0x200000d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08011138 	.word	0x08011138

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000dc 	.word	0x200000dc
 800023c:	08011138 	.word	0x08011138

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037e:	f1a4 0401 	sub.w	r4, r4, #1
 8000382:	d1e9      	bne.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_uldivmod>:
 80005b8:	b953      	cbnz	r3, 80005d0 <__aeabi_uldivmod+0x18>
 80005ba:	b94a      	cbnz	r2, 80005d0 <__aeabi_uldivmod+0x18>
 80005bc:	2900      	cmp	r1, #0
 80005be:	bf08      	it	eq
 80005c0:	2800      	cmpeq	r0, #0
 80005c2:	bf1c      	itt	ne
 80005c4:	f04f 31ff 	movne.w	r1, #4294967295
 80005c8:	f04f 30ff 	movne.w	r0, #4294967295
 80005cc:	f000 b972 	b.w	80008b4 <__aeabi_idiv0>
 80005d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80005d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d8:	f000 f806 	bl	80005e8 <__udivmoddi4>
 80005dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005e4:	b004      	add	sp, #16
 80005e6:	4770      	bx	lr

080005e8 <__udivmoddi4>:
 80005e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005ec:	9e08      	ldr	r6, [sp, #32]
 80005ee:	4604      	mov	r4, r0
 80005f0:	4688      	mov	r8, r1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d14b      	bne.n	800068e <__udivmoddi4+0xa6>
 80005f6:	428a      	cmp	r2, r1
 80005f8:	4615      	mov	r5, r2
 80005fa:	d967      	bls.n	80006cc <__udivmoddi4+0xe4>
 80005fc:	fab2 f282 	clz	r2, r2
 8000600:	b14a      	cbz	r2, 8000616 <__udivmoddi4+0x2e>
 8000602:	f1c2 0720 	rsb	r7, r2, #32
 8000606:	fa01 f302 	lsl.w	r3, r1, r2
 800060a:	fa20 f707 	lsr.w	r7, r0, r7
 800060e:	4095      	lsls	r5, r2
 8000610:	ea47 0803 	orr.w	r8, r7, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800061a:	0c23      	lsrs	r3, r4, #16
 800061c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000620:	fa1f fc85 	uxth.w	ip, r5
 8000624:	fb0e 8817 	mls	r8, lr, r7, r8
 8000628:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800062c:	fb07 f10c 	mul.w	r1, r7, ip
 8000630:	4299      	cmp	r1, r3
 8000632:	d909      	bls.n	8000648 <__udivmoddi4+0x60>
 8000634:	18eb      	adds	r3, r5, r3
 8000636:	f107 30ff 	add.w	r0, r7, #4294967295
 800063a:	f080 811b 	bcs.w	8000874 <__udivmoddi4+0x28c>
 800063e:	4299      	cmp	r1, r3
 8000640:	f240 8118 	bls.w	8000874 <__udivmoddi4+0x28c>
 8000644:	3f02      	subs	r7, #2
 8000646:	442b      	add	r3, r5
 8000648:	1a5b      	subs	r3, r3, r1
 800064a:	b2a4      	uxth	r4, r4
 800064c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000650:	fb0e 3310 	mls	r3, lr, r0, r3
 8000654:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000658:	fb00 fc0c 	mul.w	ip, r0, ip
 800065c:	45a4      	cmp	ip, r4
 800065e:	d909      	bls.n	8000674 <__udivmoddi4+0x8c>
 8000660:	192c      	adds	r4, r5, r4
 8000662:	f100 33ff 	add.w	r3, r0, #4294967295
 8000666:	f080 8107 	bcs.w	8000878 <__udivmoddi4+0x290>
 800066a:	45a4      	cmp	ip, r4
 800066c:	f240 8104 	bls.w	8000878 <__udivmoddi4+0x290>
 8000670:	3802      	subs	r0, #2
 8000672:	442c      	add	r4, r5
 8000674:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000678:	eba4 040c 	sub.w	r4, r4, ip
 800067c:	2700      	movs	r7, #0
 800067e:	b11e      	cbz	r6, 8000688 <__udivmoddi4+0xa0>
 8000680:	40d4      	lsrs	r4, r2
 8000682:	2300      	movs	r3, #0
 8000684:	e9c6 4300 	strd	r4, r3, [r6]
 8000688:	4639      	mov	r1, r7
 800068a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068e:	428b      	cmp	r3, r1
 8000690:	d909      	bls.n	80006a6 <__udivmoddi4+0xbe>
 8000692:	2e00      	cmp	r6, #0
 8000694:	f000 80eb 	beq.w	800086e <__udivmoddi4+0x286>
 8000698:	2700      	movs	r7, #0
 800069a:	e9c6 0100 	strd	r0, r1, [r6]
 800069e:	4638      	mov	r0, r7
 80006a0:	4639      	mov	r1, r7
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	fab3 f783 	clz	r7, r3
 80006aa:	2f00      	cmp	r7, #0
 80006ac:	d147      	bne.n	800073e <__udivmoddi4+0x156>
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d302      	bcc.n	80006b8 <__udivmoddi4+0xd0>
 80006b2:	4282      	cmp	r2, r0
 80006b4:	f200 80fa 	bhi.w	80008ac <__udivmoddi4+0x2c4>
 80006b8:	1a84      	subs	r4, r0, r2
 80006ba:	eb61 0303 	sbc.w	r3, r1, r3
 80006be:	2001      	movs	r0, #1
 80006c0:	4698      	mov	r8, r3
 80006c2:	2e00      	cmp	r6, #0
 80006c4:	d0e0      	beq.n	8000688 <__udivmoddi4+0xa0>
 80006c6:	e9c6 4800 	strd	r4, r8, [r6]
 80006ca:	e7dd      	b.n	8000688 <__udivmoddi4+0xa0>
 80006cc:	b902      	cbnz	r2, 80006d0 <__udivmoddi4+0xe8>
 80006ce:	deff      	udf	#255	; 0xff
 80006d0:	fab2 f282 	clz	r2, r2
 80006d4:	2a00      	cmp	r2, #0
 80006d6:	f040 808f 	bne.w	80007f8 <__udivmoddi4+0x210>
 80006da:	1b49      	subs	r1, r1, r5
 80006dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006e0:	fa1f f885 	uxth.w	r8, r5
 80006e4:	2701      	movs	r7, #1
 80006e6:	fbb1 fcfe 	udiv	ip, r1, lr
 80006ea:	0c23      	lsrs	r3, r4, #16
 80006ec:	fb0e 111c 	mls	r1, lr, ip, r1
 80006f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006f4:	fb08 f10c 	mul.w	r1, r8, ip
 80006f8:	4299      	cmp	r1, r3
 80006fa:	d907      	bls.n	800070c <__udivmoddi4+0x124>
 80006fc:	18eb      	adds	r3, r5, r3
 80006fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000702:	d202      	bcs.n	800070a <__udivmoddi4+0x122>
 8000704:	4299      	cmp	r1, r3
 8000706:	f200 80cd 	bhi.w	80008a4 <__udivmoddi4+0x2bc>
 800070a:	4684      	mov	ip, r0
 800070c:	1a59      	subs	r1, r3, r1
 800070e:	b2a3      	uxth	r3, r4
 8000710:	fbb1 f0fe 	udiv	r0, r1, lr
 8000714:	fb0e 1410 	mls	r4, lr, r0, r1
 8000718:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800071c:	fb08 f800 	mul.w	r8, r8, r0
 8000720:	45a0      	cmp	r8, r4
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0x14c>
 8000724:	192c      	adds	r4, r5, r4
 8000726:	f100 33ff 	add.w	r3, r0, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x14a>
 800072c:	45a0      	cmp	r8, r4
 800072e:	f200 80b6 	bhi.w	800089e <__udivmoddi4+0x2b6>
 8000732:	4618      	mov	r0, r3
 8000734:	eba4 0408 	sub.w	r4, r4, r8
 8000738:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800073c:	e79f      	b.n	800067e <__udivmoddi4+0x96>
 800073e:	f1c7 0c20 	rsb	ip, r7, #32
 8000742:	40bb      	lsls	r3, r7
 8000744:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000748:	ea4e 0e03 	orr.w	lr, lr, r3
 800074c:	fa01 f407 	lsl.w	r4, r1, r7
 8000750:	fa20 f50c 	lsr.w	r5, r0, ip
 8000754:	fa21 f30c 	lsr.w	r3, r1, ip
 8000758:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800075c:	4325      	orrs	r5, r4
 800075e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000762:	0c2c      	lsrs	r4, r5, #16
 8000764:	fb08 3319 	mls	r3, r8, r9, r3
 8000768:	fa1f fa8e 	uxth.w	sl, lr
 800076c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000770:	fb09 f40a 	mul.w	r4, r9, sl
 8000774:	429c      	cmp	r4, r3
 8000776:	fa02 f207 	lsl.w	r2, r2, r7
 800077a:	fa00 f107 	lsl.w	r1, r0, r7
 800077e:	d90b      	bls.n	8000798 <__udivmoddi4+0x1b0>
 8000780:	eb1e 0303 	adds.w	r3, lr, r3
 8000784:	f109 30ff 	add.w	r0, r9, #4294967295
 8000788:	f080 8087 	bcs.w	800089a <__udivmoddi4+0x2b2>
 800078c:	429c      	cmp	r4, r3
 800078e:	f240 8084 	bls.w	800089a <__udivmoddi4+0x2b2>
 8000792:	f1a9 0902 	sub.w	r9, r9, #2
 8000796:	4473      	add	r3, lr
 8000798:	1b1b      	subs	r3, r3, r4
 800079a:	b2ad      	uxth	r5, r5
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007a8:	fb00 fa0a 	mul.w	sl, r0, sl
 80007ac:	45a2      	cmp	sl, r4
 80007ae:	d908      	bls.n	80007c2 <__udivmoddi4+0x1da>
 80007b0:	eb1e 0404 	adds.w	r4, lr, r4
 80007b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b8:	d26b      	bcs.n	8000892 <__udivmoddi4+0x2aa>
 80007ba:	45a2      	cmp	sl, r4
 80007bc:	d969      	bls.n	8000892 <__udivmoddi4+0x2aa>
 80007be:	3802      	subs	r0, #2
 80007c0:	4474      	add	r4, lr
 80007c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007c6:	fba0 8902 	umull	r8, r9, r0, r2
 80007ca:	eba4 040a 	sub.w	r4, r4, sl
 80007ce:	454c      	cmp	r4, r9
 80007d0:	46c2      	mov	sl, r8
 80007d2:	464b      	mov	r3, r9
 80007d4:	d354      	bcc.n	8000880 <__udivmoddi4+0x298>
 80007d6:	d051      	beq.n	800087c <__udivmoddi4+0x294>
 80007d8:	2e00      	cmp	r6, #0
 80007da:	d069      	beq.n	80008b0 <__udivmoddi4+0x2c8>
 80007dc:	ebb1 050a 	subs.w	r5, r1, sl
 80007e0:	eb64 0403 	sbc.w	r4, r4, r3
 80007e4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80007e8:	40fd      	lsrs	r5, r7
 80007ea:	40fc      	lsrs	r4, r7
 80007ec:	ea4c 0505 	orr.w	r5, ip, r5
 80007f0:	e9c6 5400 	strd	r5, r4, [r6]
 80007f4:	2700      	movs	r7, #0
 80007f6:	e747      	b.n	8000688 <__udivmoddi4+0xa0>
 80007f8:	f1c2 0320 	rsb	r3, r2, #32
 80007fc:	fa20 f703 	lsr.w	r7, r0, r3
 8000800:	4095      	lsls	r5, r2
 8000802:	fa01 f002 	lsl.w	r0, r1, r2
 8000806:	fa21 f303 	lsr.w	r3, r1, r3
 800080a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800080e:	4338      	orrs	r0, r7
 8000810:	0c01      	lsrs	r1, r0, #16
 8000812:	fbb3 f7fe 	udiv	r7, r3, lr
 8000816:	fa1f f885 	uxth.w	r8, r5
 800081a:	fb0e 3317 	mls	r3, lr, r7, r3
 800081e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000822:	fb07 f308 	mul.w	r3, r7, r8
 8000826:	428b      	cmp	r3, r1
 8000828:	fa04 f402 	lsl.w	r4, r4, r2
 800082c:	d907      	bls.n	800083e <__udivmoddi4+0x256>
 800082e:	1869      	adds	r1, r5, r1
 8000830:	f107 3cff 	add.w	ip, r7, #4294967295
 8000834:	d22f      	bcs.n	8000896 <__udivmoddi4+0x2ae>
 8000836:	428b      	cmp	r3, r1
 8000838:	d92d      	bls.n	8000896 <__udivmoddi4+0x2ae>
 800083a:	3f02      	subs	r7, #2
 800083c:	4429      	add	r1, r5
 800083e:	1acb      	subs	r3, r1, r3
 8000840:	b281      	uxth	r1, r0
 8000842:	fbb3 f0fe 	udiv	r0, r3, lr
 8000846:	fb0e 3310 	mls	r3, lr, r0, r3
 800084a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800084e:	fb00 f308 	mul.w	r3, r0, r8
 8000852:	428b      	cmp	r3, r1
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x27e>
 8000856:	1869      	adds	r1, r5, r1
 8000858:	f100 3cff 	add.w	ip, r0, #4294967295
 800085c:	d217      	bcs.n	800088e <__udivmoddi4+0x2a6>
 800085e:	428b      	cmp	r3, r1
 8000860:	d915      	bls.n	800088e <__udivmoddi4+0x2a6>
 8000862:	3802      	subs	r0, #2
 8000864:	4429      	add	r1, r5
 8000866:	1ac9      	subs	r1, r1, r3
 8000868:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800086c:	e73b      	b.n	80006e6 <__udivmoddi4+0xfe>
 800086e:	4637      	mov	r7, r6
 8000870:	4630      	mov	r0, r6
 8000872:	e709      	b.n	8000688 <__udivmoddi4+0xa0>
 8000874:	4607      	mov	r7, r0
 8000876:	e6e7      	b.n	8000648 <__udivmoddi4+0x60>
 8000878:	4618      	mov	r0, r3
 800087a:	e6fb      	b.n	8000674 <__udivmoddi4+0x8c>
 800087c:	4541      	cmp	r1, r8
 800087e:	d2ab      	bcs.n	80007d8 <__udivmoddi4+0x1f0>
 8000880:	ebb8 0a02 	subs.w	sl, r8, r2
 8000884:	eb69 020e 	sbc.w	r2, r9, lr
 8000888:	3801      	subs	r0, #1
 800088a:	4613      	mov	r3, r2
 800088c:	e7a4      	b.n	80007d8 <__udivmoddi4+0x1f0>
 800088e:	4660      	mov	r0, ip
 8000890:	e7e9      	b.n	8000866 <__udivmoddi4+0x27e>
 8000892:	4618      	mov	r0, r3
 8000894:	e795      	b.n	80007c2 <__udivmoddi4+0x1da>
 8000896:	4667      	mov	r7, ip
 8000898:	e7d1      	b.n	800083e <__udivmoddi4+0x256>
 800089a:	4681      	mov	r9, r0
 800089c:	e77c      	b.n	8000798 <__udivmoddi4+0x1b0>
 800089e:	3802      	subs	r0, #2
 80008a0:	442c      	add	r4, r5
 80008a2:	e747      	b.n	8000734 <__udivmoddi4+0x14c>
 80008a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008a8:	442b      	add	r3, r5
 80008aa:	e72f      	b.n	800070c <__udivmoddi4+0x124>
 80008ac:	4638      	mov	r0, r7
 80008ae:	e708      	b.n	80006c2 <__udivmoddi4+0xda>
 80008b0:	4637      	mov	r7, r6
 80008b2:	e6e9      	b.n	8000688 <__udivmoddi4+0xa0>

080008b4 <__aeabi_idiv0>:
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop

080008b8 <init_can>:
// params:
//  MODULE_ID module_id: what module this is (ex. PDM_ID, ACM_ID)
// returns:
//  error codes specified in GopherCAN.h
S8 init_can(CAN_HandleTypeDef* hcan, MODULE_ID module_id)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
	U8 c;
	CAN_INFO_STRUCT* data_struct;

	// set the current module
	this_module_id = module_id;
 80008c4:	4a41      	ldr	r2, [pc, #260]	; (80009cc <init_can+0x114>)
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	7013      	strb	r3, [r2, #0]

	// init HAL_GetTick()
	HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f002 f87c 	bl	80029c8 <HAL_SetTickFreq>

	// setup the two buffers
	init_buffer(&rx_buffer, rx_buffer_mem, RX_BUFFER_SIZE);
 80008d0:	2220      	movs	r2, #32
 80008d2:	493f      	ldr	r1, [pc, #252]	; (80009d0 <init_can+0x118>)
 80008d4:	483f      	ldr	r0, [pc, #252]	; (80009d4 <init_can+0x11c>)
 80008d6:	f000 fea9 	bl	800162c <init_buffer>
	init_buffer(&tx_buffer, tx_buffer_mem, TX_BUFFER_SIZE);
 80008da:	2220      	movs	r2, #32
 80008dc:	493e      	ldr	r1, [pc, #248]	; (80009d8 <init_can+0x120>)
 80008de:	483f      	ldr	r0, [pc, #252]	; (80009dc <init_can+0x124>)
 80008e0:	f000 fea4 	bl	800162c <init_buffer>

	// if there are more CAN busses, set up the additional TX buffers
#ifdef MULTI_BUS
#if NUM_OF_BUSSES > 1
	init_buffer(&tx_buffer_1, tx_buffer_mem_1, TX_BUFFER_SIZE);
 80008e4:	2220      	movs	r2, #32
 80008e6:	493e      	ldr	r1, [pc, #248]	; (80009e0 <init_can+0x128>)
 80008e8:	483e      	ldr	r0, [pc, #248]	; (80009e4 <init_can+0x12c>)
 80008ea:	f000 fe9f 	bl	800162c <init_buffer>
	init_buffer(&tx_buffer_2, tx_buffer_mem_2, TX_BUFFER_SIZE);
#endif
#endif

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 80008ee:	2301      	movs	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
 80008f2:	e010      	b.n	8000916 <init_can+0x5e>
	{
		data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[c]);
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	4a3c      	ldr	r2, [pc, #240]	; (80009e8 <init_can+0x130>)
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	60bb      	str	r3, [r7, #8]

		data_struct->last_rx = 0;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
		data_struct->update_enabled = FALSE;
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2200      	movs	r2, #0
 8000908:	711a      	strb	r2, [r3, #4]
		data_struct->pending_response = FALSE;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2200      	movs	r2, #0
 800090e:	715a      	strb	r2, [r3, #5]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	3301      	adds	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	2b0b      	cmp	r3, #11
 800091a:	d9eb      	bls.n	80008f4 <init_can+0x3c>
	}

	// set each function pointer to the do_nothing() function
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	e01f      	b.n	8000962 <init_can+0xaa>
	{
		cust_funcs[c].func_ptr = &do_nothing;
 8000922:	7bfa      	ldrb	r2, [r7, #15]
 8000924:	4931      	ldr	r1, [pc, #196]	; (80009ec <init_can+0x134>)
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	4a2f      	ldr	r2, [pc, #188]	; (80009f0 <init_can+0x138>)
 8000932:	601a      	str	r2, [r3, #0]
		cust_funcs[c].func_enabled = FALSE;
 8000934:	7bfa      	ldrb	r2, [r7, #15]
 8000936:	492d      	ldr	r1, [pc, #180]	; (80009ec <init_can+0x134>)
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	440b      	add	r3, r1
 8000942:	3304      	adds	r3, #4
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
		cust_funcs[c].param_ptr = NULL;
 8000948:	7bfa      	ldrb	r2, [r7, #15]
 800094a:	4928      	ldr	r1, [pc, #160]	; (80009ec <init_can+0x134>)
 800094c:	4613      	mov	r3, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	440b      	add	r3, r1
 8000956:	3308      	adds	r3, #8
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	3301      	adds	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	2b06      	cmp	r3, #6
 8000966:	d9dc      	bls.n	8000922 <init_can+0x6a>

	}

	if (init_filters(hcan))
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 f843 	bl	80009f4 <init_filters>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <init_can+0xc2>
	{
		return FILTER_SET_FAILED;
 8000974:	f06f 0304 	mvn.w	r3, #4
 8000978:	e024      	b.n	80009c4 <init_can+0x10c>
	}

	// Setup the rx interrupt function to interrupt on any pending message
	// will call methods following the format HAL_CAN_xxxCallback()
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK
 800097a:	2102      	movs	r1, #2
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f002 fce3 	bl	8003348 <HAL_CAN_ActivateNotification>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d106      	bne.n	8000996 <init_can+0xde>
			|| HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000988:	2110      	movs	r1, #16
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f002 fcdc 	bl	8003348 <HAL_CAN_ActivateNotification>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <init_can+0xe4>
	{
		return IRQ_SET_FAILED;
 8000996:	f06f 0305 	mvn.w	r3, #5
 800099a:	e013      	b.n	80009c4 <init_can+0x10c>
	}

	// The F7xx includes interrupts for when a message is complete. Activate them here
#if TARGET == F7XX
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800099c:	2101      	movs	r1, #1
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f002 fcd2 	bl	8003348 <HAL_CAN_ActivateNotification>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <init_can+0xf8>
	{
		return IRQ_SET_FAILED;
 80009aa:	f06f 0305 	mvn.w	r3, #5
 80009ae:	e009      	b.n	80009c4 <init_can+0x10c>
	}
#endif

	// start can!
	if (HAL_CAN_Start(hcan) != HAL_OK)
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f002 fa3b 	bl	8002e2c <HAL_CAN_Start>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d002      	beq.n	80009c2 <init_can+0x10a>
	{
		return CAN_START_FAILED;
 80009bc:	f06f 0306 	mvn.w	r3, #6
 80009c0:	e000      	b.n	80009c4 <init_can+0x10c>
	}

	return CAN_SUCCESS;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20004808 	.word	0x20004808
 80009d0:	2000431c 	.word	0x2000431c
 80009d4:	20004540 	.word	0x20004540
 80009d8:	20004548 	.word	0x20004548
 80009dc:	20004748 	.word	0x20004748
 80009e0:	20004110 	.word	0x20004110
 80009e4:	20004798 	.word	0x20004798
 80009e8:	20000000 	.word	0x20000000
 80009ec:	200047a0 	.word	0x200047a0
 80009f0:	08001609 	.word	0x08001609

080009f4 <init_filters>:


// init_filters
//  function called within init() that sets up all of the filters
static S8 init_filters(CAN_HandleTypeDef* hcan)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filterConfig;

#ifdef CAN_ROUTER
	// Accept all messages on the CAN router
	filterConfig.FilterBank = 0;                                      // Modify bank 0 (of 13)
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;                // enable the filter
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;                  // Use mask mode to filter
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;                 // 32 bit mask
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterIdLow = 0;                                     // Low bound of accepted values
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterIdHigh = 0xFFFF;                               // High bound of accepted values
 8000a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a18:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0;                                 // Which bits matter when filtering (high)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMaskIdHigh = 0;                                // Which bits matter when filtering (low)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f002 f913 	bl	8002c54 <HAL_CAN_ConfigFilter>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <init_filters+0x46>
	{
		return FILTER_SET_FAILED;
 8000a34:	f06f 0304 	mvn.w	r3, #4
 8000a38:	e000      	b.n	8000a3c <init_filters+0x48>
	{
		return FILTER_SET_FAILED;
	}
#endif

	return CAN_SUCCESS;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_CAN_RxFifo0MsgPendingCallback>:


// HAL_CAN_RxFifo0MsgPendingCallback
//  ISR called when CAN_RX_FIFO0 has a pending message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	service_can_rx_hardware(hcan, CAN_RX_FIFO0);
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f9d8 	bl	8000e04 <service_can_rx_hardware>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_CAN_RxFifo1MsgPendingCallback>:


// HAL_CAN_RxFifo1MsgPendingCallback
//  ISR called when CAN_RX_FIFO1 has a pending message
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	service_can_rx_hardware(hcan, CAN_RX_FIFO1);
 8000a64:	2101      	movs	r1, #1
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f9cc 	bl	8000e04 <service_can_rx_hardware>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <send_can_command>:
//  U8 command_param_3:     parameter 3
// returns:
//  error codes specified in GopherCAN.h
S8 send_can_command(PRIORITY priority, MODULE_ID dest_module, GCAN_COMMAND command_id,
	U8 command_param_0, U8 command_param_1, U8 command_param_2, U8 command_param_3)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	4611      	mov	r1, r2
 8000a80:	461a      	mov	r2, r3
 8000a82:	4623      	mov	r3, r4
 8000a84:	71fb      	strb	r3, [r7, #7]
 8000a86:	4603      	mov	r3, r0
 8000a88:	71bb      	strb	r3, [r7, #6]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	717b      	strb	r3, [r7, #5]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	713b      	strb	r3, [r7, #4]
	CAN_MSG message;
	CAN_ID id;

	if (dest_module < 0 || dest_module >= NUM_OF_MODULES)
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	2b06      	cmp	r3, #6
 8000a96:	d902      	bls.n	8000a9e <send_can_command+0x2a>
	{
		return BAD_MODULE_ID;
 8000a98:	f06f 0301 	mvn.w	r3, #1
 8000a9c:	e02f      	b.n	8000afe <send_can_command+0x8a>
	}

	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8000a9e:	797b      	ldrb	r3, [r7, #5]
 8000aa0:	2b06      	cmp	r3, #6
 8000aa2:	d902      	bls.n	8000aaa <send_can_command+0x36>
	{
		return BAD_COMMAND_ID;
 8000aa4:	f06f 0303 	mvn.w	r3, #3
 8000aa8:	e029      	b.n	8000afe <send_can_command+0x8a>
	}

	id.priority = priority;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	723b      	strb	r3, [r7, #8]
	id.dest_module = dest_module;
 8000aae:	79bb      	ldrb	r3, [r7, #6]
 8000ab0:	727b      	strb	r3, [r7, #9]
	id.source_module = this_module_id;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <send_can_command+0x94>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	72bb      	strb	r3, [r7, #10]
	id.error = FALSE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	72fb      	strb	r3, [r7, #11]
	id.parameter = CAN_COMMAND_ID;
 8000abc:	2300      	movs	r3, #0
 8000abe:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &id);
 8000ac0:	f107 0208 	add.w	r2, r7, #8
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fba0 	bl	8001210 <build_message_id>

	// set the RTR bit to be a data message
	message.rtr_bit = DATA_MESSAGE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	753b      	strb	r3, [r7, #20]

	message.dlc = COMMAND_SIZE;
 8000ad4:	2305      	movs	r3, #5
 8000ad6:	757b      	strb	r3, [r7, #21]

	message.data[0] = command_id;
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	75bb      	strb	r3, [r7, #22]
	message.data[1] = command_param_0;
 8000adc:	793b      	ldrb	r3, [r7, #4]
 8000ade:	75fb      	strb	r3, [r7, #23]
	message.data[2] = command_param_1;
 8000ae0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ae4:	763b      	strb	r3, [r7, #24]
	message.data[3] = command_param_2;
 8000ae6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000aea:	767b      	strb	r3, [r7, #25]
	message.data[4] = command_param_3;
 8000aec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000af0:	76bb      	strb	r3, [r7, #26]

	return tx_can_message(&message);
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f9e6 	bl	8000ec8 <tx_can_message>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd90      	pop	{r4, r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20004808 	.word	0x20004808

08000b0c <send_parameter>:
//  MODULE_ID dest_module: what module to send the parameter to
//  GCAN_PARAM parameter:  what parameter to send
// returns:
//  error codes specified in GopherCAN.h
S8 send_parameter(PRIORITY priority, MODULE_ID dest_module, GCAN_PARAM parameter)
{
 8000b0c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8000b10:	b08c      	sub	sp, #48	; 0x30
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	71bb      	strb	r3, [r7, #6]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	717b      	strb	r3, [r7, #5]
	CAN_ID id;
	CAN_MSG message;
	U64 data = 0;
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	S8 c;
	FLOAT_CONVERTER float_con;

	// make sure the parameter is valid
	if (parameter <= CAN_COMMAND_ID || parameter >= NUM_OF_PARAMETERS)
 8000b2c:	797b      	ldrb	r3, [r7, #5]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <send_parameter+0x2c>
 8000b32:	797b      	ldrb	r3, [r7, #5]
 8000b34:	2b0b      	cmp	r3, #11
 8000b36:	d902      	bls.n	8000b3e <send_parameter+0x32>
	{
		return BAD_PARAMETER_ID;
 8000b38:	f06f 0302 	mvn.w	r3, #2
 8000b3c:	e0e2      	b.n	8000d04 <send_parameter+0x1f8>
	}

	// make sure the parameter is enabled
	if (!((CAN_INFO_STRUCT*)(all_parameter_structs[parameter]))->update_enabled)
 8000b3e:	797b      	ldrb	r3, [r7, #5]
 8000b40:	4a73      	ldr	r2, [pc, #460]	; (8000d10 <send_parameter+0x204>)
 8000b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <send_parameter+0x46>
	{
		return NOT_ENABLED_ERR;
 8000b4c:	f06f 030a 	mvn.w	r3, #10
 8000b50:	e0d8      	b.n	8000d04 <send_parameter+0x1f8>
	}

	// build the return message ID
	id.priority = priority;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f887 3020 	strb.w	r3, [r7, #32]
	id.dest_module = dest_module;
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	id.source_module = this_module_id;
 8000b5e:	4b6d      	ldr	r3, [pc, #436]	; (8000d14 <send_parameter+0x208>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	id.error = FALSE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	id.parameter = parameter;
 8000b6c:	797b      	ldrb	r3, [r7, #5]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	84bb      	strh	r3, [r7, #36]	; 0x24

	build_message_id(&message, &id);
 8000b72:	f107 0220 	add.w	r2, r7, #32
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fb47 	bl	8001210 <build_message_id>

	// set the RTR bit to data type
	message.rtr_bit = DATA_MESSAGE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	753b      	strb	r3, [r7, #20]

	// get the value of the data on this module and build the CAN message
	if (parameter_data_types[parameter] == UNSIGNED8
 8000b86:	797b      	ldrb	r3, [r7, #5]
 8000b88:	4a63      	ldr	r2, [pc, #396]	; (8000d18 <send_parameter+0x20c>)
 8000b8a:	5cd3      	ldrb	r3, [r2, r3]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d004      	beq.n	8000b9a <send_parameter+0x8e>
		|| parameter_data_types[parameter] == SIGNED8)
 8000b90:	797b      	ldrb	r3, [r7, #5]
 8000b92:	4a61      	ldr	r2, [pc, #388]	; (8000d18 <send_parameter+0x20c>)
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	2b05      	cmp	r3, #5
 8000b98:	d113      	bne.n	8000bc2 <send_parameter+0xb6>
	{
		data |= ((U8_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8000b9a:	797b      	ldrb	r3, [r7, #5]
 8000b9c:	4a5c      	ldr	r2, [pc, #368]	; (8000d10 <send_parameter+0x204>)
 8000b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba2:	799b      	ldrb	r3, [r3, #6]
 8000ba4:	fa5f fb83 	uxtb.w	fp, r3
 8000ba8:	f04f 0c00 	mov.w	ip, #0
 8000bac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000bb0:	ea4b 0200 	orr.w	r2, fp, r0
 8000bb4:	ea4c 0301 	orr.w	r3, ip, r1
 8000bb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U8);
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	757b      	strb	r3, [r7, #21]
 8000bc0:	e06e      	b.n	8000ca0 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == UNSIGNED16
 8000bc2:	797b      	ldrb	r3, [r7, #5]
 8000bc4:	4a54      	ldr	r2, [pc, #336]	; (8000d18 <send_parameter+0x20c>)
 8000bc6:	5cd3      	ldrb	r3, [r2, r3]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d004      	beq.n	8000bd6 <send_parameter+0xca>
		|| parameter_data_types[parameter] == SIGNED16)
 8000bcc:	797b      	ldrb	r3, [r7, #5]
 8000bce:	4a52      	ldr	r2, [pc, #328]	; (8000d18 <send_parameter+0x20c>)
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d113      	bne.n	8000bfe <send_parameter+0xf2>
	{
		data |= ((U16_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8000bd6:	797b      	ldrb	r3, [r7, #5]
 8000bd8:	4a4d      	ldr	r2, [pc, #308]	; (8000d10 <send_parameter+0x204>)
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	88db      	ldrh	r3, [r3, #6]
 8000be0:	fa1f fb83 	uxth.w	fp, r3
 8000be4:	f04f 0c00 	mov.w	ip, #0
 8000be8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000bec:	ea4b 0200 	orr.w	r2, fp, r0
 8000bf0:	ea4c 0301 	orr.w	r3, ip, r1
 8000bf4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U16);
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	757b      	strb	r3, [r7, #21]
 8000bfc:	e050      	b.n	8000ca0 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == UNSIGNED32
 8000bfe:	797b      	ldrb	r3, [r7, #5]
 8000c00:	4a45      	ldr	r2, [pc, #276]	; (8000d18 <send_parameter+0x20c>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d004      	beq.n	8000c12 <send_parameter+0x106>
		|| parameter_data_types[parameter] == SIGNED32)
 8000c08:	797b      	ldrb	r3, [r7, #5]
 8000c0a:	4a43      	ldr	r2, [pc, #268]	; (8000d18 <send_parameter+0x20c>)
 8000c0c:	5cd3      	ldrb	r3, [r2, r3]
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	d112      	bne.n	8000c38 <send_parameter+0x12c>
	{
		data |= ((U32_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8000c12:	797b      	ldrb	r3, [r7, #5]
 8000c14:	4a3e      	ldr	r2, [pc, #248]	; (8000d10 <send_parameter+0x204>)
 8000c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	469b      	mov	fp, r3
 8000c1e:	f04f 0c00 	mov.w	ip, #0
 8000c22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000c26:	ea4b 0200 	orr.w	r2, fp, r0
 8000c2a:	ea4c 0301 	orr.w	r3, ip, r1
 8000c2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U32);
 8000c32:	2304      	movs	r3, #4
 8000c34:	757b      	strb	r3, [r7, #21]
 8000c36:	e033      	b.n	8000ca0 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == UNSIGNED64
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	4a37      	ldr	r2, [pc, #220]	; (8000d18 <send_parameter+0x20c>)
 8000c3c:	5cd3      	ldrb	r3, [r2, r3]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d004      	beq.n	8000c4c <send_parameter+0x140>
		|| parameter_data_types[parameter] == SIGNED64)
 8000c42:	797b      	ldrb	r3, [r7, #5]
 8000c44:	4a34      	ldr	r2, [pc, #208]	; (8000d18 <send_parameter+0x20c>)
 8000c46:	5cd3      	ldrb	r3, [r2, r3]
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d110      	bne.n	8000c6e <send_parameter+0x162>
	{
		data |= ((U64_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8000c4c:	797b      	ldrb	r3, [r7, #5]
 8000c4e:	4a30      	ldr	r2, [pc, #192]	; (8000d10 <send_parameter+0x204>)
 8000c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c54:	e9d3 bc02 	ldrd	fp, ip, [r3, #8]
 8000c58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000c5c:	ea4b 0200 	orr.w	r2, fp, r0
 8000c60:	ea4c 0301 	orr.w	r3, ip, r1
 8000c64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(U64);
 8000c68:	2308      	movs	r3, #8
 8000c6a:	757b      	strb	r3, [r7, #21]
 8000c6c:	e018      	b.n	8000ca0 <send_parameter+0x194>
	}

	else if (parameter_data_types[parameter] == FLOATING)
 8000c6e:	797b      	ldrb	r3, [r7, #5]
 8000c70:	4a29      	ldr	r2, [pc, #164]	; (8000d18 <send_parameter+0x20c>)
 8000c72:	5cd3      	ldrb	r3, [r2, r3]
 8000c74:	2b09      	cmp	r3, #9
 8000c76:	d113      	bne.n	8000ca0 <send_parameter+0x194>
	{
		// Union to get the bitwise data of the float
		float_con.f = ((FLOAT_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8000c78:	797b      	ldrb	r3, [r7, #5]
 8000c7a:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <send_parameter+0x204>)
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	60fb      	str	r3, [r7, #12]

		data |= float_con.u32;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	469b      	mov	fp, r3
 8000c88:	f04f 0c00 	mov.w	ip, #0
 8000c8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000c90:	ea4b 0200 	orr.w	r2, fp, r0
 8000c94:	ea4c 0301 	orr.w	r3, ip, r1
 8000c98:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		message.dlc = sizeof(float);
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	757b      	strb	r3, [r7, #21]
	}

	// build the data in the message (big endian)
	for (c = message.dlc - 1; c >= 0; c--)
 8000ca0:	7d7b      	ldrb	r3, [r7, #21]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000caa:	e021      	b.n	8000cf0 <send_parameter+0x1e4>
	{
		message.data[c] = (U8)(data >> (c * BITS_IN_BYTE));
 8000cac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000cb0:	00d9      	lsls	r1, r3, #3
 8000cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000cb6:	f1c1 0620 	rsb	r6, r1, #32
 8000cba:	f1a1 0020 	sub.w	r0, r1, #32
 8000cbe:	fa22 f401 	lsr.w	r4, r2, r1
 8000cc2:	fa03 f606 	lsl.w	r6, r3, r6
 8000cc6:	4334      	orrs	r4, r6
 8000cc8:	fa23 f000 	lsr.w	r0, r3, r0
 8000ccc:	4304      	orrs	r4, r0
 8000cce:	fa23 f501 	lsr.w	r5, r3, r1
 8000cd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000cd6:	b2e2      	uxtb	r2, r4
 8000cd8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000cdc:	440b      	add	r3, r1
 8000cde:	f803 2c1a 	strb.w	r2, [r3, #-26]
	for (c = message.dlc - 1; c >= 0; c--)
 8000ce2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dad9      	bge.n	8000cac <send_parameter+0x1a0>
	}

	// send the built CAN message
	return tx_can_message(&message);
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f8e3 	bl	8000ec8 <tx_can_message>
 8000d02:	4603      	mov	r3, r0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3730      	adds	r7, #48	; 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20004808 	.word	0x20004808
 8000d18:	20000030 	.word	0x20000030

08000d1c <add_custom_can_func>:
//                                                       data type (including NULL) as long as it is casted correctly
// returns:
//  error codes specified in GopherCAN.h
S8 add_custom_can_func(GCAN_COMMAND command_id, void (*func_ptr)(MODULE_ID, void*, U8, U8, U8, U8),
	U8 init_state, void* param_ptr)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	73bb      	strb	r3, [r7, #14]
	CUST_FUNC* new_cust_func;

	// make sure the ID is valid
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	2b06      	cmp	r3, #6
 8000d32:	d902      	bls.n	8000d3a <add_custom_can_func+0x1e>
	{
		return BAD_COMMAND_ID;
 8000d34:	f06f 0303 	mvn.w	r3, #3
 8000d38:	e017      	b.n	8000d6a <add_custom_can_func+0x4e>
	}

	new_cust_func = &(cust_funcs[command_id]);
 8000d3a:	7bfa      	ldrb	r2, [r7, #15]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <add_custom_can_func+0x5c>)
 8000d46:	4413      	add	r3, r2
 8000d48:	617b      	str	r3, [r7, #20]

	// set all of the values of the struct accordingly
	new_cust_func->func_ptr       = func_ptr;
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	601a      	str	r2, [r3, #0]
	new_cust_func->func_enabled   = !!init_state;
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf14      	ite	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	2300      	moveq	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	711a      	strb	r2, [r3, #4]
	new_cust_func->param_ptr      = param_ptr;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]

	return CAN_SUCCESS;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200047a0 	.word	0x200047a0

08000d7c <service_can_tx_hardware>:
//  Method to interact directly with the CAN registers through the HAL_CAN commands.
//  then will fill as many tx mailboxes as possible from the tx_message_buffer
//
//  designed to be called at high priority on 1ms loop
void service_can_tx_hardware(CAN_HandleTypeDef* hcan)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	; 0x30
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	CAN_MSG* message;
	CAN_MSG_RING_BUFFER* buffer;

	// With multiple busses, choose the correct bus buffer to be working with
#ifdef MULTI_BUS
	buffer = choose_tx_buffer_from_hcan(hcan);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 fb79 	bl	800147c <choose_tx_buffer_from_hcan>
 8000d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
	buffer = &tx_buffer;
#endif

	// add messages to the the TX mailboxes until they are full
	while (!is_empty(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8000d8c:	e026      	b.n	8000ddc <service_can_tx_hardware+0x60>
	{
		U32 tx_mailbox_num;

		// get the next CAN message from the TX buffer (FIFO)
		message = get_from_buffer(buffer, 0);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d92:	f000 fc88 	bl	80016a6 <get_from_buffer>
 8000d96:	62b8      	str	r0, [r7, #40]	; 0x28

		// configure the settings/params of the CAN message
		tx_header.IDE = CAN_ID_EXT;                                          // 29 bit id
 8000d98:	2304      	movs	r3, #4
 8000d9a:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime = DISABLE;                              // do not send a timestamp
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		tx_header.ExtId = message->id;
 8000da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	617b      	str	r3, [r7, #20]
		tx_header.RTR = message->rtr_bit;
 8000da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000daa:	791b      	ldrb	r3, [r3, #4]
 8000dac:	61fb      	str	r3, [r7, #28]
		tx_header.DLC = message->dlc;
 8000dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db0:	795b      	ldrb	r3, [r3, #5]
 8000db2:	623b      	str	r3, [r7, #32]

		// add the message to the sending list
		if (HAL_CAN_AddTxMessage(hcan, &tx_header, message->data, &tx_mailbox_num) != HAL_OK)
 8000db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db6:	1d9a      	adds	r2, r3, #6
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	f107 0110 	add.w	r1, r7, #16
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f002 f877 	bl	8002eb4 <HAL_CAN_AddTxMessage>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d004      	beq.n	8000dd6 <service_can_tx_hardware+0x5a>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <service_can_tx_hardware+0x84>)
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e010      	b.n	8000df8 <service_can_tx_hardware+0x7c>
			return;
		}

		// move the head now that the first element has been removed
		remove_from_front(buffer);
 8000dd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000dd8:	f000 fc81 	bl	80016de <remove_from_front>
	while (!is_empty(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8000ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000dde:	f000 fc51 	bl	8001684 <is_empty>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d106      	bne.n	8000df6 <service_can_tx_hardware+0x7a>
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f002 f93e 	bl	800306a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1cc      	bne.n	8000d8e <service_can_tx_hardware+0x12>
	}

	return;
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
}
 8000df8:	3730      	adds	r7, #48	; 0x30
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000f4 	.word	0x200000f4

08000e04 <service_can_rx_hardware>:
//  U32 rx_mailbox: the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//    Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (!is_full(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8000e0e:	e02b      	b.n	8000e68 <service_can_rx_hardware+0x64>
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = get_from_buffer(&rx_buffer, rx_buffer.fill_level);
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <service_can_rx_hardware+0x84>)
 8000e12:	799b      	ldrb	r3, [r3, #6]
 8000e14:	4619      	mov	r1, r3
 8000e16:	481c      	ldr	r0, [pc, #112]	; (8000e88 <service_can_rx_hardware+0x84>)
 8000e18:	f000 fc45 	bl	80016a6 <get_from_buffer>
 8000e1c:	6278      	str	r0, [r7, #36]	; 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	3306      	adds	r3, #6
 8000e22:	f107 0208 	add.w	r2, r7, #8
 8000e26:	6839      	ldr	r1, [r7, #0]
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f002 f953 	bl	80030d4 <HAL_CAN_GetRxMessage>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d004      	beq.n	8000e3e <service_can_rx_hardware+0x3a>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <service_can_rx_hardware+0x88>)
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	e021      	b.n	8000e82 <service_can_rx_hardware+0x7e>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rx_buffer.fill_level++;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <service_can_rx_hardware+0x84>)
 8000e40:	799b      	ldrb	r3, [r3, #6]
 8000e42:	3301      	adds	r3, #1
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <service_can_rx_hardware+0x84>)
 8000e48:	719a      	strb	r2, [r3, #6]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->rtr_bit = rx_header.RTR;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	711a      	strb	r2, [r3, #4]
		message->id = rx_header.ExtId;
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	601a      	str	r2, [r3, #0]
		message->dlc = rx_header.DLC;
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	715a      	strb	r2, [r3, #5]

#ifdef CAN_ROUTER
		// router specific functionality that directly adds messages that need to be routed
		//  directly to the correct TX buffer (if needed, that decision is made within the function)
		rout_can_message(hcan, message);
 8000e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 fb66 	bl	8001534 <rout_can_message>
	while (!is_full(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8000e68:	4807      	ldr	r0, [pc, #28]	; (8000e88 <service_can_rx_hardware+0x84>)
 8000e6a:	f000 fbf8 	bl	800165e <is_full>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d106      	bne.n	8000e82 <service_can_rx_hardware+0x7e>
 8000e74:	6839      	ldr	r1, [r7, #0]
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f002 fa3e 	bl	80032f8 <HAL_CAN_GetRxFifoFillLevel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1c6      	bne.n	8000e10 <service_can_rx_hardware+0xc>
#endif
	}
}
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20004540 	.word	0x20004540
 8000e8c:	200000f4 	.word	0x200000f4

08000e90 <service_can_rx_buffer>:
//   parameter requests. The request will not be completed and the other module will have to
//   send a new request
//
//  call in a 1 ms or faster loop
S8 service_can_rx_buffer(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
	CAN_MSG* current_message;

	// run through each message in the RX buffer and service it with service_can_rx_message() (FIFO)
	while (!is_empty(&rx_buffer))
 8000e96:	e00a      	b.n	8000eae <service_can_rx_buffer+0x1e>
	{
		// get the message at the head of the array
		current_message = get_from_buffer(&rx_buffer, 0);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <service_can_rx_buffer+0x34>)
 8000e9c:	f000 fc03 	bl	80016a6 <get_from_buffer>
 8000ea0:	6078      	str	r0, [r7, #4]

		// WARNING: CAN errors from other modules are not handled in this version. The message is just discarded
		// Use a CAN bus analyzer to see what the message is for debugging
		service_can_rx_message(current_message);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f836 	bl	8000f14 <service_can_rx_message>

		// move the head now that the first element has been removed
		remove_from_front(&rx_buffer);
 8000ea8:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <service_can_rx_buffer+0x34>)
 8000eaa:	f000 fc18 	bl	80016de <remove_from_front>
	while (!is_empty(&rx_buffer))
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <service_can_rx_buffer+0x34>)
 8000eb0:	f000 fbe8 	bl	8001684 <is_empty>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0ee      	beq.n	8000e98 <service_can_rx_buffer+0x8>
	}

	return CAN_SUCCESS;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20004540 	.word	0x20004540

08000ec8 <tx_can_message>:


// tx_can_message
//  Takes in a CAN_MSG struct, adds it to the TX buffer
static S8 tx_can_message(CAN_MSG* message_to_add)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	CAN_MSG_RING_BUFFER* buffer;

#ifdef MULTI_BUS
	// Handle the case of the message being sent to all of the busses (ID 0)
	if (GET_ID_DEST(message_to_add->id) == ALL_MODULES_ID)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	0d9b      	lsrs	r3, r3, #22
 8000ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d104      	bne.n	8000ee8 <tx_can_message+0x20>
	{
		send_message_to_all_busses(message_to_add);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 fb08 	bl	80014f4 <send_message_to_all_busses>
		return CAN_SUCCESS;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e011      	b.n	8000f0c <tx_can_message+0x44>
	}

	// If there are multiple busses, choose the correct bus based on the routing table
	buffer = choose_tx_buffer_from_dest_module(message_to_add);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 fadf 	bl	80014ac <choose_tx_buffer_from_dest_module>
 8000eee:	60f8      	str	r0, [r7, #12]
#else
	buffer = &tx_buffer;
#endif

	// check to make sure the buffer is not full, then add it to the back of the TX buffer
	if (is_full(buffer))
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f000 fbb4 	bl	800165e <is_full>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <tx_can_message+0x3a>
	{
		return TX_BUFFER_FULL;
 8000efc:	f06f 0307 	mvn.w	r3, #7
 8000f00:	e004      	b.n	8000f0c <tx_can_message+0x44>
	}

	add_message_to_back(buffer, message_to_add);
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 fc0c 	bl	8001722 <add_message_to_back>

	return CAN_SUCCESS;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <service_can_rx_message>:
//  CAN message bus interrupt function this will update all
//  the global variables or trigger the CAN functions if needed.
//  Designed to be called by service_can_rx_software to loop perform
//  this task for each pending CAN message
static S8 service_can_rx_message(CAN_MSG* message)
{
 8000f14:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000f18:	b08a      	sub	sp, #40	; 0x28
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	CAN_ID id;
	CAN_INFO_STRUCT* data_struct = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
	FLOAT_CONVERTER float_con;
	U64 recieved_data = 0;
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	f04f 0400 	mov.w	r4, #0
 8000f2a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	S8 c;

	get_message_id(&id, message);
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f9cb 	bl	80012d0 <get_message_id>

	// A double check to make sure this message is actually for this module (most useful in the CAN router)
	if (id.dest_module != this_module_id && id.dest_module != ALL_MODULES_ID)
 8000f3a:	7c7a      	ldrb	r2, [r7, #17]
 8000f3c:	4b74      	ldr	r3, [pc, #464]	; (8001110 <service_can_rx_message+0x1fc>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d005      	beq.n	8000f50 <service_can_rx_message+0x3c>
 8000f44:	7c7b      	ldrb	r3, [r7, #17]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <service_can_rx_message+0x3c>
	{
		// This is not for this module. Do not process this message
		return WRONG_DEST_ERR;
 8000f4a:	f06f 030c 	mvn.w	r3, #12
 8000f4e:	e0d9      	b.n	8001104 <service_can_rx_message+0x1f0>
	}

	// if the message received has the error flag high, put the details into the last_error struct, then return
	if (id.error)
 8000f50:	7cfb      	ldrb	r3, [r7, #19]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d014      	beq.n	8000f80 <service_can_rx_message+0x6c>
	{
		// this could possibly be changed into a ring buffer
		last_error.last_rx = HAL_GetTick();
 8000f56:	f001 fd2b 	bl	80029b0 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	4b6d      	ldr	r3, [pc, #436]	; (8001114 <service_can_rx_message+0x200>)
 8000f5e:	601a      	str	r2, [r3, #0]
		last_error.source_module = id.source_module;
 8000f60:	7cba      	ldrb	r2, [r7, #18]
 8000f62:	4b6c      	ldr	r3, [pc, #432]	; (8001114 <service_can_rx_message+0x200>)
 8000f64:	711a      	strb	r2, [r3, #4]
		last_error.parameter = id.parameter;
 8000f66:	8aba      	ldrh	r2, [r7, #20]
 8000f68:	4b6a      	ldr	r3, [pc, #424]	; (8001114 <service_can_rx_message+0x200>)
 8000f6a:	80da      	strh	r2, [r3, #6]
		if (message->dlc > 0)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	795b      	ldrb	r3, [r3, #5]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <service_can_rx_message+0x68>
		{
			last_error.error_id = message->data[0];
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	799a      	ldrb	r2, [r3, #6]
 8000f78:	4b66      	ldr	r3, [pc, #408]	; (8001114 <service_can_rx_message+0x200>)
 8000f7a:	721a      	strb	r2, [r3, #8]
		}

		// return success because the problem is not with the RX
		return CAN_SUCCESS;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e0c1      	b.n	8001104 <service_can_rx_message+0x1f0>
	}

	// error checking on the parameter requested
	if (id.parameter < 0 || id.parameter >= NUM_OF_PARAMETERS)
 8000f80:	8abb      	ldrh	r3, [r7, #20]
 8000f82:	2b0b      	cmp	r3, #11
 8000f84:	d908      	bls.n	8000f98 <service_can_rx_message+0x84>
	{
		send_error_message(&id, ID_NOT_FOUND);
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 f9d7 	bl	8001340 <send_error_message>

		return NOT_FOUND_ERR;
 8000f92:	f06f 0309 	mvn.w	r3, #9
 8000f96:	e0b5      	b.n	8001104 <service_can_rx_message+0x1f0>
	}
	
	// get the associated data struct and set last_rx
	data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[id.parameter]);
 8000f98:	8abb      	ldrh	r3, [r7, #20]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b5e      	ldr	r3, [pc, #376]	; (8001118 <service_can_rx_message+0x204>)
 8000f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
	data_struct->last_rx = HAL_GetTick();
 8000fa4:	f001 fd04 	bl	80029b0 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	601a      	str	r2, [r3, #0]

    // run command: run the command specified by the CAN message on this module
	if (parameter_data_types[id.parameter] == COMMAND)
 8000fae:	8abb      	ldrh	r3, [r7, #20]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b5a      	ldr	r3, [pc, #360]	; (800111c <service_can_rx_message+0x208>)
 8000fb4:	5c9b      	ldrb	r3, [r3, r2]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d107      	bne.n	8000fca <service_can_rx_message+0xb6>
	{
		return run_can_command(message, &id);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f8db 	bl	800117c <run_can_command>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	e09c      	b.n	8001104 <service_can_rx_message+0x1f0>
	}

	// Check the update_enabled flag (if it is not a CAN command)
	if (!(data_struct->update_enabled))
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	791b      	ldrb	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d108      	bne.n	8000fe4 <service_can_rx_message+0xd0>
	{
		send_error_message(&id, PARAM_NOT_ENABLED);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f9b1 	bl	8001340 <send_error_message>
		return NOT_ENABLED_ERR;
 8000fde:	f06f 030a 	mvn.w	r3, #10
 8000fe2:	e08f      	b.n	8001104 <service_can_rx_message+0x1f0>
	}

	// request parameter: return a CAN message with the data taken from this module
	if (message->rtr_bit)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d007      	beq.n	8000ffc <service_can_rx_message+0xe8>
	{
		return parameter_requested(message, &id);
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f894 	bl	8001120 <parameter_requested>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	e083      	b.n	8001104 <service_can_rx_message+0x1f0>
	}

	// this code should only be reached if the message is a data message

	// build the data U64 (big endian)
	for (c = (message->dlc - 1); c >= 0; c--)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	795b      	ldrb	r3, [r3, #5]
 8001000:	3b01      	subs	r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	77fb      	strb	r3, [r7, #31]
 8001006:	e01b      	b.n	8001040 <service_can_rx_message+0x12c>
	{
		recieved_data |= message->data[c] << (c * BITS_IN_BYTE);
 8001008:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	799b      	ldrb	r3, [r3, #6]
 8001012:	461a      	mov	r2, r3
 8001014:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	469b      	mov	fp, r3
 8001020:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001024:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001028:	ea4b 0301 	orr.w	r3, fp, r1
 800102c:	ea4c 0402 	orr.w	r4, ip, r2
 8001030:	e9c7 3408 	strd	r3, r4, [r7, #32]
	for (c = (message->dlc - 1); c >= 0; c--)
 8001034:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3b01      	subs	r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	77fb      	strb	r3, [r7, #31]
 8001040:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001044:	2b00      	cmp	r3, #0
 8001046:	dadf      	bge.n	8001008 <service_can_rx_message+0xf4>
	}

	// Switch the pending_response flag
	data_struct->pending_response = FALSE;
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	2200      	movs	r2, #0
 800104c:	715a      	strb	r2, [r3, #5]

	// this switch will handle all of the different possible data types
	// that can be sent over CAN
	switch (parameter_data_types[id.parameter])
 800104e:	8abb      	ldrh	r3, [r7, #20]
 8001050:	461a      	mov	r2, r3
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <service_can_rx_message+0x208>)
 8001054:	5c9b      	ldrb	r3, [r3, r2]
 8001056:	3b01      	subs	r3, #1
 8001058:	2b08      	cmp	r3, #8
 800105a:	d84b      	bhi.n	80010f4 <service_can_rx_message+0x1e0>
 800105c:	a201      	add	r2, pc, #4	; (adr r2, 8001064 <service_can_rx_message+0x150>)
 800105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001062:	bf00      	nop
 8001064:	08001089 	.word	0x08001089
 8001068:	08001095 	.word	0x08001095
 800106c:	0800109f 	.word	0x0800109f
 8001070:	080010a9 	.word	0x080010a9
 8001074:	080010b7 	.word	0x080010b7
 8001078:	080010c3 	.word	0x080010c3
 800107c:	080010cf 	.word	0x080010cf
 8001080:	080010d9 	.word	0x080010d9
 8001084:	080010e7 	.word	0x080010e7
	{
	case UNSIGNED8:
		((U8_CAN_STRUCT*)(data_struct))->data = (U8)recieved_data;
 8001088:	f897 2020 	ldrb.w	r2, [r7, #32]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	719a      	strb	r2, [r3, #6]
		return CAN_SUCCESS;
 8001090:	2300      	movs	r3, #0
 8001092:	e037      	b.n	8001104 <service_can_rx_message+0x1f0>

	case UNSIGNED16:
		((U16_CAN_STRUCT*)(data_struct))->data = (U16)recieved_data;
 8001094:	8c3a      	ldrh	r2, [r7, #32]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	80da      	strh	r2, [r3, #6]
		return CAN_SUCCESS;
 800109a:	2300      	movs	r3, #0
 800109c:	e032      	b.n	8001104 <service_can_rx_message+0x1f0>

	case UNSIGNED32:
		((U32_CAN_STRUCT*)(data_struct))->data = (U32)recieved_data;
 800109e:	6a3a      	ldr	r2, [r7, #32]
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e02d      	b.n	8001104 <service_can_rx_message+0x1f0>

	case UNSIGNED64:
		((U64_CAN_STRUCT*)(data_struct))->data = (U64)recieved_data;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80010ae:	e9c2 3402 	strd	r3, r4, [r2, #8]
		return CAN_SUCCESS;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e026      	b.n	8001104 <service_can_rx_message+0x1f0>

	case SIGNED8:
		((S8_CAN_STRUCT*)(data_struct))->data = (S8)recieved_data;
 80010b6:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	719a      	strb	r2, [r3, #6]
		return CAN_SUCCESS;
 80010be:	2300      	movs	r3, #0
 80010c0:	e020      	b.n	8001104 <service_can_rx_message+0x1f0>

	case SIGNED16:
		((S16_CAN_STRUCT*)(data_struct))->data = (S16)recieved_data;
 80010c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	80da      	strh	r2, [r3, #6]
		return CAN_SUCCESS;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e01a      	b.n	8001104 <service_can_rx_message+0x1f0>

	case SIGNED32:
		((S32_CAN_STRUCT*)(data_struct))->data = (S32)recieved_data;
 80010ce:	6a3a      	ldr	r2, [r7, #32]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e015      	b.n	8001104 <service_can_rx_message+0x1f0>

	case SIGNED64:
		((S64_CAN_STRUCT*)(data_struct))->data = (S64)recieved_data;
 80010d8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	e9c2 3402 	strd	r3, r4, [r2, #8]
		return CAN_SUCCESS;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e00e      	b.n	8001104 <service_can_rx_message+0x1f0>

	case FLOATING:
		// Union to get the bitwise data of the float
		float_con.u32 = (U32)recieved_data;
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	60fb      	str	r3, [r7, #12]

		((FLOAT_CAN_STRUCT*)(data_struct))->data = float_con.f;
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e007      	b.n	8001104 <service_can_rx_message+0x1f0>

	default:
		send_error_message(&id, DATATYPE_NOT_FOUND);
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	2104      	movs	r1, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f920 	bl	8001340 <send_error_message>
		return NOT_FOUND_ERR;
 8001100:	f06f 0309 	mvn.w	r3, #9
	}

	return CAN_SUCCESS;
}
 8001104:	4618      	mov	r0, r3
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800110e:	bf00      	nop
 8001110:	20004808 	.word	0x20004808
 8001114:	20004310 	.word	0x20004310
 8001118:	20000000 	.word	0x20000000
 800111c:	20000030 	.word	0x20000030

08001120 <parameter_requested>:


// parameter_requested
//  return a CAN message with the data taken from this module
static S8 parameter_requested(CAN_MSG* message, CAN_ID* id)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	if (message->dlc != REQ_PARAM_SIZE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	795b      	ldrb	r3, [r3, #5]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <parameter_requested+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 8001132:	2103      	movs	r1, #3
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f000 f903 	bl	8001340 <send_error_message>

		return SIZE_ERR;
 800113a:	f06f 030b 	mvn.w	r3, #11
 800113e:	e019      	b.n	8001174 <parameter_requested+0x54>
	}

	// the requested parameter is stored in id->parameter of the received CAN message
	if (id->parameter <= CAN_COMMAND_ID || id->parameter >= NUM_OF_PARAMETERS)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	889b      	ldrh	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <parameter_requested+0x30>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	889b      	ldrh	r3, [r3, #4]
 800114c:	2b0b      	cmp	r3, #11
 800114e:	d906      	bls.n	800115e <parameter_requested+0x3e>
	{
		send_error_message(id, ID_NOT_FOUND);
 8001150:	2100      	movs	r1, #0
 8001152:	6838      	ldr	r0, [r7, #0]
 8001154:	f000 f8f4 	bl	8001340 <send_error_message>

		return NOT_FOUND_ERR;
 8001158:	f06f 0309 	mvn.w	r3, #9
 800115c:	e00a      	b.n	8001174 <parameter_requested+0x54>
	}

	// send the parameter data to the module that requested
	return send_parameter(id->priority, id->source_module, id->parameter);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	7818      	ldrb	r0, [r3, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	7899      	ldrb	r1, [r3, #2]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	889b      	ldrh	r3, [r3, #4]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	f7ff fccd 	bl	8000b0c <send_parameter>
 8001172:	4603      	mov	r3, r0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <run_can_command>:


// run_can_command
//  run the command specified by the CAN message on this module
static S8 run_can_command(CAN_MSG* message, CAN_ID* id)
{
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	b087      	sub	sp, #28
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	GCAN_COMMAND command_id;
	CUST_FUNC* this_function;

	// DLC error checking
	if (message->dlc != COMMAND_SIZE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	795b      	ldrb	r3, [r3, #5]
 800118a:	2b05      	cmp	r3, #5
 800118c:	d006      	beq.n	800119c <run_can_command+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 800118e:	2103      	movs	r1, #3
 8001190:	6838      	ldr	r0, [r7, #0]
 8001192:	f000 f8d5 	bl	8001340 <send_error_message>

		return SIZE_ERR;
 8001196:	f06f 030b 	mvn.w	r3, #11
 800119a:	e033      	b.n	8001204 <run_can_command+0x88>
	}

	// error checking on the command ID
	command_id = message->data[COMMAND_ID_POS];
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	799b      	ldrb	r3, [r3, #6]
 80011a0:	73fb      	strb	r3, [r7, #15]
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b06      	cmp	r3, #6
 80011a6:	d906      	bls.n	80011b6 <run_can_command+0x3a>
	{
		send_error_message(id, COMMAND_ID_NOT_FOUND);
 80011a8:	2101      	movs	r1, #1
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f000 f8c8 	bl	8001340 <send_error_message>

		return NOT_FOUND_ERR;
 80011b0:	f06f 0309 	mvn.w	r3, #9
 80011b4:	e026      	b.n	8001204 <run_can_command+0x88>
	}

	this_function = &(cust_funcs[command_id]);
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <run_can_command+0x90>)
 80011c2:	4413      	add	r3, r2
 80011c4:	60bb      	str	r3, [r7, #8]

	// check if the function is enabled
	if (!this_function->func_enabled)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	791b      	ldrb	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d106      	bne.n	80011dc <run_can_command+0x60>
	{
		send_error_message(id, COMMAND_NOT_ENABLED);
 80011ce:	2105      	movs	r1, #5
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f000 f8b5 	bl	8001340 <send_error_message>

		return NOT_ENABLED_ERR;
 80011d6:	f06f 030a 	mvn.w	r3, #10
 80011da:	e013      	b.n	8001204 <run_can_command+0x88>
	}

	// run the function
	(*(this_function->func_ptr))(id->source_module, this_function->param_ptr,
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	681c      	ldr	r4, [r3, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	7898      	ldrb	r0, [r3, #2]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	6899      	ldr	r1, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	79dd      	ldrb	r5, [r3, #7]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7a1e      	ldrb	r6, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7a5b      	ldrb	r3, [r3, #9]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	7a92      	ldrb	r2, [r2, #10]
 80011f8:	9201      	str	r2, [sp, #4]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	4633      	mov	r3, r6
 80011fe:	462a      	mov	r2, r5
 8001200:	47a0      	blx	r4
		message->data[COMMAND_PARAM_0], message->data[COMMAND_PARAM_1],
		message->data[COMMAND_PARAM_2], message->data[COMMAND_PARAM_3]);

	return CAN_SUCCESS;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120c:	200047a0 	.word	0x200047a0

08001210 <build_message_id>:

// build_can_id
//  this function will fill in the id of msg when called.
//  No error checking is preformed in this function besides masking
static void build_message_id(CAN_MSG* msg, CAN_ID* id)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	U32 temp;

	msg->id = 0;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

	// priority bit
	temp = !!id->priority;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PRIORITY_POS - PRIORITY_SIZE);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	071b      	lsls	r3, r3, #28
 8001234:	60fb      	str	r3, [r7, #12]
	temp &= PRIORITY_MASK;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]

	// destination bits
	temp = id->dest_module;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	785b      	ldrb	r3, [r3, #1]
 800124e:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - DEST_POS - DEST_SIZE);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	059b      	lsls	r3, r3, #22
 8001254:	60fb      	str	r3, [r7, #12]
	temp &= DEST_MASK;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f003 637c 	and.w	r3, r3, #264241152	; 0xfc00000
 800125c:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]

    // source bits
	temp = id->source_module;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	789b      	ldrb	r3, [r3, #2]
 800126e:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - SOURCE_POS - SOURCE_SIZE);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	041b      	lsls	r3, r3, #16
 8001274:	60fb      	str	r3, [r7, #12]
	temp &= SOURCE_MASK;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800127c:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]

	// error bit
	temp = id->error;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	78db      	ldrb	r3, [r3, #3]
 800128e:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - ERROR_POS - ERROR_SIZE);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	03db      	lsls	r3, r3, #15
 8001294:	60fb      	str	r3, [r7, #12]
	temp &= ERROR_MASK;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800129c:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]

	// parameter bits
	temp = id->parameter;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	889b      	ldrh	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PARAM_POS - PARAM_SIZE);
	temp &= PARAM_MASK;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012b6:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <get_message_id>:

// get_message_id
//  this function will take in a CAN message and convert it to
//  a CAN id struct. No error checking is performed
static void get_message_id(CAN_ID* id, CAN_MSG* message)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
	id->priority = GET_ID_PRIO(message->id);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	0f1b      	lsrs	r3, r3, #28
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	701a      	strb	r2, [r3, #0]
	id->dest_module = GET_ID_DEST(message->id);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0d9b      	lsrs	r3, r3, #22
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	705a      	strb	r2, [r3, #1]
	id->source_module = GET_ID_SOURCE(message->id);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0c1b      	lsrs	r3, r3, #16
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800130a:	b2da      	uxtb	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	709a      	strb	r2, [r3, #2]
	id->error = GET_ID_ERROR(message->id);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	0bdb      	lsrs	r3, r3, #15
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	70da      	strb	r2, [r3, #3]
	id->parameter = GET_ID_PARAM(message->id);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	809a      	strh	r2, [r3, #4]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <send_error_message>:


// send_error_message
//  Sends a return message to the original sender with the ID specified
static S8 send_error_message(CAN_ID* rx_id, U8 error_id)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
	CAN_MSG message;
	CAN_ID tx_id;

	// create the CAN ID for the error message
	tx_id.priority = rx_id->priority;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	723b      	strb	r3, [r7, #8]
	tx_id.dest_module = rx_id->source_module;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	789b      	ldrb	r3, [r3, #2]
 8001356:	727b      	strb	r3, [r7, #9]
	tx_id.source_module = this_module_id;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <send_error_message+0x58>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	72bb      	strb	r3, [r7, #10]
	tx_id.error = TRUE;
 800135e:	2301      	movs	r3, #1
 8001360:	72fb      	strb	r3, [r7, #11]
	tx_id.parameter = rx_id->parameter;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	889b      	ldrh	r3, [r3, #4]
 8001366:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &tx_id);
 8001368:	f107 0208 	add.w	r2, r7, #8
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff4c 	bl	8001210 <build_message_id>

	// set the RTR bit to a data message
	message.rtr_bit = DATA_MESSAGE;
 8001378:	2300      	movs	r3, #0
 800137a:	753b      	strb	r3, [r7, #20]

	// set the DLC and data
	message.dlc = sizeof(error_id);
 800137c:	2301      	movs	r3, #1
 800137e:	757b      	strb	r3, [r7, #21]
	message.data[0] = error_id;
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	75bb      	strb	r3, [r7, #22]

	// send the CAN message
	return tx_can_message(&message);
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fd9d 	bl	8000ec8 <tx_can_message>
 800138e:	4603      	mov	r3, r0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20004808 	.word	0x20004808

0800139c <define_can_bus>:
//
// WARNING: if MULTI_BUS is defined, this function must be called as part of the initialization step,
//           right after init() has been called for all active busses
#ifdef MULTI_BUS
void define_can_bus(CAN_HandleTypeDef* hcan, U8 gophercan_bus_id, U8 bus_number)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
 80013a8:	4613      	mov	r3, r2
 80013aa:	70bb      	strb	r3, [r7, #2]
	switch (bus_number)
 80013ac:	78bb      	ldrb	r3, [r7, #2]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d109      	bne.n	80013c6 <define_can_bus+0x2a>
		break;
#endif

#if NUM_OF_BUSSES > 1
	case 1:
		gbus1.tx_buffer = &tx_buffer_1;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <define_can_bus+0x4c>)
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <define_can_bus+0x50>)
 80013b6:	601a      	str	r2, [r3, #0]
		gbus1.hcan = hcan;
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <define_can_bus+0x4c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6053      	str	r3, [r2, #4]
		gbus1.gopher_can_id = gophercan_bus_id;
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <define_can_bus+0x4c>)
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	7213      	strb	r3, [r2, #8]
		break;
 80013c4:	e009      	b.n	80013da <define_can_bus+0x3e>
#endif

	default:
		gbus0.tx_buffer = &tx_buffer;
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <define_can_bus+0x54>)
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <define_can_bus+0x58>)
 80013ca:	601a      	str	r2, [r3, #0]
		gbus0.hcan = hcan;
 80013cc:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <define_can_bus+0x54>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6053      	str	r3, [r2, #4]
		gbus0.gopher_can_id = gophercan_bus_id;
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <define_can_bus+0x54>)
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	7213      	strb	r3, [r2, #8]
		break;
 80013d8:	bf00      	nop
	}
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20004814 	.word	0x20004814
 80013ec:	20004798 	.word	0x20004798
 80013f0:	20004764 	.word	0x20004764
 80013f4:	20004748 	.word	0x20004748

080013f8 <HAL_CAN_TxMailbox0CompleteCallback>:


// the F7xx has ISRs for available TX mailboxes having an opening. All callbacks should service the TX hardware
#if TARGET == F7XX
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff fcbb 	bl	8000d7c <service_can_tx_hardware>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fcb0 	bl	8000d7c <service_can_tx_hardware>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fca5 	bl	8000d7c <service_can_tx_hardware>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef* hcan)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fc9a 	bl	8000d7c <service_can_tx_hardware>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef* hcan)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fc8f 	bl	8000d7c <service_can_tx_hardware>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef* hcan)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fc84 	bl	8000d7c <service_can_tx_hardware>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <choose_tx_buffer_from_hcan>:
// choose_tx_buffer_from_hcan
//  Chooses what buffer the hcan pointer inputed is referring to based on the function define_can_bus().
//  If the hcan pointer is not found, defaults to module bus 0
#ifdef MULTI_BUS
static CAN_MSG_RING_BUFFER* choose_tx_buffer_from_hcan(CAN_HandleTypeDef* hcan)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	{
		return gbus2.tx_buffer;
	}
#endif
#if NUM_OF_BUSSES > 1
	if (hcan == gbus1.hcan)
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <choose_tx_buffer_from_hcan+0x28>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d102      	bne.n	8001494 <choose_tx_buffer_from_hcan+0x18>
	{
		return gbus1.tx_buffer;
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <choose_tx_buffer_from_hcan+0x28>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	e001      	b.n	8001498 <choose_tx_buffer_from_hcan+0x1c>
	}
#endif
	return gbus0.tx_buffer;
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <choose_tx_buffer_from_hcan+0x2c>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20004814 	.word	0x20004814
 80014a8:	20004764 	.word	0x20004764

080014ac <choose_tx_buffer_from_dest_module>:
// choose_tx_buffer_from_dest_module
//  Chooses which buffer the the dest_module in message_to_add is on
//  If the module is not found, defaults to module bus 0
#ifdef MULTI_BUS
static CAN_MSG_RING_BUFFER* choose_tx_buffer_from_dest_module(CAN_MSG* message_to_add)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	MODULE_ID dest_module;
	dest_module = GET_ID_DEST(message_to_add->id);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0d9b      	lsrs	r3, r3, #22
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014c0:	73fb      	strb	r3, [r7, #15]
		return gbus2.tx_buffer;
	}
	else
#endif
#if NUM_OF_BUSSES > 1
	if (module_bus_number[dest_module] == gbus1.gopher_can_id)
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <choose_tx_buffer_from_dest_module+0x3c>)
 80014c6:	5cd2      	ldrb	r2, [r2, r3]
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <choose_tx_buffer_from_dest_module+0x40>)
 80014ca:	7a1b      	ldrb	r3, [r3, #8]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d102      	bne.n	80014d6 <choose_tx_buffer_from_dest_module+0x2a>
	{
		return gbus1.tx_buffer;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <choose_tx_buffer_from_dest_module+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	e001      	b.n	80014da <choose_tx_buffer_from_dest_module+0x2e>
	}
	else
#endif
	return gbus0.tx_buffer;
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <choose_tx_buffer_from_dest_module+0x44>)
 80014d8:	681b      	ldr	r3, [r3, #0]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000003c 	.word	0x2000003c
 80014ec:	20004814 	.word	0x20004814
 80014f0:	20004764 	.word	0x20004764

080014f4 <send_message_to_all_busses>:

// send_message_to_all_busses
//  This function will add the message to all of the TX buffers active
#ifdef MULTI_BUS
static void send_message_to_all_busses(CAN_MSG* message_to_add)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
		add_message_to_back(&tx_buffer_2, message_to_add);
	}
#endif
#if NUM_OF_BUSSES > 1
	// check to make sure the buffer is not full
	if (!is_full(&tx_buffer_1))
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <send_message_to_all_busses+0x38>)
 80014fe:	f000 f8ae 	bl	800165e <is_full>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d103      	bne.n	8001510 <send_message_to_all_busses+0x1c>
	{
		add_message_to_back(&tx_buffer_1, message_to_add);
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <send_message_to_all_busses+0x38>)
 800150c:	f000 f909 	bl	8001722 <add_message_to_back>
	}
#endif
	// check to make sure the buffer is not full
	if (!is_full(&tx_buffer))
 8001510:	4807      	ldr	r0, [pc, #28]	; (8001530 <send_message_to_all_busses+0x3c>)
 8001512:	f000 f8a4 	bl	800165e <is_full>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <send_message_to_all_busses+0x30>
	{
		add_message_to_back(&tx_buffer, message_to_add);
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <send_message_to_all_busses+0x3c>)
 8001520:	f000 f8ff 	bl	8001722 <add_message_to_back>
	}
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20004798 	.word	0x20004798
 8001530:	20004748 	.word	0x20004748

08001534 <rout_can_message>:
// rout_can_message
//  Function to be called in service_can_rx_hardware() that will take messages that are
//  destined for modules on another bus and put that message into the correct TX buffer
#ifdef CAN_ROUTER
static void rout_can_message(CAN_HandleTypeDef* hcan, CAN_MSG* message)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	CAN_MSG_RING_BUFFER* buffer;
	MODULE_ID dest_module;
	dest_module = GET_ID_DEST(message->id);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0d9b      	lsrs	r3, r3, #22
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800154a:	73fb      	strb	r3, [r7, #15]

	// Get the buffer this message should go on if it needs to be routed
	buffer = choose_tx_buffer_from_dest_module(message);
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f7ff ffad 	bl	80014ac <choose_tx_buffer_from_dest_module>
 8001552:	60b8      	str	r0, [r7, #8]

	// Handle the special case of a message that needs to be sent out to all busses (ID 0)
	if (dest_module == ALL_MODULES_ID)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d122      	bne.n	80015a0 <rout_can_message+0x6c>
			add_message_to_back(&tx_buffer_2, message);
		}
#endif
#if NUM_OF_BUSSES > 1
		// check to make sure the buffer is not full and the message did not come from this buffer
		if (!is_full(&tx_buffer_1)
 800155a:	4827      	ldr	r0, [pc, #156]	; (80015f8 <rout_can_message+0xc4>)
 800155c:	f000 f87f 	bl	800165e <is_full>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10a      	bne.n	800157c <rout_can_message+0x48>
				&& &tx_buffer_1 != choose_tx_buffer_from_hcan(hcan))
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff88 	bl	800147c <choose_tx_buffer_from_hcan>
 800156c:	4602      	mov	r2, r0
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <rout_can_message+0xc4>)
 8001570:	429a      	cmp	r2, r3
 8001572:	d003      	beq.n	800157c <rout_can_message+0x48>
		{
			add_message_to_back(&tx_buffer_1, message);
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	4820      	ldr	r0, [pc, #128]	; (80015f8 <rout_can_message+0xc4>)
 8001578:	f000 f8d3 	bl	8001722 <add_message_to_back>
		}
#endif
		// check to make sure the buffer is not full and the message did not come from this buffer
		if (!is_full(&tx_buffer)
 800157c:	481f      	ldr	r0, [pc, #124]	; (80015fc <rout_can_message+0xc8>)
 800157e:	f000 f86e 	bl	800165e <is_full>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d12f      	bne.n	80015e8 <rout_can_message+0xb4>
				&& &tx_buffer != choose_tx_buffer_from_hcan(hcan))
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff77 	bl	800147c <choose_tx_buffer_from_hcan>
 800158e:	4602      	mov	r2, r0
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <rout_can_message+0xc8>)
 8001592:	429a      	cmp	r2, r3
 8001594:	d028      	beq.n	80015e8 <rout_can_message+0xb4>
		{
			add_message_to_back(&tx_buffer, message);
 8001596:	6839      	ldr	r1, [r7, #0]
 8001598:	4818      	ldr	r0, [pc, #96]	; (80015fc <rout_can_message+0xc8>)
 800159a:	f000 f8c2 	bl	8001722 <add_message_to_back>
		}

		return;
 800159e:	e023      	b.n	80015e8 <rout_can_message+0xb4>
	}

	// Make sure this message isn't for the module that is acting as the router
	if (dest_module == this_module_id)
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <rout_can_message+0xcc>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d020      	beq.n	80015ec <rout_can_message+0xb8>
		// This message is for the router module. Return and process the message as normal
		return;
	}

	// Determine if this message needs to be routed (if the destination module is on another bus)
	if (buffer == choose_tx_buffer_from_hcan(hcan))
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff66 	bl	800147c <choose_tx_buffer_from_hcan>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d01b      	beq.n	80015f0 <rout_can_message+0xbc>
		// This message does not need to be routed. It came from the bus it should be on
		return;
	}

	// check to make sure the buffer is not full. If it is, the message will be discarded
	if (is_full(buffer))
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f000 f850 	bl	800165e <is_full>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <rout_can_message+0x9e>
	{
		rx_buffer.fill_level--;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <rout_can_message+0xd0>)
 80015c6:	799b      	ldrb	r3, [r3, #6]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <rout_can_message+0xd0>)
 80015ce:	719a      	strb	r2, [r3, #6]
		return;
 80015d0:	e00f      	b.n	80015f2 <rout_can_message+0xbe>
	}

	// Add the message to the selected TX buffer
	add_message_to_back(buffer, message);
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	68b8      	ldr	r0, [r7, #8]
 80015d6:	f000 f8a4 	bl	8001722 <add_message_to_back>

	// Remove the message from the RX buffer, it is now on a TX buffer
	rx_buffer.fill_level--;
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <rout_can_message+0xd0>)
 80015dc:	799b      	ldrb	r3, [r3, #6]
 80015de:	3b01      	subs	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <rout_can_message+0xd0>)
 80015e4:	719a      	strb	r2, [r3, #6]
 80015e6:	e004      	b.n	80015f2 <rout_can_message+0xbe>
		return;
 80015e8:	bf00      	nop
 80015ea:	e002      	b.n	80015f2 <rout_can_message+0xbe>
		return;
 80015ec:	bf00      	nop
 80015ee:	e000      	b.n	80015f2 <rout_can_message+0xbe>
		return;
 80015f0:	bf00      	nop
}
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20004798 	.word	0x20004798
 80015fc:	20004748 	.word	0x20004748
 8001600:	20004808 	.word	0x20004808
 8001604:	20004540 	.word	0x20004540

08001608 <do_nothing>:
// do_nothing
//  this exists to give a default function pointer to all of the CAN commands
//  to avoid errors from bad function pointers
void do_nothing(U8 sending_module, void* param,
	U8 remote_param0, U8 remote_param1, U8 remote_param2, U8 remote_param3)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6039      	str	r1, [r7, #0]
 8001610:	4611      	mov	r1, r2
 8001612:	461a      	mov	r2, r3
 8001614:	4603      	mov	r3, r0
 8001616:	71fb      	strb	r3, [r7, #7]
 8001618:	460b      	mov	r3, r1
 800161a:	71bb      	strb	r3, [r7, #6]
 800161c:	4613      	mov	r3, r2
 800161e:	717b      	strb	r3, [r7, #5]
	// this function has successfully done nothing
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <init_buffer>:


// init_buffer
//  initialize the buffer with the values passed in as parameters
void init_buffer(CAN_MSG_RING_BUFFER* buffer, CAN_MSG buffer_memory_ptr[], U8 buffer_size)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	71fb      	strb	r3, [r7, #7]
	buffer->head = 0;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	715a      	strb	r2, [r3, #5]
	buffer->fill_level = 0;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	719a      	strb	r2, [r3, #6]
	buffer->size = buffer_size;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	79fa      	ldrb	r2, [r7, #7]
 800164a:	711a      	strb	r2, [r3, #4]
	buffer->message_buffer = buffer_memory_ptr;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	601a      	str	r2, [r3, #0]
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <is_full>:


// is_full
//  return true if the buffer is full, false otherwise
boolean is_full(CAN_MSG_RING_BUFFER* buffer)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
	if (buffer->fill_level >= buffer->size)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	799a      	ldrb	r2, [r3, #6]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	791b      	ldrb	r3, [r3, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d301      	bcc.n	8001676 <is_full+0x18>
	{
		return BOOL_TRUE;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <is_full+0x1a>
	}

	return BOOL_FALSE;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <is_empty>:


// is_empty
//  return true if the buffer has no elements, false otherwise
boolean is_empty(CAN_MSG_RING_BUFFER* buffer)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	if (buffer->fill_level > 0)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	799b      	ldrb	r3, [r3, #6]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <is_empty+0x14>
	{
		return BOOL_FALSE;
 8001694:	2300      	movs	r3, #0
 8001696:	e000      	b.n	800169a <is_empty+0x16>
	}

	return BOOL_TRUE;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <get_from_buffer>:


// get_from_buffer
//  gets the message at index as if it was a normal array
CAN_MSG* get_from_buffer(CAN_MSG_RING_BUFFER* buffer, U8 index)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	70fb      	strb	r3, [r7, #3]
	return buffer->message_buffer + ((buffer->head + index) % buffer->size);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	795b      	ldrb	r3, [r3, #5]
 80016ba:	461a      	mov	r2, r3
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	4413      	add	r3, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	7912      	ldrb	r2, [r2, #4]
 80016c4:	fb93 f0f2 	sdiv	r0, r3, r2
 80016c8:	fb02 f200 	mul.w	r2, r2, r0
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	440b      	add	r3, r1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <remove_from_front>:


// remove_from_front
//  will remove the first element of the ring buffer. If the buffer is empty it will do nothing
void remove_from_front(CAN_MSG_RING_BUFFER* buffer)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	// don't do anything if the buffer is empty
	if (is_empty(buffer))
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffcc 	bl	8001684 <is_empty>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d113      	bne.n	800171a <remove_from_front+0x3c>
	{
		return;
	}

	// move the head to the next element
	buffer->head = (buffer->head + 1) % buffer->size;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	795b      	ldrb	r3, [r3, #5]
 80016f6:	3301      	adds	r3, #1
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	7912      	ldrb	r2, [r2, #4]
 80016fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001700:	fb02 f201 	mul.w	r2, r2, r1
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	b2da      	uxtb	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	715a      	strb	r2, [r3, #5]

	// decrement the fill level
	buffer->fill_level--;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	799b      	ldrb	r3, [r3, #6]
 8001710:	3b01      	subs	r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	719a      	strb	r2, [r3, #6]
 8001718:	e000      	b.n	800171c <remove_from_front+0x3e>
		return;
 800171a:	bf00      	nop
}
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <add_message_to_back>:
// add_message_to_back
//  This function will add message to the first open slot in the ring buffer. Note no
//  error checking is done in this function, so it will need to be done somewhere else
//  before calling this function
void add_message_to_back(CAN_MSG_RING_BUFFER* buffer, CAN_MSG* message)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
	CAN_MSG* buffer_message;
	U8 c;

	// set the message in the next open element in the buffer to message_to_add (by value, not by reference)
	buffer_message = get_from_buffer(buffer, buffer->fill_level);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	799b      	ldrb	r3, [r3, #6]
 8001730:	4619      	mov	r1, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffb7 	bl	80016a6 <get_from_buffer>
 8001738:	60b8      	str	r0, [r7, #8]

	buffer_message->id = message->id;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	601a      	str	r2, [r3, #0]
	buffer_message->dlc = message->dlc;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	795a      	ldrb	r2, [r3, #5]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	715a      	strb	r2, [r3, #5]
	buffer_message->rtr_bit = message->rtr_bit;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	791a      	ldrb	r2, [r3, #4]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	711a      	strb	r2, [r3, #4]

	for (c = 0; c < buffer_message->dlc; c++)
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e00b      	b.n	8001770 <add_message_to_back+0x4e>
	{
		buffer_message->data[c] = message->data[c];
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	6839      	ldr	r1, [r7, #0]
 800175e:	440a      	add	r2, r1
 8001760:	7991      	ldrb	r1, [r2, #6]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	4413      	add	r3, r2
 8001766:	460a      	mov	r2, r1
 8001768:	719a      	strb	r2, [r3, #6]
	for (c = 0; c < buffer_message->dlc; c++)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	3301      	adds	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	795b      	ldrb	r3, [r3, #5]
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	429a      	cmp	r2, r3
 8001778:	d3ee      	bcc.n	8001758 <add_message_to_back+0x36>
	}

	// adjust the fill_level to reflect the new message added
	buffer->fill_level++;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	799b      	ldrb	r3, [r3, #6]
 800177e:	3301      	adds	r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	719a      	strb	r2, [r3, #6]
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <dlm_init>:

// dlm_init
//  This function will handle power-on behavior, all completely TBD
//  according to everthing else the module does
void dlm_init(CAN_HandleTypeDef* hcan_ptr0, CAN_HandleTypeDef* hcan_ptr1)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
    // init GopherCAN
	dlm_hcan0 = hcan_ptr0;
 800179a:	4a26      	ldr	r2, [pc, #152]	; (8001834 <dlm_init+0xa4>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6013      	str	r3, [r2, #0]
	dlm_hcan1 = hcan_ptr1;
 80017a0:	4a25      	ldr	r2, [pc, #148]	; (8001838 <dlm_init+0xa8>)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6013      	str	r3, [r2, #0]

	// initialize CAN
	// NOTE: CAN will also need to be added in CubeMX and code must be generated
	// Check the STM_CAN repo for the file "F0xx CAN Config Settings.pptx" for the correct settings
	if (init_can(dlm_hcan0, DLM_ID)
 80017a6:	4b23      	ldr	r3, [pc, #140]	; (8001834 <dlm_init+0xa4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2101      	movs	r1, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff f883 	bl	80008b8 <init_can>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d108      	bne.n	80017ca <dlm_init+0x3a>
			|| init_can(dlm_hcan1, DLM_ID))
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <dlm_init+0xa8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f87a 	bl	80008b8 <init_can>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d000      	beq.n	80017cc <dlm_init+0x3c>
	{
		// an error has occurred, stay here
		while (1);
 80017ca:	e7fe      	b.n	80017ca <dlm_init+0x3a>
	}

	// Declare which bus is which using define_can_bus
	define_can_bus(dlm_hcan1, GCAN0, 0);
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <dlm_init+0xa8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fde1 	bl	800139c <define_can_bus>
	define_can_bus(dlm_hcan0, GCAN1, 1);
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <dlm_init+0xa4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2201      	movs	r2, #1
 80017e0:	2101      	movs	r1, #1
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fdda 	bl	800139c <define_can_bus>

	// enable the tester variables
	u8_tester.update_enabled = TRUE;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <dlm_init+0xac>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	711a      	strb	r2, [r3, #4]
	u16_tester.update_enabled = TRUE;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <dlm_init+0xb0>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	711a      	strb	r2, [r3, #4]
	u32_tester.update_enabled = TRUE;
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <dlm_init+0xb4>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	711a      	strb	r2, [r3, #4]
	u64_tester.update_enabled = TRUE;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <dlm_init+0xb8>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	711a      	strb	r2, [r3, #4]
	s8_tester.update_enabled = TRUE;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <dlm_init+0xbc>)
 8001802:	2201      	movs	r2, #1
 8001804:	711a      	strb	r2, [r3, #4]
	s16_tester.update_enabled = TRUE;
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <dlm_init+0xc0>)
 8001808:	2201      	movs	r2, #1
 800180a:	711a      	strb	r2, [r3, #4]
	s32_tester.update_enabled = TRUE;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <dlm_init+0xc4>)
 800180e:	2201      	movs	r2, #1
 8001810:	711a      	strb	r2, [r3, #4]
	s64_tester.update_enabled = TRUE;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <dlm_init+0xc8>)
 8001814:	2201      	movs	r2, #1
 8001816:	711a      	strb	r2, [r3, #4]
	float_tester.update_enabled = TRUE;
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <dlm_init+0xcc>)
 800181a:	2201      	movs	r2, #1
 800181c:	711a      	strb	r2, [r3, #4]

    manage_data_aquisition_init(&ram_data);
 800181e:	4810      	ldr	r0, [pc, #64]	; (8001860 <dlm_init+0xd0>)
 8001820:	f000 f856 	bl	80018d0 <manage_data_aquisition_init>
    move_ram_data_to_storage_init(&ram_data);
 8001824:	480e      	ldr	r0, [pc, #56]	; (8001860 <dlm_init+0xd0>)
 8001826:	f000 fa95 	bl	8001d54 <move_ram_data_to_storage_init>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20004820 	.word	0x20004820
 8001838:	20004824 	.word	0x20004824
 800183c:	20004108 	.word	0x20004108
 8001840:	2000475c 	.word	0x2000475c
 8001844:	20004780 	.word	0x20004780
 8001848:	20004528 	.word	0x20004528
 800184c:	2000480c 	.word	0x2000480c
 8001850:	20004770 	.word	0x20004770
 8001854:	20004750 	.word	0x20004750
 8001858:	200047f8 	.word	0x200047f8
 800185c:	2000478c 	.word	0x2000478c
 8001860:	200000f8 	.word	0x200000f8

08001864 <manage_data_aquisition>:
//
// Call FRQ:
//  This function will need to be called at the maximum parameter
//  request rate the DLM should support.
void manage_data_aquisition()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
    request_all_buckets();
 8001868:	f000 f8fe 	bl	8001a68 <request_all_buckets>
    store_new_data();
 800186c:	f000 f93e 	bl	8001aec <store_new_data>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <move_ram_data_to_storage>:
//  involve many factors including:
//   - the max amount of lost data that we are willing to take
//   - the size of the RAM buffer and how long that will take to fill up
//   - how many write cycles to the persistent storage we are ok giving up
void move_ram_data_to_storage()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
    // TODO Use some logic to determine when the best time is to write to storage. Right
	// now it just writes every second
	if (counter == 1000)
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <move_ram_data_to_storage+0x2c>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001880:	d106      	bne.n	8001890 <move_ram_data_to_storage+0x1c>
	{
		write_data_to_storage(dlm_file_name);
 8001882:	4808      	ldr	r0, [pc, #32]	; (80018a4 <move_ram_data_to_storage+0x30>)
 8001884:	f000 fa76 	bl	8001d74 <write_data_to_storage>
		counter = 0;
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <move_ram_data_to_storage+0x2c>)
 800188a:	2200      	movs	r2, #0
 800188c:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		counter++;
	}
}
 800188e:	e005      	b.n	800189c <move_ram_data_to_storage+0x28>
		counter++;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <move_ram_data_to_storage+0x2c>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	4b01      	ldr	r3, [pc, #4]	; (80018a0 <move_ram_data_to_storage+0x2c>)
 800189a:	801a      	strh	r2, [r3, #0]
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000104 	.word	0x20000104
 80018a4:	08011240 	.word	0x08011240

080018a8 <can_service_loop>:
//  if it has been recieved
//
// Call FRQ:
//  100us because we can
void can_service_loop()
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	//service_can_rx_hardware(dlm_hcan0, CAN_RX_FIFO1);
	//service_can_rx_hardware(dlm_hcan1, CAN_RX_FIFO0);
	//service_can_rx_hardware(dlm_hcan1, CAN_RX_FIFO1);

	// handle each RX message in the buffer
	if (service_can_rx_buffer())
 80018ac:	f7ff faf0 	bl	8000e90 <service_can_rx_buffer>
	{
		// an error has occurred
	}

	service_can_tx_hardware(dlm_hcan0);
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <can_service_loop+0x20>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fa61 	bl	8000d7c <service_can_tx_hardware>
	service_can_tx_hardware(dlm_hcan1);
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <can_service_loop+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fa5c 	bl	8000d7c <service_can_tx_hardware>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20004820 	.word	0x20004820
 80018cc:	20004824 	.word	0x20004824

080018d0 <manage_data_aquisition_init>:

// manage_data_aquisition_init
//  Assign the pointer to the head node, set up the CAN commands, and tell the DAMs to start
//  defining their buckets
void manage_data_aquisition_init(DATA_INFO_NODE* ram_data)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af04      	add	r7, sp, #16
 80018d6:	6078      	str	r0, [r7, #4]
    ram_data_head = ram_data;
 80018d8:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <manage_data_aquisition_init+0x48>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]

    // Add the correct CAN command functions
    add_custom_can_func(ADD_PARAM_TO_BUCKET, &add_param_to_bucket, TRUE, NULL);
 80018de:	2300      	movs	r3, #0
 80018e0:	2201      	movs	r2, #1
 80018e2:	490e      	ldr	r1, [pc, #56]	; (800191c <manage_data_aquisition_init+0x4c>)
 80018e4:	2003      	movs	r0, #3
 80018e6:	f7ff fa19 	bl	8000d1c <add_custom_can_func>
    add_custom_can_func(ASSIGN_BUCKET_TO_FRQ, &assign_bucket_to_frq, TRUE, NULL);
 80018ea:	2300      	movs	r3, #0
 80018ec:	2201      	movs	r2, #1
 80018ee:	490c      	ldr	r1, [pc, #48]	; (8001920 <manage_data_aquisition_init+0x50>)
 80018f0:	2004      	movs	r0, #4
 80018f2:	f7ff fa13 	bl	8000d1c <add_custom_can_func>

    // Send CAN commands to all modules (specifically to the DAMs) that
    // this module is ready to be interacted with to add buckets
    send_can_command(PRIO_HIGH, DAM_ID, SEND_BUCKET_PARAMS, 0, 0, 0, 0);
 80018f6:	2300      	movs	r3, #0
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	2300      	movs	r3, #0
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	2300      	movs	r3, #0
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2300      	movs	r3, #0
 8001904:	2205      	movs	r2, #5
 8001906:	2102      	movs	r1, #2
 8001908:	2000      	movs	r0, #0
 800190a:	f7ff f8b3 	bl	8000a74 <send_can_command>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20004828 	.word	0x20004828
 800191c:	08001925 	.word	0x08001925
 8001920:	08001a01 	.word	0x08001a01

08001924 <add_param_to_bucket>:
//  This function is a CAN command, designed to be activated by the DAM. When
//  called, this will add the param inputted to the correct bucket with the assosiated
//  DAM included. Built to handle a general amount of DAMs, params, and buckets
void add_param_to_bucket(U8 sending_dam, void* UNUSED,
    U8 param_id_msb, U8 param_id_lsb, U8 bucket_id, U8 UNUSED3)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6039      	str	r1, [r7, #0]
 800192c:	4611      	mov	r1, r2
 800192e:	461a      	mov	r2, r3
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	460b      	mov	r3, r1
 8001936:	71bb      	strb	r3, [r7, #6]
 8001938:	4613      	mov	r3, r2
 800193a:	717b      	strb	r3, [r7, #5]
	BUCKET_NODE* above_bucket_node = &bucket_list_head;
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <add_param_to_bucket+0xd8>)
 800193e:	617b      	str	r3, [r7, #20]
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <add_param_to_bucket+0xd8>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	613b      	str	r3, [r7, #16]
    U16_LIST_NODE* param_node;
    U16 param_id;

    // create the param_id from the two 8-bit chunks
    param_id = (param_id_msb << BITS_IN_BYTE) | param_id_lsb;
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b21a      	sxth	r2, r3
 800194c:	797b      	ldrb	r3, [r7, #5]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21b      	sxth	r3, r3
 8001954:	81fb      	strh	r3, [r7, #14]

    // check if there exists a bucket with this ID on this DAM in the bucket list
    while (bucket_node != NULL)
 8001956:	e00f      	b.n	8001978 <add_param_to_bucket+0x54>
    {
        if ((bucket_node->bucket.dam_id == sending_dam)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	429a      	cmp	r2, r3
 8001960:	d105      	bne.n	800196e <add_param_to_bucket+0x4a>
            && (bucket_node->bucket.bucket_id == bucket_id))
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	f897 2020 	ldrb.w	r2, [r7, #32]
 800196a:	429a      	cmp	r2, r3
 800196c:	d008      	beq.n	8001980 <add_param_to_bucket+0x5c>
            // This is the correct bucket. Move on to the next step
            break;
        }

        // this is not the correct bucket. Try the next one
        above_bucket_node = bucket_node;
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	617b      	str	r3, [r7, #20]
        bucket_node = bucket_node->next;
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	613b      	str	r3, [r7, #16]
    while (bucket_node != NULL)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ec      	bne.n	8001958 <add_param_to_bucket+0x34>
 800197e:	e000      	b.n	8001982 <add_param_to_bucket+0x5e>
            break;
 8001980:	bf00      	nop
    }

    // if the bucket does not exist, make a new one and use it
    if (bucket_node == NULL)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d11d      	bne.n	80019c4 <add_param_to_bucket+0xa0>
    {
        bucket_node = (BUCKET_NODE*)malloc(sizeof(BUCKET_NODE));
 8001988:	2010      	movs	r0, #16
 800198a:	f00f faf7 	bl	8010f7c <malloc>
 800198e:	4603      	mov	r3, r0
 8001990:	613b      	str	r3, [r7, #16]

        // test if malloc failed
        if (bucket_node == NULL)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d02b      	beq.n	80019f0 <add_param_to_bucket+0xcc>
            // TODO handle a malloc error
            return;
        }

        // this is needed to make sure the list knows to stop at the end
        bucket_node->next = NULL;
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
        bucket_node->bucket.param_ids = NULL;
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]

        // set the details of this new bucket
        bucket_node->bucket.dam_id = sending_dam;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	79fa      	ldrb	r2, [r7, #7]
 80019a8:	701a      	strb	r2, [r3, #0]
        bucket_node->bucket.bucket_id = bucket_id;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019b0:	705a      	strb	r2, [r3, #1]

        // Disable this bucket by setting the ms_between_requests to 0
        bucket_node->bucket.ms_between_requests = 0;
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2200      	movs	r2, #0
 80019b6:	805a      	strh	r2, [r3, #2]
        bucket_node->bucket.last_request = 0;
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]

        // set the above node to this new node
        above_bucket_node->next = bucket_node;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	60da      	str	r2, [r3, #12]

    // Check to make sure this parameter is not already in the list
    // TODO

    // malloc some new memory for the U16 node to store the parameter
    param_node = (U16_LIST_NODE*)malloc(sizeof(U16_LIST_NODE));
 80019c4:	200c      	movs	r0, #12
 80019c6:	f00f fad9 	bl	8010f7c <malloc>
 80019ca:	4603      	mov	r3, r0
 80019cc:	60bb      	str	r3, [r7, #8]

    // test if malloc failed
    if (param_node == NULL)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00f      	beq.n	80019f4 <add_param_to_bucket+0xd0>
        return;
    }

    // add this param to the front of the param linked list. It can be added to
    // the front because order does not matter in this list
    param_node->next = bucket_node->bucket.param_ids;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	605a      	str	r2, [r3, #4]
    bucket_node->bucket.param_ids = param_node;
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	609a      	str	r2, [r3, #8]

    // set the details of the param_node
    param_node->data = param_id;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	89fa      	ldrh	r2, [r7, #14]
 80019e6:	801a      	strh	r2, [r3, #0]
    param_node->pending_responce = FALSE;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2200      	movs	r2, #0
 80019ec:	721a      	strb	r2, [r3, #8]
 80019ee:	e002      	b.n	80019f6 <add_param_to_bucket+0xd2>
            return;
 80019f0:	bf00      	nop
 80019f2:	e000      	b.n	80019f6 <add_param_to_bucket+0xd2>
        return;
 80019f4:	bf00      	nop


}
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000108 	.word	0x20000108

08001a00 <assign_bucket_to_frq>:
// assign_bucket_to_frq
//  This will take the inputted DAM and bucket ID and set the time to wait between each request
//  in ms. Designed to be called as a CAN command coming from a DAM
void assign_bucket_to_frq(U8 sending_dam, void* UNUSED,
    U8 bucket_id, U8 ms_between_requests_msb, U8 ms_between_requests_lsb, U8 UNUSED3)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6039      	str	r1, [r7, #0]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
 8001a10:	460b      	mov	r3, r1
 8001a12:	71bb      	strb	r3, [r7, #6]
 8001a14:	4613      	mov	r3, r2
 8001a16:	717b      	strb	r3, [r7, #5]
	// Skip the head node when searching
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <assign_bucket_to_frq+0x64>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60fb      	str	r3, [r7, #12]
    U16 ms_between_requests;

    // create the U16 for ms_between_requests out of the 2 U8s
    ms_between_requests = (ms_between_requests_msb << BITS_IN_BYTE) | ms_between_requests_lsb;
 8001a1e:	797b      	ldrb	r3, [r7, #5]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	7e3b      	ldrb	r3, [r7, #24]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	817b      	strh	r3, [r7, #10]

    // check if there exists a bucket with this ID on this DAM in the bucket list
    while (bucket_node != NULL)
 8001a2e:	e010      	b.n	8001a52 <assign_bucket_to_frq+0x52>
    {
        if ((bucket_node->bucket.dam_id == sending_dam)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	79fa      	ldrb	r2, [r7, #7]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d108      	bne.n	8001a4c <assign_bucket_to_frq+0x4c>
            && (bucket_node->bucket.bucket_id == bucket_id))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	785b      	ldrb	r3, [r3, #1]
 8001a3e:	79ba      	ldrb	r2, [r7, #6]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d103      	bne.n	8001a4c <assign_bucket_to_frq+0x4c>
        {
            // This is the correct bucket. Assign the ms_between_request variable in the struct as needed
            bucket_node->bucket.ms_between_requests = ms_between_requests;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	897a      	ldrh	r2, [r7, #10]
 8001a48:	805a      	strh	r2, [r3, #2]
            return;
 8001a4a:	e005      	b.n	8001a58 <assign_bucket_to_frq+0x58>
        }

        // this is not the correct bucket. Try the next one
        bucket_node = bucket_node->next;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60fb      	str	r3, [r7, #12]
    while (bucket_node != NULL)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1eb      	bne.n	8001a30 <assign_bucket_to_frq+0x30>
    }

    // The correct bucket was not found. Return
}
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000108 	.word	0x20000108

08001a68 <request_all_buckets>:

// request_all_buckets
//  Function to run through the list of buckets and checks if they need to be requested. If they do,
//  request it
void request_all_buckets()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af04      	add	r7, sp, #16
	// Skip the head node
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <request_all_buckets+0x80>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	607b      	str	r3, [r7, #4]
    U16_LIST_NODE* param_node;

    while(bucket_node != NULL)
 8001a74:	e031      	b.n	8001ada <request_all_buckets+0x72>
    {
        // check if it is the correct time to send a new message. 0ms between requests means the
        // bucket is not fully initialized
        if ((bucket_node->bucket.ms_between_requests != 0)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	885b      	ldrh	r3, [r3, #2]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d02a      	beq.n	8001ad4 <request_all_buckets+0x6c>
            && (HAL_GetTick() >= bucket_node->bucket.last_request + bucket_node->bucket.ms_between_requests))
 8001a7e:	f000 ff97 	bl	80029b0 <HAL_GetTick>
 8001a82:	4601      	mov	r1, r0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	8852      	ldrh	r2, [r2, #2]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4299      	cmp	r1, r3
 8001a90:	d320      	bcc.n	8001ad4 <request_all_buckets+0x6c>
        {
            // send the command to request the bucket
            if (send_can_command(PRIO_HIGH, bucket_node->bucket.dam_id,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7819      	ldrb	r1, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	785a      	ldrb	r2, [r3, #1]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	2206      	movs	r2, #6
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7fe ffe2 	bl	8000a74 <send_can_command>
            {
                // TODO error handling
            }

            // set the pending responce flag for each parameter in this bucket to true
            param_node = bucket_node->bucket.param_ids;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	603b      	str	r3, [r7, #0]
            while (param_node != NULL)
 8001ab6:	e005      	b.n	8001ac4 <request_all_buckets+0x5c>
            {
                param_node->pending_responce = TRUE;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2201      	movs	r2, #1
 8001abc:	721a      	strb	r2, [r3, #8]
                param_node = param_node->next;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	603b      	str	r3, [r7, #0]
            while (param_node != NULL)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f6      	bne.n	8001ab8 <request_all_buckets+0x50>
            }

            // update the last request tick
            bucket_node->bucket.last_request = HAL_GetTick();
 8001aca:	f000 ff71 	bl	80029b0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	605a      	str	r2, [r3, #4]
        }

        // move on to the next bucket
        bucket_node = bucket_node->next;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	607b      	str	r3, [r7, #4]
    while(bucket_node != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ca      	bne.n	8001a76 <request_all_buckets+0xe>
    }
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000108 	.word	0x20000108

08001aec <store_new_data>:
// store_new_data
//  Function to figure out what data stored in the GopherCAN parameters is new
//  based on data in the bucket linked list. If it deturmines the data is new,
//  store that data to the data ring buffer
void store_new_data()
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
	// Skip the head node
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <store_new_data+0x78>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	60fb      	str	r3, [r7, #12]
    U16_LIST_NODE* param_node;
    CAN_INFO_STRUCT* param_info;

    // For each parameter in each bucket, check if the last time it was
    // recieved is sooner than its bucket was requested and has not been already written
    while (bucket_node != NULL)
 8001af8:	e02e      	b.n	8001b58 <store_new_data+0x6c>
    {
        param_node = bucket_node->bucket.param_ids;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	60bb      	str	r3, [r7, #8]

        // run through each parameter in the bucket
        while (param_node != NULL)
 8001b00:	e024      	b.n	8001b4c <store_new_data+0x60>
        {
            // get the CAN_INFO_STRUCT related to this parameter. Data stores the parameter ID in the node struct
            param_info = (CAN_INFO_STRUCT*)(all_parameter_structs[param_node->data]);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <store_new_data+0x7c>)
 8001b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0e:	607b      	str	r3, [r7, #4]

            // if the parameter is pending an update and the last RX of the param is after the
            // request was sent, it needs to be added to RAM
            if (param_node->pending_responce == TRUE
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	7a1b      	ldrb	r3, [r3, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d116      	bne.n	8001b46 <store_new_data+0x5a>
                && param_info->last_rx >= bucket_node->bucket.last_request)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d310      	bcc.n	8001b46 <store_new_data+0x5a>
            {
                // add the param data to RAM
                if (add_param_to_ram(param_node, bucket_node))
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	68b8      	ldr	r0, [r7, #8]
 8001b28:	f000 f822 	bl	8001b70 <add_param_to_ram>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <store_new_data+0x54>
                {
                	// TODO error handling

                	// for now, turn on the onboard LED
                	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <store_new_data+0x80>)
 8001b3a:	f002 f89b 	bl	8003c74 <HAL_GPIO_WritePin>

                	return;
 8001b3e:	e00e      	b.n	8001b5e <store_new_data+0x72>
                }

                // disable the pending responce flag
                param_node->pending_responce = FALSE;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2200      	movs	r2, #0
 8001b44:	721a      	strb	r2, [r3, #8]
            }

            // move on to the next parameter
            param_node = param_node->next;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	60bb      	str	r3, [r7, #8]
        while (param_node != NULL)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1d7      	bne.n	8001b02 <store_new_data+0x16>
        }
        
        // move on to the next bucket
        bucket_node = bucket_node->next;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	60fb      	str	r3, [r7, #12]
    while (bucket_node != NULL)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1cd      	bne.n	8001afa <store_new_data+0xe>
    }
}
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000108 	.word	0x20000108
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	40020400 	.word	0x40020400

08001b70 <add_param_to_ram>:


// add_param_to_ram
//  Function to add the data of a specific parameter to the RAM buffer
S8 add_param_to_ram(U16_LIST_NODE* param_node, BUCKET_NODE* bucket_node)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b08f      	sub	sp, #60	; 0x3c
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    //  The size of the data can be obtained using the lookup table in GopherCAN

    DATA_INFO_NODE* data_node;
    CAN_INFO_STRUCT* can_param_struct;

    can_param_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[param_node->data]);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <add_param_to_ram+0x1d8>)
 8001b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30

    // Choose the correct type of data node based on the parameter data type, then malloc the memory needed
    switch (parameter_data_types[param_node->data])
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <add_param_to_ram+0x1dc>)
 8001b90:	5c9b      	ldrb	r3, [r3, r2]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f200 80bd 	bhi.w	8001d14 <add_param_to_ram+0x1a4>
 8001b9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <add_param_to_ram+0x30>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001bc5 	.word	0x08001bc5
 8001ba4:	08001be9 	.word	0x08001be9
 8001ba8:	08001c0d 	.word	0x08001c0d
 8001bac:	08001c31 	.word	0x08001c31
 8001bb0:	08001c59 	.word	0x08001c59
 8001bb4:	08001c7f 	.word	0x08001c7f
 8001bb8:	08001ca5 	.word	0x08001ca5
 8001bbc:	08001cc9 	.word	0x08001cc9
 8001bc0:	08001cf1 	.word	0x08001cf1
	{
	case UNSIGNED8: ;
        U8_DATA_NODE* u8_data_node = (U8_DATA_NODE*)malloc(sizeof(U8_DATA_NODE));
 8001bc4:	2010      	movs	r0, #16
 8001bc6:	f00f f9d9 	bl	8010f7c <malloc>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	60fb      	str	r3, [r7, #12]

        // check for malloc failure
        if (u8_data_node == NULL)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <add_param_to_ram+0x6a>
        {
            return DLM_MALLOC_ERROR;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	e0b1      	b.n	8001d3e <add_param_to_ram+0x1ce>
        }

		u8_data_node->data = ((U8_CAN_STRUCT*)(can_param_struct))->data;
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	799a      	ldrb	r2, [r3, #6]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	731a      	strb	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u8_data_node;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001be6:	e098      	b.n	8001d1a <add_param_to_ram+0x1aa>

	case UNSIGNED16: ;
		U16_DATA_NODE* u16_data_node = (U16_DATA_NODE*)malloc(sizeof(U16_DATA_NODE));
 8001be8:	2010      	movs	r0, #16
 8001bea:	f00f f9c7 	bl	8010f7c <malloc>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	613b      	str	r3, [r7, #16]

        // check for malloc failure
        if (u16_data_node == NULL)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <add_param_to_ram+0x8e>
        {
            return DLM_MALLOC_ERROR;
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfc:	e09f      	b.n	8001d3e <add_param_to_ram+0x1ce>
        }

		u16_data_node->data = ((U16_CAN_STRUCT*)(can_param_struct))->data;
 8001bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c00:	88da      	ldrh	r2, [r3, #6]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	819a      	strh	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u16_data_node;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001c0a:	e086      	b.n	8001d1a <add_param_to_ram+0x1aa>

	case UNSIGNED32: ;
		U32_DATA_NODE* u32_data_node = (U32_DATA_NODE*)malloc(sizeof(U32_DATA_NODE));
 8001c0c:	2010      	movs	r0, #16
 8001c0e:	f00f f9b5 	bl	8010f7c <malloc>
 8001c12:	4603      	mov	r3, r0
 8001c14:	617b      	str	r3, [r7, #20]

        // check for malloc failure
        if (u32_data_node == NULL)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <add_param_to_ram+0xb2>
        {
            return DLM_MALLOC_ERROR;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	e08d      	b.n	8001d3e <add_param_to_ram+0x1ce>
        }

		u32_data_node->data = ((U32_CAN_STRUCT*)(can_param_struct))->data;
 8001c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u32_data_node;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001c2e:	e074      	b.n	8001d1a <add_param_to_ram+0x1aa>

	case UNSIGNED64: ;
		U64_DATA_NODE* u64_data_node = (U64_DATA_NODE*)malloc(sizeof(U64_DATA_NODE));
 8001c30:	2018      	movs	r0, #24
 8001c32:	f00f f9a3 	bl	8010f7c <malloc>
 8001c36:	4603      	mov	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]

        // check for malloc failure
        if (u64_data_node == NULL)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <add_param_to_ram+0xd6>
        {
            return DLM_MALLOC_ERROR;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
 8001c44:	e07b      	b.n	8001d3e <add_param_to_ram+0x1ce>
        }

		u64_data_node->data = ((U64_CAN_STRUCT*)(can_param_struct))->data;
 8001c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c48:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	e9c2 3404 	strd	r3, r4, [r2, #16]
        data_node = (DATA_INFO_NODE*)u64_data_node;
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001c56:	e060      	b.n	8001d1a <add_param_to_ram+0x1aa>

	case SIGNED8: ;
		S8_DATA_NODE* s8_data_node = (S8_DATA_NODE*)malloc(sizeof(S8_DATA_NODE));
 8001c58:	2010      	movs	r0, #16
 8001c5a:	f00f f98f 	bl	8010f7c <malloc>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	61fb      	str	r3, [r7, #28]

        // check for malloc failure
        if (s8_data_node == NULL)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <add_param_to_ram+0xfe>
        {
            return DLM_MALLOC_ERROR;
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6c:	e067      	b.n	8001d3e <add_param_to_ram+0x1ce>
        }

		s8_data_node->data = ((S8_CAN_STRUCT*)(can_param_struct))->data;
 8001c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c70:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	731a      	strb	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s8_data_node;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001c7c:	e04d      	b.n	8001d1a <add_param_to_ram+0x1aa>

	case SIGNED16: ;
		S16_DATA_NODE* s16_data_node = (S16_DATA_NODE*)malloc(sizeof(S16_DATA_NODE));
 8001c7e:	2010      	movs	r0, #16
 8001c80:	f00f f97c 	bl	8010f7c <malloc>
 8001c84:	4603      	mov	r3, r0
 8001c86:	623b      	str	r3, [r7, #32]

        // check for malloc failure
        if (s16_data_node == NULL)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <add_param_to_ram+0x124>
        {
            return DLM_MALLOC_ERROR;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e054      	b.n	8001d3e <add_param_to_ram+0x1ce>
        }

		s16_data_node->data = ((S16_CAN_STRUCT*)(can_param_struct))->data;
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	819a      	strh	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s16_data_node;
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001ca2:	e03a      	b.n	8001d1a <add_param_to_ram+0x1aa>

	case SIGNED32: ;
		S32_DATA_NODE* s32_data_node = (S32_DATA_NODE*)malloc(sizeof(S32_DATA_NODE));
 8001ca4:	2010      	movs	r0, #16
 8001ca6:	f00f f969 	bl	8010f7c <malloc>
 8001caa:	4603      	mov	r3, r0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

        // check for malloc failure
        if (s32_data_node == NULL)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <add_param_to_ram+0x14a>
        {
            return DLM_MALLOC_ERROR;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb8:	e041      	b.n	8001d3e <add_param_to_ram+0x1ce>
        }

		s32_data_node->data = ((S32_CAN_STRUCT*)(can_param_struct))->data;
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s32_data_node;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001cc6:	e028      	b.n	8001d1a <add_param_to_ram+0x1aa>

	case SIGNED64: ;
		S64_DATA_NODE* s64_data_node = (S64_DATA_NODE*)malloc(sizeof(S64_DATA_NODE));
 8001cc8:	2018      	movs	r0, #24
 8001cca:	f00f f957 	bl	8010f7c <malloc>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28

        // check for malloc failure
        if (s64_data_node == NULL)
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <add_param_to_ram+0x16e>
        {
            return DLM_MALLOC_ERROR;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	e02f      	b.n	8001d3e <add_param_to_ram+0x1ce>
        }

		s64_data_node->data = ((S64_CAN_STRUCT*)(can_param_struct))->data;
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ce6:	e9c2 3404 	strd	r3, r4, [r2, #16]
        data_node = (DATA_INFO_NODE*)s64_data_node;
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001cee:	e014      	b.n	8001d1a <add_param_to_ram+0x1aa>

	case FLOATING: ;
		FLOAT_DATA_NODE* float_data_node = (FLOAT_DATA_NODE*)malloc(sizeof(FLOAT_DATA_NODE));
 8001cf0:	2010      	movs	r0, #16
 8001cf2:	f00f f943 	bl	8010f7c <malloc>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c

        // check for malloc failure
        if (float_data_node == NULL)
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <add_param_to_ram+0x196>
        {
            return DLM_MALLOC_ERROR;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	e01b      	b.n	8001d3e <add_param_to_ram+0x1ce>
        }

		float_data_node->data = ((FLOAT_CAN_STRUCT*)(can_param_struct))->data;
 8001d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)float_data_node;
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8001d12:	e002      	b.n	8001d1a <add_param_to_ram+0x1aa>

	default:
		// the datatype is not found for some reason
        return DLM_DATATYPE_NOT_FOUND;
 8001d14:	f06f 0301 	mvn.w	r3, #1
 8001d18:	e011      	b.n	8001d3e <add_param_to_ram+0x1ce>
	}

    // set the time the data was taken as the time is was requested, as there is less
    // TX delay than RX delay
    data_node->data_time = bucket_node->bucket.last_request;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d20:	601a      	str	r2, [r3, #0]

    // the parameter id is stored in the data of the parameter node
    data_node->param = param_node->data;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d28:	809a      	strh	r2, [r3, #4]

    // add the new node to the front of the list, after the head node
    data_node->next = ram_data_head->next;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <add_param_to_ram+0x1e0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	609a      	str	r2, [r3, #8]
    ram_data_head->next = data_node;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <add_param_to_ram+0x1e0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d3a:	609a      	str	r2, [r3, #8]

    return DLM_SUCCESS;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	373c      	adds	r7, #60	; 0x3c
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd90      	pop	{r4, r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000030 	.word	0x20000030
 8001d50:	20004828 	.word	0x20004828

08001d54 <move_ram_data_to_storage_init>:
U8 usb_mounted = USB_NOT_MOUNTED;

// move_ram_data_to_storage_init
//  TODO DOCS
void move_ram_data_to_storage_init(DATA_INFO_NODE* storage_ptr)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    ram_data_head_ptr = storage_ptr;
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <move_ram_data_to_storage_init+0x1c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]

    // TODO file name, metadata, lots of other things im sure
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20004830 	.word	0x20004830

08001d74 <write_data_to_storage>:
//  Function to run through each data node in the ram_data linked list while adding the data
//  to the USB and deleting the node from the list. This function does not need to be thread
//  safe as the STM32 is single threaded (except for RX and TX interrupts, which only affect
//  the CAN buffers)
void write_data_to_storage(const char* file_name)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	FRESULT fresult;
    DATA_INFO_NODE* data_node_above = ram_data_head_ptr;
 8001d7c:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <write_data_to_storage+0xec>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	623b      	str	r3, [r7, #32]
    DATA_INFO_NODE* data_node = ram_data_head_ptr->next;
 8001d82:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <write_data_to_storage+0xec>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    U8 data_point_str[DATA_POINT_STORAGE_SIZE];

    // make sure the USB is mounted
    if (usb_mounted != USB_MOUNTED)
 8001d8a:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <write_data_to_storage+0xf0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d161      	bne.n	8001e56 <write_data_to_storage+0xe2>
    {
    	return;
    }

    const char* yeet = "/test.txt";
 8001d92:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <write_data_to_storage+0xf4>)
 8001d94:	61fb      	str	r3, [r7, #28]

    // check if the file exists
    fresult = f_stat(yeet, &USBHfno);
 8001d96:	4935      	ldr	r1, [pc, #212]	; (8001e6c <write_data_to_storage+0xf8>)
 8001d98:	69f8      	ldr	r0, [r7, #28]
 8001d9a:	f00b fda1 	bl	800d8e0 <f_stat>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	76fb      	strb	r3, [r7, #27]
	if (fresult != FR_OK)
 8001da2:	7efb      	ldrb	r3, [r7, #27]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d019      	beq.n	8001ddc <write_data_to_storage+0x68>
	{
		// the file does not exist. Create it then close it
		fresult = f_open(&USBHFile, file_name, FA_CREATE_NEW|FA_READ|FA_WRITE);
 8001da8:	2207      	movs	r2, #7
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4830      	ldr	r0, [pc, #192]	; (8001e70 <write_data_to_storage+0xfc>)
 8001dae:	f00b f949 	bl	800d044 <f_open>
 8001db2:	4603      	mov	r3, r0
 8001db4:	76fb      	strb	r3, [r7, #27]
		if (fresult != FR_OK)
 8001db6:	7efb      	ldrb	r3, [r7, #27]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <write_data_to_storage+0x50>
		{
			// failed to create file
			file_error_code = fresult;
 8001dbc:	4a2d      	ldr	r2, [pc, #180]	; (8001e74 <write_data_to_storage+0x100>)
 8001dbe:	7efb      	ldrb	r3, [r7, #27]
 8001dc0:	7013      	strb	r3, [r2, #0]
			return;
 8001dc2:	e049      	b.n	8001e58 <write_data_to_storage+0xe4>
		}

		// close it so it can later be opened in append mode
		fresult = f_close(&USBHFile);
 8001dc4:	482a      	ldr	r0, [pc, #168]	; (8001e70 <write_data_to_storage+0xfc>)
 8001dc6:	f00b fd5c 	bl	800d882 <f_close>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	76fb      	strb	r3, [r7, #27]
		if (fresult != FR_OK)
 8001dce:	7efb      	ldrb	r3, [r7, #27]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <write_data_to_storage+0x68>
		{
			// failed to close the file
			file_error_code = fresult;
 8001dd4:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <write_data_to_storage+0x100>)
 8001dd6:	7efb      	ldrb	r3, [r7, #27]
 8001dd8:	7013      	strb	r3, [r2, #0]
		    return;
 8001dda:	e03d      	b.n	8001e58 <write_data_to_storage+0xe4>
		}
	}

    // open the file
    fresult = f_open(&USBHFile, file_name, FA_OPEN_APPEND|FA_WRITE);
 8001ddc:	2232      	movs	r2, #50	; 0x32
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4823      	ldr	r0, [pc, #140]	; (8001e70 <write_data_to_storage+0xfc>)
 8001de2:	f00b f92f 	bl	800d044 <f_open>
 8001de6:	4603      	mov	r3, r0
 8001de8:	76fb      	strb	r3, [r7, #27]

    // check to make sure the file actually opened
    if (fresult != FR_OK)
 8001dea:	7efb      	ldrb	r3, [r7, #27]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d023      	beq.n	8001e38 <write_data_to_storage+0xc4>
    {
    	file_error_code = fresult;
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <write_data_to_storage+0x100>)
 8001df2:	7efb      	ldrb	r3, [r7, #27]
 8001df4:	7013      	strb	r3, [r2, #0]
    	return;
 8001df6:	e02f      	b.n	8001e58 <write_data_to_storage+0xe4>

    // run through each data node in the RAM LL
    while (data_node != NULL)
    {
        // build the data string for this node
        build_data_string(data_point_str, data_node);
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f83c 	bl	8001e7c <build_data_string>

        // append the file with this new string
        fresult = f_write(&USBHFile, data_point_str, DATA_POINT_STORAGE_SIZE, (UINT*)(&bytes_written));
 8001e04:	f107 010c 	add.w	r1, r7, #12
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <write_data_to_storage+0x104>)
 8001e0a:	220e      	movs	r2, #14
 8001e0c:	4818      	ldr	r0, [pc, #96]	; (8001e70 <write_data_to_storage+0xfc>)
 8001e0e:	f00b faec 	bl	800d3ea <f_write>
 8001e12:	4603      	mov	r3, r0
 8001e14:	76fb      	strb	r3, [r7, #27]

        // check if the writing was successful
        if (fresult != FR_OK)
 8001e16:	7efb      	ldrb	r3, [r7, #27]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <write_data_to_storage+0xb0>
        {
        	file_error_code = fresult;
 8001e1c:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <write_data_to_storage+0x100>)
 8001e1e:	7efb      	ldrb	r3, [r7, #27]
 8001e20:	7013      	strb	r3, [r2, #0]
        	return;
 8001e22:	e019      	b.n	8001e58 <write_data_to_storage+0xe4>
        }

        // remove the pointer from the LL
        data_node_above->next = data_node->next;
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	609a      	str	r2, [r3, #8]

        // free the memory for this node, stdlib is smart enough to know how much memory was
        // originally malloced
        free(data_node);
 8001e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e2e:	f00f f8ad 	bl	8010f8c <free>

        // move on to the next data node
        data_node = data_node_above->next;
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    while (data_node != NULL)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1dc      	bne.n	8001df8 <write_data_to_storage+0x84>
    }

    // close the file
    fresult = f_close(&USBHFile);
 8001e3e:	480c      	ldr	r0, [pc, #48]	; (8001e70 <write_data_to_storage+0xfc>)
 8001e40:	f00b fd1f 	bl	800d882 <f_close>
 8001e44:	4603      	mov	r3, r0
 8001e46:	76fb      	strb	r3, [r7, #27]

    // make sure the file was actually closed
    if (fresult != FR_OK)
 8001e48:	7efb      	ldrb	r3, [r7, #27]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <write_data_to_storage+0xe4>
    {
    	file_error_code = fresult;
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <write_data_to_storage+0x100>)
 8001e50:	7efb      	ldrb	r3, [r7, #27]
 8001e52:	7013      	strb	r3, [r2, #0]
    	return;
 8001e54:	e000      	b.n	8001e58 <write_data_to_storage+0xe4>
    	return;
 8001e56:	bf00      	nop
    }
}
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20004830 	.word	0x20004830
 8001e64:	2000011b 	.word	0x2000011b
 8001e68:	08011150 	.word	0x08011150
 8001e6c:	20004840 	.word	0x20004840
 8001e70:	200048f8 	.word	0x200048f8
 8001e74:	2000011a 	.word	0x2000011a
 8001e78:	20000118 	.word	0x20000118

08001e7c <build_data_string>:
//  data point will be stored as a 16bit parameter id, 32bit time value representing
//  the ms from DLM startup, and 64bit double for the data value. This string is returned
//  in U8* data_str. This must have 14B of memory available, or else bad things will happen.
//  This function will also remove the data node from the LL
void build_data_string(U8 data_str[], DATA_INFO_NODE* data_node)
{
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
    DPF_CONVERTER data_union;
    U8 c;

    // write the parameter to the first 2 bytes
    for (c = 0; c < STORAGE_PARAM_SIZE; c++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]
 8001e8a:	e010      	b.n	8001eae <build_data_string+0x32>
    {
        data_str[c] = (U8)(data_node->param >> (((STORAGE_PARAM_SIZE - 1) - c) * BITS_IN_BYTE));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	889b      	ldrh	r3, [r3, #4]
 8001e90:	461a      	mov	r2, r3
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	f1c3 0301 	rsb	r3, r3, #1
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	fa42 f103 	asr.w	r1, r2, r3
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < STORAGE_PARAM_SIZE; c++)
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	75fb      	strb	r3, [r7, #23]
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d9eb      	bls.n	8001e8c <build_data_string+0x10>
    }

    // write the timestamp to the next 4 bytes
    for (c = 0; c < TIMESTAMP_SIZE; c++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	75fb      	strb	r3, [r7, #23]
 8001eb8:	e010      	b.n	8001edc <build_data_string+0x60>
    {
        data_str[c + STORAGE_PARAM_SIZE] = (U8)(data_node->data_time >> (((TIMESTAMP_SIZE - 1) - c) * BITS_IN_BYTE));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	f1c3 0303 	rsb	r3, r3, #3
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	fa22 f103 	lsr.w	r1, r2, r3
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	3302      	adds	r3, #2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < TIMESTAMP_SIZE; c++)
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	75fb      	strb	r3, [r7, #23]
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d9eb      	bls.n	8001eba <build_data_string+0x3e>
    }

    // write the double of the data to the last 8 bytes
    data_union.d = convert_data_to_dpf(data_node);
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f000 f82c 	bl	8001f40 <convert_data_to_dpf>
 8001ee8:	eeb0 7b40 	vmov.f64	d7, d0
 8001eec:	ed87 7b02 	vstr	d7, [r7, #8]
    for (c = 0; c < DATA_SIZE; c++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	75fb      	strb	r3, [r7, #23]
 8001ef4:	e01c      	b.n	8001f30 <build_data_string+0xb4>
    {
        data_str[c + STORAGE_PARAM_SIZE + TIMESTAMP_SIZE] = (U8)(data_union.u64 >> (((DATA_SIZE - 1) - c) * BITS_IN_BYTE));
 8001ef6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001efa:	7df9      	ldrb	r1, [r7, #23]
 8001efc:	f1c1 0107 	rsb	r1, r1, #7
 8001f00:	00c9      	lsls	r1, r1, #3
 8001f02:	f1c1 0620 	rsb	r6, r1, #32
 8001f06:	f1a1 0020 	sub.w	r0, r1, #32
 8001f0a:	fa22 f401 	lsr.w	r4, r2, r1
 8001f0e:	fa03 f606 	lsl.w	r6, r3, r6
 8001f12:	4334      	orrs	r4, r6
 8001f14:	fa23 f000 	lsr.w	r0, r3, r0
 8001f18:	4304      	orrs	r4, r0
 8001f1a:	fa23 f501 	lsr.w	r5, r3, r1
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	3306      	adds	r3, #6
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	b2e2      	uxtb	r2, r4
 8001f28:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < DATA_SIZE; c++)
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	75fb      	strb	r3, [r7, #23]
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b07      	cmp	r3, #7
 8001f34:	d9df      	bls.n	8001ef6 <build_data_string+0x7a>
    }
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f40 <convert_data_to_dpf>:
// convert_data_to_dpf
//  Function to take in a data node, get the data stored in it, and return
//  the double precision float representation of that value to be stored on
//  the external USB
double convert_data_to_dpf(DATA_INFO_NODE* data_node)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
    // switch to get the data out of the data_node
    switch (parameter_data_types[data_node->param])
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	889b      	ldrh	r3, [r3, #4]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <convert_data_to_dpf+0xe8>)
 8001f50:	5c9b      	ldrb	r3, [r3, r2]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d85b      	bhi.n	8002010 <convert_data_to_dpf+0xd0>
 8001f58:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <convert_data_to_dpf+0x20>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f85 	.word	0x08001f85
 8001f64:	08001f93 	.word	0x08001f93
 8001f68:	08001fa1 	.word	0x08001fa1
 8001f6c:	08001faf 	.word	0x08001faf
 8001f70:	08001fc3 	.word	0x08001fc3
 8001f74:	08001fd3 	.word	0x08001fd3
 8001f78:	08001fe3 	.word	0x08001fe3
 8001f7c:	08001ff1 	.word	0x08001ff1
 8001f80:	08002005 	.word	0x08002005
	{
	case UNSIGNED8:
		return (double)(((U8_DATA_NODE*)data_node)->data);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7b1b      	ldrb	r3, [r3, #12]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001f90:	e040      	b.n	8002014 <convert_data_to_dpf+0xd4>

	case UNSIGNED16:
		return (double)(((U16_DATA_NODE*)data_node)->data);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	899b      	ldrh	r3, [r3, #12]
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001f9e:	e039      	b.n	8002014 <convert_data_to_dpf+0xd4>

	case UNSIGNED32:
		return (double)(((U32_DATA_NODE*)data_node)->data);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001fac:	e032      	b.n	8002014 <convert_data_to_dpf+0xd4>

	case UNSIGNED64:
		return (double)(((U64_DATA_NODE*)data_node)->data);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	f7fe fac8 	bl	800054c <__aeabi_ul2d>
 8001fbc:	ec41 0b17 	vmov	d7, r0, r1
 8001fc0:	e028      	b.n	8002014 <convert_data_to_dpf+0xd4>

	case SIGNED8:
		return (double)(((S8_DATA_NODE*)data_node)->data);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001fc8:	ee07 3a90 	vmov	s15, r3
 8001fcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fd0:	e020      	b.n	8002014 <convert_data_to_dpf+0xd4>

	case SIGNED16:
		return (double)(((S16_DATA_NODE*)data_node)->data);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fe0:	e018      	b.n	8002014 <convert_data_to_dpf+0xd4>

	case SIGNED32:
		return (double)(((S32_DATA_NODE*)data_node)->data);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fee:	e011      	b.n	8002014 <convert_data_to_dpf+0xd4>

	case SIGNED64:
		return (double)(((S64_DATA_NODE*)data_node)->data);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	f7fe faaf 	bl	800055c <__aeabi_l2d>
 8001ffe:	ec41 0b17 	vmov	d7, r0, r1
 8002002:	e007      	b.n	8002014 <convert_data_to_dpf+0xd4>

	case FLOATING:
		return (double)(((FLOAT_DATA_NODE*)data_node)->data);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	edd3 7a03 	vldr	s15, [r3, #12]
 800200a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800200e:	e001      	b.n	8002014 <convert_data_to_dpf+0xd4>

	default:
        // Something went wrong, just write 0 to data
		return 0;
 8002010:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8002020 <convert_data_to_dpf+0xe0>
	}

    // this coude should not be reached, this is to make the compiler happy
    return 0;
}
 8002014:	eeb0 0b47 	vmov.f64	d0, d7
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}
 800201e:	bf00      	nop
	...
 8002028:	20000030 	.word	0x20000030

0800202c <mount_usb>:


// mount_usb
//  TODO DOCS
void mount_usb(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
	// attempt to mount the USB
	FRESULT fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8002032:	2201      	movs	r2, #1
 8002034:	4909      	ldr	r1, [pc, #36]	; (800205c <mount_usb+0x30>)
 8002036:	480a      	ldr	r0, [pc, #40]	; (8002060 <mount_usb+0x34>)
 8002038:	f00a ffa0 	bl	800cf7c <f_mount>
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]

	// if there is an error, set the error code to the global variable
	if (fresult != FR_OK)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <mount_usb+0x20>
	{
		file_error_code = fresult;
 8002046:	4a07      	ldr	r2, [pc, #28]	; (8002064 <mount_usb+0x38>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	7013      	strb	r3, [r2, #0]
	}

	// note the USB has been mounted
	usb_mounted = USB_MOUNTED;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <mount_usb+0x3c>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200048f4 	.word	0x200048f4
 8002060:	20005928 	.word	0x20005928
 8002064:	2000011a 	.word	0x2000011a
 8002068:	2000011b 	.word	0x2000011b

0800206c <unmount_usb>:


// unmount_usb
//  TODO DOCS
void unmount_usb(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
	// attempt to unmount
	FRESULT fresult = f_mount(NULL, USBHPath, 1);
 8002072:	2201      	movs	r2, #1
 8002074:	4909      	ldr	r1, [pc, #36]	; (800209c <unmount_usb+0x30>)
 8002076:	2000      	movs	r0, #0
 8002078:	f00a ff80 	bl	800cf7c <f_mount>
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]

	// if there is an error, set the error code to the global variable
	if (fresult != FR_OK)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <unmount_usb+0x20>
	{
		file_error_code = fresult;
 8002086:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <unmount_usb+0x34>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	7013      	strb	r3, [r2, #0]
	}

	// note the USB has been removed
	usb_mounted = USB_NOT_MOUNTED;
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <unmount_usb+0x38>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200048f4 	.word	0x200048f4
 80020a0:	2000011a 	.word	0x2000011a
 80020a4:	2000011b 	.word	0x2000011b

080020a8 <check_usb_details>:


// check_usb_details
//  TODO DOCS
void check_usb_details(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <check_usb_details+0x6c>)
 80020ae:	491a      	ldr	r1, [pc, #104]	; (8002118 <check_usb_details+0x70>)
 80020b0:	481a      	ldr	r0, [pc, #104]	; (800211c <check_usb_details+0x74>)
 80020b2:	f00b fc55 	bl	800d960 <f_getfree>

    total_space = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <check_usb_details+0x6c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	3b02      	subs	r3, #2
 80020be:	4a15      	ldr	r2, [pc, #84]	; (8002114 <check_usb_details+0x6c>)
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	8952      	ldrh	r2, [r2, #10]
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020d0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80020d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020dc:	ee17 2a90 	vmov	r2, s15
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <check_usb_details+0x78>)
 80020e2:	601a      	str	r2, [r3, #0]
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <check_usb_details+0x6c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	895b      	ldrh	r3, [r3, #10]
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <check_usb_details+0x70>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fb03 f302 	mul.w	r3, r3, r2
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020fc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002100:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002104:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002108:	ee17 2a90 	vmov	r2, s15
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <check_usb_details+0x7c>)
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20004838 	.word	0x20004838
 8002118:	2000482c 	.word	0x2000482c
 800211c:	0801115c 	.word	0x0801115c
 8002120:	20004834 	.word	0x20004834
 8002124:	2000483c 	.word	0x2000483c

08002128 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a07      	ldr	r2, [pc, #28]	; (8002154 <vApplicationGetIdleTaskMemory+0x2c>)
 8002138:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4a06      	ldr	r2, [pc, #24]	; (8002158 <vApplicationGetIdleTaskMemory+0x30>)
 800213e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	2000011c 	.word	0x2000011c
 8002158:	20000170 	.word	0x20000170

0800215c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800215c:	b5b0      	push	{r4, r5, r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002162:	f000 fc04 	bl	800296e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002166:	f000 f83f 	bl	80021e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800216a:	f000 f93b 	bl	80023e4 <MX_GPIO_Init>
  MX_CAN1_Init();
 800216e:	f000 f8cd 	bl	800230c <MX_CAN1_Init>
  MX_CAN2_Init();
 8002172:	f000 f901 	bl	8002378 <MX_CAN2_Init>
  MX_FATFS_Init();
 8002176:	f005 fd5d 	bl	8007c34 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  dlm_init(&hcan1, &hcan2);
 800217a:	4915      	ldr	r1, [pc, #84]	; (80021d0 <main+0x74>)
 800217c:	4815      	ldr	r0, [pc, #84]	; (80021d4 <main+0x78>)
 800217e:	f7ff fb07 	bl	8001790 <dlm_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of can_loop_task */
  osThreadDef(can_loop_task, can_loop, osPriorityHigh, 0, 128);
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <main+0x7c>)
 8002184:	f107 041c 	add.w	r4, r7, #28
 8002188:	461d      	mov	r5, r3
 800218a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800218e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  can_loop_taskHandle = osThreadCreate(osThread(can_loop_task), NULL);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f00b fd73 	bl	800dc88 <osThreadCreate>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <main+0x80>)
 80021a6:	601a      	str	r2, [r3, #0]

  /* definition and creation of dlm_main_loop */
  osThreadDef(dlm_main_loop, dlm_main, osPriorityAboveNormal, 0, 128);
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <main+0x84>)
 80021aa:	463c      	mov	r4, r7
 80021ac:	461d      	mov	r5, r3
 80021ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dlm_main_loopHandle = osThreadCreate(osThread(dlm_main_loop), NULL);
 80021ba:	463b      	mov	r3, r7
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f00b fd62 	bl	800dc88 <osThreadCreate>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <main+0x88>)
 80021c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80021ca:	f00b fd56 	bl	800dc7a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80021ce:	e7fe      	b.n	80021ce <main+0x72>
 80021d0:	20004858 	.word	0x20004858
 80021d4:	20004888 	.word	0x20004888
 80021d8:	08011170 	.word	0x08011170
 80021dc:	20004884 	.word	0x20004884
 80021e0:	0801119c 	.word	0x0801119c
 80021e4:	20004880 	.word	0x20004880

080021e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0b8      	sub	sp, #224	; 0xe0
 80021ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021f2:	2234      	movs	r2, #52	; 0x34
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f00e fedb 	bl	8010fb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800220c:	f107 0308 	add.w	r3, r7, #8
 8002210:	2290      	movs	r2, #144	; 0x90
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f00e fecc 	bl	8010fb2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <SystemClock_Config+0x11c>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a39      	ldr	r2, [pc, #228]	; (8002304 <SystemClock_Config+0x11c>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <SystemClock_Config+0x11c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002232:	4b35      	ldr	r3, [pc, #212]	; (8002308 <SystemClock_Config+0x120>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800223a:	4a33      	ldr	r2, [pc, #204]	; (8002308 <SystemClock_Config+0x120>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <SystemClock_Config+0x120>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800224e:	2301      	movs	r3, #1
 8002250:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800226a:	2304      	movs	r3, #4
 800226c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002270:	2360      	movs	r3, #96	; 0x60
 8002272:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002276:	2302      	movs	r3, #2
 8002278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800227c:	2304      	movs	r3, #4
 800227e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002282:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002286:	4618      	mov	r0, r3
 8002288:	f003 fa4e 	bl	8005728 <HAL_RCC_OscConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002292:	f000 f961 	bl	8002558 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002296:	f003 f9f7 	bl	8005688 <HAL_PWREx_EnableOverDrive>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80022a0:	f000 f95a 	bl	8002558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a4:	230f      	movs	r3, #15
 80022a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022aa:	2302      	movs	r3, #2
 80022ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80022c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022c8:	2103      	movs	r1, #3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 fcda 	bl	8005c84 <HAL_RCC_ClockConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80022d6:	f000 f93f 	bl	8002558 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80022da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022de:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fee0 	bl	80060b0 <HAL_RCCEx_PeriphCLKConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <SystemClock_Config+0x112>
  {
    Error_Handler();
 80022f6:	f000 f92f 	bl	8002558 <Error_Handler>
  }
}
 80022fa:	bf00      	nop
 80022fc:	37e0      	adds	r7, #224	; 0xe0
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000

0800230c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <MX_CAN1_Init+0x64>)
 8002312:	4a18      	ldr	r2, [pc, #96]	; (8002374 <MX_CAN1_Init+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <MX_CAN1_Init+0x64>)
 8002318:	2206      	movs	r2, #6
 800231a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_CAN1_Init+0x64>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <MX_CAN1_Init+0x64>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_CAN1_Init+0x64>)
 800232a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800232e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_CAN1_Init+0x64>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_CAN1_Init+0x64>)
 8002338:	2200      	movs	r2, #0
 800233a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_CAN1_Init+0x64>)
 800233e:	2201      	movs	r2, #1
 8002340:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_CAN1_Init+0x64>)
 8002344:	2201      	movs	r2, #1
 8002346:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_CAN1_Init+0x64>)
 800234a:	2200      	movs	r2, #0
 800234c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_CAN1_Init+0x64>)
 8002350:	2200      	movs	r2, #0
 8002352:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_CAN1_Init+0x64>)
 8002356:	2200      	movs	r2, #0
 8002358:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_CAN1_Init+0x64>)
 800235c:	f000 fb7e 	bl	8002a5c <HAL_CAN_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002366:	f000 f8f7 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20004888 	.word	0x20004888
 8002374:	40006400 	.word	0x40006400

08002378 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800237c:	4b17      	ldr	r3, [pc, #92]	; (80023dc <MX_CAN2_Init+0x64>)
 800237e:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <MX_CAN2_Init+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <MX_CAN2_Init+0x64>)
 8002384:	2206      	movs	r2, #6
 8002386:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <MX_CAN2_Init+0x64>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <MX_CAN2_Init+0x64>)
 8002390:	2200      	movs	r2, #0
 8002392:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_CAN2_Init+0x64>)
 8002396:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800239a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_CAN2_Init+0x64>)
 800239e:	2200      	movs	r2, #0
 80023a0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_CAN2_Init+0x64>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_CAN2_Init+0x64>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <MX_CAN2_Init+0x64>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_CAN2_Init+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MX_CAN2_Init+0x64>)
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_CAN2_Init+0x64>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_CAN2_Init+0x64>)
 80023c8:	f000 fb48 	bl	8002a5c <HAL_CAN_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80023d2:	f000 f8c1 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20004858 	.word	0x20004858
 80023e0:	40006800 	.word	0x40006800

080023e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fa:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <MX_GPIO_Init+0x110>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a3d      	ldr	r2, [pc, #244]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002412:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a37      	ldr	r2, [pc, #220]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b35      	ldr	r3, [pc, #212]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800242a:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <MX_GPIO_Init+0x110>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a31      	ldr	r2, [pc, #196]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002442:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <MX_GPIO_Init+0x110>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <MX_GPIO_Init+0x110>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002478:	481f      	ldr	r0, [pc, #124]	; (80024f8 <MX_GPIO_Init+0x114>)
 800247a:	f001 fbfb 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800247e:	2200      	movs	r2, #0
 8002480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002484:	481d      	ldr	r0, [pc, #116]	; (80024fc <MX_GPIO_Init+0x118>)
 8002486:	f001 fbf5 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 800248a:	2201      	movs	r2, #1
 800248c:	2140      	movs	r1, #64	; 0x40
 800248e:	481c      	ldr	r0, [pc, #112]	; (8002500 <MX_GPIO_Init+0x11c>)
 8002490:	f001 fbf0 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002494:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4812      	ldr	r0, [pc, #72]	; (80024f8 <MX_GPIO_Init+0x114>)
 80024ae:	f001 fa37 	bl	8003920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b8:	2301      	movs	r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	480c      	ldr	r0, [pc, #48]	; (80024fc <MX_GPIO_Init+0x118>)
 80024cc:	f001 fa28 	bl	8003920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	4806      	ldr	r0, [pc, #24]	; (8002500 <MX_GPIO_Init+0x11c>)
 80024e8:	f001 fa1a 	bl	8003920 <HAL_GPIO_Init>

}
 80024ec:	bf00      	nop
 80024ee:	3728      	adds	r7, #40	; 0x28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020c00 	.word	0x40020c00
 8002500:	40021800 	.word	0x40021800

08002504 <can_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_can_loop */
void can_loop(void const * argument)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800250c:	f00e f9f6 	bl	80108fc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  can_service_loop();
 8002510:	f7ff f9ca 	bl	80018a8 <can_service_loop>
    osDelay(1);
 8002514:	2001      	movs	r0, #1
 8002516:	f00b fc03 	bl	800dd20 <osDelay>
  {
 800251a:	e7f9      	b.n	8002510 <can_loop+0xc>

0800251c <dlm_main>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dlm_main */
void dlm_main(void const * argument)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dlm_main */
  /* Infinite loop */
  for(;;)
  {
	  manage_data_aquisition();
 8002524:	f7ff f99e 	bl	8001864 <manage_data_aquisition>
	  move_ram_data_to_storage();
 8002528:	f7ff f9a4 	bl	8001874 <move_ram_data_to_storage>
    osDelay(1);
 800252c:	2001      	movs	r0, #1
 800252e:	f00b fbf7 	bl	800dd20 <osDelay>
  {
 8002532:	e7f7      	b.n	8002524 <dlm_main+0x8>

08002534 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002546:	f000 fa1f 	bl	8002988 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40001000 	.word	0x40001000

08002558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800255c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800255e:	e7fe      	b.n	800255e <Error_Handler+0x6>

08002560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_MspInit+0x4c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_MspInit+0x4c>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_MspInit+0x4c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_MspInit+0x4c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_MspInit+0x4c>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_MspInit+0x4c>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	210f      	movs	r1, #15
 800259a:	f06f 0001 	mvn.w	r0, #1
 800259e:	f001 f995 	bl	80038cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800

080025b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08e      	sub	sp, #56	; 0x38
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a53      	ldr	r2, [pc, #332]	; (800271c <HAL_CAN_MspInit+0x16c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d142      	bne.n	8002658 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80025d2:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_CAN_MspInit+0x170>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a51      	ldr	r2, [pc, #324]	; (8002720 <HAL_CAN_MspInit+0x170>)
 80025da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <HAL_CAN_MspInit+0x170>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d10b      	bne.n	80025fc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80025e4:	4b4f      	ldr	r3, [pc, #316]	; (8002724 <HAL_CAN_MspInit+0x174>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	4a4e      	ldr	r2, [pc, #312]	; (8002724 <HAL_CAN_MspInit+0x174>)
 80025ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ee:	6413      	str	r3, [r2, #64]	; 0x40
 80025f0:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <HAL_CAN_MspInit+0x174>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b49      	ldr	r3, [pc, #292]	; (8002724 <HAL_CAN_MspInit+0x174>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	4a48      	ldr	r2, [pc, #288]	; (8002724 <HAL_CAN_MspInit+0x174>)
 8002602:	f043 0302 	orr.w	r3, r3, #2
 8002606:	6313      	str	r3, [r2, #48]	; 0x30
 8002608:	4b46      	ldr	r3, [pc, #280]	; (8002724 <HAL_CAN_MspInit+0x174>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002614:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002626:	2309      	movs	r3, #9
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262e:	4619      	mov	r1, r3
 8002630:	483d      	ldr	r0, [pc, #244]	; (8002728 <HAL_CAN_MspInit+0x178>)
 8002632:	f001 f975 	bl	8003920 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2105      	movs	r1, #5
 800263a:	2014      	movs	r0, #20
 800263c:	f001 f946 	bl	80038cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002640:	2014      	movs	r0, #20
 8002642:	f001 f95f 	bl	8003904 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2105      	movs	r1, #5
 800264a:	2015      	movs	r0, #21
 800264c:	f001 f93e 	bl	80038cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002650:	2015      	movs	r0, #21
 8002652:	f001 f957 	bl	8003904 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002656:	e05d      	b.n	8002714 <HAL_CAN_MspInit+0x164>
  else if(hcan->Instance==CAN2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a33      	ldr	r2, [pc, #204]	; (800272c <HAL_CAN_MspInit+0x17c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d158      	bne.n	8002714 <HAL_CAN_MspInit+0x164>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8002662:	4b30      	ldr	r3, [pc, #192]	; (8002724 <HAL_CAN_MspInit+0x174>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <HAL_CAN_MspInit+0x174>)
 8002668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_CAN_MspInit+0x174>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800267a:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <HAL_CAN_MspInit+0x174>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a29      	ldr	r2, [pc, #164]	; (8002724 <HAL_CAN_MspInit+0x174>)
 8002680:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_CAN_MspInit+0x174>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_CAN_MspInit+0x170>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	4a21      	ldr	r2, [pc, #132]	; (8002720 <HAL_CAN_MspInit+0x170>)
 800269a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_CAN_MspInit+0x170>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d10b      	bne.n	80026bc <HAL_CAN_MspInit+0x10c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <HAL_CAN_MspInit+0x174>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_CAN_MspInit+0x174>)
 80026aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ae:	6413      	str	r3, [r2, #64]	; 0x40
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_CAN_MspInit+0x174>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_CAN_MspInit+0x174>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	4a18      	ldr	r2, [pc, #96]	; (8002724 <HAL_CAN_MspInit+0x174>)
 80026c2:	f043 0302 	orr.w	r3, r3, #2
 80026c6:	6313      	str	r3, [r2, #48]	; 0x30
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_CAN_MspInit+0x174>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80026d4:	2360      	movs	r3, #96	; 0x60
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2303      	movs	r3, #3
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80026e4:	2309      	movs	r3, #9
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ec:	4619      	mov	r1, r3
 80026ee:	480e      	ldr	r0, [pc, #56]	; (8002728 <HAL_CAN_MspInit+0x178>)
 80026f0:	f001 f916 	bl	8003920 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2105      	movs	r1, #5
 80026f8:	2040      	movs	r0, #64	; 0x40
 80026fa:	f001 f8e7 	bl	80038cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80026fe:	2040      	movs	r0, #64	; 0x40
 8002700:	f001 f900 	bl	8003904 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002704:	2200      	movs	r2, #0
 8002706:	2105      	movs	r1, #5
 8002708:	2041      	movs	r0, #65	; 0x41
 800270a:	f001 f8df 	bl	80038cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800270e:	2041      	movs	r0, #65	; 0x41
 8002710:	f001 f8f8 	bl	8003904 <HAL_NVIC_EnableIRQ>
}
 8002714:	bf00      	nop
 8002716:	3738      	adds	r7, #56	; 0x38
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40006400 	.word	0x40006400
 8002720:	20000370 	.word	0x20000370
 8002724:	40023800 	.word	0x40023800
 8002728:	40020400 	.word	0x40020400
 800272c:	40006800 	.word	0x40006800

08002730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002740:	2200      	movs	r2, #0
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	2036      	movs	r0, #54	; 0x36
 8002746:	f001 f8c1 	bl	80038cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800274a:	2036      	movs	r0, #54	; 0x36
 800274c:	f001 f8da 	bl	8003904 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <HAL_InitTick+0xa0>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	4a1e      	ldr	r2, [pc, #120]	; (80027d0 <HAL_InitTick+0xa0>)
 8002756:	f043 0310 	orr.w	r3, r3, #16
 800275a:	6413      	str	r3, [r2, #64]	; 0x40
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_InitTick+0xa0>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002768:	f107 0210 	add.w	r2, r7, #16
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f003 fc6a 	bl	800604c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002778:	f003 fc54 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 800277c:	4603      	mov	r3, r0
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_InitTick+0xa4>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	0c9b      	lsrs	r3, r3, #18
 800278c:	3b01      	subs	r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_InitTick+0xa8>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <HAL_InitTick+0xac>)
 8002794:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <HAL_InitTick+0xa8>)
 8002798:	f240 32e7 	movw	r2, #999	; 0x3e7
 800279c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800279e:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <HAL_InitTick+0xa8>)
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_InitTick+0xa8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_InitTick+0xa8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <HAL_InitTick+0xa8>)
 80027b2:	f004 f8a3 	bl	80068fc <HAL_TIM_Base_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80027bc:	4806      	ldr	r0, [pc, #24]	; (80027d8 <HAL_InitTick+0xa8>)
 80027be:	f004 f8d3 	bl	8006968 <HAL_TIM_Base_Start_IT>
 80027c2:	4603      	mov	r3, r0
 80027c4:	e000      	b.n	80027c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3730      	adds	r7, #48	; 0x30
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	431bde83 	.word	0x431bde83
 80027d8:	200048b0 	.word	0x200048b0
 80027dc:	40001000 	.word	0x40001000

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <NMI_Handler+0x4>

080027e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <HardFault_Handler+0x4>

080027ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <MemManage_Handler+0x4>

080027f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <BusFault_Handler+0x4>

080027f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <UsageFault_Handler+0x4>

080027fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <CAN1_RX0_IRQHandler+0x10>)
 8002812:	f000 fdbf 	bl	8003394 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20004888 	.word	0x20004888

08002820 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <CAN1_RX1_IRQHandler+0x10>)
 8002826:	f000 fdb5 	bl	8003394 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20004888 	.word	0x20004888

08002834 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <TIM6_DAC_IRQHandler+0x10>)
 800283a:	f004 f8bf 	bl	80069bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200048b0 	.word	0x200048b0

08002848 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <CAN2_RX0_IRQHandler+0x10>)
 800284e:	f000 fda1 	bl	8003394 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20004858 	.word	0x20004858

0800285c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <CAN2_RX1_IRQHandler+0x10>)
 8002862:	f000 fd97 	bl	8003394 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20004858 	.word	0x20004858

08002870 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <OTG_FS_IRQHandler+0x10>)
 8002876:	f001 fca5 	bl	80041c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20006d88 	.word	0x20006d88

08002884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <_sbrk+0x5c>)
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <_sbrk+0x60>)
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <_sbrk+0x64>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <_sbrk+0x64>)
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <_sbrk+0x68>)
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d207      	bcs.n	80028c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b4:	f00e fb38 	bl	8010f28 <__errno>
 80028b8:	4602      	mov	r2, r0
 80028ba:	230c      	movs	r3, #12
 80028bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	e009      	b.n	80028d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <_sbrk+0x64>)
 80028d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028d6:	68fb      	ldr	r3, [r7, #12]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20080000 	.word	0x20080000
 80028e4:	00000400 	.word	0x00000400
 80028e8:	20000374 	.word	0x20000374
 80028ec:	20007050 	.word	0x20007050

080028f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <SystemInit+0x28>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <SystemInit+0x28>)
 80028fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SystemInit+0x28>)
 8002906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800290a:	609a      	str	r2, [r3, #8]
#endif
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800291c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002954 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002920:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002922:	e003      	b.n	800292c <LoopCopyDataInit>

08002924 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002926:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002928:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800292a:	3104      	adds	r1, #4

0800292c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800292c:	480b      	ldr	r0, [pc, #44]	; (800295c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002930:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002932:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002934:	d3f6      	bcc.n	8002924 <CopyDataInit>
  ldr  r2, =_sbss
 8002936:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002938:	e002      	b.n	8002940 <LoopFillZerobss>

0800293a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800293a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800293c:	f842 3b04 	str.w	r3, [r2], #4

08002940 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002942:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002944:	d3f9      	bcc.n	800293a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002946:	f7ff ffd3 	bl	80028f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294a:	f00e faf3 	bl	8010f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294e:	f7ff fc05 	bl	800215c <main>
  bx  lr    
 8002952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002954:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002958:	08011304 	.word	0x08011304
  ldr  r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002960:	200000d8 	.word	0x200000d8
  ldr  r2, =_sbss
 8002964:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 8002968:	20007050 	.word	0x20007050

0800296c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC_IRQHandler>

0800296e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002972:	2003      	movs	r0, #3
 8002974:	f000 ff9f 	bl	80038b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fed9 	bl	8002730 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800297e:	f7ff fdef 	bl	8002560 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_IncTick+0x20>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_IncTick+0x24>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4413      	add	r3, r2
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_IncTick+0x24>)
 800299a:	6013      	str	r3, [r2, #0]
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	2000004c 	.word	0x2000004c
 80029ac:	200048f0 	.word	0x200048f0

080029b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return uwTick;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_GetTick+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	200048f0 	.word	0x200048f0

080029c8 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_SetTickFreq+0x48>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	79fa      	ldrb	r2, [r7, #7]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d012      	beq.n	8002a06 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_SetTickFreq+0x48>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_SetTickFreq+0x48>)
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_SetTickFreq+0x4c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fe9d 	bl	8002730 <HAL_InitTick>
 80029f6:	4603      	mov	r3, r0
 80029f8:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8002a00:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_SetTickFreq+0x48>)
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	2000004c 	.word	0x2000004c
 8002a14:	20000048 	.word	0x20000048

08002a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff ffc6 	bl	80029b0 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d005      	beq.n	8002a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_Delay+0x40>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a3e:	bf00      	nop
 8002a40:	f7ff ffb6 	bl	80029b0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d8f7      	bhi.n	8002a40 <HAL_Delay+0x28>
  {
  }
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000004c 	.word	0x2000004c

08002a5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0ed      	b.n	8002c4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fd98 	bl	80025b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0202 	bic.w	r2, r2, #2
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a90:	f7ff ff8e 	bl	80029b0 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a96:	e012      	b.n	8002abe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a98:	f7ff ff8a 	bl	80029b0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b0a      	cmp	r3, #10
 8002aa4:	d90b      	bls.n	8002abe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0c5      	b.n	8002c4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e5      	bne.n	8002a98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002adc:	f7ff ff68 	bl	80029b0 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ae2:	e012      	b.n	8002b0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ae4:	f7ff ff64 	bl	80029b0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b0a      	cmp	r3, #10
 8002af0:	d90b      	bls.n	8002b0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2205      	movs	r2, #5
 8002b02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e09f      	b.n	8002c4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0e5      	beq.n	8002ae4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7e1b      	ldrb	r3, [r3, #24]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d108      	bne.n	8002b32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e007      	b.n	8002b42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7e5b      	ldrb	r3, [r3, #25]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d108      	bne.n	8002b5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e007      	b.n	8002b6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7e9b      	ldrb	r3, [r3, #26]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d108      	bne.n	8002b86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0220 	orr.w	r2, r2, #32
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e007      	b.n	8002b96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0220 	bic.w	r2, r2, #32
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7edb      	ldrb	r3, [r3, #27]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0210 	bic.w	r2, r2, #16
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e007      	b.n	8002bc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0210 	orr.w	r2, r2, #16
 8002bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7f1b      	ldrb	r3, [r3, #28]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d108      	bne.n	8002bda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0208 	orr.w	r2, r2, #8
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e007      	b.n	8002bea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0208 	bic.w	r2, r2, #8
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7f5b      	ldrb	r3, [r3, #29]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0204 	orr.w	r2, r2, #4
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e007      	b.n	8002c14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0204 	bic.w	r2, r2, #4
 8002c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	ea42 0103 	orr.w	r1, r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	1e5a      	subs	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d003      	beq.n	8002c7a <HAL_CAN_ConfigFilter+0x26>
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	f040 80c7 	bne.w	8002e08 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <HAL_CAN_ConfigFilter+0x1d0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d001      	beq.n	8002c88 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002c84:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <HAL_CAN_ConfigFilter+0x1d4>)
 8002c86:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	4a63      	ldr	r2, [pc, #396]	; (8002e28 <HAL_CAN_ConfigFilter+0x1d4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d111      	bne.n	8002cc4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ca6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2201      	movs	r2, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d123      	bne.n	8002d36 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3248      	adds	r2, #72	; 0x48
 8002d16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d2c:	6979      	ldr	r1, [r7, #20]
 8002d2e:	3348      	adds	r3, #72	; 0x48
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d122      	bne.n	8002d84 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3248      	adds	r2, #72	; 0x48
 8002d64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d7a:	6979      	ldr	r1, [r7, #20]
 8002d7c:	3348      	adds	r3, #72	; 0x48
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d9e:	e007      	b.n	8002db0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002dca:	e007      	b.n	8002ddc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dfa:	f023 0201 	bic.w	r2, r3, #1
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e006      	b.n	8002e16 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40003400 	.word	0x40003400
 8002e28:	40006400 	.word	0x40006400

08002e2c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d12e      	bne.n	8002e9e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e58:	f7ff fdaa 	bl	80029b0 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e5e:	e012      	b.n	8002e86 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e60:	f7ff fda6 	bl	80029b0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b0a      	cmp	r3, #10
 8002e6c:	d90b      	bls.n	8002e86 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2205      	movs	r2, #5
 8002e7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e012      	b.n	8002eac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e5      	bne.n	8002e60 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e006      	b.n	8002eac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d003      	beq.n	8002ee0 <HAL_CAN_AddTxMessage+0x2c>
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	f040 80b8 	bne.w	8003050 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80a0 	beq.w	8003040 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	0e1b      	lsrs	r3, r3, #24
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d907      	bls.n	8002f20 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e09e      	b.n	800305e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f20:	2201      	movs	r2, #1
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	409a      	lsls	r2, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10d      	bne.n	8002f4e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f3c:	68f9      	ldr	r1, [r7, #12]
 8002f3e:	6809      	ldr	r1, [r1, #0]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3318      	adds	r3, #24
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	440b      	add	r3, r1
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e00f      	b.n	8002f6e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f58:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f62:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3318      	adds	r3, #24
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	440b      	add	r3, r1
 8002f6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3318      	adds	r3, #24
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3304      	adds	r3, #4
 8002f80:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	7d1b      	ldrb	r3, [r3, #20]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d111      	bne.n	8002fae <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	3318      	adds	r3, #24
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4413      	add	r3, r2
 8002f96:	3304      	adds	r3, #4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	6811      	ldr	r1, [r2, #0]
 8002f9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3318      	adds	r3, #24
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	440b      	add	r3, r1
 8002faa:	3304      	adds	r3, #4
 8002fac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3307      	adds	r3, #7
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	061a      	lsls	r2, r3, #24
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3306      	adds	r3, #6
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	041b      	lsls	r3, r3, #16
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3305      	adds	r3, #5
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	3204      	adds	r2, #4
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	6811      	ldr	r1, [r2, #0]
 8002fd6:	ea43 0200 	orr.w	r2, r3, r0
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	440b      	add	r3, r1
 8002fe0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002fe4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3303      	adds	r3, #3
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	061a      	lsls	r2, r3, #24
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	4313      	orrs	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	7812      	ldrb	r2, [r2, #0]
 8003006:	4610      	mov	r0, r2
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	6811      	ldr	r1, [r2, #0]
 800300c:	ea43 0200 	orr.w	r2, r3, r0
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	440b      	add	r3, r1
 8003016:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800301a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3318      	adds	r3, #24
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	4413      	add	r3, r2
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	6811      	ldr	r1, [r2, #0]
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3318      	adds	r3, #24
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	440b      	add	r3, r1
 800303a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e00e      	b.n	800305e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e006      	b.n	800305e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800307c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d002      	beq.n	800308a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003084:	7afb      	ldrb	r3, [r7, #11]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d11d      	bne.n	80030c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3301      	adds	r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3301      	adds	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d003      	beq.n	80030f8 <HAL_CAN_GetRxMessage+0x24>
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	f040 80f3 	bne.w	80032de <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10e      	bne.n	800311c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d116      	bne.n	800313a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0e7      	b.n	80032ec <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e0d8      	b.n	80032ec <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	331b      	adds	r3, #27
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	4413      	add	r3, r2
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0204 	and.w	r2, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10c      	bne.n	8003172 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	331b      	adds	r3, #27
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	4413      	add	r3, r2
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	0d5b      	lsrs	r3, r3, #21
 8003168:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e00b      	b.n	800318a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	331b      	adds	r3, #27
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	4413      	add	r3, r2
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	08db      	lsrs	r3, r3, #3
 8003182:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	331b      	adds	r3, #27
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	4413      	add	r3, r2
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0202 	and.w	r2, r3, #2
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	331b      	adds	r3, #27
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 020f 	and.w	r2, r3, #15
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	331b      	adds	r3, #27
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	4413      	add	r3, r2
 80031c4:	3304      	adds	r3, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	331b      	adds	r3, #27
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	4413      	add	r3, r2
 80031dc:	3304      	adds	r3, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	4413      	add	r3, r2
 8003208:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0a1a      	lsrs	r2, r3, #8
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	4413      	add	r3, r2
 8003222:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	0c1a      	lsrs	r2, r3, #16
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	3302      	adds	r3, #2
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0e1a      	lsrs	r2, r3, #24
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	3303      	adds	r3, #3
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	4413      	add	r3, r2
 8003256:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	3304      	adds	r3, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	4413      	add	r3, r2
 800326e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0a1a      	lsrs	r2, r3, #8
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	3305      	adds	r3, #5
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	4413      	add	r3, r2
 8003288:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	0c1a      	lsrs	r2, r3, #16
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	3306      	adds	r3, #6
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	0e1a      	lsrs	r2, r3, #24
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	3307      	adds	r3, #7
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d108      	bne.n	80032ca <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0220 	orr.w	r2, r2, #32
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	e007      	b.n	80032da <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0220 	orr.w	r2, r2, #32
 80032d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	e006      	b.n	80032ec <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
  }
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800330e:	7afb      	ldrb	r3, [r7, #11]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d002      	beq.n	800331a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003314:	7afb      	ldrb	r3, [r7, #11]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d10f      	bne.n	800333a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d106      	bne.n	800332e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e005      	b.n	800333a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800333a:	68fb      	ldr	r3, [r7, #12]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003358:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d002      	beq.n	8003366 <HAL_CAN_ActivateNotification+0x1e>
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d109      	bne.n	800337a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6959      	ldr	r1, [r3, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e006      	b.n	8003388 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800339c:	2300      	movs	r3, #0
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d07c      	beq.n	80034d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d023      	beq.n	800342c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2201      	movs	r2, #1
 80033ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fffe 	bl	80013f8 <HAL_CAN_TxMailbox0CompleteCallback>
 80033fc:	e016      	b.n	800342c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	e00c      	b.n	800342c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	e002      	b.n	800342c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fe f807 	bl	800143a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d024      	beq.n	8003480 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800343e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd ffdf 	bl	800140e <HAL_CAN_TxMailbox1CompleteCallback>
 8003450:	e016      	b.n	8003480 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	e00c      	b.n	8003480 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
 8003478:	e002      	b.n	8003480 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd ffe8 	bl	8001450 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d024      	beq.n	80034d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003492:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd ffc0 	bl	8001424 <HAL_CAN_TxMailbox2CompleteCallback>
 80034a4:	e016      	b.n	80034d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	e00c      	b.n	80034d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
 80034cc:	e002      	b.n	80034d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd ffc9 	bl	8001466 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2210      	movs	r2, #16
 80034f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d006      	beq.n	800351a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2208      	movs	r2, #8
 8003512:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f8ee 	bl	80036f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fa86 	bl	8000a44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003552:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2210      	movs	r2, #16
 800355a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00b      	beq.n	800357e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2208      	movs	r2, #8
 8003576:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8c6 	bl	800370a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d009      	beq.n	800359c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fa60 	bl	8000a5c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d006      	beq.n	80035be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2210      	movs	r2, #16
 80035b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f8b0 	bl	800371e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2208      	movs	r2, #8
 80035d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8a9 	bl	8003732 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d075      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d06c      	beq.n	80036ce <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	f043 0304 	orr.w	r3, r3, #4
 8003646:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364e:	2b00      	cmp	r3, #0
 8003650:	d03d      	beq.n	80036ce <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	d038      	beq.n	80036ce <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003662:	2b30      	cmp	r3, #48	; 0x30
 8003664:	d017      	beq.n	8003696 <HAL_CAN_IRQHandler+0x302>
 8003666:	2b30      	cmp	r3, #48	; 0x30
 8003668:	d804      	bhi.n	8003674 <HAL_CAN_IRQHandler+0x2e0>
 800366a:	2b10      	cmp	r3, #16
 800366c:	d009      	beq.n	8003682 <HAL_CAN_IRQHandler+0x2ee>
 800366e:	2b20      	cmp	r3, #32
 8003670:	d00c      	beq.n	800368c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003672:	e024      	b.n	80036be <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003674:	2b50      	cmp	r3, #80	; 0x50
 8003676:	d018      	beq.n	80036aa <HAL_CAN_IRQHandler+0x316>
 8003678:	2b60      	cmp	r3, #96	; 0x60
 800367a:	d01b      	beq.n	80036b4 <HAL_CAN_IRQHandler+0x320>
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d00f      	beq.n	80036a0 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003680:	e01d      	b.n	80036be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f043 0308 	orr.w	r3, r3, #8
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800368a:	e018      	b.n	80036be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	f043 0310 	orr.w	r3, r3, #16
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003694:	e013      	b.n	80036be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f043 0320 	orr.w	r3, r3, #32
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800369e:	e00e      	b.n	80036be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036a8:	e009      	b.n	80036be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036b2:	e004      	b.n	80036be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2204      	movs	r2, #4
 80036d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f82c 	bl	8003746 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80036ee:	bf00      	nop
 80036f0:	3728      	adds	r7, #40	; 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <__NVIC_SetPriorityGrouping+0x40>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003786:	4313      	orrs	r3, r2
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	; (800379c <__NVIC_SetPriorityGrouping+0x40>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00
 80037a0:	05fa0000 	.word	0x05fa0000

080037a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	db0b      	blt.n	80037ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	4907      	ldr	r1, [pc, #28]	; (80037f8 <__NVIC_EnableIRQ+0x38>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2001      	movs	r0, #1
 80037e2:	fa00 f202 	lsl.w	r2, r0, r2
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	; (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ff4c 	bl	800375c <__NVIC_SetPriorityGrouping>
}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038de:	f7ff ff61 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 80038e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	6978      	ldr	r0, [r7, #20]
 80038ea:	f7ff ffb1 	bl	8003850 <NVIC_EncodePriority>
 80038ee:	4602      	mov	r2, r0
 80038f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff80 	bl	80037fc <__NVIC_SetPriority>
}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff54 	bl	80037c0 <__NVIC_EnableIRQ>
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	e175      	b.n	8003c2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003940:	2201      	movs	r2, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	f040 8164 	bne.w	8003c26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d00b      	beq.n	800397e <HAL_GPIO_Init+0x5e>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d007      	beq.n	800397e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003972:	2b11      	cmp	r3, #17
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b12      	cmp	r3, #18
 800397c:	d130      	bne.n	80039e0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	2203      	movs	r2, #3
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039b4:	2201      	movs	r2, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 0201 	and.w	r2, r3, #1
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2203      	movs	r2, #3
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x100>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b12      	cmp	r3, #18
 8003a1e:	d123      	bne.n	8003a68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	08da      	lsrs	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3208      	adds	r2, #8
 8003a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	220f      	movs	r2, #15
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	08da      	lsrs	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3208      	adds	r2, #8
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	2203      	movs	r2, #3
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 0203 	and.w	r2, r3, #3
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80be 	beq.w	8003c26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aaa:	4b65      	ldr	r3, [pc, #404]	; (8003c40 <HAL_GPIO_Init+0x320>)
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	4a64      	ldr	r2, [pc, #400]	; (8003c40 <HAL_GPIO_Init+0x320>)
 8003ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab6:	4b62      	ldr	r3, [pc, #392]	; (8003c40 <HAL_GPIO_Init+0x320>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ac2:	4a60      	ldr	r2, [pc, #384]	; (8003c44 <HAL_GPIO_Init+0x324>)
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	3302      	adds	r3, #2
 8003aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	220f      	movs	r2, #15
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a57      	ldr	r2, [pc, #348]	; (8003c48 <HAL_GPIO_Init+0x328>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d037      	beq.n	8003b5e <HAL_GPIO_Init+0x23e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a56      	ldr	r2, [pc, #344]	; (8003c4c <HAL_GPIO_Init+0x32c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d031      	beq.n	8003b5a <HAL_GPIO_Init+0x23a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a55      	ldr	r2, [pc, #340]	; (8003c50 <HAL_GPIO_Init+0x330>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02b      	beq.n	8003b56 <HAL_GPIO_Init+0x236>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a54      	ldr	r2, [pc, #336]	; (8003c54 <HAL_GPIO_Init+0x334>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d025      	beq.n	8003b52 <HAL_GPIO_Init+0x232>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a53      	ldr	r2, [pc, #332]	; (8003c58 <HAL_GPIO_Init+0x338>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01f      	beq.n	8003b4e <HAL_GPIO_Init+0x22e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a52      	ldr	r2, [pc, #328]	; (8003c5c <HAL_GPIO_Init+0x33c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d019      	beq.n	8003b4a <HAL_GPIO_Init+0x22a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a51      	ldr	r2, [pc, #324]	; (8003c60 <HAL_GPIO_Init+0x340>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_GPIO_Init+0x226>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a50      	ldr	r2, [pc, #320]	; (8003c64 <HAL_GPIO_Init+0x344>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00d      	beq.n	8003b42 <HAL_GPIO_Init+0x222>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a4f      	ldr	r2, [pc, #316]	; (8003c68 <HAL_GPIO_Init+0x348>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <HAL_GPIO_Init+0x21e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4e      	ldr	r2, [pc, #312]	; (8003c6c <HAL_GPIO_Init+0x34c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_GPIO_Init+0x21a>
 8003b36:	2309      	movs	r3, #9
 8003b38:	e012      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b3a:	230a      	movs	r3, #10
 8003b3c:	e010      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	e00e      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b42:	2307      	movs	r3, #7
 8003b44:	e00c      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b46:	2306      	movs	r3, #6
 8003b48:	e00a      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b4a:	2305      	movs	r3, #5
 8003b4c:	e008      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b4e:	2304      	movs	r3, #4
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b52:	2303      	movs	r3, #3
 8003b54:	e004      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e002      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	f002 0203 	and.w	r2, r2, #3
 8003b66:	0092      	lsls	r2, r2, #2
 8003b68:	4093      	lsls	r3, r2
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b70:	4934      	ldr	r1, [pc, #208]	; (8003c44 <HAL_GPIO_Init+0x324>)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	3302      	adds	r3, #2
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b7e:	4b3c      	ldr	r3, [pc, #240]	; (8003c70 <HAL_GPIO_Init+0x350>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ba2:	4a33      	ldr	r2, [pc, #204]	; (8003c70 <HAL_GPIO_Init+0x350>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ba8:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_GPIO_Init+0x350>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bcc:	4a28      	ldr	r2, [pc, #160]	; (8003c70 <HAL_GPIO_Init+0x350>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bd2:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <HAL_GPIO_Init+0x350>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bf6:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <HAL_GPIO_Init+0x350>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bfc:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <HAL_GPIO_Init+0x350>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <HAL_GPIO_Init+0x350>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b0f      	cmp	r3, #15
 8003c30:	f67f ae86 	bls.w	8003940 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c34:	bf00      	nop
 8003c36:	3724      	adds	r7, #36	; 0x24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40013800 	.word	0x40013800
 8003c48:	40020000 	.word	0x40020000
 8003c4c:	40020400 	.word	0x40020400
 8003c50:	40020800 	.word	0x40020800
 8003c54:	40020c00 	.word	0x40020c00
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40021400 	.word	0x40021400
 8003c60:	40021800 	.word	0x40021800
 8003c64:	40021c00 	.word	0x40021c00
 8003c68:	40022000 	.word	0x40022000
 8003c6c:	40022400 	.word	0x40022400
 8003c70:	40013c00 	.word	0x40013c00

08003c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
 8003c80:	4613      	mov	r3, r2
 8003c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c84:	787b      	ldrb	r3, [r7, #1]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8a:	887a      	ldrh	r2, [r7, #2]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c90:	e003      	b.n	8003c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c92:	887b      	ldrh	r3, [r7, #2]
 8003c94:	041a      	lsls	r2, r3, #16
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	619a      	str	r2, [r3, #24]
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca8:	b08f      	sub	sp, #60	; 0x3c
 8003caa:	af0a      	add	r7, sp, #40	; 0x28
 8003cac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e054      	b.n	8003d62 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f00c fe6a 	bl	80109ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f003 f8cf 	bl	8006e9a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	687e      	ldr	r6, [r7, #4]
 8003d04:	466d      	mov	r5, sp
 8003d06:	f106 0410 	add.w	r4, r6, #16
 8003d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d16:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d1a:	1d33      	adds	r3, r6, #4
 8003d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d1e:	6838      	ldr	r0, [r7, #0]
 8003d20:	f003 f852 	bl	8006dc8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2101      	movs	r1, #1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f003 f8c6 	bl	8006ebc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	687e      	ldr	r6, [r7, #4]
 8003d38:	466d      	mov	r5, sp
 8003d3a:	f106 0410 	add.w	r4, r6, #16
 8003d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d4e:	1d33      	adds	r3, r6, #4
 8003d50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f003 f9d8 	bl	8007108 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d6a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003d6a:	b590      	push	{r4, r7, lr}
 8003d6c:	b089      	sub	sp, #36	; 0x24
 8003d6e:	af04      	add	r7, sp, #16
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	4608      	mov	r0, r1
 8003d74:	4611      	mov	r1, r2
 8003d76:	461a      	mov	r2, r3
 8003d78:	4603      	mov	r3, r0
 8003d7a:	70fb      	strb	r3, [r7, #3]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	70bb      	strb	r3, [r7, #2]
 8003d80:	4613      	mov	r3, r2
 8003d82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_HCD_HC_Init+0x28>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e07f      	b.n	8003e92 <HAL_HCD_HC_Init+0x128>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	440b      	add	r3, r1
 8003da8:	333d      	adds	r3, #61	; 0x3d
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	3338      	adds	r3, #56	; 0x38
 8003dbe:	787a      	ldrb	r2, [r7, #1]
 8003dc0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	440b      	add	r3, r1
 8003dd0:	3340      	adds	r3, #64	; 0x40
 8003dd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003dd4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	440b      	add	r3, r1
 8003de4:	3339      	adds	r3, #57	; 0x39
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	440b      	add	r3, r1
 8003df8:	333f      	adds	r3, #63	; 0x3f
 8003dfa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003dfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	78bb      	ldrb	r3, [r7, #2]
 8003e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e08:	b2d8      	uxtb	r0, r3
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	440b      	add	r3, r1
 8003e16:	333a      	adds	r3, #58	; 0x3a
 8003e18:	4602      	mov	r2, r0
 8003e1a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003e1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da0a      	bge.n	8003e3a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	440b      	add	r3, r1
 8003e32:	333b      	adds	r3, #59	; 0x3b
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e009      	b.n	8003e4e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	333b      	adds	r3, #59	; 0x3b
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	333c      	adds	r3, #60	; 0x3c
 8003e5e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003e62:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	787c      	ldrb	r4, [r7, #1]
 8003e6a:	78ba      	ldrb	r2, [r7, #2]
 8003e6c:	78f9      	ldrb	r1, [r7, #3]
 8003e6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e70:	9302      	str	r3, [sp, #8]
 8003e72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	4623      	mov	r3, r4
 8003e80:	f003 fab8 	bl	80073f4 <USB_HC_Init>
 8003e84:	4603      	mov	r3, r0
 8003e86:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd90      	pop	{r4, r7, pc}

08003e9a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_HCD_HC_Halt+0x1e>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e00f      	b.n	8003ed8 <HAL_HCD_HC_Halt+0x3e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f003 fcf2 	bl	80078b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	461a      	mov	r2, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	70fb      	strb	r3, [r7, #3]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	70bb      	strb	r3, [r7, #2]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	440b      	add	r3, r1
 8003f08:	333b      	adds	r3, #59	; 0x3b
 8003f0a:	78ba      	ldrb	r2, [r7, #2]
 8003f0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	333f      	adds	r3, #63	; 0x3f
 8003f1e:	787a      	ldrb	r2, [r7, #1]
 8003f20:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f22:	7c3b      	ldrb	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d114      	bne.n	8003f52 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	440b      	add	r3, r1
 8003f36:	3342      	adds	r3, #66	; 0x42
 8003f38:	2203      	movs	r2, #3
 8003f3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	333d      	adds	r3, #61	; 0x3d
 8003f4c:	7f3a      	ldrb	r2, [r7, #28]
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e009      	b.n	8003f66 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	440b      	add	r3, r1
 8003f60:	3342      	adds	r3, #66	; 0x42
 8003f62:	2202      	movs	r2, #2
 8003f64:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003f66:	787b      	ldrb	r3, [r7, #1]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	f200 80d6 	bhi.w	800411a <HAL_HCD_HC_SubmitRequest+0x23a>
 8003f6e:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08004105 	.word	0x08004105
 8003f7c:	08003ff1 	.word	0x08003ff1
 8003f80:	0800407b 	.word	0x0800407b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003f84:	7c3b      	ldrb	r3, [r7, #16]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	f040 80c9 	bne.w	800411e <HAL_HCD_HC_SubmitRequest+0x23e>
 8003f8c:	78bb      	ldrb	r3, [r7, #2]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 80c5 	bne.w	800411e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003f94:	8b3b      	ldrh	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3351      	adds	r3, #81	; 0x51
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	440b      	add	r3, r1
 8003fbc:	3351      	adds	r3, #81	; 0x51
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3342      	adds	r3, #66	; 0x42
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003fd8:	e0a1      	b.n	800411e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3342      	adds	r3, #66	; 0x42
 8003fea:	2202      	movs	r2, #2
 8003fec:	701a      	strb	r2, [r3, #0]
      break;
 8003fee:	e096      	b.n	800411e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ff0:	78bb      	ldrb	r3, [r7, #2]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d120      	bne.n	8004038 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	440b      	add	r3, r1
 8004004:	3351      	adds	r3, #81	; 0x51
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	440b      	add	r3, r1
 800401a:	3342      	adds	r3, #66	; 0x42
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004020:	e07e      	b.n	8004120 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	440b      	add	r3, r1
 8004030:	3342      	adds	r3, #66	; 0x42
 8004032:	2202      	movs	r2, #2
 8004034:	701a      	strb	r2, [r3, #0]
      break;
 8004036:	e073      	b.n	8004120 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	440b      	add	r3, r1
 8004046:	3350      	adds	r3, #80	; 0x50
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	440b      	add	r3, r1
 800405c:	3342      	adds	r3, #66	; 0x42
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
      break;
 8004062:	e05d      	b.n	8004120 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	440b      	add	r3, r1
 8004072:	3342      	adds	r3, #66	; 0x42
 8004074:	2202      	movs	r2, #2
 8004076:	701a      	strb	r2, [r3, #0]
      break;
 8004078:	e052      	b.n	8004120 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800407a:	78bb      	ldrb	r3, [r7, #2]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d120      	bne.n	80040c2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	440b      	add	r3, r1
 800408e:	3351      	adds	r3, #81	; 0x51
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	3342      	adds	r3, #66	; 0x42
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80040aa:	e039      	b.n	8004120 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	440b      	add	r3, r1
 80040ba:	3342      	adds	r3, #66	; 0x42
 80040bc:	2202      	movs	r2, #2
 80040be:	701a      	strb	r2, [r3, #0]
      break;
 80040c0:	e02e      	b.n	8004120 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	3350      	adds	r3, #80	; 0x50
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	440b      	add	r3, r1
 80040e6:	3342      	adds	r3, #66	; 0x42
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
      break;
 80040ec:	e018      	b.n	8004120 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	3342      	adds	r3, #66	; 0x42
 80040fe:	2202      	movs	r2, #2
 8004100:	701a      	strb	r2, [r3, #0]
      break;
 8004102:	e00d      	b.n	8004120 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	440b      	add	r3, r1
 8004112:	3342      	adds	r3, #66	; 0x42
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
      break;
 8004118:	e002      	b.n	8004120 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800411e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	440b      	add	r3, r1
 800412e:	3344      	adds	r3, #68	; 0x44
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004134:	78fa      	ldrb	r2, [r7, #3]
 8004136:	8b39      	ldrh	r1, [r7, #24]
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4403      	add	r3, r0
 8004144:	3348      	adds	r3, #72	; 0x48
 8004146:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	440b      	add	r3, r1
 8004156:	335c      	adds	r3, #92	; 0x5c
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	440b      	add	r3, r1
 800416a:	334c      	adds	r3, #76	; 0x4c
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	3339      	adds	r3, #57	; 0x39
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	440b      	add	r3, r1
 8004192:	335d      	adds	r3, #93	; 0x5d
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	3338      	adds	r3, #56	; 0x38
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	18d1      	adds	r1, r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	f003 fa28 	bl	8007608 <USB_HC_StartXfer>
 80041b8:	4603      	mov	r3, r0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop

080041c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f002 ff51 	bl	8007082 <USB_GetMode>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	f040 80ef 	bne.w	80043c6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f002 ff35 	bl	800705c <USB_ReadInterrupts>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80e5 	beq.w	80043c4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f002 ff2c 	bl	800705c <USB_ReadInterrupts>
 8004204:	4603      	mov	r3, r0
 8004206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800420a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800420e:	d104      	bne.n	800421a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004218:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f002 ff1c 	bl	800705c <USB_ReadInterrupts>
 8004224:	4603      	mov	r3, r0
 8004226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422e:	d104      	bne.n	800423a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004238:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f002 ff0c 	bl	800705c <USB_ReadInterrupts>
 8004244:	4603      	mov	r3, r0
 8004246:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800424a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800424e:	d104      	bne.n	800425a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004258:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f002 fefc 	bl	800705c <USB_ReadInterrupts>
 8004264:	4603      	mov	r3, r0
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b02      	cmp	r3, #2
 800426c:	d103      	bne.n	8004276 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2202      	movs	r2, #2
 8004274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f002 feee 	bl	800705c <USB_ReadInterrupts>
 8004280:	4603      	mov	r3, r0
 8004282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800428a:	d115      	bne.n	80042b8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004294:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f00c fc00 	bl	8010aac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2101      	movs	r1, #1
 80042b2:	4618      	mov	r0, r3
 80042b4:	f002 ffd8 	bl	8007268 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f002 fecd 	bl	800705c <USB_ReadInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042cc:	d102      	bne.n	80042d4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f001 f966 	bl	80055a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f002 febf 	bl	800705c <USB_ReadInterrupts>
 80042de:	4603      	mov	r3, r0
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d106      	bne.n	80042f6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f00c fbc3 	bl	8010a74 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2208      	movs	r2, #8
 80042f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f002 feae 	bl	800705c <USB_ReadInterrupts>
 8004300:	4603      	mov	r3, r0
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800430a:	d138      	bne.n	800437e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f003 fabd 	bl	8007890 <USB_HC_ReadInterrupt>
 8004316:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	e025      	b.n	800436a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d018      	beq.n	8004364 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004348:	d106      	bne.n	8004358 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8cf 	bl	80044f4 <HCD_HC_IN_IRQHandler>
 8004356:	e005      	b.n	8004364 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	4619      	mov	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fcfd 	bl	8004d5e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3301      	adds	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	429a      	cmp	r2, r3
 8004372:	d3d4      	bcc.n	800431e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800437c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f002 fe6a 	bl	800705c <USB_ReadInterrupts>
 8004388:	4603      	mov	r3, r0
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b10      	cmp	r3, #16
 8004390:	d101      	bne.n	8004396 <HAL_HCD_IRQHandler+0x1d2>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_HCD_IRQHandler+0x1d4>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d014      	beq.n	80043c6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0210 	bic.w	r2, r2, #16
 80043aa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f001 f84b 	bl	8005448 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0210 	orr.w	r2, r2, #16
 80043c0:	619a      	str	r2, [r3, #24]
 80043c2:	e000      	b.n	80043c6 <HAL_HCD_IRQHandler+0x202>
      return;
 80043c4:	bf00      	nop
    }
  }
}
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_HCD_Start+0x16>
 80043de:	2302      	movs	r3, #2
 80043e0:	e013      	b.n	800440a <HAL_HCD_Start+0x3e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f002 fd42 	bl	8006e78 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	4618      	mov	r0, r3
 80043fc:	f002 ff98 	bl	8007330 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_HCD_Stop+0x16>
 8004424:	2302      	movs	r3, #2
 8004426:	e00d      	b.n	8004444 <HAL_HCD_Stop+0x32>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f003 fb77 	bl	8007b28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f002 ff3f 	bl	80072dc <USB_ResetPort>
 800445e:	4603      	mov	r3, r0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	440b      	add	r3, r1
 8004482:	335c      	adds	r3, #92	; 0x5c
 8004484:	781b      	ldrb	r3, [r3, #0]
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	440b      	add	r3, r1
 80044ac:	334c      	adds	r3, #76	; 0x4c
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f002 ff81 	bl	80073d0 <USB_GetCurrentFrame>
 80044ce:	4603      	mov	r3, r0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f002 ff5c 	bl	80073a2 <USB_GetHostSpeed>
 80044ea:	4603      	mov	r3, r0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b04      	cmp	r3, #4
 8004522:	d119      	bne.n	8004558 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	461a      	mov	r2, r3
 8004532:	2304      	movs	r3, #4
 8004534:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4413      	add	r3, r2
 800453e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	440a      	add	r2, r1
 800454c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004550:	f043 0302 	orr.w	r3, r3, #2
 8004554:	60d3      	str	r3, [r2, #12]
 8004556:	e0ce      	b.n	80046f6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456e:	d12c      	bne.n	80045ca <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457c:	461a      	mov	r2, r3
 800457e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004582:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	440b      	add	r3, r1
 8004592:	335d      	adds	r3, #93	; 0x5d
 8004594:	2207      	movs	r2, #7
 8004596:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b2:	f043 0302 	orr.w	r3, r3, #2
 80045b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f003 f975 	bl	80078b2 <USB_HC_Halt>
 80045c8:	e095      	b.n	80046f6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d109      	bne.n	80045f4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	461a      	mov	r2, r3
 80045ee:	2320      	movs	r3, #32
 80045f0:	6093      	str	r3, [r2, #8]
 80045f2:	e080      	b.n	80046f6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b08      	cmp	r3, #8
 8004608:	d134      	bne.n	8004674 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4413      	add	r3, r2
 8004612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	0151      	lsls	r1, r2, #5
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	440a      	add	r2, r1
 8004620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004624:	f043 0302 	orr.w	r3, r3, #2
 8004628:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	440b      	add	r3, r1
 8004638:	335d      	adds	r3, #93	; 0x5d
 800463a:	2205      	movs	r2, #5
 800463c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4413      	add	r3, r2
 8004646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464a:	461a      	mov	r2, r3
 800464c:	2310      	movs	r3, #16
 800464e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465c:	461a      	mov	r2, r3
 800465e:	2308      	movs	r3, #8
 8004660:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	4611      	mov	r1, r2
 800466c:	4618      	mov	r0, r3
 800466e:	f003 f920 	bl	80078b2 <USB_HC_Halt>
 8004672:	e040      	b.n	80046f6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468a:	d134      	bne.n	80046f6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a6:	f043 0302 	orr.w	r3, r3, #2
 80046aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f003 f8fb 	bl	80078b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c8:	461a      	mov	r2, r3
 80046ca:	2310      	movs	r3, #16
 80046cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	440b      	add	r3, r1
 80046dc:	335d      	adds	r3, #93	; 0x5d
 80046de:	2208      	movs	r2, #8
 80046e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ee:	461a      	mov	r2, r3
 80046f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800470c:	d122      	bne.n	8004754 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	0151      	lsls	r1, r2, #5
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	440a      	add	r2, r1
 8004724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f003 f8ba 	bl	80078b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4413      	add	r3, r2
 8004746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474a:	461a      	mov	r2, r3
 800474c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004750:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004752:	e300      	b.n	8004d56 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4413      	add	r3, r2
 800475c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b01      	cmp	r3, #1
 8004768:	f040 80fd 	bne.w	8004966 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01b      	beq.n	80047ac <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	440b      	add	r3, r1
 8004782:	3348      	adds	r3, #72	; 0x48
 8004784:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	0159      	lsls	r1, r3, #5
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	440b      	add	r3, r1
 800478e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004798:	1ad1      	subs	r1, r2, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4403      	add	r3, r0
 80047a8:	334c      	adds	r3, #76	; 0x4c
 80047aa:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	440b      	add	r3, r1
 80047ba:	335d      	adds	r3, #93	; 0x5d
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	440b      	add	r3, r1
 80047ce:	3358      	adds	r3, #88	; 0x58
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e0:	461a      	mov	r2, r3
 80047e2:	2301      	movs	r3, #1
 80047e4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	440b      	add	r3, r1
 80047f4:	333f      	adds	r3, #63	; 0x3f
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	440b      	add	r3, r1
 800480a:	333f      	adds	r3, #63	; 0x3f
 800480c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800480e:	2b02      	cmp	r3, #2
 8004810:	d121      	bne.n	8004856 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	0151      	lsls	r1, r2, #5
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	440a      	add	r2, r1
 8004828:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	4611      	mov	r1, r2
 800483c:	4618      	mov	r0, r3
 800483e:	f003 f838 	bl	80078b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	461a      	mov	r2, r3
 8004850:	2310      	movs	r3, #16
 8004852:	6093      	str	r3, [r2, #8]
 8004854:	e070      	b.n	8004938 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	440b      	add	r3, r1
 8004864:	333f      	adds	r3, #63	; 0x3f
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d12a      	bne.n	80048c2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4413      	add	r3, r2
 8004874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	0151      	lsls	r1, r2, #5
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	440a      	add	r2, r1
 8004882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800488a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	440b      	add	r3, r1
 800489a:	335c      	adds	r3, #92	; 0x5c
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	b2d8      	uxtb	r0, r3
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	440b      	add	r3, r1
 80048b2:	335c      	adds	r3, #92	; 0x5c
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	4601      	mov	r1, r0
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f00c f904 	bl	8010ac8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048c0:	e03a      	b.n	8004938 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	440b      	add	r3, r1
 80048d0:	333f      	adds	r3, #63	; 0x3f
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d12f      	bne.n	8004938 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	440b      	add	r3, r1
 80048e6:	335c      	adds	r3, #92	; 0x5c
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	440b      	add	r3, r1
 80048fa:	3350      	adds	r3, #80	; 0x50
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	f083 0301 	eor.w	r3, r3, #1
 8004902:	b2d8      	uxtb	r0, r3
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	440b      	add	r3, r1
 8004912:	3350      	adds	r3, #80	; 0x50
 8004914:	4602      	mov	r2, r0
 8004916:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	b2d8      	uxtb	r0, r3
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	440b      	add	r3, r1
 800492a:	335c      	adds	r3, #92	; 0x5c
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	4601      	mov	r1, r0
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f00c f8c8 	bl	8010ac8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	440b      	add	r3, r1
 8004946:	3350      	adds	r3, #80	; 0x50
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	f083 0301 	eor.w	r3, r3, #1
 800494e:	b2d8      	uxtb	r0, r3
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	440b      	add	r3, r1
 800495e:	3350      	adds	r3, #80	; 0x50
 8004960:	4602      	mov	r2, r0
 8004962:	701a      	strb	r2, [r3, #0]
}
 8004964:	e1f7      	b.n	8004d56 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b02      	cmp	r3, #2
 800497a:	f040 811a 	bne.w	8004bb2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	440a      	add	r2, r1
 8004994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004998:	f023 0302 	bic.w	r3, r3, #2
 800499c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	440b      	add	r3, r1
 80049ac:	335d      	adds	r3, #93	; 0x5d
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d10a      	bne.n	80049ca <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	440b      	add	r3, r1
 80049c2:	335c      	adds	r3, #92	; 0x5c
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e0d9      	b.n	8004b7e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	440b      	add	r3, r1
 80049d8:	335d      	adds	r3, #93	; 0x5d
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d10a      	bne.n	80049f6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	440b      	add	r3, r1
 80049ee:	335c      	adds	r3, #92	; 0x5c
 80049f0:	2205      	movs	r2, #5
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	e0c3      	b.n	8004b7e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	440b      	add	r3, r1
 8004a04:	335d      	adds	r3, #93	; 0x5d
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b06      	cmp	r3, #6
 8004a0a:	d00a      	beq.n	8004a22 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	440b      	add	r3, r1
 8004a1a:	335d      	adds	r3, #93	; 0x5d
 8004a1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d156      	bne.n	8004ad0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	440b      	add	r3, r1
 8004a30:	3358      	adds	r3, #88	; 0x58
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	1c59      	adds	r1, r3, #1
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4403      	add	r3, r0
 8004a44:	3358      	adds	r3, #88	; 0x58
 8004a46:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	440b      	add	r3, r1
 8004a56:	3358      	adds	r3, #88	; 0x58
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d914      	bls.n	8004a88 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3358      	adds	r3, #88	; 0x58
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	440b      	add	r3, r1
 8004a80:	335c      	adds	r3, #92	; 0x5c
 8004a82:	2204      	movs	r2, #4
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	e009      	b.n	8004a9c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	440b      	add	r3, r1
 8004a96:	335c      	adds	r3, #92	; 0x5c
 8004a98:	2202      	movs	r2, #2
 8004a9a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e056      	b.n	8004b7e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	440b      	add	r3, r1
 8004ade:	335d      	adds	r3, #93	; 0x5d
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d123      	bne.n	8004b2e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	440b      	add	r3, r1
 8004af4:	335c      	adds	r3, #92	; 0x5c
 8004af6:	2202      	movs	r2, #2
 8004af8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b10:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b18:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b26:	461a      	mov	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	e027      	b.n	8004b7e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	440b      	add	r3, r1
 8004b3c:	335d      	adds	r3, #93	; 0x5d
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b07      	cmp	r3, #7
 8004b42:	d11c      	bne.n	8004b7e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	440b      	add	r3, r1
 8004b52:	3358      	adds	r3, #88	; 0x58
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	1c59      	adds	r1, r3, #1
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4403      	add	r3, r0
 8004b66:	3358      	adds	r3, #88	; 0x58
 8004b68:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	440b      	add	r3, r1
 8004b78:	335c      	adds	r3, #92	; 0x5c
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	b2d8      	uxtb	r0, r3
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	440b      	add	r3, r1
 8004ba2:	335c      	adds	r3, #92	; 0x5c
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4601      	mov	r1, r0
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f00b ff8c 	bl	8010ac8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004bb0:	e0d1      	b.n	8004d56 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d13e      	bne.n	8004c46 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be2:	f043 0302 	orr.w	r3, r3, #2
 8004be6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3358      	adds	r3, #88	; 0x58
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	1c59      	adds	r1, r3, #1
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4403      	add	r3, r0
 8004c0a:	3358      	adds	r3, #88	; 0x58
 8004c0c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	440b      	add	r3, r1
 8004c1c:	335d      	adds	r3, #93	; 0x5d
 8004c1e:	2206      	movs	r2, #6
 8004c20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f002 fe40 	bl	80078b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	6093      	str	r3, [r2, #8]
}
 8004c44:	e087      	b.n	8004d56 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d17c      	bne.n	8004d56 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	440b      	add	r3, r1
 8004c6a:	333f      	adds	r3, #63	; 0x3f
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d122      	bne.n	8004cb8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	440b      	add	r3, r1
 8004c80:	3358      	adds	r3, #88	; 0x58
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f002 fdfe 	bl	80078b2 <USB_HC_Halt>
 8004cb6:	e045      	b.n	8004d44 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	440b      	add	r3, r1
 8004cc6:	333f      	adds	r3, #63	; 0x3f
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	440b      	add	r3, r1
 8004cdc:	333f      	adds	r3, #63	; 0x3f
 8004cde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d12f      	bne.n	8004d44 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	440b      	add	r3, r1
 8004cf2:	3358      	adds	r3, #88	; 0x58
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d121      	bne.n	8004d44 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	440b      	add	r3, r1
 8004d0e:	335d      	adds	r3, #93	; 0x5d
 8004d10:	2203      	movs	r2, #3
 8004d12:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d2e:	f043 0302 	orr.w	r3, r3, #2
 8004d32:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f002 fdb7 	bl	80078b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d50:	461a      	mov	r2, r3
 8004d52:	2310      	movs	r3, #16
 8004d54:	6093      	str	r3, [r2, #8]
}
 8004d56:	bf00      	nop
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d119      	bne.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dba:	f043 0302 	orr.w	r3, r3, #2
 8004dbe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004dc0:	e33e      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d141      	bne.n	8004e5c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de4:	461a      	mov	r2, r3
 8004de6:	2320      	movs	r3, #32
 8004de8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	440b      	add	r3, r1
 8004df8:	333d      	adds	r3, #61	; 0x3d
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	f040 831f 	bne.w	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	440b      	add	r3, r1
 8004e10:	333d      	adds	r3, #61	; 0x3d
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	440b      	add	r3, r1
 8004e24:	335c      	adds	r3, #92	; 0x5c
 8004e26:	2202      	movs	r2, #2
 8004e28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e44:	f043 0302 	orr.w	r3, r3, #2
 8004e48:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	4611      	mov	r1, r2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f002 fd2c 	bl	80078b2 <USB_HC_Halt>
}
 8004e5a:	e2f1      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d13f      	bne.n	8004ef2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	440b      	add	r3, r1
 8004e80:	335d      	adds	r3, #93	; 0x5d
 8004e82:	2204      	movs	r2, #4
 8004e84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	440b      	add	r3, r1
 8004e94:	333d      	adds	r3, #61	; 0x3d
 8004e96:	2201      	movs	r2, #1
 8004e98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	440b      	add	r3, r1
 8004ea8:	3358      	adds	r3, #88	; 0x58
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	0151      	lsls	r1, r2, #5
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	440a      	add	r2, r1
 8004ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec8:	f043 0302 	orr.w	r3, r3, #2
 8004ecc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f002 fcea 	bl	80078b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eea:	461a      	mov	r2, r3
 8004eec:	2340      	movs	r3, #64	; 0x40
 8004eee:	6093      	str	r3, [r2, #8]
}
 8004ef0:	e2a6      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f08:	d122      	bne.n	8004f50 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f002 fcbc 	bl	80078b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f46:	461a      	mov	r2, r3
 8004f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f4c:	6093      	str	r3, [r2, #8]
}
 8004f4e:	e277      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d135      	bne.n	8004fd2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	440b      	add	r3, r1
 8004f74:	3358      	adds	r3, #88	; 0x58
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f94:	f043 0302 	orr.w	r3, r3, #2
 8004f98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f002 fc84 	bl	80078b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2301      	movs	r3, #1
 8004fba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	440b      	add	r3, r1
 8004fca:	335d      	adds	r3, #93	; 0x5d
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]
}
 8004fd0:	e236      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d12b      	bne.n	8005040 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	440a      	add	r2, r1
 8005010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005014:	f043 0302 	orr.w	r3, r3, #2
 8005018:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f002 fc44 	bl	80078b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	440b      	add	r3, r1
 8005038:	335d      	adds	r3, #93	; 0x5d
 800503a:	2205      	movs	r2, #5
 800503c:	701a      	strb	r2, [r3, #0]
}
 800503e:	e1ff      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4413      	add	r3, r2
 8005048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b10      	cmp	r3, #16
 8005054:	d155      	bne.n	8005102 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	440b      	add	r3, r1
 8005064:	3358      	adds	r3, #88	; 0x58
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	440b      	add	r3, r1
 8005078:	335d      	adds	r3, #93	; 0x5d
 800507a:	2203      	movs	r2, #3
 800507c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	440b      	add	r3, r1
 800508c:	333d      	adds	r3, #61	; 0x3d
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d114      	bne.n	80050be <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	440b      	add	r3, r1
 80050a2:	333c      	adds	r3, #60	; 0x3c
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	440b      	add	r3, r1
 80050b8:	333d      	adds	r3, #61	; 0x3d
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f002 fbe2 	bl	80078b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fa:	461a      	mov	r2, r3
 80050fc:	2310      	movs	r3, #16
 80050fe:	6093      	str	r3, [r2, #8]
}
 8005100:	e19e      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4413      	add	r3, r2
 800510a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b80      	cmp	r3, #128	; 0x80
 8005116:	d12b      	bne.n	8005170 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	440a      	add	r2, r1
 800512e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005132:	f043 0302 	orr.w	r3, r3, #2
 8005136:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f002 fbb5 	bl	80078b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	440b      	add	r3, r1
 8005156:	335d      	adds	r3, #93	; 0x5d
 8005158:	2206      	movs	r2, #6
 800515a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4413      	add	r3, r2
 8005164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005168:	461a      	mov	r2, r3
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	6093      	str	r3, [r2, #8]
}
 800516e:	e167      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005186:	d135      	bne.n	80051f4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	440a      	add	r2, r1
 800519e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a2:	f043 0302 	orr.w	r3, r3, #2
 80051a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f002 fb7d 	bl	80078b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c4:	461a      	mov	r2, r3
 80051c6:	2310      	movs	r3, #16
 80051c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	461a      	mov	r2, r3
 80051d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	335d      	adds	r3, #93	; 0x5d
 80051ee:	2208      	movs	r2, #8
 80051f0:	701a      	strb	r2, [r3, #0]
}
 80051f2:	e125      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	f040 811a 	bne.w	8005440 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4413      	add	r3, r2
 8005214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	440a      	add	r2, r1
 8005222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005226:	f023 0302 	bic.w	r3, r3, #2
 800522a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	335d      	adds	r3, #93	; 0x5d
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d137      	bne.n	80052b2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	440b      	add	r3, r1
 8005250:	335c      	adds	r3, #92	; 0x5c
 8005252:	2201      	movs	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	440b      	add	r3, r1
 8005264:	333f      	adds	r3, #63	; 0x3f
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d00b      	beq.n	8005284 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	440b      	add	r3, r1
 800527a:	333f      	adds	r3, #63	; 0x3f
 800527c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800527e:	2b03      	cmp	r3, #3
 8005280:	f040 80c5 	bne.w	800540e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	440b      	add	r3, r1
 8005292:	3351      	adds	r3, #81	; 0x51
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	f083 0301 	eor.w	r3, r3, #1
 800529a:	b2d8      	uxtb	r0, r3
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	440b      	add	r3, r1
 80052aa:	3351      	adds	r3, #81	; 0x51
 80052ac:	4602      	mov	r2, r0
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e0ad      	b.n	800540e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	440b      	add	r3, r1
 80052c0:	335d      	adds	r3, #93	; 0x5d
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d10a      	bne.n	80052de <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	440b      	add	r3, r1
 80052d6:	335c      	adds	r3, #92	; 0x5c
 80052d8:	2202      	movs	r2, #2
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	e097      	b.n	800540e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	440b      	add	r3, r1
 80052ec:	335d      	adds	r3, #93	; 0x5d
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d10a      	bne.n	800530a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	440b      	add	r3, r1
 8005302:	335c      	adds	r3, #92	; 0x5c
 8005304:	2202      	movs	r2, #2
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	e081      	b.n	800540e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	440b      	add	r3, r1
 8005318:	335d      	adds	r3, #93	; 0x5d
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b05      	cmp	r3, #5
 800531e:	d10a      	bne.n	8005336 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	440b      	add	r3, r1
 800532e:	335c      	adds	r3, #92	; 0x5c
 8005330:	2205      	movs	r2, #5
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	e06b      	b.n	800540e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	440b      	add	r3, r1
 8005344:	335d      	adds	r3, #93	; 0x5d
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b06      	cmp	r3, #6
 800534a:	d00a      	beq.n	8005362 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	440b      	add	r3, r1
 800535a:	335d      	adds	r3, #93	; 0x5d
 800535c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800535e:	2b08      	cmp	r3, #8
 8005360:	d155      	bne.n	800540e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	440b      	add	r3, r1
 8005370:	3358      	adds	r3, #88	; 0x58
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	1c59      	adds	r1, r3, #1
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4403      	add	r3, r0
 8005384:	3358      	adds	r3, #88	; 0x58
 8005386:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	440b      	add	r3, r1
 8005396:	3358      	adds	r3, #88	; 0x58
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d914      	bls.n	80053c8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	440b      	add	r3, r1
 80053ac:	3358      	adds	r3, #88	; 0x58
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	440b      	add	r3, r1
 80053c0:	335c      	adds	r3, #92	; 0x5c
 80053c2:	2204      	movs	r2, #4
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e009      	b.n	80053dc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	440b      	add	r3, r1
 80053d6:	335c      	adds	r3, #92	; 0x5c
 80053d8:	2202      	movs	r2, #2
 80053da:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053f2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053fa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005408:	461a      	mov	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	4413      	add	r3, r2
 8005416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541a:	461a      	mov	r2, r3
 800541c:	2302      	movs	r3, #2
 800541e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	b2d8      	uxtb	r0, r3
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	440b      	add	r3, r1
 8005432:	335c      	adds	r3, #92	; 0x5c
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	4601      	mov	r1, r0
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f00b fb44 	bl	8010ac8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005440:	bf00      	nop
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08a      	sub	sp, #40	; 0x28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	0c5b      	lsrs	r3, r3, #17
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800547c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d003      	beq.n	800548c <HCD_RXQLVL_IRQHandler+0x44>
 8005484:	2b05      	cmp	r3, #5
 8005486:	f000 8082 	beq.w	800558e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800548a:	e083      	b.n	8005594 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d07f      	beq.n	8005592 <HCD_RXQLVL_IRQHandler+0x14a>
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	440b      	add	r3, r1
 80054a0:	3344      	adds	r3, #68	; 0x44
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d074      	beq.n	8005592 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	440b      	add	r3, r1
 80054ba:	3344      	adds	r3, #68	; 0x44
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	b292      	uxth	r2, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	f001 fda1 	bl	800700a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	440b      	add	r3, r1
 80054d6:	3344      	adds	r3, #68	; 0x44
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	18d1      	adds	r1, r2, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4403      	add	r3, r0
 80054ec:	3344      	adds	r3, #68	; 0x44
 80054ee:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	440b      	add	r3, r1
 80054fe:	334c      	adds	r3, #76	; 0x4c
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	18d1      	adds	r1, r2, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4403      	add	r3, r0
 8005514:	334c      	adds	r3, #76	; 0x4c
 8005516:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	4b1d      	ldr	r3, [pc, #116]	; (800559c <HCD_RXQLVL_IRQHandler+0x154>)
 8005528:	4013      	ands	r3, r2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d031      	beq.n	8005592 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	4413      	add	r3, r2
 8005536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005544:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800554c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	4413      	add	r3, r2
 8005556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555a:	461a      	mov	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	440b      	add	r3, r1
 800556e:	3350      	adds	r3, #80	; 0x50
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	f083 0301 	eor.w	r3, r3, #1
 8005576:	b2d8      	uxtb	r0, r3
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	440b      	add	r3, r1
 8005586:	3350      	adds	r3, #80	; 0x50
 8005588:	4602      	mov	r2, r0
 800558a:	701a      	strb	r2, [r3, #0]
      break;
 800558c:	e001      	b.n	8005592 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005592:	bf00      	nop
  }
}
 8005594:	bf00      	nop
 8005596:	3728      	adds	r7, #40	; 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	1ff80000 	.word	0x1ff80000

080055a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d10b      	bne.n	80055f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d102      	bne.n	80055e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f00b fa54 	bl	8010a90 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f043 0302 	orr.w	r3, r3, #2
 80055ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d132      	bne.n	8005660 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f043 0308 	orr.w	r3, r3, #8
 8005600:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b04      	cmp	r3, #4
 800560a:	d126      	bne.n	800565a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d113      	bne.n	800563c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800561a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800561e:	d106      	bne.n	800562e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2102      	movs	r1, #2
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fe1e 	bl	8007268 <USB_InitFSLSPClkSel>
 800562c:	e011      	b.n	8005652 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2101      	movs	r1, #1
 8005634:	4618      	mov	r0, r3
 8005636:	f001 fe17 	bl	8007268 <USB_InitFSLSPClkSel>
 800563a:	e00a      	b.n	8005652 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d106      	bne.n	8005652 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564a:	461a      	mov	r2, r3
 800564c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005650:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f00b fa4a 	bl	8010aec <HAL_HCD_PortEnabled_Callback>
 8005658:	e002      	b.n	8005660 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f00b fa54 	bl	8010b08 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b20      	cmp	r3, #32
 8005668:	d103      	bne.n	8005672 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f043 0320 	orr.w	r3, r3, #32
 8005670:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6013      	str	r3, [r2, #0]
}
 800567e:	bf00      	nop
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005692:	4b23      	ldr	r3, [pc, #140]	; (8005720 <HAL_PWREx_EnableOverDrive+0x98>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	4a22      	ldr	r2, [pc, #136]	; (8005720 <HAL_PWREx_EnableOverDrive+0x98>)
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569c:	6413      	str	r3, [r2, #64]	; 0x40
 800569e:	4b20      	ldr	r3, [pc, #128]	; (8005720 <HAL_PWREx_EnableOverDrive+0x98>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80056aa:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056b6:	f7fd f97b 	bl	80029b0 <HAL_GetTick>
 80056ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056bc:	e009      	b.n	80056d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80056be:	f7fd f977 	bl	80029b0 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056cc:	d901      	bls.n	80056d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e022      	b.n	8005718 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056d2:	4b14      	ldr	r3, [pc, #80]	; (8005724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056de:	d1ee      	bne.n	80056be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80056e0:	4b10      	ldr	r3, [pc, #64]	; (8005724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0f      	ldr	r2, [pc, #60]	; (8005724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056ec:	f7fd f960 	bl	80029b0 <HAL_GetTick>
 80056f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80056f2:	e009      	b.n	8005708 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80056f4:	f7fd f95c 	bl	80029b0 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005702:	d901      	bls.n	8005708 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e007      	b.n	8005718 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_PWREx_EnableOverDrive+0x9c>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005714:	d1ee      	bne.n	80056f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40023800 	.word	0x40023800
 8005724:	40007000 	.word	0x40007000

08005728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005730:	2300      	movs	r3, #0
 8005732:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e29b      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8087 	beq.w	800585a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800574c:	4b96      	ldr	r3, [pc, #600]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b04      	cmp	r3, #4
 8005756:	d00c      	beq.n	8005772 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005758:	4b93      	ldr	r3, [pc, #588]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	2b08      	cmp	r3, #8
 8005762:	d112      	bne.n	800578a <HAL_RCC_OscConfig+0x62>
 8005764:	4b90      	ldr	r3, [pc, #576]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800576c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005770:	d10b      	bne.n	800578a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005772:	4b8d      	ldr	r3, [pc, #564]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d06c      	beq.n	8005858 <HAL_RCC_OscConfig+0x130>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d168      	bne.n	8005858 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e275      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005792:	d106      	bne.n	80057a2 <HAL_RCC_OscConfig+0x7a>
 8005794:	4b84      	ldr	r3, [pc, #528]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a83      	ldr	r2, [pc, #524]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 800579a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	e02e      	b.n	8005800 <HAL_RCC_OscConfig+0xd8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x9c>
 80057aa:	4b7f      	ldr	r3, [pc, #508]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a7e      	ldr	r2, [pc, #504]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	4b7c      	ldr	r3, [pc, #496]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a7b      	ldr	r2, [pc, #492]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	e01d      	b.n	8005800 <HAL_RCC_OscConfig+0xd8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCC_OscConfig+0xc0>
 80057ce:	4b76      	ldr	r3, [pc, #472]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a75      	ldr	r2, [pc, #468]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	4b73      	ldr	r3, [pc, #460]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a72      	ldr	r2, [pc, #456]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e00b      	b.n	8005800 <HAL_RCC_OscConfig+0xd8>
 80057e8:	4b6f      	ldr	r3, [pc, #444]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a6e      	ldr	r2, [pc, #440]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4b6c      	ldr	r3, [pc, #432]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a6b      	ldr	r2, [pc, #428]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80057fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d013      	beq.n	8005830 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fd f8d2 	bl	80029b0 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005810:	f7fd f8ce 	bl	80029b0 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b64      	cmp	r3, #100	; 0x64
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e229      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005822:	4b61      	ldr	r3, [pc, #388]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0xe8>
 800582e:	e014      	b.n	800585a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fd f8be 	bl	80029b0 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005838:	f7fd f8ba 	bl	80029b0 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e215      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584a:	4b57      	ldr	r3, [pc, #348]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x110>
 8005856:	e000      	b.n	800585a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d069      	beq.n	800593a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005866:	4b50      	ldr	r3, [pc, #320]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005872:	4b4d      	ldr	r3, [pc, #308]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
 800587a:	2b08      	cmp	r3, #8
 800587c:	d11c      	bne.n	80058b8 <HAL_RCC_OscConfig+0x190>
 800587e:	4b4a      	ldr	r3, [pc, #296]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d116      	bne.n	80058b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800588a:	4b47      	ldr	r3, [pc, #284]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <HAL_RCC_OscConfig+0x17a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d001      	beq.n	80058a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e1e9      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a2:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	493d      	ldr	r1, [pc, #244]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058b6:	e040      	b.n	800593a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d023      	beq.n	8005908 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058c0:	4b39      	ldr	r3, [pc, #228]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a38      	ldr	r2, [pc, #224]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fd f870 	bl	80029b0 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058d4:	f7fd f86c 	bl	80029b0 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e1c7      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e6:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f2:	4b2d      	ldr	r3, [pc, #180]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4929      	ldr	r1, [pc, #164]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005902:	4313      	orrs	r3, r2
 8005904:	600b      	str	r3, [r1, #0]
 8005906:	e018      	b.n	800593a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005908:	4b27      	ldr	r3, [pc, #156]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a26      	ldr	r2, [pc, #152]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7fd f84c 	bl	80029b0 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800591c:	f7fd f848 	bl	80029b0 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e1a3      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800592e:	4b1e      	ldr	r3, [pc, #120]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f0      	bne.n	800591c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d038      	beq.n	80059b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d019      	beq.n	8005982 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800594e:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005952:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595a:	f7fd f829 	bl	80029b0 <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005962:	f7fd f825 	bl	80029b0 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e180      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005974:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0f0      	beq.n	8005962 <HAL_RCC_OscConfig+0x23a>
 8005980:	e01a      	b.n	80059b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005982:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005986:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <HAL_RCC_OscConfig+0x280>)
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598e:	f7fd f80f 	bl	80029b0 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005994:	e00a      	b.n	80059ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005996:	f7fd f80b 	bl	80029b0 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d903      	bls.n	80059ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e166      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
 80059a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ac:	4b92      	ldr	r3, [pc, #584]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 80059ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1ee      	bne.n	8005996 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80a4 	beq.w	8005b0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059c6:	4b8c      	ldr	r3, [pc, #560]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10d      	bne.n	80059ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80059d2:	4b89      	ldr	r3, [pc, #548]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	4a88      	ldr	r2, [pc, #544]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6413      	str	r3, [r2, #64]	; 0x40
 80059de:	4b86      	ldr	r3, [pc, #536]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e6:	60bb      	str	r3, [r7, #8]
 80059e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059ee:	4b83      	ldr	r3, [pc, #524]	; (8005bfc <HAL_RCC_OscConfig+0x4d4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d118      	bne.n	8005a2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80059fa:	4b80      	ldr	r3, [pc, #512]	; (8005bfc <HAL_RCC_OscConfig+0x4d4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a7f      	ldr	r2, [pc, #508]	; (8005bfc <HAL_RCC_OscConfig+0x4d4>)
 8005a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a06:	f7fc ffd3 	bl	80029b0 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a0e:	f7fc ffcf 	bl	80029b0 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b64      	cmp	r3, #100	; 0x64
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e12a      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a20:	4b76      	ldr	r3, [pc, #472]	; (8005bfc <HAL_RCC_OscConfig+0x4d4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0f0      	beq.n	8005a0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d106      	bne.n	8005a42 <HAL_RCC_OscConfig+0x31a>
 8005a34:	4b70      	ldr	r3, [pc, #448]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	4a6f      	ldr	r2, [pc, #444]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a3a:	f043 0301 	orr.w	r3, r3, #1
 8005a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a40:	e02d      	b.n	8005a9e <HAL_RCC_OscConfig+0x376>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCC_OscConfig+0x33c>
 8005a4a:	4b6b      	ldr	r3, [pc, #428]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a6a      	ldr	r2, [pc, #424]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70
 8005a56:	4b68      	ldr	r3, [pc, #416]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5a:	4a67      	ldr	r2, [pc, #412]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a5c:	f023 0304 	bic.w	r3, r3, #4
 8005a60:	6713      	str	r3, [r2, #112]	; 0x70
 8005a62:	e01c      	b.n	8005a9e <HAL_RCC_OscConfig+0x376>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b05      	cmp	r3, #5
 8005a6a:	d10c      	bne.n	8005a86 <HAL_RCC_OscConfig+0x35e>
 8005a6c:	4b62      	ldr	r3, [pc, #392]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	4a61      	ldr	r2, [pc, #388]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a72:	f043 0304 	orr.w	r3, r3, #4
 8005a76:	6713      	str	r3, [r2, #112]	; 0x70
 8005a78:	4b5f      	ldr	r3, [pc, #380]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7c:	4a5e      	ldr	r2, [pc, #376]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	6713      	str	r3, [r2, #112]	; 0x70
 8005a84:	e00b      	b.n	8005a9e <HAL_RCC_OscConfig+0x376>
 8005a86:	4b5c      	ldr	r3, [pc, #368]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a5b      	ldr	r2, [pc, #364]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	6713      	str	r3, [r2, #112]	; 0x70
 8005a92:	4b59      	ldr	r3, [pc, #356]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	4a58      	ldr	r2, [pc, #352]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005a98:	f023 0304 	bic.w	r3, r3, #4
 8005a9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d015      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa6:	f7fc ff83 	bl	80029b0 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aac:	e00a      	b.n	8005ac4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aae:	f7fc ff7f 	bl	80029b0 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e0d8      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac4:	4b4c      	ldr	r3, [pc, #304]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0ee      	beq.n	8005aae <HAL_RCC_OscConfig+0x386>
 8005ad0:	e014      	b.n	8005afc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad2:	f7fc ff6d 	bl	80029b0 <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ada:	f7fc ff69 	bl	80029b0 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e0c2      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af0:	4b41      	ldr	r3, [pc, #260]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1ee      	bne.n	8005ada <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d105      	bne.n	8005b0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b02:	4b3d      	ldr	r3, [pc, #244]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	4a3c      	ldr	r2, [pc, #240]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80ae 	beq.w	8005c74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b18:	4b37      	ldr	r3, [pc, #220]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 030c 	and.w	r3, r3, #12
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d06d      	beq.n	8005c00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d14b      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2c:	4b32      	ldr	r3, [pc, #200]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a31      	ldr	r2, [pc, #196]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fc ff3a 	bl	80029b0 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b40:	f7fc ff36 	bl	80029b0 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e091      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b52:	4b29      	ldr	r3, [pc, #164]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69da      	ldr	r2, [r3, #28]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	3b01      	subs	r3, #1
 8005b78:	041b      	lsls	r3, r3, #16
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	071b      	lsls	r3, r3, #28
 8005b8a:	491b      	ldr	r1, [pc, #108]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b90:	4b19      	ldr	r3, [pc, #100]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9c:	f7fc ff08 	bl	80029b0 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba4:	f7fc ff04 	bl	80029b0 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e05f      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x47c>
 8005bc2:	e057      	b.n	8005c74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a0b      	ldr	r2, [pc, #44]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd0:	f7fc feee 	bl	80029b0 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fc feea 	bl	80029b0 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e045      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bea:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <HAL_RCC_OscConfig+0x4d0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f0      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x4b0>
 8005bf6:	e03d      	b.n	8005c74 <HAL_RCC_OscConfig+0x54c>
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c00:	4b1f      	ldr	r3, [pc, #124]	; (8005c80 <HAL_RCC_OscConfig+0x558>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d030      	beq.n	8005c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d129      	bne.n	8005c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d122      	bne.n	8005c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c30:	4013      	ands	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d119      	bne.n	8005c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d10f      	bne.n	8005c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d107      	bne.n	8005c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40023800 	.word	0x40023800

08005c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0d0      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c9c:	4b6a      	ldr	r3, [pc, #424]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d910      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005caa:	4b67      	ldr	r3, [pc, #412]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 020f 	bic.w	r2, r3, #15
 8005cb2:	4965      	ldr	r1, [pc, #404]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cba:	4b63      	ldr	r3, [pc, #396]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0b8      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d020      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ce4:	4b59      	ldr	r3, [pc, #356]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a58      	ldr	r2, [pc, #352]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cfc:	4b53      	ldr	r3, [pc, #332]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4a52      	ldr	r2, [pc, #328]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b50      	ldr	r3, [pc, #320]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	494d      	ldr	r1, [pc, #308]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d040      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2e:	4b47      	ldr	r3, [pc, #284]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d115      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e07f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d107      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d46:	4b41      	ldr	r3, [pc, #260]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e073      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d56:	4b3d      	ldr	r3, [pc, #244]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e06b      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d66:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f023 0203 	bic.w	r2, r3, #3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	4936      	ldr	r1, [pc, #216]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d78:	f7fc fe1a 	bl	80029b0 <HAL_GetTick>
 8005d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d80:	f7fc fe16 	bl	80029b0 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e053      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	4b2d      	ldr	r3, [pc, #180]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 020c 	and.w	r2, r3, #12
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d1eb      	bne.n	8005d80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005da8:	4b27      	ldr	r3, [pc, #156]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d210      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db6:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f023 020f 	bic.w	r2, r3, #15
 8005dbe:	4922      	ldr	r1, [pc, #136]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e032      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4916      	ldr	r1, [pc, #88]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e02:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	490e      	ldr	r1, [pc, #56]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e16:	f000 f821 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <HAL_RCC_ClockConfig+0x1cc>)
 8005e28:	5cd3      	ldrb	r3, [r2, r3]
 8005e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <HAL_RCC_ClockConfig+0x1d0>)
 8005e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <HAL_RCC_ClockConfig+0x1d4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fc fc7a 	bl	8002730 <HAL_InitTick>

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40023c00 	.word	0x40023c00
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	08011248 	.word	0x08011248
 8005e54:	20000044 	.word	0x20000044
 8005e58:	20000048 	.word	0x20000048

08005e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e72:	4b63      	ldr	r3, [pc, #396]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 030c 	and.w	r3, r3, #12
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d007      	beq.n	8005e8e <HAL_RCC_GetSysClockFreq+0x32>
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d008      	beq.n	8005e94 <HAL_RCC_GetSysClockFreq+0x38>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f040 80b4 	bne.w	8005ff0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e88:	4b5e      	ldr	r3, [pc, #376]	; (8006004 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e8a:	60bb      	str	r3, [r7, #8]
      break;
 8005e8c:	e0b3      	b.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e8e:	4b5e      	ldr	r3, [pc, #376]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e90:	60bb      	str	r3, [r7, #8]
      break;
 8005e92:	e0b0      	b.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e94:	4b5a      	ldr	r3, [pc, #360]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e9c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005e9e:	4b58      	ldr	r3, [pc, #352]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d04a      	beq.n	8005f40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eaa:	4b55      	ldr	r3, [pc, #340]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	099b      	lsrs	r3, r3, #6
 8005eb0:	f04f 0400 	mov.w	r4, #0
 8005eb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	ea03 0501 	and.w	r5, r3, r1
 8005ec0:	ea04 0602 	and.w	r6, r4, r2
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4632      	mov	r2, r6
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	f04f 0400 	mov.w	r4, #0
 8005ed0:	0154      	lsls	r4, r2, #5
 8005ed2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ed6:	014b      	lsls	r3, r1, #5
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4622      	mov	r2, r4
 8005edc:	1b49      	subs	r1, r1, r5
 8005ede:	eb62 0206 	sbc.w	r2, r2, r6
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	f04f 0400 	mov.w	r4, #0
 8005eea:	0194      	lsls	r4, r2, #6
 8005eec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ef0:	018b      	lsls	r3, r1, #6
 8005ef2:	1a5b      	subs	r3, r3, r1
 8005ef4:	eb64 0402 	sbc.w	r4, r4, r2
 8005ef8:	f04f 0100 	mov.w	r1, #0
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	00e2      	lsls	r2, r4, #3
 8005f02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f06:	00d9      	lsls	r1, r3, #3
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4614      	mov	r4, r2
 8005f0c:	195b      	adds	r3, r3, r5
 8005f0e:	eb44 0406 	adc.w	r4, r4, r6
 8005f12:	f04f 0100 	mov.w	r1, #0
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	0262      	lsls	r2, r4, #9
 8005f1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005f20:	0259      	lsls	r1, r3, #9
 8005f22:	460b      	mov	r3, r1
 8005f24:	4614      	mov	r4, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	4621      	mov	r1, r4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f04f 0400 	mov.w	r4, #0
 8005f30:	461a      	mov	r2, r3
 8005f32:	4623      	mov	r3, r4
 8005f34:	f7fa fb40 	bl	80005b8 <__aeabi_uldivmod>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	e049      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f40:	4b2f      	ldr	r3, [pc, #188]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	099b      	lsrs	r3, r3, #6
 8005f46:	f04f 0400 	mov.w	r4, #0
 8005f4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	ea03 0501 	and.w	r5, r3, r1
 8005f56:	ea04 0602 	and.w	r6, r4, r2
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4632      	mov	r2, r6
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	f04f 0400 	mov.w	r4, #0
 8005f66:	0154      	lsls	r4, r2, #5
 8005f68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f6c:	014b      	lsls	r3, r1, #5
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4622      	mov	r2, r4
 8005f72:	1b49      	subs	r1, r1, r5
 8005f74:	eb62 0206 	sbc.w	r2, r2, r6
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	f04f 0400 	mov.w	r4, #0
 8005f80:	0194      	lsls	r4, r2, #6
 8005f82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f86:	018b      	lsls	r3, r1, #6
 8005f88:	1a5b      	subs	r3, r3, r1
 8005f8a:	eb64 0402 	sbc.w	r4, r4, r2
 8005f8e:	f04f 0100 	mov.w	r1, #0
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	00e2      	lsls	r2, r4, #3
 8005f98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f9c:	00d9      	lsls	r1, r3, #3
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	195b      	adds	r3, r3, r5
 8005fa4:	eb44 0406 	adc.w	r4, r4, r6
 8005fa8:	f04f 0100 	mov.w	r1, #0
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	02a2      	lsls	r2, r4, #10
 8005fb2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fb6:	0299      	lsls	r1, r3, #10
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4614      	mov	r4, r2
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f04f 0400 	mov.w	r4, #0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4623      	mov	r3, r4
 8005fca:	f7fa faf5 	bl	80005b8 <__aeabi_uldivmod>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	0c1b      	lsrs	r3, r3, #16
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	3301      	adds	r3, #1
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fec:	60bb      	str	r3, [r7, #8]
      break;
 8005fee:	e002      	b.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ff0:	4b04      	ldr	r3, [pc, #16]	; (8006004 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ff2:	60bb      	str	r3, [r7, #8]
      break;
 8005ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006000:	40023800 	.word	0x40023800
 8006004:	00f42400 	.word	0x00f42400
 8006008:	007a1200 	.word	0x007a1200

0800600c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006010:	4b03      	ldr	r3, [pc, #12]	; (8006020 <HAL_RCC_GetHCLKFreq+0x14>)
 8006012:	681b      	ldr	r3, [r3, #0]
}
 8006014:	4618      	mov	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20000044 	.word	0x20000044

08006024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006028:	f7ff fff0 	bl	800600c <HAL_RCC_GetHCLKFreq>
 800602c:	4601      	mov	r1, r0
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	0a9b      	lsrs	r3, r3, #10
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	4a03      	ldr	r2, [pc, #12]	; (8006048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800603a:	5cd3      	ldrb	r3, [r2, r3]
 800603c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40023800 	.word	0x40023800
 8006048:	08011258 	.word	0x08011258

0800604c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	220f      	movs	r2, #15
 800605a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800605c:	4b12      	ldr	r3, [pc, #72]	; (80060a8 <HAL_RCC_GetClockConfig+0x5c>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 0203 	and.w	r2, r3, #3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006068:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <HAL_RCC_GetClockConfig+0x5c>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	08db      	lsrs	r3, r3, #3
 8006086:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <HAL_RCC_GetClockConfig+0x60>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 020f 	and.w	r2, r3, #15
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	601a      	str	r2, [r3, #0]
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40023800 	.word	0x40023800
 80060ac:	40023c00 	.word	0x40023c00

080060b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d012      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060d8:	4b69      	ldr	r3, [pc, #420]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4a68      	ldr	r2, [pc, #416]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060e2:	6093      	str	r3, [r2, #8]
 80060e4:	4b66      	ldr	r3, [pc, #408]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ec:	4964      	ldr	r1, [pc, #400]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060fa:	2301      	movs	r3, #1
 80060fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d017      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800610a:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006118:	4959      	ldr	r1, [pc, #356]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006128:	d101      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800612a:	2301      	movs	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006136:	2301      	movs	r3, #1
 8006138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d017      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006146:	4b4e      	ldr	r3, [pc, #312]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800614c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	494a      	ldr	r1, [pc, #296]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006164:	d101      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006166:	2301      	movs	r3, #1
 8006168:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006172:	2301      	movs	r3, #1
 8006174:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006182:	2301      	movs	r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 808b 	beq.w	80062aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006194:	4b3a      	ldr	r3, [pc, #232]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	4a39      	ldr	r2, [pc, #228]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619e:	6413      	str	r3, [r2, #64]	; 0x40
 80061a0:	4b37      	ldr	r3, [pc, #220]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061ac:	4b35      	ldr	r3, [pc, #212]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a34      	ldr	r2, [pc, #208]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b8:	f7fc fbfa 	bl	80029b0 <HAL_GetTick>
 80061bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c0:	f7fc fbf6 	bl	80029b0 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	; 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e38d      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061d2:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061de:	4b28      	ldr	r3, [pc, #160]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d035      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d02e      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061fc:	4b20      	ldr	r3, [pc, #128]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006204:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006206:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620a:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800620c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006210:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006212:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	4a1a      	ldr	r2, [pc, #104]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800621e:	4a18      	ldr	r2, [pc, #96]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006224:	4b16      	ldr	r3, [pc, #88]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b01      	cmp	r3, #1
 800622e:	d114      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fc fbbe 	bl	80029b0 <HAL_GetTick>
 8006234:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006236:	e00a      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006238:	f7fc fbba 	bl	80029b0 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f241 3288 	movw	r2, #5000	; 0x1388
 8006246:	4293      	cmp	r3, r2
 8006248:	d901      	bls.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e34f      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ee      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006266:	d111      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006274:	4b04      	ldr	r3, [pc, #16]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006276:	400b      	ands	r3, r1
 8006278:	4901      	ldr	r1, [pc, #4]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627a:	4313      	orrs	r3, r2
 800627c:	608b      	str	r3, [r1, #8]
 800627e:	e00b      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006280:	40023800 	.word	0x40023800
 8006284:	40007000 	.word	0x40007000
 8006288:	0ffffcff 	.word	0x0ffffcff
 800628c:	4bb3      	ldr	r3, [pc, #716]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	4ab2      	ldr	r2, [pc, #712]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006292:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006296:	6093      	str	r3, [r2, #8]
 8006298:	4bb0      	ldr	r3, [pc, #704]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800629a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a4:	49ad      	ldr	r1, [pc, #692]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d010      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062b6:	4ba9      	ldr	r3, [pc, #676]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062bc:	4aa7      	ldr	r2, [pc, #668]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062c6:	4ba5      	ldr	r3, [pc, #660]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	49a2      	ldr	r1, [pc, #648]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062e4:	4b9d      	ldr	r3, [pc, #628]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f2:	499a      	ldr	r1, [pc, #616]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006306:	4b95      	ldr	r3, [pc, #596]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006314:	4991      	ldr	r1, [pc, #580]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006328:	4b8c      	ldr	r3, [pc, #560]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006336:	4989      	ldr	r1, [pc, #548]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800634a:	4b84      	ldr	r3, [pc, #528]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006350:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4980      	ldr	r1, [pc, #512]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800636c:	4b7b      	ldr	r3, [pc, #492]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006372:	f023 0203 	bic.w	r2, r3, #3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	4978      	ldr	r1, [pc, #480]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800638e:	4b73      	ldr	r3, [pc, #460]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006394:	f023 020c 	bic.w	r2, r3, #12
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639c:	496f      	ldr	r1, [pc, #444]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063b0:	4b6a      	ldr	r3, [pc, #424]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063be:	4967      	ldr	r1, [pc, #412]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063d2:	4b62      	ldr	r3, [pc, #392]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e0:	495e      	ldr	r1, [pc, #376]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063f4:	4b59      	ldr	r3, [pc, #356]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	4956      	ldr	r1, [pc, #344]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006416:	4b51      	ldr	r3, [pc, #324]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006424:	494d      	ldr	r1, [pc, #308]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006438:	4b48      	ldr	r3, [pc, #288]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	4945      	ldr	r1, [pc, #276]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800645a:	4b40      	ldr	r3, [pc, #256]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800645c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006460:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006468:	493c      	ldr	r1, [pc, #240]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800647c:	4b37      	ldr	r3, [pc, #220]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800648a:	4934      	ldr	r1, [pc, #208]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d011      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800649e:	4b2f      	ldr	r3, [pc, #188]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ac:	492b      	ldr	r1, [pc, #172]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064bc:	d101      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064be:	2301      	movs	r3, #1
 80064c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064de:	4b1f      	ldr	r3, [pc, #124]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ec:	491b      	ldr	r1, [pc, #108]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006500:	4b16      	ldr	r3, [pc, #88]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006510:	4912      	ldr	r1, [pc, #72]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00b      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006524:	4b0d      	ldr	r3, [pc, #52]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006534:	4909      	ldr	r1, [pc, #36]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00f      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800654a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800654e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006558:	e002      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800655a:	bf00      	nop
 800655c:	40023800 	.word	0x40023800
 8006560:	4985      	ldr	r1, [pc, #532]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006574:	4b80      	ldr	r3, [pc, #512]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006584:	497c      	ldr	r1, [pc, #496]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d005      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800659a:	f040 80d6 	bne.w	800674a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800659e:	4b76      	ldr	r3, [pc, #472]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a75      	ldr	r2, [pc, #468]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065aa:	f7fc fa01 	bl	80029b0 <HAL_GetTick>
 80065ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065b0:	e008      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065b2:	f7fc f9fd 	bl	80029b0 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b64      	cmp	r3, #100	; 0x64
 80065be:	d901      	bls.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e194      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065c4:	4b6c      	ldr	r3, [pc, #432]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1f0      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d021      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11d      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065e4:	4b64      	ldr	r3, [pc, #400]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ea:	0c1b      	lsrs	r3, r3, #16
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065f2:	4b61      	ldr	r3, [pc, #388]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f8:	0e1b      	lsrs	r3, r3, #24
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	019a      	lsls	r2, r3, #6
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	041b      	lsls	r3, r3, #16
 800660a:	431a      	orrs	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	061b      	lsls	r3, r3, #24
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	071b      	lsls	r3, r3, #28
 8006618:	4957      	ldr	r1, [pc, #348]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d004      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006634:	d00a      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800663e:	2b00      	cmp	r3, #0
 8006640:	d02e      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800664a:	d129      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800664c:	4b4a      	ldr	r3, [pc, #296]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800664e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006652:	0c1b      	lsrs	r3, r3, #16
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800665a:	4b47      	ldr	r3, [pc, #284]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800665c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006660:	0f1b      	lsrs	r3, r3, #28
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	019a      	lsls	r2, r3, #6
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	431a      	orrs	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	071b      	lsls	r3, r3, #28
 8006680:	493d      	ldr	r1, [pc, #244]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006688:	4b3b      	ldr	r3, [pc, #236]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800668a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800668e:	f023 021f 	bic.w	r2, r3, #31
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	3b01      	subs	r3, #1
 8006698:	4937      	ldr	r1, [pc, #220]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01d      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80066ac:	4b32      	ldr	r3, [pc, #200]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80066ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b2:	0e1b      	lsrs	r3, r3, #24
 80066b4:	f003 030f 	and.w	r3, r3, #15
 80066b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066ba:	4b2f      	ldr	r3, [pc, #188]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80066bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c0:	0f1b      	lsrs	r3, r3, #28
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	019a      	lsls	r2, r3, #6
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	041b      	lsls	r3, r3, #16
 80066d4:	431a      	orrs	r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	061b      	lsls	r3, r3, #24
 80066da:	431a      	orrs	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	071b      	lsls	r3, r3, #28
 80066e0:	4925      	ldr	r1, [pc, #148]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d011      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	019a      	lsls	r2, r3, #6
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	041b      	lsls	r3, r3, #16
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	061b      	lsls	r3, r3, #24
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	071b      	lsls	r3, r3, #28
 8006710:	4919      	ldr	r1, [pc, #100]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006712:	4313      	orrs	r3, r2
 8006714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006718:	4b17      	ldr	r3, [pc, #92]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a16      	ldr	r2, [pc, #88]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800671e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006724:	f7fc f944 	bl	80029b0 <HAL_GetTick>
 8006728:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800672a:	e008      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800672c:	f7fc f940 	bl	80029b0 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b64      	cmp	r3, #100	; 0x64
 8006738:	d901      	bls.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e0d7      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800673e:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b01      	cmp	r3, #1
 800674e:	f040 80cd 	bne.w	80068ec <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006752:	4b09      	ldr	r3, [pc, #36]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a08      	ldr	r2, [pc, #32]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800675c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800675e:	f7fc f927 	bl	80029b0 <HAL_GetTick>
 8006762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006764:	e00a      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006766:	f7fc f923 	bl	80029b0 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b64      	cmp	r3, #100	; 0x64
 8006772:	d903      	bls.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e0ba      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8006778:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800677c:	4b5e      	ldr	r3, [pc, #376]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006788:	d0ed      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d02e      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d12a      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067b2:	4b51      	ldr	r3, [pc, #324]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067c0:	4b4d      	ldr	r3, [pc, #308]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	0f1b      	lsrs	r3, r3, #28
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	019a      	lsls	r2, r3, #6
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	041b      	lsls	r3, r3, #16
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	061b      	lsls	r3, r3, #24
 80067e0:	431a      	orrs	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	071b      	lsls	r3, r3, #28
 80067e6:	4944      	ldr	r1, [pc, #272]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067ee:	4b42      	ldr	r3, [pc, #264]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80067f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	3b01      	subs	r3, #1
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	493d      	ldr	r1, [pc, #244]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d022      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800681c:	d11d      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800681e:	4b36      	ldr	r3, [pc, #216]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006824:	0e1b      	lsrs	r3, r3, #24
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800682c:	4b32      	ldr	r3, [pc, #200]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800682e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006832:	0f1b      	lsrs	r3, r3, #28
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	019a      	lsls	r2, r3, #6
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	041b      	lsls	r3, r3, #16
 8006846:	431a      	orrs	r2, r3
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	061b      	lsls	r3, r3, #24
 800684c:	431a      	orrs	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	071b      	lsls	r3, r3, #28
 8006852:	4929      	ldr	r1, [pc, #164]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006854:	4313      	orrs	r3, r2
 8006856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d028      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006866:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	0e1b      	lsrs	r3, r3, #24
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006874:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687a:	0c1b      	lsrs	r3, r3, #16
 800687c:	f003 0303 	and.w	r3, r3, #3
 8006880:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	019a      	lsls	r2, r3, #6
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	041b      	lsls	r3, r3, #16
 800688c:	431a      	orrs	r2, r3
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	061b      	lsls	r3, r3, #24
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	071b      	lsls	r3, r3, #28
 800689a:	4917      	ldr	r1, [pc, #92]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800689c:	4313      	orrs	r3, r2
 800689e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80068a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	4911      	ldr	r1, [pc, #68]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068b8:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a0e      	ldr	r2, [pc, #56]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80068be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c4:	f7fc f874 	bl	80029b0 <HAL_GetTick>
 80068c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068cc:	f7fc f870 	bl	80029b0 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b64      	cmp	r3, #100	; 0x64
 80068d8:	d901      	bls.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e007      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068de:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ea:	d1ef      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3720      	adds	r7, #32
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40023800 	.word	0x40023800

080068fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e01d      	b.n	800694a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f815 	bl	8006952 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3304      	adds	r3, #4
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f000 f986 	bl	8006c4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <HAL_TIM_Base_Start_IT+0x50>)
 8006988:	4013      	ands	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b06      	cmp	r3, #6
 8006990:	d00b      	beq.n	80069aa <HAL_TIM_Base_Start_IT+0x42>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006998:	d007      	beq.n	80069aa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0201 	orr.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	00010007 	.word	0x00010007

080069bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d122      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d11b      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0202 	mvn.w	r2, #2
 80069e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f905 	bl	8006c0e <HAL_TIM_IC_CaptureCallback>
 8006a04:	e005      	b.n	8006a12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f8f7 	bl	8006bfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f908 	bl	8006c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d122      	bne.n	8006a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d11b      	bne.n	8006a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0204 	mvn.w	r2, #4
 8006a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2202      	movs	r2, #2
 8006a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f8db 	bl	8006c0e <HAL_TIM_IC_CaptureCallback>
 8006a58:	e005      	b.n	8006a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f8cd 	bl	8006bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f8de 	bl	8006c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d122      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d11b      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0208 	mvn.w	r2, #8
 8006a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2204      	movs	r2, #4
 8006a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f8b1 	bl	8006c0e <HAL_TIM_IC_CaptureCallback>
 8006aac:	e005      	b.n	8006aba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f8a3 	bl	8006bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f8b4 	bl	8006c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0310 	and.w	r3, r3, #16
 8006aca:	2b10      	cmp	r3, #16
 8006acc:	d122      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b10      	cmp	r3, #16
 8006ada:	d11b      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0210 	mvn.w	r2, #16
 8006ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2208      	movs	r2, #8
 8006aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f887 	bl	8006c0e <HAL_TIM_IC_CaptureCallback>
 8006b00:	e005      	b.n	8006b0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f879 	bl	8006bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f88a 	bl	8006c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d10e      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d107      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0201 	mvn.w	r2, #1
 8006b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fb fcfa 	bl	8002534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4a:	2b80      	cmp	r3, #128	; 0x80
 8006b4c:	d10e      	bne.n	8006b6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b58:	2b80      	cmp	r3, #128	; 0x80
 8006b5a:	d107      	bne.n	8006b6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f91a 	bl	8006da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7a:	d10e      	bne.n	8006b9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b86:	2b80      	cmp	r3, #128	; 0x80
 8006b88:	d107      	bne.n	8006b9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f90d 	bl	8006db4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba4:	2b40      	cmp	r3, #64	; 0x40
 8006ba6:	d10e      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb2:	2b40      	cmp	r3, #64	; 0x40
 8006bb4:	d107      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f838 	bl	8006c36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d10e      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d107      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f06f 0220 	mvn.w	r2, #32
 8006bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f8cd 	bl	8006d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
	...

08006c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a40      	ldr	r2, [pc, #256]	; (8006d60 <TIM_Base_SetConfig+0x114>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d013      	beq.n	8006c8c <TIM_Base_SetConfig+0x40>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6a:	d00f      	beq.n	8006c8c <TIM_Base_SetConfig+0x40>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a3d      	ldr	r2, [pc, #244]	; (8006d64 <TIM_Base_SetConfig+0x118>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00b      	beq.n	8006c8c <TIM_Base_SetConfig+0x40>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a3c      	ldr	r2, [pc, #240]	; (8006d68 <TIM_Base_SetConfig+0x11c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_Base_SetConfig+0x40>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a3b      	ldr	r2, [pc, #236]	; (8006d6c <TIM_Base_SetConfig+0x120>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_Base_SetConfig+0x40>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a3a      	ldr	r2, [pc, #232]	; (8006d70 <TIM_Base_SetConfig+0x124>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d108      	bne.n	8006c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a2f      	ldr	r2, [pc, #188]	; (8006d60 <TIM_Base_SetConfig+0x114>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d02b      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cac:	d027      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a2c      	ldr	r2, [pc, #176]	; (8006d64 <TIM_Base_SetConfig+0x118>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d023      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a2b      	ldr	r2, [pc, #172]	; (8006d68 <TIM_Base_SetConfig+0x11c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01f      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a2a      	ldr	r2, [pc, #168]	; (8006d6c <TIM_Base_SetConfig+0x120>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01b      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a29      	ldr	r2, [pc, #164]	; (8006d70 <TIM_Base_SetConfig+0x124>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d017      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a28      	ldr	r2, [pc, #160]	; (8006d74 <TIM_Base_SetConfig+0x128>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a27      	ldr	r2, [pc, #156]	; (8006d78 <TIM_Base_SetConfig+0x12c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00f      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a26      	ldr	r2, [pc, #152]	; (8006d7c <TIM_Base_SetConfig+0x130>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00b      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a25      	ldr	r2, [pc, #148]	; (8006d80 <TIM_Base_SetConfig+0x134>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d007      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a24      	ldr	r2, [pc, #144]	; (8006d84 <TIM_Base_SetConfig+0x138>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_Base_SetConfig+0xb2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a23      	ldr	r2, [pc, #140]	; (8006d88 <TIM_Base_SetConfig+0x13c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d108      	bne.n	8006d10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a0a      	ldr	r2, [pc, #40]	; (8006d60 <TIM_Base_SetConfig+0x114>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_Base_SetConfig+0xf8>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a0c      	ldr	r2, [pc, #48]	; (8006d70 <TIM_Base_SetConfig+0x124>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d103      	bne.n	8006d4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	615a      	str	r2, [r3, #20]
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800
 8006d6c:	40000c00 	.word	0x40000c00
 8006d70:	40010400 	.word	0x40010400
 8006d74:	40014000 	.word	0x40014000
 8006d78:	40014400 	.word	0x40014400
 8006d7c:	40014800 	.word	0x40014800
 8006d80:	40001800 	.word	0x40001800
 8006d84:	40001c00 	.word	0x40001c00
 8006d88:	40002000 	.word	0x40002000

08006d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dc8:	b084      	sub	sp, #16
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	f107 001c 	add.w	r0, r7, #28
 8006dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d120      	bne.n	8006e22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	4b20      	ldr	r3, [pc, #128]	; (8006e74 <USB_CoreInit+0xac>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d105      	bne.n	8006e16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f942 	bl	80070a0 <USB_CoreReset>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	73fb      	strb	r3, [r7, #15]
 8006e20:	e010      	b.n	8006e44 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f936 	bl	80070a0 <USB_CoreReset>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d10b      	bne.n	8006e62 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f043 0206 	orr.w	r2, r3, #6
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f043 0220 	orr.w	r2, r3, #32
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e6e:	b004      	add	sp, #16
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	ffbdffbf 	.word	0xffbdffbf

08006e78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f043 0201 	orr.w	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f023 0201 	bic.w	r2, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d106      	bne.n	8006ee8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60da      	str	r2, [r3, #12]
 8006ee6:	e00b      	b.n	8006f00 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60da      	str	r2, [r3, #12]
 8006efa:	e001      	b.n	8006f00 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e003      	b.n	8006f08 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f00:	2032      	movs	r0, #50	; 0x32
 8006f02:	f7fb fd89 	bl	8002a18 <HAL_Delay>

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	019b      	lsls	r3, r3, #6
 8006f22:	f043 0220 	orr.w	r2, r3, #32
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4a09      	ldr	r2, [pc, #36]	; (8006f58 <USB_FlushTxFifo+0x48>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d901      	bls.n	8006f3c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e006      	b.n	8006f4a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d0f0      	beq.n	8006f2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	00030d40 	.word	0x00030d40

08006f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2210      	movs	r2, #16
 8006f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3301      	adds	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4a09      	ldr	r2, [pc, #36]	; (8006f9c <USB_FlushRxFifo+0x40>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d901      	bls.n	8006f80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e006      	b.n	8006f8e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d0f0      	beq.n	8006f6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	00030d40 	.word	0x00030d40

08006fa0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b089      	sub	sp, #36	; 0x24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4611      	mov	r1, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	460b      	mov	r3, r1
 8006fb0:	71fb      	strb	r3, [r7, #7]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d11a      	bne.n	8006ffc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fc6:	88bb      	ldrh	r3, [r7, #4]
 8006fc8:	3303      	adds	r3, #3
 8006fca:	089b      	lsrs	r3, r3, #2
 8006fcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	e00f      	b.n	8006ff4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	031a      	lsls	r2, r3, #12
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	3304      	adds	r3, #4
 8006fec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	61bb      	str	r3, [r7, #24]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d3eb      	bcc.n	8006fd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3724      	adds	r7, #36	; 0x24
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800700a:	b480      	push	{r7}
 800700c:	b089      	sub	sp, #36	; 0x24
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	4613      	mov	r3, r2
 8007016:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	3303      	adds	r3, #3
 8007024:	089b      	lsrs	r3, r3, #2
 8007026:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007028:	2300      	movs	r3, #0
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	e00b      	b.n	8007046 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	601a      	str	r2, [r3, #0]
    pDest++;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	3304      	adds	r3, #4
 800703e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	3301      	adds	r3, #1
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	429a      	cmp	r2, r3
 800704c:	d3ef      	bcc.n	800702e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800704e:	69fb      	ldr	r3, [r7, #28]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3724      	adds	r7, #36	; 0x24
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4013      	ands	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007074:	68fb      	ldr	r3, [r7, #12]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	f003 0301 	and.w	r3, r3, #1
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
	...

080070a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a13      	ldr	r2, [pc, #76]	; (8007104 <USB_CoreReset+0x64>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d901      	bls.n	80070be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e01b      	b.n	80070f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	daf2      	bge.n	80070ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f043 0201 	orr.w	r2, r3, #1
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <USB_CoreReset+0x64>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d901      	bls.n	80070e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e006      	b.n	80070f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d0f0      	beq.n	80070d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	00030d40 	.word	0x00030d40

08007108 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007108:	b084      	sub	sp, #16
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	f107 001c 	add.w	r0, r7, #28
 8007116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007124:	461a      	mov	r2, r3
 8007126:	2300      	movs	r3, #0
 8007128:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713e:	2b00      	cmp	r3, #0
 8007140:	d018      	beq.n	8007174 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	2b01      	cmp	r3, #1
 8007146:	d10a      	bne.n	800715e <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007156:	f043 0304 	orr.w	r3, r3, #4
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	e014      	b.n	8007188 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800716c:	f023 0304 	bic.w	r3, r3, #4
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	e009      	b.n	8007188 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007182:	f023 0304 	bic.w	r3, r3, #4
 8007186:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007188:	2110      	movs	r1, #16
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fec0 	bl	8006f10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fee3 	bl	8006f5c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e015      	b.n	80071c8 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a8:	461a      	mov	r2, r3
 80071aa:	f04f 33ff 	mov.w	r3, #4294967295
 80071ae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071bc:	461a      	mov	r2, r3
 80071be:	2300      	movs	r3, #0
 80071c0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3301      	adds	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d3e5      	bcc.n	800719c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80071d0:	2101      	movs	r1, #1
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8ac 	bl	8007330 <USB_DriveVbus>

  HAL_Delay(200U);
 80071d8:	20c8      	movs	r0, #200	; 0xc8
 80071da:	f7fb fc1d 	bl	8002a18 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ea:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a14      	ldr	r2, [pc, #80]	; (8007254 <USB_HostInit+0x14c>)
 8007204:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a13      	ldr	r2, [pc, #76]	; (8007258 <USB_HostInit+0x150>)
 800720a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800720e:	e009      	b.n	8007224 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2280      	movs	r2, #128	; 0x80
 8007214:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a10      	ldr	r2, [pc, #64]	; (800725c <USB_HostInit+0x154>)
 800721a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a10      	ldr	r2, [pc, #64]	; (8007260 <USB_HostInit+0x158>)
 8007220:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	2b00      	cmp	r3, #0
 8007228:	d105      	bne.n	8007236 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f043 0210 	orr.w	r2, r3, #16
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <USB_HostInit+0x15c>)
 800723c:	4313      	orrs	r3, r2
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800724e:	b004      	add	sp, #16
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	01000200 	.word	0x01000200
 8007258:	00e00300 	.word	0x00e00300
 800725c:	00600080 	.word	0x00600080
 8007260:	004000e0 	.word	0x004000e0
 8007264:	a3200008 	.word	0xa3200008

08007268 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	68f9      	ldr	r1, [r7, #12]
 800729c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80072a0:	4313      	orrs	r3, r2
 80072a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d107      	bne.n	80072ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072b0:	461a      	mov	r2, r3
 80072b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80072b6:	6053      	str	r3, [r2, #4]
 80072b8:	e009      	b.n	80072ce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80072ba:	78fb      	ldrb	r3, [r7, #3]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d106      	bne.n	80072ce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072c6:	461a      	mov	r2, r3
 80072c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80072cc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80072fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800730a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800730c:	2064      	movs	r0, #100	; 0x64
 800730e:	f7fb fb83 	bl	8002a18 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800731a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800731e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007320:	200a      	movs	r0, #10
 8007322:	f7fb fb79 	bl	8002a18 <HAL_Delay>

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007354:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d109      	bne.n	8007374 <USB_DriveVbus+0x44>
 8007360:	78fb      	ldrb	r3, [r7, #3]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d106      	bne.n	8007374 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800736e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007372:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800737a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737e:	d109      	bne.n	8007394 <USB_DriveVbus+0x64>
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800738e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007392:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	0c5b      	lsrs	r3, r3, #17
 80073c0:	f003 0303 	and.w	r3, r3, #3
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	b29b      	uxth	r3, r3
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
	...

080073f4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	4608      	mov	r0, r1
 80073fe:	4611      	mov	r1, r2
 8007400:	461a      	mov	r2, r3
 8007402:	4603      	mov	r3, r0
 8007404:	70fb      	strb	r3, [r7, #3]
 8007406:	460b      	mov	r3, r1
 8007408:	70bb      	strb	r3, [r7, #2]
 800740a:	4613      	mov	r3, r2
 800740c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	4413      	add	r3, r2
 800741e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007422:	461a      	mov	r2, r3
 8007424:	f04f 33ff 	mov.w	r3, #4294967295
 8007428:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800742a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800742e:	2b03      	cmp	r3, #3
 8007430:	d87e      	bhi.n	8007530 <USB_HC_Init+0x13c>
 8007432:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <USB_HC_Init+0x44>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	08007449 	.word	0x08007449
 800743c:	080074f3 	.word	0x080074f3
 8007440:	08007449 	.word	0x08007449
 8007444:	080074b5 	.word	0x080074b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007448:	78fb      	ldrb	r3, [r7, #3]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4413      	add	r3, r2
 8007450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007454:	461a      	mov	r2, r3
 8007456:	f240 439d 	movw	r3, #1181	; 0x49d
 800745a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800745c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007460:	2b00      	cmp	r3, #0
 8007462:	da10      	bge.n	8007486 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4413      	add	r3, r2
 800746c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	440a      	add	r2, r1
 800747a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800747e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007482:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007484:	e057      	b.n	8007536 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748e:	2b00      	cmp	r3, #0
 8007490:	d051      	beq.n	8007536 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4413      	add	r3, r2
 800749a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	0151      	lsls	r1, r2, #5
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	440a      	add	r2, r1
 80074a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80074b0:	60d3      	str	r3, [r2, #12]
      break;
 80074b2:	e040      	b.n	8007536 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c0:	461a      	mov	r2, r3
 80074c2:	f240 639d 	movw	r3, #1693	; 0x69d
 80074c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da34      	bge.n	800753a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	78fa      	ldrb	r2, [r7, #3]
 80074e0:	0151      	lsls	r1, r2, #5
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	440a      	add	r2, r1
 80074e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80074f0:	e023      	b.n	800753a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074fe:	461a      	mov	r2, r3
 8007500:	f240 2325 	movw	r3, #549	; 0x225
 8007504:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007506:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800750a:	2b00      	cmp	r3, #0
 800750c:	da17      	bge.n	800753e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	4413      	add	r3, r2
 8007516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	78fa      	ldrb	r2, [r7, #3]
 800751e:	0151      	lsls	r1, r2, #5
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	440a      	add	r2, r1
 8007524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007528:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800752c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800752e:	e006      	b.n	800753e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
      break;
 8007534:	e004      	b.n	8007540 <USB_HC_Init+0x14c>
      break;
 8007536:	bf00      	nop
 8007538:	e002      	b.n	8007540 <USB_HC_Init+0x14c>
      break;
 800753a:	bf00      	nop
 800753c:	e000      	b.n	8007540 <USB_HC_Init+0x14c>
      break;
 800753e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007546:	699a      	ldr	r2, [r3, #24]
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	2101      	movs	r1, #1
 8007550:	fa01 f303 	lsl.w	r3, r1, r3
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800755a:	4313      	orrs	r3, r2
 800755c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800756a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800756e:	2b00      	cmp	r3, #0
 8007570:	da03      	bge.n	800757a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	e001      	b.n	800757e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800757e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d103      	bne.n	800758e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	e001      	b.n	8007592 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007592:	787b      	ldrb	r3, [r7, #1]
 8007594:	059b      	lsls	r3, r3, #22
 8007596:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800759a:	78bb      	ldrb	r3, [r7, #2]
 800759c:	02db      	lsls	r3, r3, #11
 800759e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075a2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80075a8:	049b      	lsls	r3, r3, #18
 80075aa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80075b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075b6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	0159      	lsls	r1, r3, #5
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	440b      	add	r3, r1
 80075c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075ce:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80075d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d10f      	bne.n	80075f8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	78fa      	ldrb	r2, [r7, #3]
 80075e8:	0151      	lsls	r1, r2, #5
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	440a      	add	r2, r1
 80075ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075f6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop

08007608 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08c      	sub	sp, #48	; 0x30
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	4613      	mov	r3, r2
 8007614:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007624:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762e:	2b00      	cmp	r3, #0
 8007630:	d028      	beq.n	8007684 <USB_HC_StartXfer+0x7c>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	791b      	ldrb	r3, [r3, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d124      	bne.n	8007684 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10b      	bne.n	8007658 <USB_HC_StartXfer+0x50>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	795b      	ldrb	r3, [r3, #5]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d107      	bne.n	8007658 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	4619      	mov	r1, r3
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fa2e 	bl	8007ab0 <USB_DoPing>
      return HAL_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	e112      	b.n	800787e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d112      	bne.n	8007684 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	4413      	add	r3, r2
 8007666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	0151      	lsls	r1, r2, #5
 8007670:	6a3a      	ldr	r2, [r7, #32]
 8007672:	440a      	add	r2, r1
 8007674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007678:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800767c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2200      	movs	r2, #0
 8007682:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d018      	beq.n	80076be <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	8912      	ldrh	r2, [r2, #8]
 8007694:	4413      	add	r3, r2
 8007696:	3b01      	subs	r3, #1
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	8912      	ldrh	r2, [r2, #8]
 800769c:	fbb3 f3f2 	udiv	r3, r3, r2
 80076a0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80076a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80076a4:	8b7b      	ldrh	r3, [r7, #26]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d90b      	bls.n	80076c2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80076aa:	8b7b      	ldrh	r3, [r7, #26]
 80076ac:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80076ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	8912      	ldrh	r2, [r2, #8]
 80076b4:	fb02 f203 	mul.w	r2, r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	611a      	str	r2, [r3, #16]
 80076bc:	e001      	b.n	80076c2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80076be:	2301      	movs	r3, #1
 80076c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	78db      	ldrb	r3, [r3, #3]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d006      	beq.n	80076d8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80076ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	8912      	ldrh	r2, [r2, #8]
 80076d0:	fb02 f203 	mul.w	r2, r2, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076e2:	04d9      	lsls	r1, r3, #19
 80076e4:	4b68      	ldr	r3, [pc, #416]	; (8007888 <USB_HC_StartXfer+0x280>)
 80076e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80076e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	7a9b      	ldrb	r3, [r3, #10]
 80076ee:	075b      	lsls	r3, r3, #29
 80076f0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80076f4:	69f9      	ldr	r1, [r7, #28]
 80076f6:	0148      	lsls	r0, r1, #5
 80076f8:	6a39      	ldr	r1, [r7, #32]
 80076fa:	4401      	add	r1, r0
 80076fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007700:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007702:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	68d9      	ldr	r1, [r3, #12]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	4413      	add	r3, r2
 8007716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771a:	460a      	mov	r2, r1
 800771c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	bf0c      	ite	eq
 800772e:	2301      	moveq	r3, #1
 8007730:	2300      	movne	r3, #0
 8007732:	b2db      	uxtb	r3, r3
 8007734:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	4413      	add	r3, r2
 800773e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	0151      	lsls	r1, r2, #5
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	440a      	add	r2, r1
 800774c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007750:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007754:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	7e7b      	ldrb	r3, [r7, #25]
 8007766:	075b      	lsls	r3, r3, #29
 8007768:	69f9      	ldr	r1, [r7, #28]
 800776a:	0148      	lsls	r0, r1, #5
 800776c:	6a39      	ldr	r1, [r7, #32]
 800776e:	4401      	add	r1, r0
 8007770:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007774:	4313      	orrs	r3, r2
 8007776:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	4413      	add	r3, r2
 8007780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a41      	ldr	r2, [pc, #260]	; (800788c <USB_HC_StartXfer+0x284>)
 8007788:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800778a:	4b40      	ldr	r3, [pc, #256]	; (800788c <USB_HC_StartXfer+0x284>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007792:	4a3e      	ldr	r2, [pc, #248]	; (800788c <USB_HC_StartXfer+0x284>)
 8007794:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	78db      	ldrb	r3, [r3, #3]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d006      	beq.n	80077ac <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800779e:	4b3b      	ldr	r3, [pc, #236]	; (800788c <USB_HC_StartXfer+0x284>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a6:	4a39      	ldr	r2, [pc, #228]	; (800788c <USB_HC_StartXfer+0x284>)
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	e005      	b.n	80077b8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80077ac:	4b37      	ldr	r3, [pc, #220]	; (800788c <USB_HC_StartXfer+0x284>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077b4:	4a35      	ldr	r2, [pc, #212]	; (800788c <USB_HC_StartXfer+0x284>)
 80077b6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077b8:	4b34      	ldr	r3, [pc, #208]	; (800788c <USB_HC_StartXfer+0x284>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077c0:	4a32      	ldr	r2, [pc, #200]	; (800788c <USB_HC_StartXfer+0x284>)
 80077c2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077d0:	461a      	mov	r2, r3
 80077d2:	4b2e      	ldr	r3, [pc, #184]	; (800788c <USB_HC_StartXfer+0x284>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80077d8:	79fb      	ldrb	r3, [r7, #7]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d14e      	bne.n	800787c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	78db      	ldrb	r3, [r3, #3]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d14a      	bne.n	800787c <USB_HC_StartXfer+0x274>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d046      	beq.n	800787c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	79db      	ldrb	r3, [r3, #7]
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d830      	bhi.n	8007858 <USB_HC_StartXfer+0x250>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <USB_HC_StartXfer+0x1f4>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	0800780d 	.word	0x0800780d
 8007800:	08007831 	.word	0x08007831
 8007804:	0800780d 	.word	0x0800780d
 8007808:	08007831 	.word	0x08007831
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	3303      	adds	r3, #3
 8007812:	089b      	lsrs	r3, r3, #2
 8007814:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007816:	8afa      	ldrh	r2, [r7, #22]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	b29b      	uxth	r3, r3
 800781e:	429a      	cmp	r2, r3
 8007820:	d91c      	bls.n	800785c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f043 0220 	orr.w	r2, r3, #32
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	619a      	str	r2, [r3, #24]
          }
          break;
 800782e:	e015      	b.n	800785c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	3303      	adds	r3, #3
 8007836:	089b      	lsrs	r3, r3, #2
 8007838:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800783a:	8afa      	ldrh	r2, [r7, #22]
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	b29b      	uxth	r3, r3
 8007846:	429a      	cmp	r2, r3
 8007848:	d90a      	bls.n	8007860 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	619a      	str	r2, [r3, #24]
          }
          break;
 8007856:	e003      	b.n	8007860 <USB_HC_StartXfer+0x258>

        default:
          break;
 8007858:	bf00      	nop
 800785a:	e002      	b.n	8007862 <USB_HC_StartXfer+0x25a>
          break;
 800785c:	bf00      	nop
 800785e:	e000      	b.n	8007862 <USB_HC_StartXfer+0x25a>
          break;
 8007860:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	68d9      	ldr	r1, [r3, #12]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	785a      	ldrb	r2, [r3, #1]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	b298      	uxth	r0, r3
 8007870:	2300      	movs	r3, #0
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	4603      	mov	r3, r0
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7ff fb92 	bl	8006fa0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3728      	adds	r7, #40	; 0x28
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	1ff80000 	.word	0x1ff80000
 800788c:	20000378 	.word	0x20000378

08007890 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	b29b      	uxth	r3, r3
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b087      	sub	sp, #28
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	0c9b      	lsrs	r3, r3, #18
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <USB_HC_Halt+0x3a>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d16c      	bne.n	80079c6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	440a      	add	r2, r1
 8007902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007906:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800790a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d143      	bne.n	80079a0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	4413      	add	r3, r2
 8007920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	0151      	lsls	r1, r2, #5
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	440a      	add	r2, r1
 800792e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007932:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007936:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	4413      	add	r3, r2
 8007940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	0151      	lsls	r1, r2, #5
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	440a      	add	r2, r1
 800794e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007956:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4413      	add	r3, r2
 8007960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	0151      	lsls	r1, r2, #5
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	440a      	add	r2, r1
 800796e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007972:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007976:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	3301      	adds	r3, #1
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007984:	d81d      	bhi.n	80079c2 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	4413      	add	r3, r2
 800798e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800799c:	d0ec      	beq.n	8007978 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800799e:	e080      	b.n	8007aa2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	0151      	lsls	r1, r2, #5
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	440a      	add	r2, r1
 80079b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079be:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079c0:	e06f      	b.n	8007aa2 <USB_HC_Halt+0x1f0>
          break;
 80079c2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079c4:	e06d      	b.n	8007aa2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	0151      	lsls	r1, r2, #5
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	440a      	add	r2, r1
 80079dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079e4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d143      	bne.n	8007a7e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	0151      	lsls	r1, r2, #5
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a14:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	0151      	lsls	r1, r2, #5
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	440a      	add	r2, r1
 8007a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a34:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	0151      	lsls	r1, r2, #5
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	440a      	add	r2, r1
 8007a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a54:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a62:	d81d      	bhi.n	8007aa0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a7a:	d0ec      	beq.n	8007a56 <USB_HC_Halt+0x1a4>
 8007a7c:	e011      	b.n	8007aa2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	0151      	lsls	r1, r2, #5
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	440a      	add	r2, r1
 8007a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	e000      	b.n	8007aa2 <USB_HC_Halt+0x1f0>
          break;
 8007aa0:	bf00      	nop
    }
  }

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	371c      	adds	r7, #28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	04da      	lsls	r2, r3, #19
 8007acc:	4b15      	ldr	r3, [pc, #84]	; (8007b24 <USB_DoPing+0x74>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	0151      	lsls	r1, r2, #5
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	440a      	add	r2, r1
 8007ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ae0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007af8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b00:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b0e:	461a      	mov	r2, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	1ff80000 	.word	0x1ff80000

08007b28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff f9ae 	bl	8006e9a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007b3e:	2110      	movs	r1, #16
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff f9e5 	bl	8006f10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff fa08 	bl	8006f5c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	e01f      	b.n	8007b92 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b70:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b78:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b86:	461a      	mov	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	613b      	str	r3, [r7, #16]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2b0f      	cmp	r3, #15
 8007b96:	d9dc      	bls.n	8007b52 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	e034      	b.n	8007c08 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bb4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bbc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bc4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007be4:	d80c      	bhi.n	8007c00 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bfc:	d0ec      	beq.n	8007bd8 <USB_StopHost+0xb0>
 8007bfe:	e000      	b.n	8007c02 <USB_StopHost+0xda>
        break;
 8007c00:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3301      	adds	r3, #1
 8007c06:	613b      	str	r3, [r7, #16]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	2b0f      	cmp	r3, #15
 8007c0c:	d9c7      	bls.n	8007b9e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c14:	461a      	mov	r2, r3
 8007c16:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c22:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff f927 	bl	8006e78 <USB_EnableGlobalInt>

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007c38:	4904      	ldr	r1, [pc, #16]	; (8007c4c <MX_FATFS_Init+0x18>)
 8007c3a:	4805      	ldr	r0, [pc, #20]	; (8007c50 <MX_FATFS_Init+0x1c>)
 8007c3c:	f005 ff98 	bl	800db70 <FATFS_LinkDriver>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	4b03      	ldr	r3, [pc, #12]	; (8007c54 <MX_FATFS_Init+0x20>)
 8007c46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007c48:	bf00      	nop
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	200048f4 	.word	0x200048f4
 8007c50:	08011260 	.word	0x08011260
 8007c54:	20006960 	.word	0x20006960

08007c58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007c5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	4619      	mov	r1, r3
 8007c92:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <USBH_status+0x34>)
 8007c94:	f000 fe53 	bl	800893e <USBH_MSC_UnitIsReady>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <USBH_status+0x24>
  {
    res = RES_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]
 8007ca2:	e001      	b.n	8007ca8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	200069a4 	.word	0x200069a4

08007cb8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b094      	sub	sp, #80	; 0x50
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	60b9      	str	r1, [r7, #8]
 8007cc0:	607a      	str	r2, [r7, #4]
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007cce:	7bf9      	ldrb	r1, [r7, #15]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	4812      	ldr	r0, [pc, #72]	; (8007d24 <USBH_read+0x6c>)
 8007cda:	f000 fe7a 	bl	80089d2 <USBH_MSC_Read>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d103      	bne.n	8007cec <USBH_read+0x34>
  {
    res = RES_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007cea:	e015      	b.n	8007d18 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007cec:	f107 0210 	add.w	r2, r7, #16
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	480b      	ldr	r0, [pc, #44]	; (8007d24 <USBH_read+0x6c>)
 8007cf6:	f000 fe48 	bl	800898a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007cfa:	7f7b      	ldrb	r3, [r7, #29]
 8007cfc:	2b28      	cmp	r3, #40	; 0x28
 8007cfe:	d003      	beq.n	8007d08 <USBH_read+0x50>
 8007d00:	2b3a      	cmp	r3, #58	; 0x3a
 8007d02:	d001      	beq.n	8007d08 <USBH_read+0x50>
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d103      	bne.n	8007d10 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007d0e:	e003      	b.n	8007d18 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007d16:	bf00      	nop
    }
  }

  return res;
 8007d18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3748      	adds	r7, #72	; 0x48
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	200069a4 	.word	0x200069a4

08007d28 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b094      	sub	sp, #80	; 0x50
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	60b9      	str	r1, [r7, #8]
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	4603      	mov	r3, r0
 8007d36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007d3e:	7bf9      	ldrb	r1, [r7, #15]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	4817      	ldr	r0, [pc, #92]	; (8007da8 <USBH_write+0x80>)
 8007d4a:	f000 feab 	bl	8008aa4 <USBH_MSC_Write>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d103      	bne.n	8007d5c <USBH_write+0x34>
  {
    res = RES_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007d5a:	e01f      	b.n	8007d9c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007d5c:	f107 0210 	add.w	r2, r7, #16
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	4619      	mov	r1, r3
 8007d64:	4810      	ldr	r0, [pc, #64]	; (8007da8 <USBH_write+0x80>)
 8007d66:	f000 fe10 	bl	800898a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007d6a:	7f7b      	ldrb	r3, [r7, #29]
 8007d6c:	2b27      	cmp	r3, #39	; 0x27
 8007d6e:	d009      	beq.n	8007d84 <USBH_write+0x5c>
 8007d70:	2b27      	cmp	r3, #39	; 0x27
 8007d72:	dc02      	bgt.n	8007d7a <USBH_write+0x52>
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d009      	beq.n	8007d8c <USBH_write+0x64>
 8007d78:	e00c      	b.n	8007d94 <USBH_write+0x6c>
 8007d7a:	2b28      	cmp	r3, #40	; 0x28
 8007d7c:	d006      	beq.n	8007d8c <USBH_write+0x64>
 8007d7e:	2b3a      	cmp	r3, #58	; 0x3a
 8007d80:	d004      	beq.n	8007d8c <USBH_write+0x64>
 8007d82:	e007      	b.n	8007d94 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007d84:	2302      	movs	r3, #2
 8007d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007d8a:	e007      	b.n	8007d9c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007d92:	e003      	b.n	8007d9c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007d9a:	bf00      	nop
    }
  }

  return res;
 8007d9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3748      	adds	r7, #72	; 0x48
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	200069a4 	.word	0x200069a4

08007dac <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b090      	sub	sp, #64	; 0x40
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	603a      	str	r2, [r7, #0]
 8007db6:	71fb      	strb	r3, [r7, #7]
 8007db8:	460b      	mov	r3, r1
 8007dba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007dc2:	79bb      	ldrb	r3, [r7, #6]
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d852      	bhi.n	8007e6e <USBH_ioctl+0xc2>
 8007dc8:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <USBH_ioctl+0x24>)
 8007dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dce:	bf00      	nop
 8007dd0:	08007de1 	.word	0x08007de1
 8007dd4:	08007de9 	.word	0x08007de9
 8007dd8:	08007e13 	.word	0x08007e13
 8007ddc:	08007e3f 	.word	0x08007e3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007de6:	e045      	b.n	8007e74 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007de8:	f107 0208 	add.w	r2, r7, #8
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	4619      	mov	r1, r3
 8007df0:	4823      	ldr	r0, [pc, #140]	; (8007e80 <USBH_ioctl+0xd4>)
 8007df2:	f000 fdca 	bl	800898a <USBH_MSC_GetLUNInfo>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d106      	bne.n	8007e0a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007e08:	e034      	b.n	8007e74 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007e10:	e030      	b.n	8007e74 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007e12:	f107 0208 	add.w	r2, r7, #8
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4819      	ldr	r0, [pc, #100]	; (8007e80 <USBH_ioctl+0xd4>)
 8007e1c:	f000 fdb5 	bl	800898a <USBH_MSC_GetLUNInfo>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d107      	bne.n	8007e36 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007e26:	8a3b      	ldrh	r3, [r7, #16]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007e34:	e01e      	b.n	8007e74 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007e3c:	e01a      	b.n	8007e74 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007e3e:	f107 0208 	add.w	r2, r7, #8
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	4619      	mov	r1, r3
 8007e46:	480e      	ldr	r0, [pc, #56]	; (8007e80 <USBH_ioctl+0xd4>)
 8007e48:	f000 fd9f 	bl	800898a <USBH_MSC_GetLUNInfo>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007e52:	8a3b      	ldrh	r3, [r7, #16]
 8007e54:	0a5b      	lsrs	r3, r3, #9
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007e64:	e006      	b.n	8007e74 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007e6c:	e002      	b.n	8007e74 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007e6e:	2304      	movs	r3, #4
 8007e70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007e74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3740      	adds	r7, #64	; 0x40
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	200069a4 	.word	0x200069a4

08007e84 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007e84:	b590      	push	{r4, r7, lr}
 8007e86:	b089      	sub	sp, #36	; 0x24
 8007e88:	af04      	add	r7, sp, #16
 8007e8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e92:	7919      	ldrb	r1, [r3, #4]
 8007e94:	2350      	movs	r3, #80	; 0x50
 8007e96:	2206      	movs	r2, #6
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fd45 	bl	8009928 <USBH_FindInterface>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2bff      	cmp	r3, #255	; 0xff
 8007ea6:	d002      	beq.n	8007eae <USBH_MSC_InterfaceInit+0x2a>
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d901      	bls.n	8007eb2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e0ef      	b.n	8008092 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fd1a 	bl	80098f0 <USBH_SelectInterface>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e0e3      	b.n	8008092 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007ed0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ed4:	f009 f852 	bl	8010f7c <malloc>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007eec:	2302      	movs	r3, #2
 8007eee:	e0d0      	b.n	8008092 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	68b8      	ldr	r0, [r7, #8]
 8007ef8:	f009 f85b 	bl	8010fb2 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	211a      	movs	r1, #26
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	b25b      	sxtb	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	da16      	bge.n	8007f42 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	211a      	movs	r1, #26
 8007f1a:	fb01 f303 	mul.w	r3, r1, r3
 8007f1e:	4413      	add	r3, r2
 8007f20:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f24:	781a      	ldrb	r2, [r3, #0]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	211a      	movs	r1, #26
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f3a:	881a      	ldrh	r2, [r3, #0]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	815a      	strh	r2, [r3, #10]
 8007f40:	e015      	b.n	8007f6e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	211a      	movs	r1, #26
 8007f48:	fb01 f303 	mul.w	r3, r1, r3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	211a      	movs	r1, #26
 8007f5e:	fb01 f303 	mul.w	r3, r1, r3
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f68:	881a      	ldrh	r2, [r3, #0]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	211a      	movs	r1, #26
 8007f74:	fb01 f303 	mul.w	r3, r1, r3
 8007f78:	4413      	add	r3, r2
 8007f7a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	b25b      	sxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da16      	bge.n	8007fb4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	211a      	movs	r1, #26
 8007f8c:	fb01 f303 	mul.w	r3, r1, r3
 8007f90:	4413      	add	r3, r2
 8007f92:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007f96:	781a      	ldrb	r2, [r3, #0]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	211a      	movs	r1, #26
 8007fa2:	fb01 f303 	mul.w	r3, r1, r3
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007fac:	881a      	ldrh	r2, [r3, #0]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	815a      	strh	r2, [r3, #10]
 8007fb2:	e015      	b.n	8007fe0 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	211a      	movs	r1, #26
 8007fba:	fb01 f303 	mul.w	r3, r1, r3
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007fc4:	781a      	ldrb	r2, [r3, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	211a      	movs	r1, #26
 8007fd0:	fb01 f303 	mul.w	r3, r1, r3
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007fda:	881a      	ldrh	r2, [r3, #0]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	799b      	ldrb	r3, [r3, #6]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f003 f8c4 	bl	800b186 <USBH_AllocPipe>
 8007ffe:	4603      	mov	r3, r0
 8008000:	461a      	mov	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	79db      	ldrb	r3, [r3, #7]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f003 f8ba 	bl	800b186 <USBH_AllocPipe>
 8008012:	4603      	mov	r3, r0
 8008014:	461a      	mov	r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fde6 	bl	8008bec <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	7959      	ldrb	r1, [r3, #5]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	7998      	ldrb	r0, [r3, #6]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	8912      	ldrh	r2, [r2, #8]
 8008038:	9202      	str	r2, [sp, #8]
 800803a:	2202      	movs	r2, #2
 800803c:	9201      	str	r2, [sp, #4]
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	4623      	mov	r3, r4
 8008042:	4602      	mov	r2, r0
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f003 f86f 	bl	800b128 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	7919      	ldrb	r1, [r3, #4]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	79d8      	ldrb	r0, [r3, #7]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	8952      	ldrh	r2, [r2, #10]
 8008062:	9202      	str	r2, [sp, #8]
 8008064:	2202      	movs	r2, #2
 8008066:	9201      	str	r2, [sp, #4]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	4623      	mov	r3, r4
 800806c:	4602      	mov	r2, r0
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f003 f85a 	bl	800b128 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	791b      	ldrb	r3, [r3, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f008 feb6 	bl	8010dee <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	795b      	ldrb	r3, [r3, #5]
 8008086:	2200      	movs	r2, #0
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f008 feaf 	bl	8010dee <USBH_LL_SetToggle>

  return USBH_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	bd90      	pop	{r4, r7, pc}

0800809a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	795b      	ldrb	r3, [r3, #5]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00e      	beq.n	80080d2 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	795b      	ldrb	r3, [r3, #5]
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f003 f853 	bl	800b166 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	795b      	ldrb	r3, [r3, #5]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f003 f87e 	bl	800b1c8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	791b      	ldrb	r3, [r3, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00e      	beq.n	80080f8 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f003 f840 	bl	800b166 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	791b      	ldrb	r3, [r3, #4]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f003 f86b 	bl	800b1c8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	4618      	mov	r0, r3
 800810e:	f008 ff3d 	bl	8010f8c <free>
    phost->pActiveClass->pData = 0U;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008118:	2200      	movs	r2, #0
 800811a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	7b9b      	ldrb	r3, [r3, #14]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d004      	beq.n	800814e <USBH_MSC_ClassRequest+0x28>
 8008144:	2b03      	cmp	r3, #3
 8008146:	d03e      	beq.n	80081c6 <USBH_MSC_ClassRequest+0xa0>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d000      	beq.n	800814e <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800814c:	e04a      	b.n	80081e4 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fd2c 	bl	8008bb0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	2b03      	cmp	r3, #3
 8008160:	d104      	bne.n	800816c <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2200      	movs	r2, #0
 8008166:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d135      	bne.n	80081de <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d804      	bhi.n	8008184 <USBH_MSC_ClassRequest+0x5e>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	3301      	adds	r3, #1
 8008180:	b2da      	uxtb	r2, r3
 8008182:	e000      	b.n	8008186 <USBH_MSC_ClassRequest+0x60>
 8008184:	2202      	movs	r2, #2
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800818a:	2300      	movs	r3, #0
 800818c:	73bb      	strb	r3, [r7, #14]
 800818e:	e014      	b.n	80081ba <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	2134      	movs	r1, #52	; 0x34
 8008196:	fb01 f303 	mul.w	r3, r1, r3
 800819a:	4413      	add	r3, r2
 800819c:	3392      	adds	r3, #146	; 0x92
 800819e:	2202      	movs	r2, #2
 80081a0:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	2134      	movs	r1, #52	; 0x34
 80081a8:	fb01 f303 	mul.w	r3, r1, r3
 80081ac:	4413      	add	r3, r2
 80081ae:	33c1      	adds	r3, #193	; 0xc1
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	3301      	adds	r3, #1
 80081b8:	73bb      	strb	r3, [r7, #14]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	7bba      	ldrb	r2, [r7, #14]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d3e5      	bcc.n	8008190 <USBH_MSC_ClassRequest+0x6a>
      break;
 80081c4:	e00b      	b.n	80081de <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80081c6:	2100      	movs	r1, #0
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f002 fa8a 	bl	800a6e2 <USBH_ClrFeature>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d106      	bne.n	80081e2 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	7bda      	ldrb	r2, [r3, #15]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	739a      	strb	r2, [r3, #14]
      break;
 80081dc:	e001      	b.n	80081e2 <USBH_MSC_ClassRequest+0xbc>
      break;
 80081de:	bf00      	nop
 80081e0:	e000      	b.n	80081e4 <USBH_MSC_ClassRequest+0xbe>
      break;
 80081e2:	bf00      	nop
  }

  return status;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008202:	2301      	movs	r3, #1
 8008204:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008206:	2301      	movs	r3, #1
 8008208:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800820a:	2301      	movs	r3, #1
 800820c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	7b1b      	ldrb	r3, [r3, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <USBH_MSC_Process+0x2e>
 8008216:	2b01      	cmp	r3, #1
 8008218:	f000 828d 	beq.w	8008736 <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800821c:	e28e      	b.n	800873c <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b29b      	uxth	r3, r3
 800822a:	429a      	cmp	r2, r3
 800822c:	f080 8267 	bcs.w	80086fe <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008236:	4619      	mov	r1, r3
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	2334      	movs	r3, #52	; 0x34
 800823c:	fb03 f301 	mul.w	r3, r3, r1
 8008240:	4413      	add	r3, r2
 8008242:	3391      	adds	r3, #145	; 0x91
 8008244:	2201      	movs	r2, #1
 8008246:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800824e:	4619      	mov	r1, r3
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	2334      	movs	r3, #52	; 0x34
 8008254:	fb03 f301 	mul.w	r3, r3, r1
 8008258:	4413      	add	r3, r2
 800825a:	3390      	adds	r3, #144	; 0x90
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b08      	cmp	r3, #8
 8008260:	f200 8235 	bhi.w	80086ce <USBH_MSC_Process+0x4de>
 8008264:	a201      	add	r2, pc, #4	; (adr r2, 800826c <USBH_MSC_Process+0x7c>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	08008291 	.word	0x08008291
 8008270:	080086cf 	.word	0x080086cf
 8008274:	08008359 	.word	0x08008359
 8008278:	080084dd 	.word	0x080084dd
 800827c:	080082b7 	.word	0x080082b7
 8008280:	080085a9 	.word	0x080085a9
 8008284:	080086cf 	.word	0x080086cf
 8008288:	080086cf 	.word	0x080086cf
 800828c:	080086bd 	.word	0x080086bd
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008296:	4619      	mov	r1, r3
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	2334      	movs	r3, #52	; 0x34
 800829c:	fb03 f301 	mul.w	r3, r3, r1
 80082a0:	4413      	add	r3, r2
 80082a2:	3390      	adds	r3, #144	; 0x90
 80082a4:	2204      	movs	r2, #4
 80082a6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80082b4:	e214      	b.n	80086e0 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082bc:	b2d9      	uxtb	r1, r3
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082c4:	461a      	mov	r2, r3
 80082c6:	2334      	movs	r3, #52	; 0x34
 80082c8:	fb03 f302 	mul.w	r3, r3, r2
 80082cc:	3398      	adds	r3, #152	; 0x98
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4413      	add	r3, r2
 80082d2:	3307      	adds	r3, #7
 80082d4:	461a      	mov	r2, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 f836 	bl	8009348 <USBH_MSC_SCSI_Inquiry>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10b      	bne.n	80082fe <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082ec:	4619      	mov	r1, r3
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	2334      	movs	r3, #52	; 0x34
 80082f2:	fb03 f301 	mul.w	r3, r3, r1
 80082f6:	4413      	add	r3, r2
 80082f8:	3390      	adds	r3, #144	; 0x90
 80082fa:	2202      	movs	r2, #2
 80082fc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2b02      	cmp	r3, #2
 8008302:	d10c      	bne.n	800831e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800830a:	4619      	mov	r1, r3
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	2334      	movs	r3, #52	; 0x34
 8008310:	fb03 f301 	mul.w	r3, r3, r1
 8008314:	4413      	add	r3, r2
 8008316:	3390      	adds	r3, #144	; 0x90
 8008318:	2205      	movs	r2, #5
 800831a:	701a      	strb	r2, [r3, #0]
            break;
 800831c:	e1d9      	b.n	80086d2 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	2b04      	cmp	r3, #4
 8008322:	f040 81d6 	bne.w	80086d2 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800832c:	4619      	mov	r1, r3
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	2334      	movs	r3, #52	; 0x34
 8008332:	fb03 f301 	mul.w	r3, r3, r1
 8008336:	4413      	add	r3, r2
 8008338:	3390      	adds	r3, #144	; 0x90
 800833a:	2201      	movs	r2, #1
 800833c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008344:	4619      	mov	r1, r3
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	2334      	movs	r3, #52	; 0x34
 800834a:	fb03 f301 	mul.w	r3, r3, r1
 800834e:	4413      	add	r3, r2
 8008350:	3391      	adds	r3, #145	; 0x91
 8008352:	2202      	movs	r2, #2
 8008354:	701a      	strb	r2, [r3, #0]
            break;
 8008356:	e1bc      	b.n	80086d2 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800835e:	b2db      	uxtb	r3, r3
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 ff32 	bl	80091cc <USBH_MSC_SCSI_TestUnitReady>
 8008368:	4603      	mov	r3, r0
 800836a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d149      	bne.n	8008406 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008378:	4619      	mov	r1, r3
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	2334      	movs	r3, #52	; 0x34
 800837e:	fb03 f301 	mul.w	r3, r3, r1
 8008382:	4413      	add	r3, r2
 8008384:	3392      	adds	r3, #146	; 0x92
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00c      	beq.n	80083a6 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008392:	4619      	mov	r1, r3
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	2334      	movs	r3, #52	; 0x34
 8008398:	fb03 f301 	mul.w	r3, r3, r1
 800839c:	4413      	add	r3, r2
 800839e:	33c1      	adds	r3, #193	; 0xc1
 80083a0:	2201      	movs	r2, #1
 80083a2:	701a      	strb	r2, [r3, #0]
 80083a4:	e00b      	b.n	80083be <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083ac:	4619      	mov	r1, r3
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	2334      	movs	r3, #52	; 0x34
 80083b2:	fb03 f301 	mul.w	r3, r3, r1
 80083b6:	4413      	add	r3, r2
 80083b8:	33c1      	adds	r3, #193	; 0xc1
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083c4:	4619      	mov	r1, r3
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	2334      	movs	r3, #52	; 0x34
 80083ca:	fb03 f301 	mul.w	r3, r3, r1
 80083ce:	4413      	add	r3, r2
 80083d0:	3390      	adds	r3, #144	; 0x90
 80083d2:	2203      	movs	r2, #3
 80083d4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083dc:	4619      	mov	r1, r3
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	2334      	movs	r3, #52	; 0x34
 80083e2:	fb03 f301 	mul.w	r3, r3, r1
 80083e6:	4413      	add	r3, r2
 80083e8:	3391      	adds	r3, #145	; 0x91
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083f4:	4619      	mov	r1, r3
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	2334      	movs	r3, #52	; 0x34
 80083fa:	fb03 f301 	mul.w	r3, r3, r1
 80083fe:	4413      	add	r3, r2
 8008400:	3392      	adds	r3, #146	; 0x92
 8008402:	2200      	movs	r2, #0
 8008404:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d14a      	bne.n	80084a2 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008412:	4619      	mov	r1, r3
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	2334      	movs	r3, #52	; 0x34
 8008418:	fb03 f301 	mul.w	r3, r3, r1
 800841c:	4413      	add	r3, r2
 800841e:	3392      	adds	r3, #146	; 0x92
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d00c      	beq.n	8008440 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800842c:	4619      	mov	r1, r3
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	2334      	movs	r3, #52	; 0x34
 8008432:	fb03 f301 	mul.w	r3, r3, r1
 8008436:	4413      	add	r3, r2
 8008438:	33c1      	adds	r3, #193	; 0xc1
 800843a:	2201      	movs	r2, #1
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	e00b      	b.n	8008458 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008446:	4619      	mov	r1, r3
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	2334      	movs	r3, #52	; 0x34
 800844c:	fb03 f301 	mul.w	r3, r3, r1
 8008450:	4413      	add	r3, r2
 8008452:	33c1      	adds	r3, #193	; 0xc1
 8008454:	2200      	movs	r2, #0
 8008456:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800845e:	4619      	mov	r1, r3
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	2334      	movs	r3, #52	; 0x34
 8008464:	fb03 f301 	mul.w	r3, r3, r1
 8008468:	4413      	add	r3, r2
 800846a:	3390      	adds	r3, #144	; 0x90
 800846c:	2205      	movs	r2, #5
 800846e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008476:	4619      	mov	r1, r3
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	2334      	movs	r3, #52	; 0x34
 800847c:	fb03 f301 	mul.w	r3, r3, r1
 8008480:	4413      	add	r3, r2
 8008482:	3391      	adds	r3, #145	; 0x91
 8008484:	2201      	movs	r2, #1
 8008486:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800848e:	4619      	mov	r1, r3
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	2334      	movs	r3, #52	; 0x34
 8008494:	fb03 f301 	mul.w	r3, r3, r1
 8008498:	4413      	add	r3, r2
 800849a:	3392      	adds	r3, #146	; 0x92
 800849c:	2202      	movs	r2, #2
 800849e:	701a      	strb	r2, [r3, #0]
            break;
 80084a0:	e119      	b.n	80086d6 <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	f040 8116 	bne.w	80086d6 <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084b0:	4619      	mov	r1, r3
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	2334      	movs	r3, #52	; 0x34
 80084b6:	fb03 f301 	mul.w	r3, r3, r1
 80084ba:	4413      	add	r3, r2
 80084bc:	3390      	adds	r3, #144	; 0x90
 80084be:	2201      	movs	r2, #1
 80084c0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084c8:	4619      	mov	r1, r3
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	2334      	movs	r3, #52	; 0x34
 80084ce:	fb03 f301 	mul.w	r3, r3, r1
 80084d2:	4413      	add	r3, r2
 80084d4:	3391      	adds	r3, #145	; 0x91
 80084d6:	2202      	movs	r2, #2
 80084d8:	701a      	strb	r2, [r3, #0]
            break;
 80084da:	e0fc      	b.n	80086d6 <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084e2:	b2d9      	uxtb	r1, r3
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084ea:	461a      	mov	r2, r3
 80084ec:	2334      	movs	r3, #52	; 0x34
 80084ee:	fb03 f302 	mul.w	r3, r3, r2
 80084f2:	3390      	adds	r3, #144	; 0x90
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4413      	add	r3, r2
 80084f8:	3304      	adds	r3, #4
 80084fa:	461a      	mov	r2, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fea8 	bl	8009252 <USBH_MSC_SCSI_ReadCapacity>
 8008502:	4603      	mov	r3, r0
 8008504:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d120      	bne.n	800854e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008512:	4619      	mov	r1, r3
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	2334      	movs	r3, #52	; 0x34
 8008518:	fb03 f301 	mul.w	r3, r3, r1
 800851c:	4413      	add	r3, r2
 800851e:	3390      	adds	r3, #144	; 0x90
 8008520:	2201      	movs	r2, #1
 8008522:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800852a:	4619      	mov	r1, r3
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	2334      	movs	r3, #52	; 0x34
 8008530:	fb03 f301 	mul.w	r3, r3, r1
 8008534:	4413      	add	r3, r2
 8008536:	3391      	adds	r3, #145	; 0x91
 8008538:	2200      	movs	r2, #0
 800853a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008542:	3301      	adds	r3, #1
 8008544:	b29a      	uxth	r2, r3
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800854c:	e0c5      	b.n	80086da <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d10c      	bne.n	800856e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800855a:	4619      	mov	r1, r3
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	2334      	movs	r3, #52	; 0x34
 8008560:	fb03 f301 	mul.w	r3, r3, r1
 8008564:	4413      	add	r3, r2
 8008566:	3390      	adds	r3, #144	; 0x90
 8008568:	2205      	movs	r2, #5
 800856a:	701a      	strb	r2, [r3, #0]
            break;
 800856c:	e0b5      	b.n	80086da <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	2b04      	cmp	r3, #4
 8008572:	f040 80b2 	bne.w	80086da <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800857c:	4619      	mov	r1, r3
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	2334      	movs	r3, #52	; 0x34
 8008582:	fb03 f301 	mul.w	r3, r3, r1
 8008586:	4413      	add	r3, r2
 8008588:	3390      	adds	r3, #144	; 0x90
 800858a:	2201      	movs	r2, #1
 800858c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008594:	4619      	mov	r1, r3
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	2334      	movs	r3, #52	; 0x34
 800859a:	fb03 f301 	mul.w	r3, r3, r1
 800859e:	4413      	add	r3, r2
 80085a0:	3391      	adds	r3, #145	; 0x91
 80085a2:	2202      	movs	r2, #2
 80085a4:	701a      	strb	r2, [r3, #0]
            break;
 80085a6:	e098      	b.n	80086da <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085ae:	b2d9      	uxtb	r1, r3
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085b6:	461a      	mov	r2, r3
 80085b8:	2334      	movs	r3, #52	; 0x34
 80085ba:	fb03 f302 	mul.w	r3, r3, r2
 80085be:	3398      	adds	r3, #152	; 0x98
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4413      	add	r3, r2
 80085c4:	3304      	adds	r3, #4
 80085c6:	461a      	mov	r2, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 ff62 	bl	8009492 <USBH_MSC_SCSI_RequestSense>
 80085ce:	4603      	mov	r3, r0
 80085d0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d145      	bne.n	8008664 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085de:	4619      	mov	r1, r3
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	2334      	movs	r3, #52	; 0x34
 80085e4:	fb03 f301 	mul.w	r3, r3, r1
 80085e8:	4413      	add	r3, r2
 80085ea:	339c      	adds	r3, #156	; 0x9c
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b06      	cmp	r3, #6
 80085f0:	d00c      	beq.n	800860c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085f8:	4619      	mov	r1, r3
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	2334      	movs	r3, #52	; 0x34
 80085fe:	fb03 f301 	mul.w	r3, r3, r1
 8008602:	4413      	add	r3, r2
 8008604:	339c      	adds	r3, #156	; 0x9c
 8008606:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008608:	2b02      	cmp	r3, #2
 800860a:	d117      	bne.n	800863c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	f242 720f 	movw	r2, #9999	; 0x270f
 800861e:	4293      	cmp	r3, r2
 8008620:	d80c      	bhi.n	800863c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008628:	4619      	mov	r1, r3
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	2334      	movs	r3, #52	; 0x34
 800862e:	fb03 f301 	mul.w	r3, r3, r1
 8008632:	4413      	add	r3, r2
 8008634:	3390      	adds	r3, #144	; 0x90
 8008636:	2202      	movs	r2, #2
 8008638:	701a      	strb	r2, [r3, #0]
                  break;
 800863a:	e051      	b.n	80086e0 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008642:	4619      	mov	r1, r3
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	2334      	movs	r3, #52	; 0x34
 8008648:	fb03 f301 	mul.w	r3, r3, r1
 800864c:	4413      	add	r3, r2
 800864e:	3390      	adds	r3, #144	; 0x90
 8008650:	2201      	movs	r2, #1
 8008652:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800865a:	3301      	adds	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d10c      	bne.n	8008684 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008670:	4619      	mov	r1, r3
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	2334      	movs	r3, #52	; 0x34
 8008676:	fb03 f301 	mul.w	r3, r3, r1
 800867a:	4413      	add	r3, r2
 800867c:	3390      	adds	r3, #144	; 0x90
 800867e:	2208      	movs	r2, #8
 8008680:	701a      	strb	r2, [r3, #0]
            break;
 8008682:	e02c      	b.n	80086de <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	2b04      	cmp	r3, #4
 8008688:	d129      	bne.n	80086de <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008690:	4619      	mov	r1, r3
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	2334      	movs	r3, #52	; 0x34
 8008696:	fb03 f301 	mul.w	r3, r3, r1
 800869a:	4413      	add	r3, r2
 800869c:	3390      	adds	r3, #144	; 0x90
 800869e:	2201      	movs	r2, #1
 80086a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086a8:	4619      	mov	r1, r3
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	2334      	movs	r3, #52	; 0x34
 80086ae:	fb03 f301 	mul.w	r3, r3, r1
 80086b2:	4413      	add	r3, r2
 80086b4:	3391      	adds	r3, #145	; 0x91
 80086b6:	2202      	movs	r2, #2
 80086b8:	701a      	strb	r2, [r3, #0]
            break;
 80086ba:	e010      	b.n	80086de <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086c2:	3301      	adds	r3, #1
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80086cc:	e008      	b.n	80086e0 <USBH_MSC_Process+0x4f0>
            break;
 80086ce:	bf00      	nop
 80086d0:	e006      	b.n	80086e0 <USBH_MSC_Process+0x4f0>
            break;
 80086d2:	bf00      	nop
 80086d4:	e004      	b.n	80086e0 <USBH_MSC_Process+0x4f0>
            break;
 80086d6:	bf00      	nop
 80086d8:	e002      	b.n	80086e0 <USBH_MSC_Process+0x4f0>
            break;
 80086da:	bf00      	nop
 80086dc:	e000      	b.n	80086e0 <USBH_MSC_Process+0x4f0>
            break;
 80086de:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2204      	movs	r2, #4
 80086e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086f4:	2200      	movs	r2, #0
 80086f6:	4619      	mov	r1, r3
 80086f8:	f005 fc1a 	bl	800df30 <osMessagePut>
      break;
 80086fc:	e01e      	b.n	800873c <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2200      	movs	r2, #0
 8008702:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2201      	movs	r2, #1
 800870a:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2204      	movs	r2, #4
 8008710:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008720:	2200      	movs	r2, #0
 8008722:	4619      	mov	r1, r3
 8008724:	f005 fc04 	bl	800df30 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800872e:	2102      	movs	r1, #2
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	4798      	blx	r3
      break;
 8008734:	e002      	b.n	800873c <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	75fb      	strb	r3, [r7, #23]
      break;
 800873a:	bf00      	nop
  }
  return error;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop

08008748 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b088      	sub	sp, #32
 8008762:	af02      	add	r7, sp, #8
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008774:	2301      	movs	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008778:	2301      	movs	r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	2134      	movs	r1, #52	; 0x34
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	4413      	add	r3, r2
 8008788:	3390      	adds	r3, #144	; 0x90
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b06      	cmp	r3, #6
 800878e:	d005      	beq.n	800879c <USBH_MSC_RdWrProcess+0x3e>
 8008790:	2b07      	cmp	r3, #7
 8008792:	d046      	beq.n	8008822 <USBH_MSC_RdWrProcess+0xc4>
 8008794:	2b05      	cmp	r3, #5
 8008796:	f000 8087 	beq.w	80088a8 <USBH_MSC_RdWrProcess+0x14a>
#endif
#endif
      break;

    default:
      break;
 800879a:	e0cb      	b.n	8008934 <USBH_MSC_RdWrProcess+0x1d6>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800879c:	78f9      	ldrb	r1, [r7, #3]
 800879e:	2300      	movs	r3, #0
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	2300      	movs	r3, #0
 80087a4:	2200      	movs	r2, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 ff57 	bl	800965a <USBH_MSC_SCSI_Read>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <USBH_MSC_RdWrProcess+0x70>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80087b6:	78fb      	ldrb	r3, [r7, #3]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	2134      	movs	r1, #52	; 0x34
 80087bc:	fb01 f303 	mul.w	r3, r1, r3
 80087c0:	4413      	add	r3, r2
 80087c2:	3390      	adds	r3, #144	; 0x90
 80087c4:	2201      	movs	r2, #1
 80087c6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	75fb      	strb	r3, [r7, #23]
 80087cc:	e01a      	b.n	8008804 <USBH_MSC_RdWrProcess+0xa6>
      else if (scsi_status == USBH_FAIL)
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d109      	bne.n	80087e8 <USBH_MSC_RdWrProcess+0x8a>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	2134      	movs	r1, #52	; 0x34
 80087da:	fb01 f303 	mul.w	r3, r1, r3
 80087de:	4413      	add	r3, r2
 80087e0:	3390      	adds	r3, #144	; 0x90
 80087e2:	2205      	movs	r2, #5
 80087e4:	701a      	strb	r2, [r3, #0]
 80087e6:	e00d      	b.n	8008804 <USBH_MSC_RdWrProcess+0xa6>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d10a      	bne.n	8008804 <USBH_MSC_RdWrProcess+0xa6>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	2134      	movs	r1, #52	; 0x34
 80087f4:	fb01 f303 	mul.w	r3, r1, r3
 80087f8:	4413      	add	r3, r2
 80087fa:	3390      	adds	r3, #144	; 0x90
 80087fc:	2208      	movs	r2, #8
 80087fe:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008800:	2302      	movs	r3, #2
 8008802:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2204      	movs	r2, #4
 8008808:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008818:	2200      	movs	r2, #0
 800881a:	4619      	mov	r1, r3
 800881c:	f005 fb88 	bl	800df30 <osMessagePut>
      break;
 8008820:	e088      	b.n	8008934 <USBH_MSC_RdWrProcess+0x1d6>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008822:	78f9      	ldrb	r1, [r7, #3]
 8008824:	2300      	movs	r3, #0
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	2300      	movs	r3, #0
 800882a:	2200      	movs	r2, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fea9 	bl	8009584 <USBH_MSC_SCSI_Write>
 8008832:	4603      	mov	r3, r0
 8008834:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10b      	bne.n	8008854 <USBH_MSC_RdWrProcess+0xf6>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	2134      	movs	r1, #52	; 0x34
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	3390      	adds	r3, #144	; 0x90
 800884a:	2201      	movs	r2, #1
 800884c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	75fb      	strb	r3, [r7, #23]
 8008852:	e01a      	b.n	800888a <USBH_MSC_RdWrProcess+0x12c>
      else if (scsi_status == USBH_FAIL)
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d109      	bne.n	800886e <USBH_MSC_RdWrProcess+0x110>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	2134      	movs	r1, #52	; 0x34
 8008860:	fb01 f303 	mul.w	r3, r1, r3
 8008864:	4413      	add	r3, r2
 8008866:	3390      	adds	r3, #144	; 0x90
 8008868:	2205      	movs	r2, #5
 800886a:	701a      	strb	r2, [r3, #0]
 800886c:	e00d      	b.n	800888a <USBH_MSC_RdWrProcess+0x12c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	2b04      	cmp	r3, #4
 8008872:	d10a      	bne.n	800888a <USBH_MSC_RdWrProcess+0x12c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	2134      	movs	r1, #52	; 0x34
 800887a:	fb01 f303 	mul.w	r3, r1, r3
 800887e:	4413      	add	r3, r2
 8008880:	3390      	adds	r3, #144	; 0x90
 8008882:	2208      	movs	r2, #8
 8008884:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2204      	movs	r2, #4
 800888e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800889e:	2200      	movs	r2, #0
 80088a0:	4619      	mov	r1, r3
 80088a2:	f005 fb45 	bl	800df30 <osMessagePut>
      break;
 80088a6:	e045      	b.n	8008934 <USBH_MSC_RdWrProcess+0x1d6>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	2234      	movs	r2, #52	; 0x34
 80088ac:	fb02 f303 	mul.w	r3, r2, r3
 80088b0:	3398      	adds	r3, #152	; 0x98
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4413      	add	r3, r2
 80088b6:	1d1a      	adds	r2, r3, #4
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fde8 	bl	8009492 <USBH_MSC_SCSI_RequestSense>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d113      	bne.n	80088f4 <USBH_MSC_RdWrProcess+0x196>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	2134      	movs	r1, #52	; 0x34
 80088d2:	fb01 f303 	mul.w	r3, r1, r3
 80088d6:	4413      	add	r3, r2
 80088d8:	3390      	adds	r3, #144	; 0x90
 80088da:	2201      	movs	r2, #1
 80088dc:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	2134      	movs	r1, #52	; 0x34
 80088e4:	fb01 f303 	mul.w	r3, r1, r3
 80088e8:	4413      	add	r3, r2
 80088ea:	3391      	adds	r3, #145	; 0x91
 80088ec:	2202      	movs	r2, #2
 80088ee:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 80088f0:	2302      	movs	r3, #2
 80088f2:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d00d      	beq.n	8008916 <USBH_MSC_RdWrProcess+0x1b8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d10a      	bne.n	8008916 <USBH_MSC_RdWrProcess+0x1b8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	2134      	movs	r1, #52	; 0x34
 8008906:	fb01 f303 	mul.w	r3, r1, r3
 800890a:	4413      	add	r3, r2
 800890c:	3390      	adds	r3, #144	; 0x90
 800890e:	2208      	movs	r2, #8
 8008910:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008912:	2302      	movs	r3, #2
 8008914:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2204      	movs	r2, #4
 800891a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800892a:	2200      	movs	r2, #0
 800892c:	4619      	mov	r1, r3
 800892e:	f005 faff 	bl	800df30 <osMessagePut>
      break;
 8008932:	bf00      	nop

  }
  return error;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800893e:	b480      	push	{r7}
 8008940:	b085      	sub	sp, #20
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008950:	69db      	ldr	r3, [r3, #28]
 8008952:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b0b      	cmp	r3, #11
 800895c:	d10c      	bne.n	8008978 <USBH_MSC_UnitIsReady+0x3a>
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	2134      	movs	r1, #52	; 0x34
 8008964:	fb01 f303 	mul.w	r3, r1, r3
 8008968:	4413      	add	r3, r2
 800896a:	3391      	adds	r3, #145	; 0x91
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008972:	2301      	movs	r3, #1
 8008974:	73fb      	strb	r3, [r7, #15]
 8008976:	e001      	b.n	800897c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800897c:	7bfb      	ldrb	r3, [r7, #15]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b086      	sub	sp, #24
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	460b      	mov	r3, r1
 8008994:	607a      	str	r2, [r7, #4]
 8008996:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b0b      	cmp	r3, #11
 80089aa:	d10d      	bne.n	80089c8 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	2234      	movs	r2, #52	; 0x34
 80089b0:	fb02 f303 	mul.w	r3, r2, r3
 80089b4:	3390      	adds	r3, #144	; 0x90
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4413      	add	r3, r2
 80089ba:	2234      	movs	r2, #52	; 0x34
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f008 faec 	bl	8010f9c <memcpy>
    return USBH_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	e000      	b.n	80089ca <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80089c8:	2302      	movs	r3, #2
  }
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b088      	sub	sp, #32
 80089d6:	af02      	add	r7, sp, #8
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
 80089de:	460b      	mov	r3, r1
 80089e0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00e      	beq.n	8008a16 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80089fe:	2b0b      	cmp	r3, #11
 8008a00:	d109      	bne.n	8008a16 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008a02:	7afb      	ldrb	r3, [r7, #11]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	2134      	movs	r1, #52	; 0x34
 8008a08:	fb01 f303 	mul.w	r3, r1, r3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	3390      	adds	r3, #144	; 0x90
 8008a10:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d001      	beq.n	8008a1a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008a16:	2302      	movs	r3, #2
 8008a18:	e040      	b.n	8008a9c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2206      	movs	r2, #6
 8008a1e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	2134      	movs	r1, #52	; 0x34
 8008a26:	fb01 f303 	mul.w	r3, r1, r3
 8008a2a:	4413      	add	r3, r2
 8008a2c:	3390      	adds	r3, #144	; 0x90
 8008a2e:	2206      	movs	r2, #6
 8008a30:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008a32:	7afb      	ldrb	r3, [r7, #11]
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008a3c:	7af9      	ldrb	r1, [r7, #11]
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fe07 	bl	800965a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a52:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008a54:	e016      	b.n	8008a84 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	1ad2      	subs	r2, r2, r3
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	f242 7110 	movw	r1, #10000	; 0x2710
 8008a66:	fb01 f303 	mul.w	r3, r1, r3
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d805      	bhi.n	8008a7a <USBH_MSC_Read+0xa8>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d104      	bne.n	8008a84 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008a80:	2302      	movs	r3, #2
 8008a82:	e00b      	b.n	8008a9c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008a84:	7afb      	ldrb	r3, [r7, #11]
 8008a86:	4619      	mov	r1, r3
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f7ff fe68 	bl	800875e <USBH_MSC_RdWrProcess>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d0e0      	beq.n	8008a56 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2201      	movs	r2, #1
 8008a98:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	607a      	str	r2, [r7, #4]
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00e      	beq.n	8008ae8 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008ad0:	2b0b      	cmp	r3, #11
 8008ad2:	d109      	bne.n	8008ae8 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008ad4:	7afb      	ldrb	r3, [r7, #11]
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	2134      	movs	r1, #52	; 0x34
 8008ada:	fb01 f303 	mul.w	r3, r1, r3
 8008ade:	4413      	add	r3, r2
 8008ae0:	3390      	adds	r3, #144	; 0x90
 8008ae2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d001      	beq.n	8008aec <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e040      	b.n	8008b6e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2207      	movs	r2, #7
 8008af0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	2134      	movs	r1, #52	; 0x34
 8008af8:	fb01 f303 	mul.w	r3, r1, r3
 8008afc:	4413      	add	r3, r2
 8008afe:	3390      	adds	r3, #144	; 0x90
 8008b00:	2207      	movs	r2, #7
 8008b02:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008b0e:	7af9      	ldrb	r1, [r7, #11]
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 fd33 	bl	8009584 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b24:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008b26:	e016      	b.n	8008b56 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad2      	subs	r2, r2, r3
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	f242 7110 	movw	r1, #10000	; 0x2710
 8008b38:	fb01 f303 	mul.w	r3, r1, r3
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d805      	bhi.n	8008b4c <USBH_MSC_Write+0xa8>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008b52:	2302      	movs	r3, #2
 8008b54:	e00b      	b.n	8008b6e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008b56:	7afb      	ldrb	r3, [r7, #11]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f7ff fdff 	bl	800875e <USBH_MSC_RdWrProcess>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d0e0      	beq.n	8008b28 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2221      	movs	r2, #33	; 0x21
 8008b82:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	22ff      	movs	r2, #255	; 0xff
 8008b88:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 ff7e 	bl	800aaa2 <USBH_CtlReq>
 8008ba6:	4603      	mov	r3, r0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	22a1      	movs	r2, #161	; 0xa1
 8008bbe:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	22fe      	movs	r2, #254	; 0xfe
 8008bc4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008bd8:	2201      	movs	r2, #1
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 ff60 	bl	800aaa2 <USBH_CtlReq>
 8008be2:	4603      	mov	r3, r0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4a09      	ldr	r2, [pc, #36]	; (8008c28 <USBH_MSC_BOT_Init+0x3c>)
 8008c02:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4a09      	ldr	r2, [pc, #36]	; (8008c2c <USBH_MSC_BOT_Init+0x40>)
 8008c08:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	43425355 	.word	0x43425355
 8008c2c:	20304050 	.word	0x20304050

08008c30 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b088      	sub	sp, #32
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008c40:	2301      	movs	r3, #1
 8008c42:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008c44:	2301      	movs	r3, #1
 8008c46:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c60:	3b01      	subs	r3, #1
 8008c62:	2b0a      	cmp	r3, #10
 8008c64:	f200 822d 	bhi.w	80090c2 <USBH_MSC_BOT_Process+0x492>
 8008c68:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <USBH_MSC_BOT_Process+0x40>)
 8008c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008c9d 	.word	0x08008c9d
 8008c74:	08008cc7 	.word	0x08008cc7
 8008c78:	08008d85 	.word	0x08008d85
 8008c7c:	08008da3 	.word	0x08008da3
 8008c80:	08008e5f 	.word	0x08008e5f
 8008c84:	08008e83 	.word	0x08008e83
 8008c88:	08008f71 	.word	0x08008f71
 8008c8c:	08008f8d 	.word	0x08008f8d
 8008c90:	08009017 	.word	0x08009017
 8008c94:	08009047 	.word	0x08009047
 8008c98:	080090a9 	.word	0x080090a9
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	78fa      	ldrb	r2, [r7, #3]
 8008ca0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	795a      	ldrb	r2, [r3, #5]
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	221f      	movs	r2, #31
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f002 f9ef 	bl	800b0a2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008cc4:	e20c      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	795b      	ldrb	r3, [r3, #5]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f008 f86d 	bl	8010dac <USBH_LL_GetURBState>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008cd6:	7d3b      	ldrb	r3, [r7, #20]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d126      	bne.n	8008d2a <USBH_MSC_BOT_Process+0xfa>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00f      	beq.n	8008d04 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008cea:	b25b      	sxtb	r3, r3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	da04      	bge.n	8008cfa <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008cf8:	e008      	b.n	8008d0c <USBH_MSC_BOT_Process+0xdc>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2205      	movs	r2, #5
 8008cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008d02:	e003      	b.n	8008d0c <USBH_MSC_BOT_Process+0xdc>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	2207      	movs	r2, #7
 8008d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d20:	2200      	movs	r2, #0
 8008d22:	4619      	mov	r1, r3
 8008d24:	f005 f904 	bl	800df30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d28:	e1cd      	b.n	80090c6 <USBH_MSC_BOT_Process+0x496>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d2a:	7d3b      	ldrb	r3, [r7, #20]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d112      	bne.n	8008d56 <USBH_MSC_BOT_Process+0x126>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4619      	mov	r1, r3
 8008d50:	f005 f8ee 	bl	800df30 <osMessagePut>
      break;
 8008d54:	e1b7      	b.n	80090c6 <USBH_MSC_BOT_Process+0x496>
        if (URB_Status == USBH_URB_STALL)
 8008d56:	7d3b      	ldrb	r3, [r7, #20]
 8008d58:	2b05      	cmp	r3, #5
 8008d5a:	f040 81b4 	bne.w	80090c6 <USBH_MSC_BOT_Process+0x496>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	220a      	movs	r2, #10
 8008d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2202      	movs	r2, #2
 8008d6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f005 f8d7 	bl	800df30 <osMessagePut>
      break;
 8008d82:	e1a0      	b.n	80090c6 <USBH_MSC_BOT_Process+0x496>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	895a      	ldrh	r2, [r3, #10]
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	791b      	ldrb	r3, [r3, #4]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f002 f9aa 	bl	800b0ec <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2204      	movs	r2, #4
 8008d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008da0:	e19e      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	791b      	ldrb	r3, [r3, #4]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f007 ffff 	bl	8010dac <USBH_LL_GetURBState>
 8008dae:	4603      	mov	r3, r0
 8008db0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008db2:	7d3b      	ldrb	r3, [r7, #20]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d13b      	bne.n	8008e30 <USBH_MSC_BOT_Process+0x200>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	8952      	ldrh	r2, [r2, #10]
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d910      	bls.n	8008de6 <USBH_MSC_BOT_Process+0x1b6>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	8952      	ldrh	r2, [r2, #10]
 8008dce:	441a      	add	r2, r3
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	8952      	ldrh	r2, [r2, #10]
 8008dde:	1a9a      	subs	r2, r3, r2
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	65da      	str	r2, [r3, #92]	; 0x5c
 8008de4:	e002      	b.n	8008dec <USBH_MSC_BOT_Process+0x1bc>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2200      	movs	r2, #0
 8008dea:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00a      	beq.n	8008e0a <USBH_MSC_BOT_Process+0x1da>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	895a      	ldrh	r2, [r3, #10]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	791b      	ldrb	r3, [r3, #4]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f002 f972 	bl	800b0ec <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008e08:	e15f      	b.n	80090ca <USBH_MSC_BOT_Process+0x49a>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	2207      	movs	r2, #7
 8008e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2202      	movs	r2, #2
 8008e16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e26:	2200      	movs	r2, #0
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f005 f881 	bl	800df30 <osMessagePut>
      break;
 8008e2e:	e14c      	b.n	80090ca <USBH_MSC_BOT_Process+0x49a>
      else if (URB_Status == USBH_URB_STALL)
 8008e30:	7d3b      	ldrb	r3, [r7, #20]
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	f040 8149 	bne.w	80090ca <USBH_MSC_BOT_Process+0x49a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	2209      	movs	r2, #9
 8008e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e54:	2200      	movs	r2, #0
 8008e56:	4619      	mov	r1, r3
 8008e58:	f005 f86a 	bl	800df30 <osMessagePut>
      break;
 8008e5c:	e135      	b.n	80090ca <USBH_MSC_BOT_Process+0x49a>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	891a      	ldrh	r2, [r3, #8]
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	7958      	ldrb	r0, [r3, #5]
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	4603      	mov	r3, r0
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f002 f915 	bl	800b0a2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	2206      	movs	r2, #6
 8008e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008e80:	e12e      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	795b      	ldrb	r3, [r3, #5]
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f007 ff8f 	bl	8010dac <USBH_LL_GetURBState>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008e92:	7d3b      	ldrb	r3, [r7, #20]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d13e      	bne.n	8008f16 <USBH_MSC_BOT_Process+0x2e6>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	8912      	ldrh	r2, [r2, #8]
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d910      	bls.n	8008ec6 <USBH_MSC_BOT_Process+0x296>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	8912      	ldrh	r2, [r2, #8]
 8008eae:	441a      	add	r2, r3
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	8912      	ldrh	r2, [r2, #8]
 8008ebe:	1a9a      	subs	r2, r3, r2
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ec4:	e002      	b.n	8008ecc <USBH_MSC_BOT_Process+0x29c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00d      	beq.n	8008ef0 <USBH_MSC_BOT_Process+0x2c0>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	891a      	ldrh	r2, [r3, #8]
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	7958      	ldrb	r0, [r3, #5]
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f002 f8da 	bl	800b0a2 <USBH_BulkSendData>
 8008eee:	e003      	b.n	8008ef8 <USBH_MSC_BOT_Process+0x2c8>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	2207      	movs	r2, #7
 8008ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4619      	mov	r1, r3
 8008f10:	f005 f80e 	bl	800df30 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 8008f14:	e0db      	b.n	80090ce <USBH_MSC_BOT_Process+0x49e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f16:	7d3b      	ldrb	r3, [r7, #20]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d112      	bne.n	8008f42 <USBH_MSC_BOT_Process+0x312>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2205      	movs	r2, #5
 8008f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	f004 fff8 	bl	800df30 <osMessagePut>
      break;
 8008f40:	e0c5      	b.n	80090ce <USBH_MSC_BOT_Process+0x49e>
      else if (URB_Status == USBH_URB_STALL)
 8008f42:	7d3b      	ldrb	r3, [r7, #20]
 8008f44:	2b05      	cmp	r3, #5
 8008f46:	f040 80c2 	bne.w	80090ce <USBH_MSC_BOT_Process+0x49e>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	220a      	movs	r2, #10
 8008f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2202      	movs	r2, #2
 8008f56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f66:	2200      	movs	r2, #0
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f004 ffe1 	bl	800df30 <osMessagePut>
      break;
 8008f6e:	e0ae      	b.n	80090ce <USBH_MSC_BOT_Process+0x49e>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	791b      	ldrb	r3, [r3, #4]
 8008f7a:	220d      	movs	r2, #13
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f002 f8b5 	bl	800b0ec <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2208      	movs	r2, #8
 8008f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008f8a:	e0a9      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	791b      	ldrb	r3, [r3, #4]
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f007 ff0a 	bl	8010dac <USBH_LL_GetURBState>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008f9c:	7d3b      	ldrb	r3, [r7, #20]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d123      	bne.n	8008fea <USBH_MSC_BOT_Process+0x3ba>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f8c6 	bl	8009144 <USBH_MSC_DecodeCSW>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008fbc:	7d7b      	ldrb	r3, [r7, #21]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d102      	bne.n	8008fc8 <USBH_MSC_BOT_Process+0x398>
        {
          status = USBH_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	75fb      	strb	r3, [r7, #23]
 8008fc6:	e001      	b.n	8008fcc <USBH_MSC_BOT_Process+0x39c>
        }
        else
        {
          status = USBH_FAIL;
 8008fc8:	2302      	movs	r3, #2
 8008fca:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f004 ffa4 	bl	800df30 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 8008fe8:	e073      	b.n	80090d2 <USBH_MSC_BOT_Process+0x4a2>
      else if (URB_Status == USBH_URB_STALL)
 8008fea:	7d3b      	ldrb	r3, [r7, #20]
 8008fec:	2b05      	cmp	r3, #5
 8008fee:	d170      	bne.n	80090d2 <USBH_MSC_BOT_Process+0x4a2>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2209      	movs	r2, #9
 8008ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800900c:	2200      	movs	r2, #0
 800900e:	4619      	mov	r1, r3
 8009010:	f004 ff8e 	bl	800df30 <osMessagePut>
      break;
 8009014:	e05d      	b.n	80090d2 <USBH_MSC_BOT_Process+0x4a2>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	2200      	movs	r2, #0
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f865 	bl	80090ec <USBH_MSC_BOT_Abort>
 8009022:	4603      	mov	r3, r0
 8009024:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009026:	7dbb      	ldrb	r3, [r7, #22]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <USBH_MSC_BOT_Process+0x406>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	2207      	movs	r2, #7
 8009030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009034:	e04f      	b.n	80090d6 <USBH_MSC_BOT_Process+0x4a6>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009036:	7dbb      	ldrb	r3, [r7, #22]
 8009038:	2b04      	cmp	r3, #4
 800903a:	d14c      	bne.n	80090d6 <USBH_MSC_BOT_Process+0x4a6>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	220b      	movs	r2, #11
 8009040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009044:	e047      	b.n	80090d6 <USBH_MSC_BOT_Process+0x4a6>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009046:	78fb      	ldrb	r3, [r7, #3]
 8009048:	2201      	movs	r2, #1
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f84d 	bl	80090ec <USBH_MSC_BOT_Abort>
 8009052:	4603      	mov	r3, r0
 8009054:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009056:	7dbb      	ldrb	r3, [r7, #22]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d11d      	bne.n	8009098 <USBH_MSC_BOT_Process+0x468>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	795b      	ldrb	r3, [r3, #5]
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f007 fef6 	bl	8010e54 <USBH_LL_GetToggle>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	7959      	ldrb	r1, [r3, #5]
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	f1c3 0301 	rsb	r3, r3, #1
 8009076:	b2db      	uxtb	r3, r3
 8009078:	461a      	mov	r2, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f007 feb7 	bl	8010dee <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	791b      	ldrb	r3, [r3, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f007 feb0 	bl	8010dee <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2209      	movs	r2, #9
 8009092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009096:	e020      	b.n	80090da <USBH_MSC_BOT_Process+0x4aa>
        if (error == USBH_UNRECOVERED_ERROR)
 8009098:	7dbb      	ldrb	r3, [r7, #22]
 800909a:	2b04      	cmp	r3, #4
 800909c:	d11d      	bne.n	80090da <USBH_MSC_BOT_Process+0x4aa>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	220b      	movs	r2, #11
 80090a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80090a6:	e018      	b.n	80090da <USBH_MSC_BOT_Process+0x4aa>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff fd64 	bl	8008b76 <USBH_MSC_BOT_REQ_Reset>
 80090ae:	4603      	mov	r3, r0
 80090b0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d112      	bne.n	80090de <USBH_MSC_BOT_Process+0x4ae>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80090c0:	e00d      	b.n	80090de <USBH_MSC_BOT_Process+0x4ae>

    default:
      break;
 80090c2:	bf00      	nop
 80090c4:	e00c      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80090c6:	bf00      	nop
 80090c8:	e00a      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80090ca:	bf00      	nop
 80090cc:	e008      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80090ce:	bf00      	nop
 80090d0:	e006      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80090d2:	bf00      	nop
 80090d4:	e004      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80090d6:	bf00      	nop
 80090d8:	e002      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80090da:	bf00      	nop
 80090dc:	e000      	b.n	80090e0 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80090de:	bf00      	nop
  }
  return status;
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop

080090ec <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
 80090f8:	4613      	mov	r3, r2
 80090fa:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80090fc:	2302      	movs	r3, #2
 80090fe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800910a:	78bb      	ldrb	r3, [r7, #2]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <USBH_MSC_BOT_Abort+0x2a>
 8009110:	2b01      	cmp	r3, #1
 8009112:	d009      	beq.n	8009128 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009114:	e011      	b.n	800913a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	79db      	ldrb	r3, [r3, #7]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 fae0 	bl	800a6e2 <USBH_ClrFeature>
 8009122:	4603      	mov	r3, r0
 8009124:	73fb      	strb	r3, [r7, #15]
      break;
 8009126:	e008      	b.n	800913a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	799b      	ldrb	r3, [r3, #6]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 fad7 	bl	800a6e2 <USBH_ClrFeature>
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]
      break;
 8009138:	bf00      	nop
  }
  return status;
 800913a:	7bfb      	ldrb	r3, [r7, #15]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009156:	2301      	movs	r3, #1
 8009158:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	791b      	ldrb	r3, [r3, #4]
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f007 fd91 	bl	8010c88 <USBH_LL_GetLastXferSize>
 8009166:	4603      	mov	r3, r0
 8009168:	2b0d      	cmp	r3, #13
 800916a:	d002      	beq.n	8009172 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800916c:	2302      	movs	r3, #2
 800916e:	73fb      	strb	r3, [r7, #15]
 8009170:	e024      	b.n	80091bc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009176:	4a14      	ldr	r2, [pc, #80]	; (80091c8 <USBH_MSC_DecodeCSW+0x84>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d11d      	bne.n	80091b8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009184:	429a      	cmp	r2, r3
 8009186:	d119      	bne.n	80091bc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800918e:	2b00      	cmp	r3, #0
 8009190:	d102      	bne.n	8009198 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009192:	2300      	movs	r3, #0
 8009194:	73fb      	strb	r3, [r7, #15]
 8009196:	e011      	b.n	80091bc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d102      	bne.n	80091a8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80091a2:	2301      	movs	r3, #1
 80091a4:	73fb      	strb	r3, [r7, #15]
 80091a6:	e009      	b.n	80091bc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d104      	bne.n	80091bc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80091b2:	2302      	movs	r3, #2
 80091b4:	73fb      	strb	r3, [r7, #15]
 80091b6:	e001      	b.n	80091bc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80091b8:	2302      	movs	r3, #2
 80091ba:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	53425355 	.word	0x53425355

080091cc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80091d8:	2302      	movs	r3, #2
 80091da:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091e2:	69db      	ldr	r3, [r3, #28]
 80091e4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d002      	beq.n	80091f6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d021      	beq.n	8009238 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80091f4:	e028      	b.n	8009248 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2200      	movs	r2, #0
 80091fa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	220a      	movs	r2, #10
 8009208:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	3363      	adds	r3, #99	; 0x63
 8009210:	2210      	movs	r2, #16
 8009212:	2100      	movs	r1, #0
 8009214:	4618      	mov	r0, r3
 8009216:	f007 fecc 	bl	8010fb2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2202      	movs	r2, #2
 800922e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009232:	2301      	movs	r3, #1
 8009234:	73fb      	strb	r3, [r7, #15]
      break;
 8009236:	e007      	b.n	8009248 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff fcf7 	bl	8008c30 <USBH_MSC_BOT_Process>
 8009242:	4603      	mov	r3, r0
 8009244:	73fb      	strb	r3, [r7, #15]
      break;
 8009246:	bf00      	nop
  }

  return error;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b086      	sub	sp, #24
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	460b      	mov	r3, r1
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009260:	2301      	movs	r3, #1
 8009262:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009274:	2b01      	cmp	r3, #1
 8009276:	d002      	beq.n	800927e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009278:	2b02      	cmp	r3, #2
 800927a:	d027      	beq.n	80092cc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800927c:	e05f      	b.n	800933e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	2208      	movs	r2, #8
 8009282:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	2280      	movs	r2, #128	; 0x80
 8009288:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	220a      	movs	r2, #10
 8009290:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3363      	adds	r3, #99	; 0x63
 8009298:	2210      	movs	r2, #16
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f007 fe88 	bl	8010fb2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2225      	movs	r2, #37	; 0x25
 80092a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2202      	movs	r2, #2
 80092b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f103 0210 	add.w	r2, r3, #16
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80092c6:	2301      	movs	r3, #1
 80092c8:	75fb      	strb	r3, [r7, #23]
      break;
 80092ca:	e038      	b.n	800933e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	4619      	mov	r1, r3
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f7ff fcad 	bl	8008c30 <USBH_MSC_BOT_Process>
 80092d6:	4603      	mov	r3, r0
 80092d8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d12d      	bne.n	800933c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092e6:	3303      	adds	r3, #3
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092f2:	3302      	adds	r3, #2
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009300:	3301      	adds	r3, #1
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009306:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	061b      	lsls	r3, r3, #24
 8009312:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800931e:	3307      	adds	r3, #7
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	b29a      	uxth	r2, r3
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932a:	3306      	adds	r3, #6
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	b29b      	uxth	r3, r3
 8009330:	021b      	lsls	r3, r3, #8
 8009332:	b29b      	uxth	r3, r3
 8009334:	4313      	orrs	r3, r2
 8009336:	b29a      	uxth	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	809a      	strh	r2, [r3, #4]
      break;
 800933c:	bf00      	nop
  }

  return error;
 800933e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	460b      	mov	r3, r1
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009356:	2302      	movs	r3, #2
 8009358:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800936a:	2b01      	cmp	r3, #1
 800936c:	d002      	beq.n	8009374 <USBH_MSC_SCSI_Inquiry+0x2c>
 800936e:	2b02      	cmp	r3, #2
 8009370:	d03d      	beq.n	80093ee <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009372:	e089      	b.n	8009488 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	2224      	movs	r2, #36	; 0x24
 8009378:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2280      	movs	r2, #128	; 0x80
 800937e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	220a      	movs	r2, #10
 8009386:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	3363      	adds	r3, #99	; 0x63
 800938e:	220a      	movs	r2, #10
 8009390:	2100      	movs	r1, #0
 8009392:	4618      	mov	r0, r3
 8009394:	f007 fe0d 	bl	8010fb2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	2212      	movs	r2, #18
 800939c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	015b      	lsls	r3, r3, #5
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2224      	movs	r2, #36	; 0x24
 80093c0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f103 0210 	add.w	r2, r3, #16
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80093e8:	2301      	movs	r3, #1
 80093ea:	75fb      	strb	r3, [r7, #23]
      break;
 80093ec:	e04c      	b.n	8009488 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	4619      	mov	r1, r3
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7ff fc1c 	bl	8008c30 <USBH_MSC_BOT_Process>
 80093f8:	4603      	mov	r3, r0
 80093fa:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d141      	bne.n	8009486 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009402:	2222      	movs	r2, #34	; 0x22
 8009404:	2100      	movs	r1, #0
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f007 fdd3 	bl	8010fb2 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	f003 031f 	and.w	r3, r3, #31
 8009418:	b2da      	uxtb	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	095b      	lsrs	r3, r3, #5
 8009428:	b2da      	uxtb	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009434:	3301      	adds	r3, #1
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	b25b      	sxtb	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	da03      	bge.n	8009446 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	709a      	strb	r2, [r3, #2]
 8009444:	e002      	b.n	800944c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	1cd8      	adds	r0, r3, #3
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009456:	3308      	adds	r3, #8
 8009458:	2208      	movs	r2, #8
 800945a:	4619      	mov	r1, r3
 800945c:	f007 fd9e 	bl	8010f9c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f103 000c 	add.w	r0, r3, #12
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946c:	3310      	adds	r3, #16
 800946e:	2210      	movs	r2, #16
 8009470:	4619      	mov	r1, r3
 8009472:	f007 fd93 	bl	8010f9c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	331d      	adds	r3, #29
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009480:	3220      	adds	r2, #32
 8009482:	6812      	ldr	r2, [r2, #0]
 8009484:	601a      	str	r2, [r3, #0]
      break;
 8009486:	bf00      	nop
  }

  return error;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b086      	sub	sp, #24
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	460b      	mov	r3, r1
 800949c:	607a      	str	r2, [r7, #4]
 800949e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80094a0:	2302      	movs	r3, #2
 80094a2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d002      	beq.n	80094be <USBH_MSC_SCSI_RequestSense+0x2c>
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d03d      	beq.n	8009538 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80094bc:	e05d      	b.n	800957a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	220e      	movs	r2, #14
 80094c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	2280      	movs	r2, #128	; 0x80
 80094c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	220a      	movs	r2, #10
 80094d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	3363      	adds	r3, #99	; 0x63
 80094d8:	2210      	movs	r2, #16
 80094da:	2100      	movs	r1, #0
 80094dc:	4618      	mov	r0, r3
 80094de:	f007 fd68 	bl	8010fb2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2203      	movs	r2, #3
 80094e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80094ea:	7afb      	ldrb	r3, [r7, #11]
 80094ec:	015b      	lsls	r3, r3, #5
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	220e      	movs	r2, #14
 800950a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	2202      	movs	r2, #2
 8009522:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f103 0210 	add.w	r2, r3, #16
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009532:	2301      	movs	r3, #1
 8009534:	75fb      	strb	r3, [r7, #23]
      break;
 8009536:	e020      	b.n	800957a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009538:	7afb      	ldrb	r3, [r7, #11]
 800953a:	4619      	mov	r1, r3
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff fb77 	bl	8008c30 <USBH_MSC_BOT_Process>
 8009542:	4603      	mov	r3, r0
 8009544:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d115      	bne.n	8009578 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009552:	3302      	adds	r3, #2
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	f003 030f 	and.w	r3, r3, #15
 800955a:	b2da      	uxtb	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009566:	7b1a      	ldrb	r2, [r3, #12]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009572:	7b5a      	ldrb	r2, [r3, #13]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	709a      	strb	r2, [r3, #2]
      break;
 8009578:	bf00      	nop
  }

  return error;
 800957a:	7dfb      	ldrb	r3, [r7, #23]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	607a      	str	r2, [r7, #4]
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	460b      	mov	r3, r1
 8009592:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009594:	2302      	movs	r3, #2
 8009596:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800959e:	69db      	ldr	r3, [r3, #28]
 80095a0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d002      	beq.n	80095b2 <USBH_MSC_SCSI_Write+0x2e>
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d047      	beq.n	8009640 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80095b0:	e04e      	b.n	8009650 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80095b8:	461a      	mov	r2, r3
 80095ba:	6a3b      	ldr	r3, [r7, #32]
 80095bc:	fb03 f202 	mul.w	r2, r3, r2
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	220a      	movs	r2, #10
 80095d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	3363      	adds	r3, #99	; 0x63
 80095d8:	2210      	movs	r2, #16
 80095da:	2100      	movs	r1, #0
 80095dc:	4618      	mov	r0, r3
 80095de:	f007 fce8 	bl	8010fb2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	222a      	movs	r2, #42	; 0x2a
 80095e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80095ea:	79fa      	ldrb	r2, [r7, #7]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80095f2:	79ba      	ldrb	r2, [r7, #6]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80095fa:	797a      	ldrb	r2, [r7, #5]
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009602:	1d3b      	adds	r3, r7, #4
 8009604:	781a      	ldrb	r2, [r3, #0]
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800960c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009616:	f107 0320 	add.w	r3, r7, #32
 800961a:	781a      	ldrb	r2, [r3, #0]
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2202      	movs	r2, #2
 800962e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800963a:	2301      	movs	r3, #1
 800963c:	75fb      	strb	r3, [r7, #23]
      break;
 800963e:	e007      	b.n	8009650 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009640:	7afb      	ldrb	r3, [r7, #11]
 8009642:	4619      	mov	r1, r3
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff faf3 	bl	8008c30 <USBH_MSC_BOT_Process>
 800964a:	4603      	mov	r3, r0
 800964c:	75fb      	strb	r3, [r7, #23]
      break;
 800964e:	bf00      	nop
  }

  return error;
 8009650:	7dfb      	ldrb	r3, [r7, #23]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b086      	sub	sp, #24
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	603b      	str	r3, [r7, #0]
 8009666:	460b      	mov	r3, r1
 8009668:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800966a:	2302      	movs	r3, #2
 800966c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800967e:	2b01      	cmp	r3, #1
 8009680:	d002      	beq.n	8009688 <USBH_MSC_SCSI_Read+0x2e>
 8009682:	2b02      	cmp	r3, #2
 8009684:	d047      	beq.n	8009716 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009686:	e04e      	b.n	8009726 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800968e:	461a      	mov	r2, r3
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	fb03 f202 	mul.w	r2, r3, r2
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	2280      	movs	r2, #128	; 0x80
 800969e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	220a      	movs	r2, #10
 80096a6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	3363      	adds	r3, #99	; 0x63
 80096ae:	2210      	movs	r2, #16
 80096b0:	2100      	movs	r1, #0
 80096b2:	4618      	mov	r0, r3
 80096b4:	f007 fc7d 	bl	8010fb2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	2228      	movs	r2, #40	; 0x28
 80096bc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80096c0:	79fa      	ldrb	r2, [r7, #7]
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80096c8:	79ba      	ldrb	r2, [r7, #6]
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80096d0:	797a      	ldrb	r2, [r7, #5]
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80096d8:	1d3b      	adds	r3, r7, #4
 80096da:	781a      	ldrb	r2, [r3, #0]
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80096e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80096ec:	f107 0320 	add.w	r3, r7, #32
 80096f0:	781a      	ldrb	r2, [r3, #0]
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009710:	2301      	movs	r3, #1
 8009712:	75fb      	strb	r3, [r7, #23]
      break;
 8009714:	e007      	b.n	8009726 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009716:	7afb      	ldrb	r3, [r7, #11]
 8009718:	4619      	mov	r1, r3
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f7ff fa88 	bl	8008c30 <USBH_MSC_BOT_Process>
 8009720:	4603      	mov	r3, r0
 8009722:	75fb      	strb	r3, [r7, #23]
      break;
 8009724:	bf00      	nop
  }

  return error;
 8009726:	7dfb      	ldrb	r3, [r7, #23]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009730:	b5b0      	push	{r4, r5, r7, lr}
 8009732:	b090      	sub	sp, #64	; 0x40
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4613      	mov	r3, r2
 800973c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009744:	2302      	movs	r3, #2
 8009746:	e04d      	b.n	80097e4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	79fa      	ldrb	r2, [r7, #7]
 800974c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f847 	bl	80097f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8009794:	4b15      	ldr	r3, [pc, #84]	; (80097ec <USBH_Init+0xbc>)
 8009796:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800979a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800979c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80097a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f004 fb99 	bl	800dede <osMessageCreate>
 80097ac:	4602      	mov	r2, r0
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80097b4:	4b0e      	ldr	r3, [pc, #56]	; (80097f0 <USBH_Init+0xc0>)
 80097b6:	f107 0414 	add.w	r4, r7, #20
 80097ba:	461d      	mov	r5, r3
 80097bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80097c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80097c8:	f107 0314 	add.w	r3, r7, #20
 80097cc:	68f9      	ldr	r1, [r7, #12]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f004 fa5a 	bl	800dc88 <osThreadCreate>
 80097d4:	4602      	mov	r2, r0
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f007 f9a1 	bl	8010b24 <USBH_LL_Init>

  return USBH_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3740      	adds	r7, #64	; 0x40
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bdb0      	pop	{r4, r5, r7, pc}
 80097ec:	080111bc 	.word	0x080111bc
 80097f0:	080111d8 	.word	0x080111d8

080097f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e009      	b.n	800981a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	33e0      	adds	r3, #224	; 0xe0
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	2200      	movs	r2, #0
 8009812:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3301      	adds	r3, #1
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b0e      	cmp	r3, #14
 800981e:	d9f2      	bls.n	8009806 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009820:	2300      	movs	r3, #0
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	e009      	b.n	800983a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009830:	2200      	movs	r2, #0
 8009832:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3301      	adds	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009840:	d3f1      	bcc.n	8009826 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2240      	movs	r2, #64	; 0x40
 8009866:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d016      	beq.n	80098de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10e      	bne.n	80098d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098c0:	1c59      	adds	r1, r3, #1
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	33de      	adds	r3, #222	; 0xde
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
 80098d6:	e004      	b.n	80098e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80098d8:	2302      	movs	r3, #2
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	e001      	b.n	80098e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80098de:	2302      	movs	r3, #2
 80098e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009906:	78fa      	ldrb	r2, [r7, #3]
 8009908:	429a      	cmp	r2, r3
 800990a:	d204      	bcs.n	8009916 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	78fa      	ldrb	r2, [r7, #3]
 8009910:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009914:	e001      	b.n	800991a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009916:	2302      	movs	r3, #2
 8009918:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800991a:	7bfb      	ldrb	r3, [r7, #15]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	461a      	mov	r2, r3
 8009936:	4603      	mov	r3, r0
 8009938:	70fb      	strb	r3, [r7, #3]
 800993a:	460b      	mov	r3, r1
 800993c:	70bb      	strb	r3, [r7, #2]
 800993e:	4613      	mov	r3, r2
 8009940:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009946:	2300      	movs	r3, #0
 8009948:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009950:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009952:	e025      	b.n	80099a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	221a      	movs	r2, #26
 8009958:	fb02 f303 	mul.w	r3, r2, r3
 800995c:	3308      	adds	r3, #8
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4413      	add	r3, r2
 8009962:	3302      	adds	r3, #2
 8009964:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	795b      	ldrb	r3, [r3, #5]
 800996a:	78fa      	ldrb	r2, [r7, #3]
 800996c:	429a      	cmp	r2, r3
 800996e:	d002      	beq.n	8009976 <USBH_FindInterface+0x4e>
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	2bff      	cmp	r3, #255	; 0xff
 8009974:	d111      	bne.n	800999a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800997a:	78ba      	ldrb	r2, [r7, #2]
 800997c:	429a      	cmp	r2, r3
 800997e:	d002      	beq.n	8009986 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009980:	78bb      	ldrb	r3, [r7, #2]
 8009982:	2bff      	cmp	r3, #255	; 0xff
 8009984:	d109      	bne.n	800999a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800998a:	787a      	ldrb	r2, [r7, #1]
 800998c:	429a      	cmp	r2, r3
 800998e:	d002      	beq.n	8009996 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009990:	787b      	ldrb	r3, [r7, #1]
 8009992:	2bff      	cmp	r3, #255	; 0xff
 8009994:	d101      	bne.n	800999a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009996:	7dfb      	ldrb	r3, [r7, #23]
 8009998:	e006      	b.n	80099a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	3301      	adds	r3, #1
 800999e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d9d6      	bls.n	8009954 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80099a6:	23ff      	movs	r3, #255	; 0xff
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	371c      	adds	r7, #28
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f007 f8ed 	bl	8010b9c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80099c2:	2101      	movs	r1, #1
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f007 fa04 	bl	8010dd2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af04      	add	r7, sp, #16
 80099da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80099dc:	2302      	movs	r3, #2
 80099de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d102      	bne.n	80099f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2203      	movs	r2, #3
 80099f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b0b      	cmp	r3, #11
 80099fe:	f200 823c 	bhi.w	8009e7a <USBH_Process+0x4a6>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <USBH_Process+0x34>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a39 	.word	0x08009a39
 8009a0c:	08009a87 	.word	0x08009a87
 8009a10:	08009b0b 	.word	0x08009b0b
 8009a14:	08009df9 	.word	0x08009df9
 8009a18:	08009e7b 	.word	0x08009e7b
 8009a1c:	08009bcb 	.word	0x08009bcb
 8009a20:	08009d83 	.word	0x08009d83
 8009a24:	08009c1d 	.word	0x08009c1d
 8009a28:	08009c59 	.word	0x08009c59
 8009a2c:	08009c93 	.word	0x08009c93
 8009a30:	08009cdb 	.word	0x08009cdb
 8009a34:	08009de1 	.word	0x08009de1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 821c 	beq.w	8009e7e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009a4c:	20c8      	movs	r0, #200	; 0xc8
 8009a4e:	f007 fa34 	bl	8010eba <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f007 f8fd 	bl	8010c52 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4619      	mov	r1, r3
 8009a80:	f004 fa56 	bl	800df30 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009a84:	e1fb      	b.n	8009e7e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d107      	bne.n	8009aa0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	701a      	strb	r2, [r3, #0]
 8009a9e:	e025      	b.n	8009aec <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009aaa:	d914      	bls.n	8009ad6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	b2da      	uxtb	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d903      	bls.n	8009ace <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	220d      	movs	r2, #13
 8009aca:	701a      	strb	r2, [r3, #0]
 8009acc:	e00e      	b.n	8009aec <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	701a      	strb	r2, [r3, #0]
 8009ad4:	e00a      	b.n	8009aec <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009adc:	f103 020a 	add.w	r2, r3, #10
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009ae6:	200a      	movs	r0, #10
 8009ae8:	f007 f9e7 	bl	8010eba <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009b00:	2200      	movs	r2, #0
 8009b02:	4619      	mov	r1, r3
 8009b04:	f004 fa14 	bl	800df30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009b08:	e1c0      	b.n	8009e8c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d005      	beq.n	8009b20 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b1a:	2104      	movs	r1, #4
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009b20:	2064      	movs	r0, #100	; 0x64
 8009b22:	f007 f9ca 	bl	8010eba <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f007 f86e 	bl	8010c08 <USBH_LL_GetSpeed>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	461a      	mov	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2205      	movs	r2, #5
 8009b3a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f001 fb21 	bl	800b186 <USBH_AllocPipe>
 8009b44:	4603      	mov	r3, r0
 8009b46:	461a      	mov	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009b4c:	2180      	movs	r1, #128	; 0x80
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 fb19 	bl	800b186 <USBH_AllocPipe>
 8009b54:	4603      	mov	r3, r0
 8009b56:	461a      	mov	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	7919      	ldrb	r1, [r3, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b70:	b292      	uxth	r2, r2
 8009b72:	9202      	str	r2, [sp, #8]
 8009b74:	2200      	movs	r2, #0
 8009b76:	9201      	str	r2, [sp, #4]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2280      	movs	r2, #128	; 0x80
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 fad2 	bl	800b128 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7959      	ldrb	r1, [r3, #5]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b98:	b292      	uxth	r2, r2
 8009b9a:	9202      	str	r2, [sp, #8]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	9201      	str	r2, [sp, #4]
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f001 fabe 	bl	800b128 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	f004 f9b4 	bl	800df30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009bc8:	e160      	b.n	8009e8c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f964 	bl	8009e98 <USBH_HandleEnum>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f040 8152 	bne.w	8009e82 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d103      	bne.n	8009bf8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2208      	movs	r2, #8
 8009bf4:	701a      	strb	r2, [r3, #0]
 8009bf6:	e002      	b.n	8009bfe <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2207      	movs	r2, #7
 8009bfc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2205      	movs	r2, #5
 8009c02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c12:	2200      	movs	r2, #0
 8009c14:	4619      	mov	r1, r3
 8009c16:	f004 f98b 	bl	800df30 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009c1a:	e132      	b.n	8009e82 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 812f 	beq.w	8009e86 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c2e:	2101      	movs	r1, #1
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2208      	movs	r2, #8
 8009c38:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2205      	movs	r2, #5
 8009c3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c4e:	2200      	movs	r2, #0
 8009c50:	4619      	mov	r1, r3
 8009c52:	f004 f96d 	bl	800df30 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009c56:	e116      	b.n	8009e86 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fcf6 	bl	800a654 <USBH_SetCfg>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d102      	bne.n	8009c74 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2209      	movs	r2, #9
 8009c72:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	f004 f950 	bl	800df30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c90:	e0fc      	b.n	8009e8c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009c98:	f003 0320 	and.w	r3, r3, #32
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00a      	beq.n	8009cb6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fcf9 	bl	800a69a <USBH_SetFeature>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d106      	bne.n	8009cbc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	220a      	movs	r2, #10
 8009cb2:	701a      	strb	r2, [r3, #0]
 8009cb4:	e002      	b.n	8009cbc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	220a      	movs	r2, #10
 8009cba:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	f004 f92c 	bl	800df30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009cd8:	e0d8      	b.n	8009e8c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d03f      	beq.n	8009d64 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009cec:	2300      	movs	r3, #0
 8009cee:	73fb      	strb	r3, [r7, #15]
 8009cf0:	e016      	b.n	8009d20 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009cf2:	7bfa      	ldrb	r2, [r7, #15]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	32de      	adds	r2, #222	; 0xde
 8009cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfc:	791a      	ldrb	r2, [r3, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d108      	bne.n	8009d1a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009d08:	7bfa      	ldrb	r2, [r7, #15]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	32de      	adds	r2, #222	; 0xde
 8009d0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009d18:	e005      	b.n	8009d26 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	73fb      	strb	r3, [r7, #15]
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0e5      	beq.n	8009cf2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d016      	beq.n	8009d5e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	4798      	blx	r3
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d109      	bne.n	8009d56 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2206      	movs	r2, #6
 8009d46:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d4e:	2103      	movs	r1, #3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	4798      	blx	r3
 8009d54:	e006      	b.n	8009d64 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	220d      	movs	r2, #13
 8009d5a:	701a      	strb	r2, [r3, #0]
 8009d5c:	e002      	b.n	8009d64 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	220d      	movs	r2, #13
 8009d62:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2205      	movs	r2, #5
 8009d68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	f004 f8d8 	bl	800df30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d80:	e084      	b.n	8009e8c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d017      	beq.n	8009dbc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	4798      	blx	r3
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d103      	bne.n	8009dac <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	220b      	movs	r2, #11
 8009da8:	701a      	strb	r2, [r3, #0]
 8009daa:	e00a      	b.n	8009dc2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d106      	bne.n	8009dc2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	220d      	movs	r2, #13
 8009db8:	701a      	strb	r2, [r3, #0]
 8009dba:	e002      	b.n	8009dc2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	220d      	movs	r2, #13
 8009dc0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2205      	movs	r2, #5
 8009dc6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	4619      	mov	r1, r3
 8009dda:	f004 f8a9 	bl	800df30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009dde:	e055      	b.n	8009e8c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d04f      	beq.n	8009e8a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
      }
      break;
 8009df6:	e048      	b.n	8009e8a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7ff fcf7 	bl	80097f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d009      	beq.n	8009e24 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d005      	beq.n	8009e3a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e34:	2105      	movs	r1, #5
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d107      	bne.n	8009e56 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff fdb0 	bl	80099b4 <USBH_Start>
 8009e54:	e002      	b.n	8009e5c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f006 fea0 	bl	8010b9c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e70:	2200      	movs	r2, #0
 8009e72:	4619      	mov	r1, r3
 8009e74:	f004 f85c 	bl	800df30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e78:	e008      	b.n	8009e8c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009e7a:	bf00      	nop
 8009e7c:	e006      	b.n	8009e8c <USBH_Process+0x4b8>
      break;
 8009e7e:	bf00      	nop
 8009e80:	e004      	b.n	8009e8c <USBH_Process+0x4b8>
      break;
 8009e82:	bf00      	nop
 8009e84:	e002      	b.n	8009e8c <USBH_Process+0x4b8>
    break;
 8009e86:	bf00      	nop
 8009e88:	e000      	b.n	8009e8c <USBH_Process+0x4b8>
      break;
 8009e8a:	bf00      	nop
  }
  return USBH_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop

08009e98 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af04      	add	r7, sp, #16
 8009e9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	785b      	ldrb	r3, [r3, #1]
 8009eac:	2b07      	cmp	r3, #7
 8009eae:	f200 8208 	bhi.w	800a2c2 <USBH_HandleEnum+0x42a>
 8009eb2:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <USBH_HandleEnum+0x20>)
 8009eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb8:	08009ed9 	.word	0x08009ed9
 8009ebc:	08009f97 	.word	0x08009f97
 8009ec0:	0800a001 	.word	0x0800a001
 8009ec4:	0800a08f 	.word	0x0800a08f
 8009ec8:	0800a0f9 	.word	0x0800a0f9
 8009ecc:	0800a169 	.word	0x0800a169
 8009ed0:	0800a205 	.word	0x0800a205
 8009ed4:	0800a283 	.word	0x0800a283
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009ed8:	2108      	movs	r1, #8
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 faea 	bl	800a4b4 <USBH_Get_DevDesc>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d130      	bne.n	8009f4c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	7919      	ldrb	r1, [r3, #4]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f0e:	b292      	uxth	r2, r2
 8009f10:	9202      	str	r2, [sp, #8]
 8009f12:	2200      	movs	r2, #0
 8009f14:	9201      	str	r2, [sp, #4]
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2280      	movs	r2, #128	; 0x80
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f001 f903 	bl	800b128 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	7959      	ldrb	r1, [r3, #5]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f36:	b292      	uxth	r2, r2
 8009f38:	9202      	str	r2, [sp, #8]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	9201      	str	r2, [sp, #4]
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	4603      	mov	r3, r0
 8009f42:	2200      	movs	r2, #0
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f001 f8ef 	bl	800b128 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f4a:	e1bc      	b.n	800a2c6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	f040 81b9 	bne.w	800a2c6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d903      	bls.n	8009f76 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	220d      	movs	r2, #13
 8009f72:	701a      	strb	r2, [r3, #0]
      break;
 8009f74:	e1a7      	b.n	800a2c6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	795b      	ldrb	r3, [r3, #5]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 f923 	bl	800b1c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	791b      	ldrb	r3, [r3, #4]
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f001 f91d 	bl	800b1c8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	701a      	strb	r2, [r3, #0]
      break;
 8009f94:	e197      	b.n	800a2c6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009f96:	2112      	movs	r1, #18
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fa8b 	bl	800a4b4 <USBH_Get_DevDesc>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d103      	bne.n	8009fb0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2202      	movs	r2, #2
 8009fac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009fae:	e18c      	b.n	800a2ca <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	f040 8189 	bne.w	800a2ca <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d903      	bls.n	8009fda <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	220d      	movs	r2, #13
 8009fd6:	701a      	strb	r2, [r3, #0]
      break;
 8009fd8:	e177      	b.n	800a2ca <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	795b      	ldrb	r3, [r3, #5]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 f8f1 	bl	800b1c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	791b      	ldrb	r3, [r3, #4]
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f001 f8eb 	bl	800b1c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	701a      	strb	r2, [r3, #0]
      break;
 8009ffe:	e164      	b.n	800a2ca <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a000:	2101      	movs	r1, #1
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fb02 	bl	800a60c <USBH_SetAddress>
 800a008:	4603      	mov	r3, r0
 800a00a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d132      	bne.n	800a078 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a012:	2002      	movs	r0, #2
 800a014:	f006 ff51 	bl	8010eba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2203      	movs	r2, #3
 800a024:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	7919      	ldrb	r1, [r3, #4]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a03a:	b292      	uxth	r2, r2
 800a03c:	9202      	str	r2, [sp, #8]
 800a03e:	2200      	movs	r2, #0
 800a040:	9201      	str	r2, [sp, #4]
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	4603      	mov	r3, r0
 800a046:	2280      	movs	r2, #128	; 0x80
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f001 f86d 	bl	800b128 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	7959      	ldrb	r1, [r3, #5]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a062:	b292      	uxth	r2, r2
 800a064:	9202      	str	r2, [sp, #8]
 800a066:	2200      	movs	r2, #0
 800a068:	9201      	str	r2, [sp, #4]
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	4603      	mov	r3, r0
 800a06e:	2200      	movs	r2, #0
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 f859 	bl	800b128 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a076:	e12a      	b.n	800a2ce <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a078:	7bbb      	ldrb	r3, [r7, #14]
 800a07a:	2b03      	cmp	r3, #3
 800a07c:	f040 8127 	bne.w	800a2ce <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	220d      	movs	r2, #13
 800a084:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	705a      	strb	r2, [r3, #1]
      break;
 800a08c:	e11f      	b.n	800a2ce <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a08e:	2109      	movs	r1, #9
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fa37 	bl	800a504 <USBH_Get_CfgDesc>
 800a096:	4603      	mov	r3, r0
 800a098:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a09a:	7bbb      	ldrb	r3, [r7, #14]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d103      	bne.n	800a0a8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2204      	movs	r2, #4
 800a0a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0a6:	e114      	b.n	800a2d2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	f040 8111 	bne.w	800a2d2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d903      	bls.n	800a0d2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	220d      	movs	r2, #13
 800a0ce:	701a      	strb	r2, [r3, #0]
      break;
 800a0d0:	e0ff      	b.n	800a2d2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	795b      	ldrb	r3, [r3, #5]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 f875 	bl	800b1c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	791b      	ldrb	r3, [r3, #4]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f001 f86f 	bl	800b1c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	701a      	strb	r2, [r3, #0]
      break;
 800a0f6:	e0ec      	b.n	800a2d2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f9ff 	bl	800a504 <USBH_Get_CfgDesc>
 800a106:	4603      	mov	r3, r0
 800a108:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a10a:	7bbb      	ldrb	r3, [r7, #14]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d103      	bne.n	800a118 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2205      	movs	r2, #5
 800a114:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a116:	e0de      	b.n	800a2d6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a118:	7bbb      	ldrb	r3, [r7, #14]
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	f040 80db 	bne.w	800a2d6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a126:	3301      	adds	r3, #1
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a136:	2b03      	cmp	r3, #3
 800a138:	d903      	bls.n	800a142 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	220d      	movs	r2, #13
 800a13e:	701a      	strb	r2, [r3, #0]
      break;
 800a140:	e0c9      	b.n	800a2d6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	795b      	ldrb	r3, [r3, #5]
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f001 f83d 	bl	800b1c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	791b      	ldrb	r3, [r3, #4]
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 f837 	bl	800b1c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	701a      	strb	r2, [r3, #0]
      break;
 800a166:	e0b6      	b.n	800a2d6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d036      	beq.n	800a1e0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a17e:	23ff      	movs	r3, #255	; 0xff
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f9e3 	bl	800a54c <USBH_Get_StringDesc>
 800a186:	4603      	mov	r3, r0
 800a188:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d111      	bne.n	800a1b4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2206      	movs	r2, #6
 800a194:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2205      	movs	r2, #5
 800a19a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f003 febf 	bl	800df30 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a1b2:	e092      	b.n	800a2da <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	f040 808f 	bne.w	800a2da <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2206      	movs	r2, #6
 800a1c0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2205      	movs	r2, #5
 800a1c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	4619      	mov	r1, r3
 800a1da:	f003 fea9 	bl	800df30 <osMessagePut>
      break;
 800a1de:	e07c      	b.n	800a2da <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2206      	movs	r2, #6
 800a1e4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2205      	movs	r2, #5
 800a1ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	f003 fe97 	bl	800df30 <osMessagePut>
      break;
 800a202:	e06a      	b.n	800a2da <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d027      	beq.n	800a25e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a21a:	23ff      	movs	r3, #255	; 0xff
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f995 	bl	800a54c <USBH_Get_StringDesc>
 800a222:	4603      	mov	r3, r0
 800a224:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a226:	7bbb      	ldrb	r3, [r7, #14]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d103      	bne.n	800a234 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2207      	movs	r2, #7
 800a230:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a232:	e054      	b.n	800a2de <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a234:	7bbb      	ldrb	r3, [r7, #14]
 800a236:	2b03      	cmp	r3, #3
 800a238:	d151      	bne.n	800a2de <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2207      	movs	r2, #7
 800a23e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2205      	movs	r2, #5
 800a244:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a254:	2200      	movs	r2, #0
 800a256:	4619      	mov	r1, r3
 800a258:	f003 fe6a 	bl	800df30 <osMessagePut>
      break;
 800a25c:	e03f      	b.n	800a2de <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2207      	movs	r2, #7
 800a262:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2205      	movs	r2, #5
 800a268:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a278:	2200      	movs	r2, #0
 800a27a:	4619      	mov	r1, r3
 800a27c:	f003 fe58 	bl	800df30 <osMessagePut>
      break;
 800a280:	e02d      	b.n	800a2de <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d017      	beq.n	800a2bc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a298:	23ff      	movs	r3, #255	; 0xff
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f956 	bl	800a54c <USBH_Get_StringDesc>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d102      	bne.n	800a2b0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a2ae:	e018      	b.n	800a2e2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d115      	bne.n	800a2e2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ba:	e012      	b.n	800a2e2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73fb      	strb	r3, [r7, #15]
      break;
 800a2c0:	e00f      	b.n	800a2e2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800a2c2:	bf00      	nop
 800a2c4:	e00e      	b.n	800a2e4 <USBH_HandleEnum+0x44c>
      break;
 800a2c6:	bf00      	nop
 800a2c8:	e00c      	b.n	800a2e4 <USBH_HandleEnum+0x44c>
      break;
 800a2ca:	bf00      	nop
 800a2cc:	e00a      	b.n	800a2e4 <USBH_HandleEnum+0x44c>
      break;
 800a2ce:	bf00      	nop
 800a2d0:	e008      	b.n	800a2e4 <USBH_HandleEnum+0x44c>
      break;
 800a2d2:	bf00      	nop
 800a2d4:	e006      	b.n	800a2e4 <USBH_HandleEnum+0x44c>
      break;
 800a2d6:	bf00      	nop
 800a2d8:	e004      	b.n	800a2e4 <USBH_HandleEnum+0x44c>
      break;
 800a2da:	bf00      	nop
 800a2dc:	e002      	b.n	800a2e4 <USBH_HandleEnum+0x44c>
      break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <USBH_HandleEnum+0x44c>
      break;
 800a2e2:	bf00      	nop
  }
  return Status;
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop

0800a2f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a302:	bf00      	nop
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f804 	bl	800a332 <USBH_HandleSof>
}
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b082      	sub	sp, #8
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b0b      	cmp	r3, #11
 800a342:	d10a      	bne.n	800a35a <USBH_HandleSof+0x28>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d005      	beq.n	800a35a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	4798      	blx	r3
  }
}
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a386:	2200      	movs	r2, #0
 800a388:	4619      	mov	r1, r3
 800a38a:	f003 fdd1 	bl	800df30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a38e:	bf00      	nop
}
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a3a6:	bf00      	nop
}
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	f003 fda1 	bl	800df30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f006 fbda 	bl	8010bd2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	791b      	ldrb	r3, [r3, #4]
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fecf 	bl	800b1c8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	795b      	ldrb	r3, [r3, #5]
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fec9 	bl	800b1c8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a44a:	2200      	movs	r2, #0
 800a44c:	4619      	mov	r1, r3
 800a44e:	f003 fd6f 	bl	800df30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800a46a:	f107 030c 	add.w	r3, r7, #12
 800a46e:	f04f 32ff 	mov.w	r2, #4294967295
 800a472:	4618      	mov	r0, r3
 800a474:	f003 fd9c 	bl	800dfb0 <osMessageGet>
    if (event.status == osEventMessage)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b10      	cmp	r3, #16
 800a47c:	d1f2      	bne.n	800a464 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7ff faa8 	bl	80099d4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a484:	e7ee      	b.n	800a464 <USBH_Process_OS+0x8>

0800a486 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	f003 fd43 	bl	800df30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af02      	add	r7, sp, #8
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a4c6:	78fb      	ldrb	r3, [r7, #3]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f864 	bl	800a5a2 <USBH_GetDescriptor>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	73fb      	strb	r3, [r7, #15]
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a4f0:	78fa      	ldrb	r2, [r7, #3]
 800a4f2:	b292      	uxth	r2, r2
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	f000 f918 	bl	800a72a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af02      	add	r7, sp, #8
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	331c      	adds	r3, #28
 800a514:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a516:	887b      	ldrh	r3, [r7, #2]
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a520:	2100      	movs	r1, #0
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f83d 	bl	800a5a2 <USBH_GetDescriptor>
 800a528:	4603      	mov	r3, r0
 800a52a:	72fb      	strb	r3, [r7, #11]
 800a52c:	7afb      	ldrb	r3, [r7, #11]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d107      	bne.n	800a542 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a538:	887a      	ldrh	r2, [r7, #2]
 800a53a:	68f9      	ldr	r1, [r7, #12]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 f964 	bl	800a80a <USBH_ParseCfgDesc>
  }

  return status;
 800a542:	7afb      	ldrb	r3, [r7, #11]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b088      	sub	sp, #32
 800a550:	af02      	add	r7, sp, #8
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	461a      	mov	r2, r3
 800a558:	460b      	mov	r3, r1
 800a55a:	72fb      	strb	r3, [r7, #11]
 800a55c:	4613      	mov	r3, r2
 800a55e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a560:	7afb      	ldrb	r3, [r7, #11]
 800a562:	b29b      	uxth	r3, r3
 800a564:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a568:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a570:	893b      	ldrh	r3, [r7, #8]
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	460b      	mov	r3, r1
 800a576:	2100      	movs	r1, #0
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 f812 	bl	800a5a2 <USBH_GetDescriptor>
 800a57e:	4603      	mov	r3, r0
 800a580:	75fb      	strb	r3, [r7, #23]
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d107      	bne.n	800a598 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a58e:	893a      	ldrh	r2, [r7, #8]
 800a590:	6879      	ldr	r1, [r7, #4]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 fa37 	bl	800aa06 <USBH_ParseStringDesc>
  }

  return status;
 800a598:	7dfb      	ldrb	r3, [r7, #23]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	607b      	str	r3, [r7, #4]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	72fb      	strb	r3, [r7, #11]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	789b      	ldrb	r3, [r3, #2]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d11c      	bne.n	800a5f6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a5bc:	7afb      	ldrb	r3, [r7, #11]
 800a5be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2206      	movs	r2, #6
 800a5cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	893a      	ldrh	r2, [r7, #8]
 800a5d2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a5d4:	893b      	ldrh	r3, [r7, #8]
 800a5d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a5da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5de:	d104      	bne.n	800a5ea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f240 4209 	movw	r2, #1033	; 0x409
 800a5e6:	829a      	strh	r2, [r3, #20]
 800a5e8:	e002      	b.n	800a5f0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	8b3a      	ldrh	r2, [r7, #24]
 800a5f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a5f6:	8b3b      	ldrh	r3, [r7, #24]
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f000 fa50 	bl	800aaa2 <USBH_CtlReq>
 800a602:	4603      	mov	r3, r0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	789b      	ldrb	r3, [r3, #2]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d10f      	bne.n	800a640 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2205      	movs	r2, #5
 800a62a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a62c:	78fb      	ldrb	r3, [r7, #3]
 800a62e:	b29a      	uxth	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a640:	2200      	movs	r2, #0
 800a642:	2100      	movs	r1, #0
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fa2c 	bl	800aaa2 <USBH_CtlReq>
 800a64a:	4603      	mov	r3, r0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	789b      	ldrb	r3, [r3, #2]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d10e      	bne.n	800a686 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2209      	movs	r2, #9
 800a672:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	887a      	ldrh	r2, [r7, #2]
 800a678:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a686:	2200      	movs	r2, #0
 800a688:	2100      	movs	r1, #0
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fa09 	bl	800aaa2 <USBH_CtlReq>
 800a690:	4603      	mov	r3, r0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b082      	sub	sp, #8
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	789b      	ldrb	r3, [r3, #2]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d10f      	bne.n	800a6ce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2203      	movs	r2, #3
 800a6b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a6ba:	78fb      	ldrb	r3, [r7, #3]
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f9e5 	bl	800aaa2 <USBH_CtlReq>
 800a6d8:	4603      	mov	r3, r0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b082      	sub	sp, #8
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	789b      	ldrb	r3, [r3, #2]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d10f      	bne.n	800a716 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a708:	78fb      	ldrb	r3, [r7, #3]
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a716:	2200      	movs	r2, #0
 800a718:	2100      	movs	r1, #0
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f9c1 	bl	800aaa2 <USBH_CtlReq>
 800a720:	4603      	mov	r3, r0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b085      	sub	sp, #20
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	4613      	mov	r3, r2
 800a736:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	781a      	ldrb	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	785a      	ldrb	r2, [r3, #1]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	3302      	adds	r3, #2
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	b29a      	uxth	r2, r3
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	3303      	adds	r3, #3
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	b29b      	uxth	r3, r3
 800a758:	021b      	lsls	r3, r3, #8
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	4313      	orrs	r3, r2
 800a75e:	b29a      	uxth	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	791a      	ldrb	r2, [r3, #4]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	795a      	ldrb	r2, [r3, #5]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	799a      	ldrb	r2, [r3, #6]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	79da      	ldrb	r2, [r3, #7]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a784:	88fb      	ldrh	r3, [r7, #6]
 800a786:	2b08      	cmp	r3, #8
 800a788:	d939      	bls.n	800a7fe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	3308      	adds	r3, #8
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	b29a      	uxth	r2, r3
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	3309      	adds	r3, #9
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	b29b      	uxth	r3, r3
 800a79a:	021b      	lsls	r3, r3, #8
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	330a      	adds	r3, #10
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	330b      	adds	r3, #11
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	021b      	lsls	r3, r3, #8
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	330c      	adds	r3, #12
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	330d      	adds	r3, #13
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	021b      	lsls	r3, r3, #8
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	7b9a      	ldrb	r2, [r3, #14]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	7bda      	ldrb	r2, [r3, #15]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	7c1a      	ldrb	r2, [r3, #16]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	7c5a      	ldrb	r2, [r3, #17]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	745a      	strb	r2, [r3, #17]
  }
}
 800a7fe:	bf00      	nop
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b08a      	sub	sp, #40	; 0x28
 800a80e:	af00      	add	r7, sp, #0
 800a810:	60f8      	str	r0, [r7, #12]
 800a812:	60b9      	str	r1, [r7, #8]
 800a814:	4613      	mov	r3, r2
 800a816:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	781a      	ldrb	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	785a      	ldrb	r2, [r3, #1]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	3302      	adds	r3, #2
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	b29a      	uxth	r2, r3
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	3303      	adds	r3, #3
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	021b      	lsls	r3, r3, #8
 800a84e:	b29b      	uxth	r3, r3
 800a850:	4313      	orrs	r3, r2
 800a852:	b29a      	uxth	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	791a      	ldrb	r2, [r3, #4]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	795a      	ldrb	r2, [r3, #5]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	799a      	ldrb	r2, [r3, #6]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	79da      	ldrb	r2, [r3, #7]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	7a1a      	ldrb	r2, [r3, #8]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a880:	88fb      	ldrh	r3, [r7, #6]
 800a882:	2b09      	cmp	r3, #9
 800a884:	d95f      	bls.n	800a946 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a886:	2309      	movs	r3, #9
 800a888:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a88e:	e051      	b.n	800a934 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a890:	f107 0316 	add.w	r3, r7, #22
 800a894:	4619      	mov	r1, r3
 800a896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a898:	f000 f8e8 	bl	800aa6c <USBH_GetNextDesc>
 800a89c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	785b      	ldrb	r3, [r3, #1]
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d146      	bne.n	800a934 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a8a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8aa:	221a      	movs	r2, #26
 800a8ac:	fb02 f303 	mul.w	r3, r2, r3
 800a8b0:	3308      	adds	r3, #8
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	3302      	adds	r3, #2
 800a8b8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a8ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8bc:	69f8      	ldr	r0, [r7, #28]
 800a8be:	f000 f846 	bl	800a94e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a8cc:	e022      	b.n	800a914 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a8ce:	f107 0316 	add.w	r3, r7, #22
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8d6:	f000 f8c9 	bl	800aa6c <USBH_GetNextDesc>
 800a8da:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	785b      	ldrb	r3, [r3, #1]
 800a8e0:	2b05      	cmp	r3, #5
 800a8e2:	d117      	bne.n	800a914 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a8e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	00d2      	lsls	r2, r2, #3
 800a8f0:	211a      	movs	r1, #26
 800a8f2:	fb01 f303 	mul.w	r3, r1, r3
 800a8f6:	4413      	add	r3, r2
 800a8f8:	3308      	adds	r3, #8
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	3304      	adds	r3, #4
 800a900:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a904:	69b8      	ldr	r0, [r7, #24]
 800a906:	f000 f851 	bl	800a9ac <USBH_ParseEPDesc>
            ep_ix++;
 800a90a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a90e:	3301      	adds	r3, #1
 800a910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	791b      	ldrb	r3, [r3, #4]
 800a918:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d204      	bcs.n	800a92a <USBH_ParseCfgDesc+0x120>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	885a      	ldrh	r2, [r3, #2]
 800a924:	8afb      	ldrh	r3, [r7, #22]
 800a926:	429a      	cmp	r2, r3
 800a928:	d8d1      	bhi.n	800a8ce <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a92a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a92e:	3301      	adds	r3, #1
 800a930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d804      	bhi.n	800a946 <USBH_ParseCfgDesc+0x13c>
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	885a      	ldrh	r2, [r3, #2]
 800a940:	8afb      	ldrh	r3, [r7, #22]
 800a942:	429a      	cmp	r2, r3
 800a944:	d8a4      	bhi.n	800a890 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a946:	bf00      	nop
 800a948:	3728      	adds	r7, #40	; 0x28
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a94e:	b480      	push	{r7}
 800a950:	b083      	sub	sp, #12
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781a      	ldrb	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	785a      	ldrb	r2, [r3, #1]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	789a      	ldrb	r2, [r3, #2]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	78da      	ldrb	r2, [r3, #3]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	791a      	ldrb	r2, [r3, #4]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	795a      	ldrb	r2, [r3, #5]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	799a      	ldrb	r2, [r3, #6]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	79da      	ldrb	r2, [r3, #7]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	7a1a      	ldrb	r2, [r3, #8]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	721a      	strb	r2, [r3, #8]
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	781a      	ldrb	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	785a      	ldrb	r2, [r3, #1]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	789a      	ldrb	r2, [r3, #2]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	78da      	ldrb	r2, [r3, #3]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	3304      	adds	r3, #4
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	3305      	adds	r3, #5
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	021b      	lsls	r3, r3, #8
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	799a      	ldrb	r2, [r3, #6]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	719a      	strb	r2, [r3, #6]
}
 800a9fa:	bf00      	nop
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b087      	sub	sp, #28
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	4613      	mov	r3, r2
 800aa12:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3301      	adds	r3, #1
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d120      	bne.n	800aa60 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	1e9a      	subs	r2, r3, #2
 800aa24:	88fb      	ldrh	r3, [r7, #6]
 800aa26:	4293      	cmp	r3, r2
 800aa28:	bf28      	it	cs
 800aa2a:	4613      	movcs	r3, r2
 800aa2c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3302      	adds	r3, #2
 800aa32:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aa34:	2300      	movs	r3, #0
 800aa36:	82fb      	strh	r3, [r7, #22]
 800aa38:	e00b      	b.n	800aa52 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aa3a:	8afb      	ldrh	r3, [r7, #22]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	4413      	add	r3, r2
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aa4c:	8afb      	ldrh	r3, [r7, #22]
 800aa4e:	3302      	adds	r3, #2
 800aa50:	82fb      	strh	r3, [r7, #22]
 800aa52:	8afa      	ldrh	r2, [r7, #22]
 800aa54:	8abb      	ldrh	r3, [r7, #20]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d3ef      	bcc.n	800aa3a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	701a      	strb	r2, [r3, #0]
  }
}
 800aa60:	bf00      	nop
 800aa62:	371c      	adds	r7, #28
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	881a      	ldrh	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	4413      	add	r3, r2
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4413      	add	r3, r2
 800aa92:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa94:	68fb      	ldr	r3, [r7, #12]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b086      	sub	sp, #24
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	60b9      	str	r1, [r7, #8]
 800aaac:	4613      	mov	r3, r2
 800aaae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aab0:	2301      	movs	r3, #1
 800aab2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	789b      	ldrb	r3, [r3, #2]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d002      	beq.n	800aac2 <USBH_CtlReq+0x20>
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d01d      	beq.n	800aafc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800aac0:	e043      	b.n	800ab4a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	88fa      	ldrh	r2, [r7, #6]
 800aacc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2201      	movs	r2, #1
 800aad2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2202      	movs	r2, #2
 800aad8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aada:	2301      	movs	r3, #1
 800aadc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2203      	movs	r2, #3
 800aae2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f003 fa1b 	bl	800df30 <osMessagePut>
      break;
 800aafa:	e026      	b.n	800ab4a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f000 f829 	bl	800ab54 <USBH_HandleControl>
 800ab02:	4603      	mov	r3, r0
 800ab04:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <USBH_CtlReq+0x70>
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d106      	bne.n	800ab20 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2201      	movs	r2, #1
 800ab16:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	761a      	strb	r2, [r3, #24]
 800ab1e:	e005      	b.n	800ab2c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d102      	bne.n	800ab2c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2203      	movs	r2, #3
 800ab30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab40:	2200      	movs	r2, #0
 800ab42:	4619      	mov	r1, r3
 800ab44:	f003 f9f4 	bl	800df30 <osMessagePut>
      break;
 800ab48:	bf00      	nop
  }
  return status;
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3718      	adds	r7, #24
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af02      	add	r7, sp, #8
 800ab5a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7e1b      	ldrb	r3, [r3, #24]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	2b0a      	cmp	r3, #10
 800ab6c:	f200 822b 	bhi.w	800afc6 <USBH_HandleControl+0x472>
 800ab70:	a201      	add	r2, pc, #4	; (adr r2, 800ab78 <USBH_HandleControl+0x24>)
 800ab72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab76:	bf00      	nop
 800ab78:	0800aba5 	.word	0x0800aba5
 800ab7c:	0800abbf 	.word	0x0800abbf
 800ab80:	0800ac61 	.word	0x0800ac61
 800ab84:	0800ac87 	.word	0x0800ac87
 800ab88:	0800ad13 	.word	0x0800ad13
 800ab8c:	0800ad3f 	.word	0x0800ad3f
 800ab90:	0800ae01 	.word	0x0800ae01
 800ab94:	0800ae23 	.word	0x0800ae23
 800ab98:	0800aeb5 	.word	0x0800aeb5
 800ab9c:	0800aedd 	.word	0x0800aedd
 800aba0:	0800af6f 	.word	0x0800af6f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f103 0110 	add.w	r1, r3, #16
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	795b      	ldrb	r3, [r3, #5]
 800abae:	461a      	mov	r2, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fa19 	bl	800afe8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2202      	movs	r2, #2
 800abba:	761a      	strb	r2, [r3, #24]
      break;
 800abbc:	e20e      	b.n	800afdc <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	795b      	ldrb	r3, [r3, #5]
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f006 f8f1 	bl	8010dac <USBH_LL_GetURBState>
 800abca:	4603      	mov	r3, r0
 800abcc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d12c      	bne.n	800ac2e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	7c1b      	ldrb	r3, [r3, #16]
 800abd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800abdc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	8adb      	ldrh	r3, [r3, #22]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800abe6:	7b7b      	ldrb	r3, [r7, #13]
 800abe8:	2b80      	cmp	r3, #128	; 0x80
 800abea:	d103      	bne.n	800abf4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2203      	movs	r2, #3
 800abf0:	761a      	strb	r2, [r3, #24]
 800abf2:	e00d      	b.n	800ac10 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2205      	movs	r2, #5
 800abf8:	761a      	strb	r2, [r3, #24]
 800abfa:	e009      	b.n	800ac10 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800abfc:	7b7b      	ldrb	r3, [r7, #13]
 800abfe:	2b80      	cmp	r3, #128	; 0x80
 800ac00:	d103      	bne.n	800ac0a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2209      	movs	r2, #9
 800ac06:	761a      	strb	r2, [r3, #24]
 800ac08:	e002      	b.n	800ac10 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2207      	movs	r2, #7
 800ac0e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2203      	movs	r2, #3
 800ac14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac24:	2200      	movs	r2, #0
 800ac26:	4619      	mov	r1, r3
 800ac28:	f003 f982 	bl	800df30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ac2c:	e1cd      	b.n	800afca <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ac2e:	7bbb      	ldrb	r3, [r7, #14]
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	d003      	beq.n	800ac3c <USBH_HandleControl+0xe8>
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	f040 81c7 	bne.w	800afca <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	220b      	movs	r2, #11
 800ac40:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2203      	movs	r2, #3
 800ac46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac56:	2200      	movs	r2, #0
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f003 f969 	bl	800df30 <osMessagePut>
      break;
 800ac5e:	e1b4      	b.n	800afca <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6899      	ldr	r1, [r3, #8]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	899a      	ldrh	r2, [r3, #12]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	791b      	ldrb	r3, [r3, #4]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f9f4 	bl	800b066 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2204      	movs	r2, #4
 800ac82:	761a      	strb	r2, [r3, #24]
      break;
 800ac84:	e1aa      	b.n	800afdc <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	791b      	ldrb	r3, [r3, #4]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f006 f88d 	bl	8010dac <USBH_LL_GetURBState>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d110      	bne.n	800acbe <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2209      	movs	r2, #9
 800aca0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2203      	movs	r2, #3
 800aca6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acb6:	2200      	movs	r2, #0
 800acb8:	4619      	mov	r1, r3
 800acba:	f003 f939 	bl	800df30 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	2b05      	cmp	r3, #5
 800acc2:	d110      	bne.n	800ace6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800acc4:	2303      	movs	r3, #3
 800acc6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2203      	movs	r2, #3
 800accc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acdc:	2200      	movs	r2, #0
 800acde:	4619      	mov	r1, r3
 800ace0:	f003 f926 	bl	800df30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ace4:	e173      	b.n	800afce <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ace6:	7bbb      	ldrb	r3, [r7, #14]
 800ace8:	2b04      	cmp	r3, #4
 800acea:	f040 8170 	bne.w	800afce <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	220b      	movs	r2, #11
 800acf2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2203      	movs	r2, #3
 800acf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad08:	2200      	movs	r2, #0
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	f003 f910 	bl	800df30 <osMessagePut>
      break;
 800ad10:	e15d      	b.n	800afce <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6899      	ldr	r1, [r3, #8]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	899a      	ldrh	r2, [r3, #12]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	7958      	ldrb	r0, [r3, #5]
 800ad1e:	2301      	movs	r3, #1
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	4603      	mov	r3, r0
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f979 	bl	800b01c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2206      	movs	r2, #6
 800ad3a:	761a      	strb	r2, [r3, #24]
      break;
 800ad3c:	e14e      	b.n	800afdc <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	795b      	ldrb	r3, [r3, #5]
 800ad42:	4619      	mov	r1, r3
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f006 f831 	bl	8010dac <USBH_LL_GetURBState>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d111      	bne.n	800ad78 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2207      	movs	r2, #7
 800ad58:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2203      	movs	r2, #3
 800ad5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad6e:	2200      	movs	r2, #0
 800ad70:	4619      	mov	r1, r3
 800ad72:	f003 f8dd 	bl	800df30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ad76:	e12c      	b.n	800afd2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	2b05      	cmp	r3, #5
 800ad7c:	d113      	bne.n	800ada6 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	220c      	movs	r2, #12
 800ad82:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ad84:	2303      	movs	r3, #3
 800ad86:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2203      	movs	r2, #3
 800ad8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	4619      	mov	r1, r3
 800ada0:	f003 f8c6 	bl	800df30 <osMessagePut>
      break;
 800ada4:	e115      	b.n	800afd2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d111      	bne.n	800add0 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2205      	movs	r2, #5
 800adb0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2203      	movs	r2, #3
 800adb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800adc6:	2200      	movs	r2, #0
 800adc8:	4619      	mov	r1, r3
 800adca:	f003 f8b1 	bl	800df30 <osMessagePut>
      break;
 800adce:	e100      	b.n	800afd2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800add0:	7bbb      	ldrb	r3, [r7, #14]
 800add2:	2b04      	cmp	r3, #4
 800add4:	f040 80fd 	bne.w	800afd2 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	220b      	movs	r2, #11
 800addc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800adde:	2302      	movs	r3, #2
 800ade0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2203      	movs	r2, #3
 800ade6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800adf6:	2200      	movs	r2, #0
 800adf8:	4619      	mov	r1, r3
 800adfa:	f003 f899 	bl	800df30 <osMessagePut>
      break;
 800adfe:	e0e8      	b.n	800afd2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	791b      	ldrb	r3, [r3, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	2100      	movs	r1, #0
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f92c 	bl	800b066 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2208      	movs	r2, #8
 800ae1e:	761a      	strb	r2, [r3, #24]

      break;
 800ae20:	e0dc      	b.n	800afdc <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	791b      	ldrb	r3, [r3, #4]
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f005 ffbf 	bl	8010dac <USBH_LL_GetURBState>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d113      	bne.n	800ae60 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	220d      	movs	r2, #13
 800ae3c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2203      	movs	r2, #3
 800ae46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae56:	2200      	movs	r2, #0
 800ae58:	4619      	mov	r1, r3
 800ae5a:	f003 f869 	bl	800df30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae5e:	e0ba      	b.n	800afd6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
 800ae62:	2b04      	cmp	r3, #4
 800ae64:	d111      	bne.n	800ae8a <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	220b      	movs	r2, #11
 800ae6a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2203      	movs	r2, #3
 800ae70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae80:	2200      	movs	r2, #0
 800ae82:	4619      	mov	r1, r3
 800ae84:	f003 f854 	bl	800df30 <osMessagePut>
      break;
 800ae88:	e0a5      	b.n	800afd6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	2b05      	cmp	r3, #5
 800ae8e:	f040 80a2 	bne.w	800afd6 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800ae92:	2303      	movs	r3, #3
 800ae94:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2203      	movs	r2, #3
 800ae9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aeaa:	2200      	movs	r2, #0
 800aeac:	4619      	mov	r1, r3
 800aeae:	f003 f83f 	bl	800df30 <osMessagePut>
      break;
 800aeb2:	e090      	b.n	800afd6 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	795a      	ldrb	r2, [r3, #5]
 800aeb8:	2301      	movs	r3, #1
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	4613      	mov	r3, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	2100      	movs	r1, #0
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f8aa 	bl	800b01c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aece:	b29a      	uxth	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	220a      	movs	r2, #10
 800aed8:	761a      	strb	r2, [r3, #24]
      break;
 800aeda:	e07f      	b.n	800afdc <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	795b      	ldrb	r3, [r3, #5]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f005 ff62 	bl	8010dac <USBH_LL_GetURBState>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d113      	bne.n	800af1a <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	220d      	movs	r2, #13
 800aefa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2203      	movs	r2, #3
 800af00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af10:	2200      	movs	r2, #0
 800af12:	4619      	mov	r1, r3
 800af14:	f003 f80c 	bl	800df30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af18:	e05f      	b.n	800afda <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af1a:	7bbb      	ldrb	r3, [r7, #14]
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d111      	bne.n	800af44 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2209      	movs	r2, #9
 800af24:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2203      	movs	r2, #3
 800af2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af3a:	2200      	movs	r2, #0
 800af3c:	4619      	mov	r1, r3
 800af3e:	f002 fff7 	bl	800df30 <osMessagePut>
      break;
 800af42:	e04a      	b.n	800afda <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	2b04      	cmp	r3, #4
 800af48:	d147      	bne.n	800afda <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	220b      	movs	r2, #11
 800af4e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2203      	movs	r2, #3
 800af54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af64:	2200      	movs	r2, #0
 800af66:	4619      	mov	r1, r3
 800af68:	f002 ffe2 	bl	800df30 <osMessagePut>
      break;
 800af6c:	e035      	b.n	800afda <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7e5b      	ldrb	r3, [r3, #25]
 800af72:	3301      	adds	r3, #1
 800af74:	b2da      	uxtb	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	765a      	strb	r2, [r3, #25]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	7e5b      	ldrb	r3, [r3, #25]
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d806      	bhi.n	800af90 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800af8e:	e025      	b.n	800afdc <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af96:	2106      	movs	r1, #6
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	795b      	ldrb	r3, [r3, #5]
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f90d 	bl	800b1c8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	791b      	ldrb	r3, [r3, #4]
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f907 	bl	800b1c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800afc0:	2302      	movs	r3, #2
 800afc2:	73fb      	strb	r3, [r7, #15]
      break;
 800afc4:	e00a      	b.n	800afdc <USBH_HandleControl+0x488>

    default:
      break;
 800afc6:	bf00      	nop
 800afc8:	e008      	b.n	800afdc <USBH_HandleControl+0x488>
      break;
 800afca:	bf00      	nop
 800afcc:	e006      	b.n	800afdc <USBH_HandleControl+0x488>
      break;
 800afce:	bf00      	nop
 800afd0:	e004      	b.n	800afdc <USBH_HandleControl+0x488>
      break;
 800afd2:	bf00      	nop
 800afd4:	e002      	b.n	800afdc <USBH_HandleControl+0x488>
      break;
 800afd6:	bf00      	nop
 800afd8:	e000      	b.n	800afdc <USBH_HandleControl+0x488>
      break;
 800afda:	bf00      	nop
  }

  return status;
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop

0800afe8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af04      	add	r7, sp, #16
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	4613      	mov	r3, r2
 800aff4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aff6:	79f9      	ldrb	r1, [r7, #7]
 800aff8:	2300      	movs	r3, #0
 800affa:	9303      	str	r3, [sp, #12]
 800affc:	2308      	movs	r3, #8
 800affe:	9302      	str	r3, [sp, #8]
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	9301      	str	r3, [sp, #4]
 800b004:	2300      	movs	r3, #0
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	2300      	movs	r3, #0
 800b00a:	2200      	movs	r2, #0
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f005 fe9c 	bl	8010d4a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af04      	add	r7, sp, #16
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	4611      	mov	r1, r2
 800b028:	461a      	mov	r2, r3
 800b02a:	460b      	mov	r3, r1
 800b02c:	80fb      	strh	r3, [r7, #6]
 800b02e:	4613      	mov	r3, r2
 800b030:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b03c:	2300      	movs	r3, #0
 800b03e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b040:	7979      	ldrb	r1, [r7, #5]
 800b042:	7e3b      	ldrb	r3, [r7, #24]
 800b044:	9303      	str	r3, [sp, #12]
 800b046:	88fb      	ldrh	r3, [r7, #6]
 800b048:	9302      	str	r3, [sp, #8]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	2301      	movs	r3, #1
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	2300      	movs	r3, #0
 800b054:	2200      	movs	r2, #0
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f005 fe77 	bl	8010d4a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b088      	sub	sp, #32
 800b06a:	af04      	add	r7, sp, #16
 800b06c:	60f8      	str	r0, [r7, #12]
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	4611      	mov	r1, r2
 800b072:	461a      	mov	r2, r3
 800b074:	460b      	mov	r3, r1
 800b076:	80fb      	strh	r3, [r7, #6]
 800b078:	4613      	mov	r3, r2
 800b07a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b07c:	7979      	ldrb	r1, [r7, #5]
 800b07e:	2300      	movs	r3, #0
 800b080:	9303      	str	r3, [sp, #12]
 800b082:	88fb      	ldrh	r3, [r7, #6]
 800b084:	9302      	str	r3, [sp, #8]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	2301      	movs	r3, #1
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	2300      	movs	r3, #0
 800b090:	2201      	movs	r2, #1
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f005 fe59 	bl	8010d4a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b098:	2300      	movs	r3, #0

}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b088      	sub	sp, #32
 800b0a6:	af04      	add	r7, sp, #16
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	80fb      	strh	r3, [r7, #6]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0c6:	7979      	ldrb	r1, [r7, #5]
 800b0c8:	7e3b      	ldrb	r3, [r7, #24]
 800b0ca:	9303      	str	r3, [sp, #12]
 800b0cc:	88fb      	ldrh	r3, [r7, #6]
 800b0ce:	9302      	str	r3, [sp, #8]
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	9301      	str	r3, [sp, #4]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	2302      	movs	r3, #2
 800b0da:	2200      	movs	r2, #0
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f005 fe34 	bl	8010d4a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af04      	add	r7, sp, #16
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	80fb      	strh	r3, [r7, #6]
 800b0fe:	4613      	mov	r3, r2
 800b100:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b102:	7979      	ldrb	r1, [r7, #5]
 800b104:	2300      	movs	r3, #0
 800b106:	9303      	str	r3, [sp, #12]
 800b108:	88fb      	ldrh	r3, [r7, #6]
 800b10a:	9302      	str	r3, [sp, #8]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	9301      	str	r3, [sp, #4]
 800b110:	2301      	movs	r3, #1
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	2302      	movs	r3, #2
 800b116:	2201      	movs	r2, #1
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f005 fe16 	bl	8010d4a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af04      	add	r7, sp, #16
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	4608      	mov	r0, r1
 800b132:	4611      	mov	r1, r2
 800b134:	461a      	mov	r2, r3
 800b136:	4603      	mov	r3, r0
 800b138:	70fb      	strb	r3, [r7, #3]
 800b13a:	460b      	mov	r3, r1
 800b13c:	70bb      	strb	r3, [r7, #2]
 800b13e:	4613      	mov	r3, r2
 800b140:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b142:	7878      	ldrb	r0, [r7, #1]
 800b144:	78ba      	ldrb	r2, [r7, #2]
 800b146:	78f9      	ldrb	r1, [r7, #3]
 800b148:	8b3b      	ldrh	r3, [r7, #24]
 800b14a:	9302      	str	r3, [sp, #8]
 800b14c:	7d3b      	ldrb	r3, [r7, #20]
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	7c3b      	ldrb	r3, [r7, #16]
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	4603      	mov	r3, r0
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f005 fda9 	bl	8010cae <USBH_LL_OpenPipe>

  return USBH_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	460b      	mov	r3, r1
 800b170:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b172:	78fb      	ldrb	r3, [r7, #3]
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f005 fdc8 	bl	8010d0c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	460b      	mov	r3, r1
 800b190:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f836 	bl	800b204 <USBH_GetFreePipe>
 800b198:	4603      	mov	r3, r0
 800b19a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b19c:	89fb      	ldrh	r3, [r7, #14]
 800b19e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d00a      	beq.n	800b1bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b1a6:	78fa      	ldrb	r2, [r7, #3]
 800b1a8:	89fb      	ldrh	r3, [r7, #14]
 800b1aa:	f003 030f 	and.w	r3, r3, #15
 800b1ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	33e0      	adds	r3, #224	; 0xe0
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	440b      	add	r3, r1
 800b1ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b1bc:	89fb      	ldrh	r3, [r7, #14]
 800b1be:	b2db      	uxtb	r3, r3
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b1d4:	78fb      	ldrb	r3, [r7, #3]
 800b1d6:	2b0a      	cmp	r3, #10
 800b1d8:	d80d      	bhi.n	800b1f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b1da:	78fb      	ldrb	r3, [r7, #3]
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	33e0      	adds	r3, #224	; 0xe0
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	685a      	ldr	r2, [r3, #4]
 800b1e6:	78fb      	ldrb	r3, [r7, #3]
 800b1e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b1ec:	6879      	ldr	r1, [r7, #4]
 800b1ee:	33e0      	adds	r3, #224	; 0xe0
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	440b      	add	r3, r1
 800b1f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]
 800b214:	e00f      	b.n	800b236 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b216:	7bfb      	ldrb	r3, [r7, #15]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	33e0      	adds	r3, #224	; 0xe0
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b226:	2b00      	cmp	r3, #0
 800b228:	d102      	bne.n	800b230 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	e007      	b.n	800b240 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	3301      	adds	r3, #1
 800b234:	73fb      	strb	r3, [r7, #15]
 800b236:	7bfb      	ldrb	r3, [r7, #15]
 800b238:	2b0a      	cmp	r3, #10
 800b23a:	d9ec      	bls.n	800b216 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b23c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	4603      	mov	r3, r0
 800b254:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b256:	79fb      	ldrb	r3, [r7, #7]
 800b258:	4a08      	ldr	r2, [pc, #32]	; (800b27c <disk_status+0x30>)
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	79fa      	ldrb	r2, [r7, #7]
 800b264:	4905      	ldr	r1, [pc, #20]	; (800b27c <disk_status+0x30>)
 800b266:	440a      	add	r2, r1
 800b268:	7a12      	ldrb	r2, [r2, #8]
 800b26a:	4610      	mov	r0, r2
 800b26c:	4798      	blx	r3
 800b26e:	4603      	mov	r3, r0
 800b270:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b272:	7bfb      	ldrb	r3, [r7, #15]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	200003a4 	.word	0x200003a4

0800b280 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	4603      	mov	r3, r0
 800b288:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b28e:	79fb      	ldrb	r3, [r7, #7]
 800b290:	4a0d      	ldr	r2, [pc, #52]	; (800b2c8 <disk_initialize+0x48>)
 800b292:	5cd3      	ldrb	r3, [r2, r3]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d111      	bne.n	800b2bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b298:	79fb      	ldrb	r3, [r7, #7]
 800b29a:	4a0b      	ldr	r2, [pc, #44]	; (800b2c8 <disk_initialize+0x48>)
 800b29c:	2101      	movs	r1, #1
 800b29e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b2a0:	79fb      	ldrb	r3, [r7, #7]
 800b2a2:	4a09      	ldr	r2, [pc, #36]	; (800b2c8 <disk_initialize+0x48>)
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	79fa      	ldrb	r2, [r7, #7]
 800b2ae:	4906      	ldr	r1, [pc, #24]	; (800b2c8 <disk_initialize+0x48>)
 800b2b0:	440a      	add	r2, r1
 800b2b2:	7a12      	ldrb	r2, [r2, #8]
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	4798      	blx	r3
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200003a4 	.word	0x200003a4

0800b2cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b2cc:	b590      	push	{r4, r7, lr}
 800b2ce:	b087      	sub	sp, #28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	607a      	str	r2, [r7, #4]
 800b2d6:	603b      	str	r3, [r7, #0]
 800b2d8:	4603      	mov	r3, r0
 800b2da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
 800b2de:	4a0a      	ldr	r2, [pc, #40]	; (800b308 <disk_read+0x3c>)
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	689c      	ldr	r4, [r3, #8]
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ea:	4a07      	ldr	r2, [pc, #28]	; (800b308 <disk_read+0x3c>)
 800b2ec:	4413      	add	r3, r2
 800b2ee:	7a18      	ldrb	r0, [r3, #8]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	68b9      	ldr	r1, [r7, #8]
 800b2f6:	47a0      	blx	r4
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	75fb      	strb	r3, [r7, #23]
  return res;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	371c      	adds	r7, #28
 800b302:	46bd      	mov	sp, r7
 800b304:	bd90      	pop	{r4, r7, pc}
 800b306:	bf00      	nop
 800b308:	200003a4 	.word	0x200003a4

0800b30c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b30c:	b590      	push	{r4, r7, lr}
 800b30e:	b087      	sub	sp, #28
 800b310:	af00      	add	r7, sp, #0
 800b312:	60b9      	str	r1, [r7, #8]
 800b314:	607a      	str	r2, [r7, #4]
 800b316:	603b      	str	r3, [r7, #0]
 800b318:	4603      	mov	r3, r0
 800b31a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	4a0a      	ldr	r2, [pc, #40]	; (800b348 <disk_write+0x3c>)
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4413      	add	r3, r2
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	68dc      	ldr	r4, [r3, #12]
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	4a07      	ldr	r2, [pc, #28]	; (800b348 <disk_write+0x3c>)
 800b32c:	4413      	add	r3, r2
 800b32e:	7a18      	ldrb	r0, [r3, #8]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	68b9      	ldr	r1, [r7, #8]
 800b336:	47a0      	blx	r4
 800b338:	4603      	mov	r3, r0
 800b33a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	371c      	adds	r7, #28
 800b342:	46bd      	mov	sp, r7
 800b344:	bd90      	pop	{r4, r7, pc}
 800b346:	bf00      	nop
 800b348:	200003a4 	.word	0x200003a4

0800b34c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	603a      	str	r2, [r7, #0]
 800b356:	71fb      	strb	r3, [r7, #7]
 800b358:	460b      	mov	r3, r1
 800b35a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b35c:	79fb      	ldrb	r3, [r7, #7]
 800b35e:	4a09      	ldr	r2, [pc, #36]	; (800b384 <disk_ioctl+0x38>)
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	79fa      	ldrb	r2, [r7, #7]
 800b36a:	4906      	ldr	r1, [pc, #24]	; (800b384 <disk_ioctl+0x38>)
 800b36c:	440a      	add	r2, r1
 800b36e:	7a10      	ldrb	r0, [r2, #8]
 800b370:	79b9      	ldrb	r1, [r7, #6]
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	4798      	blx	r3
 800b376:	4603      	mov	r3, r0
 800b378:	73fb      	strb	r3, [r7, #15]
  return res;
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	200003a4 	.word	0x200003a4

0800b388 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3301      	adds	r3, #1
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b398:	89fb      	ldrh	r3, [r7, #14]
 800b39a:	021b      	lsls	r3, r3, #8
 800b39c:	b21a      	sxth	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	b21b      	sxth	r3, r3
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	b21b      	sxth	r3, r3
 800b3a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b3aa:	89fb      	ldrh	r3, [r7, #14]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	3303      	adds	r3, #3
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	021b      	lsls	r3, r3, #8
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	3202      	adds	r2, #2
 800b3d0:	7812      	ldrb	r2, [r2, #0]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	021b      	lsls	r3, r3, #8
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	3201      	adds	r2, #1
 800b3de:	7812      	ldrb	r2, [r2, #0]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	021b      	lsls	r3, r3, #8
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	7812      	ldrb	r2, [r2, #0]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	60fb      	str	r3, [r7, #12]
	return rv;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b3fe:	b480      	push	{r7}
 800b400:	b083      	sub	sp, #12
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	460b      	mov	r3, r1
 800b408:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	607a      	str	r2, [r7, #4]
 800b410:	887a      	ldrh	r2, [r7, #2]
 800b412:	b2d2      	uxtb	r2, r2
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	887b      	ldrh	r3, [r7, #2]
 800b418:	0a1b      	lsrs	r3, r3, #8
 800b41a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	1c5a      	adds	r2, r3, #1
 800b420:	607a      	str	r2, [r7, #4]
 800b422:	887a      	ldrh	r2, [r7, #2]
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	701a      	strb	r2, [r3, #0]
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	0a1b      	lsrs	r3, r3, #8
 800b44e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	1c5a      	adds	r2, r3, #1
 800b454:	607a      	str	r2, [r7, #4]
 800b456:	683a      	ldr	r2, [r7, #0]
 800b458:	b2d2      	uxtb	r2, r2
 800b45a:	701a      	strb	r2, [r3, #0]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	0a1b      	lsrs	r3, r3, #8
 800b460:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	1c5a      	adds	r2, r3, #1
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	b2d2      	uxtb	r2, r2
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	0a1b      	lsrs	r3, r3, #8
 800b472:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	607a      	str	r2, [r7, #4]
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	b2d2      	uxtb	r2, r2
 800b47e:	701a      	strb	r2, [r3, #0]
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b48c:	b480      	push	{r7}
 800b48e:	b087      	sub	sp, #28
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00d      	beq.n	800b4c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	1c53      	adds	r3, r2, #1
 800b4aa:	613b      	str	r3, [r7, #16]
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	1c59      	adds	r1, r3, #1
 800b4b0:	6179      	str	r1, [r7, #20]
 800b4b2:	7812      	ldrb	r2, [r2, #0]
 800b4b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	607b      	str	r3, [r7, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1f1      	bne.n	800b4a6 <mem_cpy+0x1a>
	}
}
 800b4c2:	bf00      	nop
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b4ce:	b480      	push	{r7}
 800b4d0:	b087      	sub	sp, #28
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	60f8      	str	r0, [r7, #12]
 800b4d6:	60b9      	str	r1, [r7, #8]
 800b4d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	617a      	str	r2, [r7, #20]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	b2d2      	uxtb	r2, r2
 800b4e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	607b      	str	r3, [r7, #4]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1f3      	bne.n	800b4de <mem_set+0x10>
}
 800b4f6:	bf00      	nop
 800b4f8:	371c      	adds	r7, #28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b502:	b480      	push	{r7}
 800b504:	b089      	sub	sp, #36	; 0x24
 800b506:	af00      	add	r7, sp, #0
 800b508:	60f8      	str	r0, [r7, #12]
 800b50a:	60b9      	str	r1, [r7, #8]
 800b50c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	61fb      	str	r3, [r7, #28]
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	1c5a      	adds	r2, r3, #1
 800b51e:	61fa      	str	r2, [r7, #28]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	4619      	mov	r1, r3
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	1c5a      	adds	r2, r3, #1
 800b528:	61ba      	str	r2, [r7, #24]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	1acb      	subs	r3, r1, r3
 800b52e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3b01      	subs	r3, #1
 800b534:	607b      	str	r3, [r7, #4]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <mem_cmp+0x40>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0eb      	beq.n	800b51a <mem_cmp+0x18>

	return r;
 800b542:	697b      	ldr	r3, [r7, #20]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3724      	adds	r7, #36	; 0x24
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b55a:	e002      	b.n	800b562 <chk_chr+0x12>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	3301      	adds	r3, #1
 800b560:	607b      	str	r3, [r7, #4]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d005      	beq.n	800b576 <chk_chr+0x26>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	4293      	cmp	r3, r2
 800b574:	d1f2      	bne.n	800b55c <chk_chr+0xc>
	return *str;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	781b      	ldrb	r3, [r3, #0]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr

0800b586 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b082      	sub	sp, #8
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d009      	beq.n	800b5a8 <lock_fs+0x22>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	4618      	mov	r0, r3
 800b59a:	f002 fb24 	bl	800dbe6 <ff_req_grant>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <lock_fs+0x22>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e000      	b.n	800b5aa <lock_fs+0x24>
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b082      	sub	sp, #8
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00d      	beq.n	800b5e0 <unlock_fs+0x2e>
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	2b0c      	cmp	r3, #12
 800b5c8:	d00a      	beq.n	800b5e0 <unlock_fs+0x2e>
 800b5ca:	78fb      	ldrb	r3, [r7, #3]
 800b5cc:	2b0b      	cmp	r3, #11
 800b5ce:	d007      	beq.n	800b5e0 <unlock_fs+0x2e>
 800b5d0:	78fb      	ldrb	r3, [r7, #3]
 800b5d2:	2b0f      	cmp	r3, #15
 800b5d4:	d004      	beq.n	800b5e0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f002 fb18 	bl	800dc10 <ff_rel_grant>
	}
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60bb      	str	r3, [r7, #8]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	e029      	b.n	800b650 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b5fc:	4a27      	ldr	r2, [pc, #156]	; (800b69c <chk_lock+0xb4>)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	011b      	lsls	r3, r3, #4
 800b602:	4413      	add	r3, r2
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d01d      	beq.n	800b646 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b60a:	4a24      	ldr	r2, [pc, #144]	; (800b69c <chk_lock+0xb4>)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	011b      	lsls	r3, r3, #4
 800b610:	4413      	add	r3, r2
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d116      	bne.n	800b64a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b61c:	4a1f      	ldr	r2, [pc, #124]	; (800b69c <chk_lock+0xb4>)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	011b      	lsls	r3, r3, #4
 800b622:	4413      	add	r3, r2
 800b624:	3304      	adds	r3, #4
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d10c      	bne.n	800b64a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b630:	4a1a      	ldr	r2, [pc, #104]	; (800b69c <chk_lock+0xb4>)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	4413      	add	r3, r2
 800b638:	3308      	adds	r3, #8
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b640:	429a      	cmp	r2, r3
 800b642:	d102      	bne.n	800b64a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b644:	e007      	b.n	800b656 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b646:	2301      	movs	r3, #1
 800b648:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3301      	adds	r3, #1
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d9d2      	bls.n	800b5fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d109      	bne.n	800b670 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d102      	bne.n	800b668 <chk_lock+0x80>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	2b02      	cmp	r3, #2
 800b666:	d101      	bne.n	800b66c <chk_lock+0x84>
 800b668:	2300      	movs	r3, #0
 800b66a:	e010      	b.n	800b68e <chk_lock+0xa6>
 800b66c:	2312      	movs	r3, #18
 800b66e:	e00e      	b.n	800b68e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d108      	bne.n	800b688 <chk_lock+0xa0>
 800b676:	4a09      	ldr	r2, [pc, #36]	; (800b69c <chk_lock+0xb4>)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	011b      	lsls	r3, r3, #4
 800b67c:	4413      	add	r3, r2
 800b67e:	330c      	adds	r3, #12
 800b680:	881b      	ldrh	r3, [r3, #0]
 800b682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b686:	d101      	bne.n	800b68c <chk_lock+0xa4>
 800b688:	2310      	movs	r3, #16
 800b68a:	e000      	b.n	800b68e <chk_lock+0xa6>
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	20000384 	.word	0x20000384

0800b6a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	607b      	str	r3, [r7, #4]
 800b6aa:	e002      	b.n	800b6b2 <enq_lock+0x12>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	607b      	str	r3, [r7, #4]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d806      	bhi.n	800b6c6 <enq_lock+0x26>
 800b6b8:	4a09      	ldr	r2, [pc, #36]	; (800b6e0 <enq_lock+0x40>)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	011b      	lsls	r3, r3, #4
 800b6be:	4413      	add	r3, r2
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1f2      	bne.n	800b6ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	bf14      	ite	ne
 800b6cc:	2301      	movne	r3, #1
 800b6ce:	2300      	moveq	r3, #0
 800b6d0:	b2db      	uxtb	r3, r3
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	20000384 	.word	0x20000384

0800b6e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60fb      	str	r3, [r7, #12]
 800b6f2:	e01f      	b.n	800b734 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b6f4:	4a41      	ldr	r2, [pc, #260]	; (800b7fc <inc_lock+0x118>)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	011b      	lsls	r3, r3, #4
 800b6fa:	4413      	add	r3, r2
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	429a      	cmp	r2, r3
 800b704:	d113      	bne.n	800b72e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b706:	4a3d      	ldr	r2, [pc, #244]	; (800b7fc <inc_lock+0x118>)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	011b      	lsls	r3, r3, #4
 800b70c:	4413      	add	r3, r2
 800b70e:	3304      	adds	r3, #4
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b716:	429a      	cmp	r2, r3
 800b718:	d109      	bne.n	800b72e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b71a:	4a38      	ldr	r2, [pc, #224]	; (800b7fc <inc_lock+0x118>)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	011b      	lsls	r3, r3, #4
 800b720:	4413      	add	r3, r2
 800b722:	3308      	adds	r3, #8
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d006      	beq.n	800b73c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3301      	adds	r3, #1
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b01      	cmp	r3, #1
 800b738:	d9dc      	bls.n	800b6f4 <inc_lock+0x10>
 800b73a:	e000      	b.n	800b73e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b73c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2b02      	cmp	r3, #2
 800b742:	d132      	bne.n	800b7aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b744:	2300      	movs	r3, #0
 800b746:	60fb      	str	r3, [r7, #12]
 800b748:	e002      	b.n	800b750 <inc_lock+0x6c>
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60fb      	str	r3, [r7, #12]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d806      	bhi.n	800b764 <inc_lock+0x80>
 800b756:	4a29      	ldr	r2, [pc, #164]	; (800b7fc <inc_lock+0x118>)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	011b      	lsls	r3, r3, #4
 800b75c:	4413      	add	r3, r2
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1f2      	bne.n	800b74a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2b02      	cmp	r3, #2
 800b768:	d101      	bne.n	800b76e <inc_lock+0x8a>
 800b76a:	2300      	movs	r3, #0
 800b76c:	e040      	b.n	800b7f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4922      	ldr	r1, [pc, #136]	; (800b7fc <inc_lock+0x118>)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	011b      	lsls	r3, r3, #4
 800b778:	440b      	add	r3, r1
 800b77a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	491e      	ldr	r1, [pc, #120]	; (800b7fc <inc_lock+0x118>)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	011b      	lsls	r3, r3, #4
 800b786:	440b      	add	r3, r1
 800b788:	3304      	adds	r3, #4
 800b78a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	695a      	ldr	r2, [r3, #20]
 800b790:	491a      	ldr	r1, [pc, #104]	; (800b7fc <inc_lock+0x118>)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	011b      	lsls	r3, r3, #4
 800b796:	440b      	add	r3, r1
 800b798:	3308      	adds	r3, #8
 800b79a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b79c:	4a17      	ldr	r2, [pc, #92]	; (800b7fc <inc_lock+0x118>)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	011b      	lsls	r3, r3, #4
 800b7a2:	4413      	add	r3, r2
 800b7a4:	330c      	adds	r3, #12
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d009      	beq.n	800b7c4 <inc_lock+0xe0>
 800b7b0:	4a12      	ldr	r2, [pc, #72]	; (800b7fc <inc_lock+0x118>)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	011b      	lsls	r3, r3, #4
 800b7b6:	4413      	add	r3, r2
 800b7b8:	330c      	adds	r3, #12
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <inc_lock+0xe0>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e015      	b.n	800b7f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d108      	bne.n	800b7dc <inc_lock+0xf8>
 800b7ca:	4a0c      	ldr	r2, [pc, #48]	; (800b7fc <inc_lock+0x118>)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	011b      	lsls	r3, r3, #4
 800b7d0:	4413      	add	r3, r2
 800b7d2:	330c      	adds	r3, #12
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	e001      	b.n	800b7e0 <inc_lock+0xfc>
 800b7dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7e0:	4906      	ldr	r1, [pc, #24]	; (800b7fc <inc_lock+0x118>)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	011b      	lsls	r3, r3, #4
 800b7e6:	440b      	add	r3, r1
 800b7e8:	330c      	adds	r3, #12
 800b7ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	3301      	adds	r3, #1
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	20000384 	.word	0x20000384

0800b800 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3b01      	subs	r3, #1
 800b80c:	607b      	str	r3, [r7, #4]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d825      	bhi.n	800b860 <dec_lock+0x60>
		n = Files[i].ctr;
 800b814:	4a17      	ldr	r2, [pc, #92]	; (800b874 <dec_lock+0x74>)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	011b      	lsls	r3, r3, #4
 800b81a:	4413      	add	r3, r2
 800b81c:	330c      	adds	r3, #12
 800b81e:	881b      	ldrh	r3, [r3, #0]
 800b820:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b822:	89fb      	ldrh	r3, [r7, #14]
 800b824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b828:	d101      	bne.n	800b82e <dec_lock+0x2e>
 800b82a:	2300      	movs	r3, #0
 800b82c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b82e:	89fb      	ldrh	r3, [r7, #14]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <dec_lock+0x3a>
 800b834:	89fb      	ldrh	r3, [r7, #14]
 800b836:	3b01      	subs	r3, #1
 800b838:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b83a:	4a0e      	ldr	r2, [pc, #56]	; (800b874 <dec_lock+0x74>)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	011b      	lsls	r3, r3, #4
 800b840:	4413      	add	r3, r2
 800b842:	330c      	adds	r3, #12
 800b844:	89fa      	ldrh	r2, [r7, #14]
 800b846:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b848:	89fb      	ldrh	r3, [r7, #14]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d105      	bne.n	800b85a <dec_lock+0x5a>
 800b84e:	4a09      	ldr	r2, [pc, #36]	; (800b874 <dec_lock+0x74>)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	011b      	lsls	r3, r3, #4
 800b854:	4413      	add	r3, r2
 800b856:	2200      	movs	r2, #0
 800b858:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	737b      	strb	r3, [r7, #13]
 800b85e:	e001      	b.n	800b864 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b860:	2302      	movs	r3, #2
 800b862:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b864:	7b7b      	ldrb	r3, [r7, #13]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3714      	adds	r7, #20
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	20000384 	.word	0x20000384

0800b878 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b880:	2300      	movs	r3, #0
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	e010      	b.n	800b8a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b886:	4a0d      	ldr	r2, [pc, #52]	; (800b8bc <clear_lock+0x44>)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	011b      	lsls	r3, r3, #4
 800b88c:	4413      	add	r3, r2
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	429a      	cmp	r2, r3
 800b894:	d105      	bne.n	800b8a2 <clear_lock+0x2a>
 800b896:	4a09      	ldr	r2, [pc, #36]	; (800b8bc <clear_lock+0x44>)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	011b      	lsls	r3, r3, #4
 800b89c:	4413      	add	r3, r2
 800b89e:	2200      	movs	r2, #0
 800b8a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d9eb      	bls.n	800b886 <clear_lock+0xe>
	}
}
 800b8ae:	bf00      	nop
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	20000384 	.word	0x20000384

0800b8c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	78db      	ldrb	r3, [r3, #3]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d034      	beq.n	800b93e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	7858      	ldrb	r0, [r3, #1]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	f7ff fd10 	bl	800b30c <disk_write>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	73fb      	strb	r3, [r7, #15]
 800b8f6:	e022      	b.n	800b93e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	1ad2      	subs	r2, r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d217      	bcs.n	800b93e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	789b      	ldrb	r3, [r3, #2]
 800b912:	613b      	str	r3, [r7, #16]
 800b914:	e010      	b.n	800b938 <sync_window+0x78>
					wsect += fs->fsize;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4413      	add	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	7858      	ldrb	r0, [r3, #1]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b92a:	2301      	movs	r3, #1
 800b92c:	697a      	ldr	r2, [r7, #20]
 800b92e:	f7ff fced 	bl	800b30c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	3b01      	subs	r3, #1
 800b936:	613b      	str	r3, [r7, #16]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d8eb      	bhi.n	800b916 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d01b      	beq.n	800b998 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f7ff ffad 	bl	800b8c0 <sync_window>
 800b966:	4603      	mov	r3, r0
 800b968:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d113      	bne.n	800b998 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	7858      	ldrb	r0, [r3, #1]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b97a:	2301      	movs	r3, #1
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	f7ff fca5 	bl	800b2cc <disk_read>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d004      	beq.n	800b992 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b988:	f04f 33ff 	mov.w	r3, #4294967295
 800b98c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b98e:	2301      	movs	r3, #1
 800b990:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7ff ff87 	bl	800b8c0 <sync_window>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d159      	bne.n	800ba70 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d149      	bne.n	800ba58 <sync_fs+0xb4>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	791b      	ldrb	r3, [r3, #4]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d145      	bne.n	800ba58 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	899b      	ldrh	r3, [r3, #12]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2100      	movs	r1, #0
 800b9da:	f7ff fd78 	bl	800b4ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	3338      	adds	r3, #56	; 0x38
 800b9e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b9e6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff fd07 	bl	800b3fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	3338      	adds	r3, #56	; 0x38
 800b9f4:	4921      	ldr	r1, [pc, #132]	; (800ba7c <sync_fs+0xd8>)
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff fd1c 	bl	800b434 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	3338      	adds	r3, #56	; 0x38
 800ba00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ba04:	491e      	ldr	r1, [pc, #120]	; (800ba80 <sync_fs+0xdc>)
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7ff fd14 	bl	800b434 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	3338      	adds	r3, #56	; 0x38
 800ba10:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	f7ff fd0a 	bl	800b434 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	3338      	adds	r3, #56	; 0x38
 800ba24:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	695b      	ldr	r3, [r3, #20]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4610      	mov	r0, r2
 800ba30:	f7ff fd00 	bl	800b434 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	7858      	ldrb	r0, [r3, #1]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f7ff fc5d 	bl	800b30c <disk_write>
			fs->fsi_flag = 0;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	785b      	ldrb	r3, [r3, #1]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2100      	movs	r1, #0
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7ff fc73 	bl	800b34c <disk_ioctl>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <sync_fs+0xcc>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	41615252 	.word	0x41615252
 800ba80:	61417272 	.word	0x61417272

0800ba84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	3b02      	subs	r3, #2
 800ba92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	69db      	ldr	r3, [r3, #28]
 800ba98:	3b02      	subs	r3, #2
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d301      	bcc.n	800baa4 <clust2sect+0x20>
 800baa0:	2300      	movs	r3, #0
 800baa2:	e008      	b.n	800bab6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	895b      	ldrh	r3, [r3, #10]
 800baa8:	461a      	mov	r2, r3
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	fb03 f202 	mul.w	r2, r3, r2
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab4:	4413      	add	r3, r2
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b086      	sub	sp, #24
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d904      	bls.n	800bae2 <get_fat+0x20>
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	69db      	ldr	r3, [r3, #28]
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d302      	bcc.n	800bae8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bae2:	2301      	movs	r3, #1
 800bae4:	617b      	str	r3, [r7, #20]
 800bae6:	e0b7      	b.n	800bc58 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bae8:	f04f 33ff 	mov.w	r3, #4294967295
 800baec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d05a      	beq.n	800bbac <get_fat+0xea>
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	d07d      	beq.n	800bbf6 <get_fat+0x134>
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	f040 80a2 	bne.w	800bc44 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	085b      	lsrs	r3, r3, #1
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	899b      	ldrh	r3, [r3, #12]
 800bb16:	4619      	mov	r1, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb1e:	4413      	add	r3, r2
 800bb20:	4619      	mov	r1, r3
 800bb22:	6938      	ldr	r0, [r7, #16]
 800bb24:	f7ff ff10 	bl	800b948 <move_window>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f040 808d 	bne.w	800bc4a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	1c5a      	adds	r2, r3, #1
 800bb34:	60fa      	str	r2, [r7, #12]
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	8992      	ldrh	r2, [r2, #12]
 800bb3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb3e:	fb02 f201 	mul.w	r2, r2, r1
 800bb42:	1a9b      	subs	r3, r3, r2
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	4413      	add	r3, r2
 800bb48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bb4c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	899b      	ldrh	r3, [r3, #12]
 800bb56:	4619      	mov	r1, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb5e:	4413      	add	r3, r2
 800bb60:	4619      	mov	r1, r3
 800bb62:	6938      	ldr	r0, [r7, #16]
 800bb64:	f7ff fef0 	bl	800b948 <move_window>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d16f      	bne.n	800bc4e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	899b      	ldrh	r3, [r3, #12]
 800bb72:	461a      	mov	r2, r3
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb7a:	fb02 f201 	mul.w	r2, r2, r1
 800bb7e:	1a9b      	subs	r3, r3, r2
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	4413      	add	r3, r2
 800bb84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bb88:	021b      	lsls	r3, r3, #8
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	f003 0301 	and.w	r3, r3, #1
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <get_fat+0xe0>
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	091b      	lsrs	r3, r3, #4
 800bba0:	e002      	b.n	800bba8 <get_fat+0xe6>
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bba8:	617b      	str	r3, [r7, #20]
			break;
 800bbaa:	e055      	b.n	800bc58 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	899b      	ldrh	r3, [r3, #12]
 800bbb4:	085b      	lsrs	r3, r3, #1
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	4619      	mov	r1, r3
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbc0:	4413      	add	r3, r2
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6938      	ldr	r0, [r7, #16]
 800bbc6:	f7ff febf 	bl	800b948 <move_window>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d140      	bne.n	800bc52 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	005b      	lsls	r3, r3, #1
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	8992      	ldrh	r2, [r2, #12]
 800bbde:	fbb3 f0f2 	udiv	r0, r3, r2
 800bbe2:	fb02 f200 	mul.w	r2, r2, r0
 800bbe6:	1a9b      	subs	r3, r3, r2
 800bbe8:	440b      	add	r3, r1
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff fbcc 	bl	800b388 <ld_word>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	617b      	str	r3, [r7, #20]
			break;
 800bbf4:	e030      	b.n	800bc58 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	899b      	ldrh	r3, [r3, #12]
 800bbfe:	089b      	lsrs	r3, r3, #2
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	4619      	mov	r1, r3
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc0a:	4413      	add	r3, r2
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6938      	ldr	r0, [r7, #16]
 800bc10:	f7ff fe9a 	bl	800b948 <move_window>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d11d      	bne.n	800bc56 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	8992      	ldrh	r2, [r2, #12]
 800bc28:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc2c:	fb02 f200 	mul.w	r2, r2, r0
 800bc30:	1a9b      	subs	r3, r3, r2
 800bc32:	440b      	add	r3, r1
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7ff fbbf 	bl	800b3b8 <ld_dword>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc40:	617b      	str	r3, [r7, #20]
			break;
 800bc42:	e009      	b.n	800bc58 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bc44:	2301      	movs	r3, #1
 800bc46:	617b      	str	r3, [r7, #20]
 800bc48:	e006      	b.n	800bc58 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc4a:	bf00      	nop
 800bc4c:	e004      	b.n	800bc58 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc4e:	bf00      	nop
 800bc50:	e002      	b.n	800bc58 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc52:	bf00      	nop
 800bc54:	e000      	b.n	800bc58 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc56:	bf00      	nop
		}
	}

	return val;
 800bc58:	697b      	ldr	r3, [r7, #20]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bc62:	b590      	push	{r4, r7, lr}
 800bc64:	b089      	sub	sp, #36	; 0x24
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	60f8      	str	r0, [r7, #12]
 800bc6a:	60b9      	str	r1, [r7, #8]
 800bc6c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bc6e:	2302      	movs	r3, #2
 800bc70:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	f240 8106 	bls.w	800be86 <put_fat+0x224>
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	69db      	ldr	r3, [r3, #28]
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	f080 8100 	bcs.w	800be86 <put_fat+0x224>
		switch (fs->fs_type) {
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	f000 8088 	beq.w	800bda0 <put_fat+0x13e>
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	f000 80b0 	beq.w	800bdf6 <put_fat+0x194>
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	f040 80f5 	bne.w	800be86 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	61bb      	str	r3, [r7, #24]
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	085b      	lsrs	r3, r3, #1
 800bca4:	69ba      	ldr	r2, [r7, #24]
 800bca6:	4413      	add	r3, r2
 800bca8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	899b      	ldrh	r3, [r3, #12]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcba:	4413      	add	r3, r2
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f7ff fe42 	bl	800b948 <move_window>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcc8:	7ffb      	ldrb	r3, [r7, #31]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f040 80d4 	bne.w	800be78 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	1c5a      	adds	r2, r3, #1
 800bcda:	61ba      	str	r2, [r7, #24]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	8992      	ldrh	r2, [r2, #12]
 800bce0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bce4:	fb02 f200 	mul.w	r2, r2, r0
 800bce8:	1a9b      	subs	r3, r3, r2
 800bcea:	440b      	add	r3, r1
 800bcec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	f003 0301 	and.w	r3, r3, #1
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00d      	beq.n	800bd14 <put_fat+0xb2>
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	b25b      	sxtb	r3, r3
 800bcfe:	f003 030f 	and.w	r3, r3, #15
 800bd02:	b25a      	sxtb	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	011b      	lsls	r3, r3, #4
 800bd0a:	b25b      	sxtb	r3, r3
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	b25b      	sxtb	r3, r3
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	e001      	b.n	800bd18 <put_fat+0xb6>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	899b      	ldrh	r3, [r3, #12]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd32:	4413      	add	r3, r2
 800bd34:	4619      	mov	r1, r3
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f7ff fe06 	bl	800b948 <move_window>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd40:	7ffb      	ldrb	r3, [r7, #31]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f040 809a 	bne.w	800be7c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	899b      	ldrh	r3, [r3, #12]
 800bd52:	461a      	mov	r2, r3
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd5a:	fb02 f200 	mul.w	r2, r2, r0
 800bd5e:	1a9b      	subs	r3, r3, r2
 800bd60:	440b      	add	r3, r1
 800bd62:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	f003 0301 	and.w	r3, r3, #1
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d003      	beq.n	800bd76 <put_fat+0x114>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	091b      	lsrs	r3, r3, #4
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	e00e      	b.n	800bd94 <put_fat+0x132>
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	b25b      	sxtb	r3, r3
 800bd7c:	f023 030f 	bic.w	r3, r3, #15
 800bd80:	b25a      	sxtb	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	0a1b      	lsrs	r3, r3, #8
 800bd86:	b25b      	sxtb	r3, r3
 800bd88:	f003 030f 	and.w	r3, r3, #15
 800bd8c:	b25b      	sxtb	r3, r3
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	b25b      	sxtb	r3, r3
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	70da      	strb	r2, [r3, #3]
			break;
 800bd9e:	e072      	b.n	800be86 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	899b      	ldrh	r3, [r3, #12]
 800bda8:	085b      	lsrs	r3, r3, #1
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	4619      	mov	r1, r3
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdb4:	4413      	add	r3, r2
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f7ff fdc5 	bl	800b948 <move_window>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdc2:	7ffb      	ldrb	r3, [r7, #31]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d15b      	bne.n	800be80 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	005b      	lsls	r3, r3, #1
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	8992      	ldrh	r2, [r2, #12]
 800bdd6:	fbb3 f0f2 	udiv	r0, r3, r2
 800bdda:	fb02 f200 	mul.w	r2, r2, r0
 800bdde:	1a9b      	subs	r3, r3, r2
 800bde0:	440b      	add	r3, r1
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	b292      	uxth	r2, r2
 800bde6:	4611      	mov	r1, r2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7ff fb08 	bl	800b3fe <st_word>
			fs->wflag = 1;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	70da      	strb	r2, [r3, #3]
			break;
 800bdf4:	e047      	b.n	800be86 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	899b      	ldrh	r3, [r3, #12]
 800bdfe:	089b      	lsrs	r3, r3, #2
 800be00:	b29b      	uxth	r3, r3
 800be02:	4619      	mov	r1, r3
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	fbb3 f3f1 	udiv	r3, r3, r1
 800be0a:	4413      	add	r3, r2
 800be0c:	4619      	mov	r1, r3
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f7ff fd9a 	bl	800b948 <move_window>
 800be14:	4603      	mov	r3, r0
 800be16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be18:	7ffb      	ldrb	r3, [r7, #31]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d132      	bne.n	800be84 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	8992      	ldrh	r2, [r2, #12]
 800be32:	fbb3 f0f2 	udiv	r0, r3, r2
 800be36:	fb02 f200 	mul.w	r2, r2, r0
 800be3a:	1a9b      	subs	r3, r3, r2
 800be3c:	440b      	add	r3, r1
 800be3e:	4618      	mov	r0, r3
 800be40:	f7ff faba 	bl	800b3b8 <ld_dword>
 800be44:	4603      	mov	r3, r0
 800be46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800be4a:	4323      	orrs	r3, r4
 800be4c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	8992      	ldrh	r2, [r2, #12]
 800be5c:	fbb3 f0f2 	udiv	r0, r3, r2
 800be60:	fb02 f200 	mul.w	r2, r2, r0
 800be64:	1a9b      	subs	r3, r3, r2
 800be66:	440b      	add	r3, r1
 800be68:	6879      	ldr	r1, [r7, #4]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff fae2 	bl	800b434 <st_dword>
			fs->wflag = 1;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2201      	movs	r2, #1
 800be74:	70da      	strb	r2, [r3, #3]
			break;
 800be76:	e006      	b.n	800be86 <put_fat+0x224>
			if (res != FR_OK) break;
 800be78:	bf00      	nop
 800be7a:	e004      	b.n	800be86 <put_fat+0x224>
			if (res != FR_OK) break;
 800be7c:	bf00      	nop
 800be7e:	e002      	b.n	800be86 <put_fat+0x224>
			if (res != FR_OK) break;
 800be80:	bf00      	nop
 800be82:	e000      	b.n	800be86 <put_fat+0x224>
			if (res != FR_OK) break;
 800be84:	bf00      	nop
		}
	}
	return res;
 800be86:	7ffb      	ldrb	r3, [r7, #31]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3724      	adds	r7, #36	; 0x24
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd90      	pop	{r4, r7, pc}

0800be90 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d904      	bls.n	800beb6 <remove_chain+0x26>
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	69db      	ldr	r3, [r3, #28]
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d301      	bcc.n	800beba <remove_chain+0x2a>
 800beb6:	2302      	movs	r3, #2
 800beb8:	e04b      	b.n	800bf52 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00c      	beq.n	800beda <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bec0:	f04f 32ff 	mov.w	r2, #4294967295
 800bec4:	6879      	ldr	r1, [r7, #4]
 800bec6:	69b8      	ldr	r0, [r7, #24]
 800bec8:	f7ff fecb 	bl	800bc62 <put_fat>
 800becc:	4603      	mov	r3, r0
 800bece:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bed0:	7ffb      	ldrb	r3, [r7, #31]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d001      	beq.n	800beda <remove_chain+0x4a>
 800bed6:	7ffb      	ldrb	r3, [r7, #31]
 800bed8:	e03b      	b.n	800bf52 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800beda:	68b9      	ldr	r1, [r7, #8]
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f7ff fdf0 	bl	800bac2 <get_fat>
 800bee2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d031      	beq.n	800bf4e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d101      	bne.n	800bef4 <remove_chain+0x64>
 800bef0:	2302      	movs	r3, #2
 800bef2:	e02e      	b.n	800bf52 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befa:	d101      	bne.n	800bf00 <remove_chain+0x70>
 800befc:	2301      	movs	r3, #1
 800befe:	e028      	b.n	800bf52 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bf00:	2200      	movs	r2, #0
 800bf02:	68b9      	ldr	r1, [r7, #8]
 800bf04:	69b8      	ldr	r0, [r7, #24]
 800bf06:	f7ff feac 	bl	800bc62 <put_fat>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bf0e:	7ffb      	ldrb	r3, [r7, #31]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <remove_chain+0x88>
 800bf14:	7ffb      	ldrb	r3, [r7, #31]
 800bf16:	e01c      	b.n	800bf52 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	699a      	ldr	r2, [r3, #24]
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	69db      	ldr	r3, [r3, #28]
 800bf20:	3b02      	subs	r3, #2
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d20b      	bcs.n	800bf3e <remove_chain+0xae>
			fs->free_clst++;
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	791b      	ldrb	r3, [r3, #4]
 800bf34:	f043 0301 	orr.w	r3, r3, #1
 800bf38:	b2da      	uxtb	r2, r3
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	69db      	ldr	r3, [r3, #28]
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d3c6      	bcc.n	800beda <remove_chain+0x4a>
 800bf4c:	e000      	b.n	800bf50 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bf4e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3720      	adds	r7, #32
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b088      	sub	sp, #32
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10d      	bne.n	800bf8c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	695b      	ldr	r3, [r3, #20]
 800bf74:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d004      	beq.n	800bf86 <create_chain+0x2c>
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	69db      	ldr	r3, [r3, #28]
 800bf80:	69ba      	ldr	r2, [r7, #24]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d31b      	bcc.n	800bfbe <create_chain+0x64>
 800bf86:	2301      	movs	r3, #1
 800bf88:	61bb      	str	r3, [r7, #24]
 800bf8a:	e018      	b.n	800bfbe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7ff fd97 	bl	800bac2 <get_fat>
 800bf94:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d801      	bhi.n	800bfa0 <create_chain+0x46>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e070      	b.n	800c082 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa6:	d101      	bne.n	800bfac <create_chain+0x52>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	e06a      	b.n	800c082 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	69db      	ldr	r3, [r3, #28]
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d201      	bcs.n	800bfba <create_chain+0x60>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	e063      	b.n	800c082 <create_chain+0x128>
		scl = clst;
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	69db      	ldr	r3, [r3, #28]
 800bfcc:	69fa      	ldr	r2, [r7, #28]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d307      	bcc.n	800bfe2 <create_chain+0x88>
				ncl = 2;
 800bfd2:	2302      	movs	r3, #2
 800bfd4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bfd6:	69fa      	ldr	r2, [r7, #28]
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d901      	bls.n	800bfe2 <create_chain+0x88>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e04f      	b.n	800c082 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bfe2:	69f9      	ldr	r1, [r7, #28]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7ff fd6c 	bl	800bac2 <get_fat>
 800bfea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00e      	beq.n	800c010 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d003      	beq.n	800c000 <create_chain+0xa6>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffe:	d101      	bne.n	800c004 <create_chain+0xaa>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	e03e      	b.n	800c082 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c004:	69fa      	ldr	r2, [r7, #28]
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d1da      	bne.n	800bfc2 <create_chain+0x68>
 800c00c:	2300      	movs	r3, #0
 800c00e:	e038      	b.n	800c082 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c010:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c012:	f04f 32ff 	mov.w	r2, #4294967295
 800c016:	69f9      	ldr	r1, [r7, #28]
 800c018:	6938      	ldr	r0, [r7, #16]
 800c01a:	f7ff fe22 	bl	800bc62 <put_fat>
 800c01e:	4603      	mov	r3, r0
 800c020:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c022:	7dfb      	ldrb	r3, [r7, #23]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d109      	bne.n	800c03c <create_chain+0xe2>
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d006      	beq.n	800c03c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c02e:	69fa      	ldr	r2, [r7, #28]
 800c030:	6839      	ldr	r1, [r7, #0]
 800c032:	6938      	ldr	r0, [r7, #16]
 800c034:	f7ff fe15 	bl	800bc62 <put_fat>
 800c038:	4603      	mov	r3, r0
 800c03a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d116      	bne.n	800c070 <create_chain+0x116>
		fs->last_clst = ncl;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	69fa      	ldr	r2, [r7, #28]
 800c046:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	699a      	ldr	r2, [r3, #24]
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	69db      	ldr	r3, [r3, #28]
 800c050:	3b02      	subs	r3, #2
 800c052:	429a      	cmp	r2, r3
 800c054:	d804      	bhi.n	800c060 <create_chain+0x106>
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	1e5a      	subs	r2, r3, #1
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	791b      	ldrb	r3, [r3, #4]
 800c064:	f043 0301 	orr.w	r3, r3, #1
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	711a      	strb	r2, [r3, #4]
 800c06e:	e007      	b.n	800c080 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c070:	7dfb      	ldrb	r3, [r7, #23]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d102      	bne.n	800c07c <create_chain+0x122>
 800c076:	f04f 33ff 	mov.w	r3, #4294967295
 800c07a:	e000      	b.n	800c07e <create_chain+0x124>
 800c07c:	2301      	movs	r3, #1
 800c07e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c080:	69fb      	ldr	r3, [r7, #28]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3720      	adds	r7, #32
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c08a:	b480      	push	{r7}
 800c08c:	b087      	sub	sp, #28
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09e:	3304      	adds	r3, #4
 800c0a0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	899b      	ldrh	r3, [r3, #12]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	8952      	ldrh	r2, [r2, #10]
 800c0b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0b6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	1d1a      	adds	r2, r3, #4
 800c0bc:	613a      	str	r2, [r7, #16]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <clmt_clust+0x42>
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	e010      	b.n	800c0ee <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c0cc:	697a      	ldr	r2, [r7, #20]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d307      	bcc.n	800c0e4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c0d4:	697a      	ldr	r2, [r7, #20]
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	617b      	str	r3, [r7, #20]
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	3304      	adds	r3, #4
 800c0e0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0e2:	e7e9      	b.n	800c0b8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c0e4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	4413      	add	r3, r2
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	371c      	adds	r7, #28
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b086      	sub	sp, #24
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c110:	d204      	bcs.n	800c11c <dir_sdi+0x22>
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	f003 031f 	and.w	r3, r3, #31
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d001      	beq.n	800c120 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c11c:	2302      	movs	r3, #2
 800c11e:	e071      	b.n	800c204 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d106      	bne.n	800c140 <dir_sdi+0x46>
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2b02      	cmp	r3, #2
 800c138:	d902      	bls.n	800c140 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d10c      	bne.n	800c160 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	095b      	lsrs	r3, r3, #5
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	8912      	ldrh	r2, [r2, #8]
 800c14e:	4293      	cmp	r3, r2
 800c150:	d301      	bcc.n	800c156 <dir_sdi+0x5c>
 800c152:	2302      	movs	r3, #2
 800c154:	e056      	b.n	800c204 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	61da      	str	r2, [r3, #28]
 800c15e:	e02d      	b.n	800c1bc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	895b      	ldrh	r3, [r3, #10]
 800c164:	461a      	mov	r2, r3
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	899b      	ldrh	r3, [r3, #12]
 800c16a:	fb03 f302 	mul.w	r3, r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c170:	e019      	b.n	800c1a6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6979      	ldr	r1, [r7, #20]
 800c176:	4618      	mov	r0, r3
 800c178:	f7ff fca3 	bl	800bac2 <get_fat>
 800c17c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c184:	d101      	bne.n	800c18a <dir_sdi+0x90>
 800c186:	2301      	movs	r3, #1
 800c188:	e03c      	b.n	800c204 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d904      	bls.n	800c19a <dir_sdi+0xa0>
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	69db      	ldr	r3, [r3, #28]
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	429a      	cmp	r2, r3
 800c198:	d301      	bcc.n	800c19e <dir_sdi+0xa4>
 800c19a:	2302      	movs	r3, #2
 800c19c:	e032      	b.n	800c204 <dir_sdi+0x10a>
			ofs -= csz;
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d2e1      	bcs.n	800c172 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c1ae:	6979      	ldr	r1, [r7, #20]
 800c1b0:	6938      	ldr	r0, [r7, #16]
 800c1b2:	f7ff fc67 	bl	800ba84 <clust2sect>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	69db      	ldr	r3, [r3, #28]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d101      	bne.n	800c1ce <dir_sdi+0xd4>
 800c1ca:	2302      	movs	r3, #2
 800c1cc:	e01a      	b.n	800c204 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	69da      	ldr	r2, [r3, #28]
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	899b      	ldrh	r3, [r3, #12]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	fbb3 f3f1 	udiv	r3, r3, r1
 800c1de:	441a      	add	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	899b      	ldrh	r3, [r3, #12]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c1f6:	fb02 f200 	mul.w	r2, r2, r0
 800c1fa:	1a9b      	subs	r3, r3, r2
 800c1fc:	18ca      	adds	r2, r1, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	3320      	adds	r3, #32
 800c222:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d003      	beq.n	800c234 <dir_next+0x28>
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c232:	d301      	bcc.n	800c238 <dir_next+0x2c>
 800c234:	2304      	movs	r3, #4
 800c236:	e0bb      	b.n	800c3b0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	899b      	ldrh	r3, [r3, #12]
 800c23c:	461a      	mov	r2, r3
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	fbb3 f1f2 	udiv	r1, r3, r2
 800c244:	fb02 f201 	mul.w	r2, r2, r1
 800c248:	1a9b      	subs	r3, r3, r2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f040 809d 	bne.w	800c38a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	69db      	ldr	r3, [r3, #28]
 800c254:	1c5a      	adds	r2, r3, #1
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10b      	bne.n	800c27a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	095b      	lsrs	r3, r3, #5
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	8912      	ldrh	r2, [r2, #8]
 800c26a:	4293      	cmp	r3, r2
 800c26c:	f0c0 808d 	bcc.w	800c38a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	61da      	str	r2, [r3, #28]
 800c276:	2304      	movs	r3, #4
 800c278:	e09a      	b.n	800c3b0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	899b      	ldrh	r3, [r3, #12]
 800c27e:	461a      	mov	r2, r3
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	fbb3 f3f2 	udiv	r3, r3, r2
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	8952      	ldrh	r2, [r2, #10]
 800c28a:	3a01      	subs	r2, #1
 800c28c:	4013      	ands	r3, r2
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d17b      	bne.n	800c38a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	699b      	ldr	r3, [r3, #24]
 800c298:	4619      	mov	r1, r3
 800c29a:	4610      	mov	r0, r2
 800c29c:	f7ff fc11 	bl	800bac2 <get_fat>
 800c2a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d801      	bhi.n	800c2ac <dir_next+0xa0>
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	e081      	b.n	800c3b0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b2:	d101      	bne.n	800c2b8 <dir_next+0xac>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e07b      	b.n	800c3b0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	69db      	ldr	r3, [r3, #28]
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d359      	bcc.n	800c376 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d104      	bne.n	800c2d2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	61da      	str	r2, [r3, #28]
 800c2ce:	2304      	movs	r3, #4
 800c2d0:	e06e      	b.n	800c3b0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	4619      	mov	r1, r3
 800c2da:	4610      	mov	r0, r2
 800c2dc:	f7ff fe3d 	bl	800bf5a <create_chain>
 800c2e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d101      	bne.n	800c2ec <dir_next+0xe0>
 800c2e8:	2307      	movs	r3, #7
 800c2ea:	e061      	b.n	800c3b0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d101      	bne.n	800c2f6 <dir_next+0xea>
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	e05c      	b.n	800c3b0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fc:	d101      	bne.n	800c302 <dir_next+0xf6>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e056      	b.n	800c3b0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f7ff fadc 	bl	800b8c0 <sync_window>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d001      	beq.n	800c312 <dir_next+0x106>
 800c30e:	2301      	movs	r3, #1
 800c310:	e04e      	b.n	800c3b0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	899b      	ldrh	r3, [r3, #12]
 800c31c:	461a      	mov	r2, r3
 800c31e:	2100      	movs	r1, #0
 800c320:	f7ff f8d5 	bl	800b4ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c324:	2300      	movs	r3, #0
 800c326:	613b      	str	r3, [r7, #16]
 800c328:	6979      	ldr	r1, [r7, #20]
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f7ff fbaa 	bl	800ba84 <clust2sect>
 800c330:	4602      	mov	r2, r0
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	635a      	str	r2, [r3, #52]	; 0x34
 800c336:	e012      	b.n	800c35e <dir_next+0x152>
						fs->wflag = 1;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2201      	movs	r2, #1
 800c33c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f7ff fabe 	bl	800b8c0 <sync_window>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d001      	beq.n	800c34e <dir_next+0x142>
 800c34a:	2301      	movs	r3, #1
 800c34c:	e030      	b.n	800c3b0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	3301      	adds	r3, #1
 800c352:	613b      	str	r3, [r7, #16]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c358:	1c5a      	adds	r2, r3, #1
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	635a      	str	r2, [r3, #52]	; 0x34
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	895b      	ldrh	r3, [r3, #10]
 800c362:	461a      	mov	r2, r3
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	4293      	cmp	r3, r2
 800c368:	d3e6      	bcc.n	800c338 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	1ad2      	subs	r2, r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	697a      	ldr	r2, [r7, #20]
 800c37a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c37c:	6979      	ldr	r1, [r7, #20]
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f7ff fb80 	bl	800ba84 <clust2sect>
 800c384:	4602      	mov	r2, r0
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	899b      	ldrh	r3, [r3, #12]
 800c39a:	461a      	mov	r2, r3
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c3a2:	fb02 f200 	mul.w	r2, r2, r0
 800c3a6:	1a9b      	subs	r3, r3, r2
 800c3a8:	18ca      	adds	r2, r1, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff fe95 	bl	800c0fa <dir_sdi>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d12b      	bne.n	800c432 <dir_alloc+0x7a>
		n = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	69db      	ldr	r3, [r3, #28]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7ff faaf 	bl	800b948 <move_window>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3ee:	7dfb      	ldrb	r3, [r7, #23]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d11d      	bne.n	800c430 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a1b      	ldr	r3, [r3, #32]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	2be5      	cmp	r3, #229	; 0xe5
 800c3fc:	d004      	beq.n	800c408 <dir_alloc+0x50>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d107      	bne.n	800c418 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	3301      	adds	r3, #1
 800c40c:	613b      	str	r3, [r7, #16]
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	429a      	cmp	r2, r3
 800c414:	d102      	bne.n	800c41c <dir_alloc+0x64>
 800c416:	e00c      	b.n	800c432 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c418:	2300      	movs	r3, #0
 800c41a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c41c:	2101      	movs	r1, #1
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7ff fef4 	bl	800c20c <dir_next>
 800c424:	4603      	mov	r3, r0
 800c426:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c428:	7dfb      	ldrb	r3, [r7, #23]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d0d7      	beq.n	800c3de <dir_alloc+0x26>
 800c42e:	e000      	b.n	800c432 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c430:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c432:	7dfb      	ldrb	r3, [r7, #23]
 800c434:	2b04      	cmp	r3, #4
 800c436:	d101      	bne.n	800c43c <dir_alloc+0x84>
 800c438:	2307      	movs	r3, #7
 800c43a:	75fb      	strb	r3, [r7, #23]
	return res;
 800c43c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b084      	sub	sp, #16
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	331a      	adds	r3, #26
 800c454:	4618      	mov	r0, r3
 800c456:	f7fe ff97 	bl	800b388 <ld_word>
 800c45a:	4603      	mov	r3, r0
 800c45c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	2b03      	cmp	r3, #3
 800c464:	d109      	bne.n	800c47a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	3314      	adds	r3, #20
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fe ff8c 	bl	800b388 <ld_word>
 800c470:	4603      	mov	r3, r0
 800c472:	041b      	lsls	r3, r3, #16
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	4313      	orrs	r3, r2
 800c478:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c47a:	68fb      	ldr	r3, [r7, #12]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	331a      	adds	r3, #26
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	b292      	uxth	r2, r2
 800c498:	4611      	mov	r1, r2
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe ffaf 	bl	800b3fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	2b03      	cmp	r3, #3
 800c4a6:	d109      	bne.n	800c4bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	f103 0214 	add.w	r2, r3, #20
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	0c1b      	lsrs	r3, r3, #16
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	f7fe ffa1 	bl	800b3fe <st_word>
	}
}
 800c4bc:	bf00      	nop
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7ff fe10 	bl	800c0fa <dir_sdi>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d001      	beq.n	800c4e8 <dir_find+0x24>
 800c4e4:	7dfb      	ldrb	r3, [r7, #23]
 800c4e6:	e03e      	b.n	800c566 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	69db      	ldr	r3, [r3, #28]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	6938      	ldr	r0, [r7, #16]
 800c4f0:	f7ff fa2a 	bl	800b948 <move_window>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c4f8:	7dfb      	ldrb	r3, [r7, #23]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d12f      	bne.n	800c55e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c506:	7bfb      	ldrb	r3, [r7, #15]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d102      	bne.n	800c512 <dir_find+0x4e>
 800c50c:	2304      	movs	r3, #4
 800c50e:	75fb      	strb	r3, [r7, #23]
 800c510:	e028      	b.n	800c564 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	330b      	adds	r3, #11
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6a1b      	ldr	r3, [r3, #32]
 800c528:	330b      	adds	r3, #11
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	f003 0308 	and.w	r3, r3, #8
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10a      	bne.n	800c54a <dir_find+0x86>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a18      	ldr	r0, [r3, #32]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3324      	adds	r3, #36	; 0x24
 800c53c:	220b      	movs	r2, #11
 800c53e:	4619      	mov	r1, r3
 800c540:	f7fe ffdf 	bl	800b502 <mem_cmp>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00b      	beq.n	800c562 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c54a:	2100      	movs	r1, #0
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7ff fe5d 	bl	800c20c <dir_next>
 800c552:	4603      	mov	r3, r0
 800c554:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c556:	7dfb      	ldrb	r3, [r7, #23]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0c5      	beq.n	800c4e8 <dir_find+0x24>
 800c55c:	e002      	b.n	800c564 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c55e:	bf00      	nop
 800c560:	e000      	b.n	800c564 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c562:	bf00      	nop

	return res;
 800c564:	7dfb      	ldrb	r3, [r7, #23]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c57c:	2101      	movs	r1, #1
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7ff ff1a 	bl	800c3b8 <dir_alloc>
 800c584:	4603      	mov	r3, r0
 800c586:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c588:	7bfb      	ldrb	r3, [r7, #15]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d11c      	bne.n	800c5c8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	4619      	mov	r1, r3
 800c594:	68b8      	ldr	r0, [r7, #8]
 800c596:	f7ff f9d7 	bl	800b948 <move_window>
 800c59a:	4603      	mov	r3, r0
 800c59c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c59e:	7bfb      	ldrb	r3, [r7, #15]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d111      	bne.n	800c5c8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a1b      	ldr	r3, [r3, #32]
 800c5a8:	2220      	movs	r2, #32
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fe ff8e 	bl	800b4ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a18      	ldr	r0, [r3, #32]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	3324      	adds	r3, #36	; 0x24
 800c5ba:	220b      	movs	r2, #11
 800c5bc:	4619      	mov	r1, r3
 800c5be:	f7fe ff65 	bl	800b48c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b086      	sub	sp, #24
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	69db      	ldr	r3, [r3, #28]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d04e      	beq.n	800c688 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	613b      	str	r3, [r7, #16]
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800c5f2:	e021      	b.n	800c638 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a1a      	ldr	r2, [r3, #32]
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	1c59      	adds	r1, r3, #1
 800c5fc:	6179      	str	r1, [r7, #20]
 800c5fe:	4413      	add	r3, r2
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c604:	7bfb      	ldrb	r3, [r7, #15]
 800c606:	2b20      	cmp	r3, #32
 800c608:	d100      	bne.n	800c60c <get_fileinfo+0x3a>
 800c60a:	e015      	b.n	800c638 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
 800c60e:	2b05      	cmp	r3, #5
 800c610:	d101      	bne.n	800c616 <get_fileinfo+0x44>
 800c612:	23e5      	movs	r3, #229	; 0xe5
 800c614:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	2b09      	cmp	r3, #9
 800c61a:	d106      	bne.n	800c62a <get_fileinfo+0x58>
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	613a      	str	r2, [r7, #16]
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	4413      	add	r3, r2
 800c626:	222e      	movs	r2, #46	; 0x2e
 800c628:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	1c5a      	adds	r2, r3, #1
 800c62e:	613a      	str	r2, [r7, #16]
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	4413      	add	r3, r2
 800c634:	7bfa      	ldrb	r2, [r7, #15]
 800c636:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	2b0a      	cmp	r3, #10
 800c63c:	d9da      	bls.n	800c5f4 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800c63e:	683a      	ldr	r2, [r7, #0]
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	4413      	add	r3, r2
 800c644:	3309      	adds	r3, #9
 800c646:	2200      	movs	r2, #0
 800c648:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	7ada      	ldrb	r2, [r3, #11]
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	331c      	adds	r3, #28
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7fe feac 	bl	800b3b8 <ld_dword>
 800c660:	4602      	mov	r2, r0
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	3316      	adds	r3, #22
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7fe fea3 	bl	800b3b8 <ld_dword>
 800c672:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	b29a      	uxth	r2, r3
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	80da      	strh	r2, [r3, #6]
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	0c1b      	lsrs	r3, r3, #16
 800c680:	b29a      	uxth	r2, r3
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	809a      	strh	r2, [r3, #4]
 800c686:	e000      	b.n	800c68a <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c688:	bf00      	nop
}
 800c68a:	3718      	adds	r7, #24
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b088      	sub	sp, #32
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3324      	adds	r3, #36	; 0x24
 800c6a4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c6a6:	220b      	movs	r2, #11
 800c6a8:	2120      	movs	r1, #32
 800c6aa:	68b8      	ldr	r0, [r7, #8]
 800c6ac:	f7fe ff0f 	bl	800b4ce <mem_set>
	si = i = 0; ni = 8;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	613b      	str	r3, [r7, #16]
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	617b      	str	r3, [r7, #20]
 800c6b8:	2308      	movs	r3, #8
 800c6ba:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	617a      	str	r2, [r7, #20]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c6ca:	7ffb      	ldrb	r3, [r7, #31]
 800c6cc:	2b20      	cmp	r3, #32
 800c6ce:	d94e      	bls.n	800c76e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c6d0:	7ffb      	ldrb	r3, [r7, #31]
 800c6d2:	2b2f      	cmp	r3, #47	; 0x2f
 800c6d4:	d006      	beq.n	800c6e4 <create_name+0x54>
 800c6d6:	7ffb      	ldrb	r3, [r7, #31]
 800c6d8:	2b5c      	cmp	r3, #92	; 0x5c
 800c6da:	d110      	bne.n	800c6fe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c6dc:	e002      	b.n	800c6e4 <create_name+0x54>
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	617b      	str	r3, [r7, #20]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b2f      	cmp	r3, #47	; 0x2f
 800c6ee:	d0f6      	beq.n	800c6de <create_name+0x4e>
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b5c      	cmp	r3, #92	; 0x5c
 800c6fa:	d0f0      	beq.n	800c6de <create_name+0x4e>
			break;
 800c6fc:	e038      	b.n	800c770 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c6fe:	7ffb      	ldrb	r3, [r7, #31]
 800c700:	2b2e      	cmp	r3, #46	; 0x2e
 800c702:	d003      	beq.n	800c70c <create_name+0x7c>
 800c704:	693a      	ldr	r2, [r7, #16]
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d30c      	bcc.n	800c726 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	2b0b      	cmp	r3, #11
 800c710:	d002      	beq.n	800c718 <create_name+0x88>
 800c712:	7ffb      	ldrb	r3, [r7, #31]
 800c714:	2b2e      	cmp	r3, #46	; 0x2e
 800c716:	d001      	beq.n	800c71c <create_name+0x8c>
 800c718:	2306      	movs	r3, #6
 800c71a:	e044      	b.n	800c7a6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c71c:	2308      	movs	r3, #8
 800c71e:	613b      	str	r3, [r7, #16]
 800c720:	230b      	movs	r3, #11
 800c722:	61bb      	str	r3, [r7, #24]
			continue;
 800c724:	e022      	b.n	800c76c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c726:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	da04      	bge.n	800c738 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c72e:	7ffb      	ldrb	r3, [r7, #31]
 800c730:	3b80      	subs	r3, #128	; 0x80
 800c732:	4a1f      	ldr	r2, [pc, #124]	; (800c7b0 <create_name+0x120>)
 800c734:	5cd3      	ldrb	r3, [r2, r3]
 800c736:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c738:	7ffb      	ldrb	r3, [r7, #31]
 800c73a:	4619      	mov	r1, r3
 800c73c:	481d      	ldr	r0, [pc, #116]	; (800c7b4 <create_name+0x124>)
 800c73e:	f7fe ff07 	bl	800b550 <chk_chr>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d001      	beq.n	800c74c <create_name+0xbc>
 800c748:	2306      	movs	r3, #6
 800c74a:	e02c      	b.n	800c7a6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c74c:	7ffb      	ldrb	r3, [r7, #31]
 800c74e:	2b60      	cmp	r3, #96	; 0x60
 800c750:	d905      	bls.n	800c75e <create_name+0xce>
 800c752:	7ffb      	ldrb	r3, [r7, #31]
 800c754:	2b7a      	cmp	r3, #122	; 0x7a
 800c756:	d802      	bhi.n	800c75e <create_name+0xce>
 800c758:	7ffb      	ldrb	r3, [r7, #31]
 800c75a:	3b20      	subs	r3, #32
 800c75c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	613a      	str	r2, [r7, #16]
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	4413      	add	r3, r2
 800c768:	7ffa      	ldrb	r2, [r7, #31]
 800c76a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c76c:	e7a6      	b.n	800c6bc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c76e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	441a      	add	r2, r3
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <create_name+0xf4>
 800c780:	2306      	movs	r3, #6
 800c782:	e010      	b.n	800c7a6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2be5      	cmp	r3, #229	; 0xe5
 800c78a:	d102      	bne.n	800c792 <create_name+0x102>
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	2205      	movs	r2, #5
 800c790:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c792:	7ffb      	ldrb	r3, [r7, #31]
 800c794:	2b20      	cmp	r3, #32
 800c796:	d801      	bhi.n	800c79c <create_name+0x10c>
 800c798:	2204      	movs	r2, #4
 800c79a:	e000      	b.n	800c79e <create_name+0x10e>
 800c79c:	2200      	movs	r2, #0
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	330b      	adds	r3, #11
 800c7a2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c7a4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3720      	adds	r7, #32
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	08011274 	.word	0x08011274
 800c7b4:	080111f4 	.word	0x080111f4

0800c7b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c7cc:	e002      	b.n	800c7d4 <follow_path+0x1c>
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	603b      	str	r3, [r7, #0]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b2f      	cmp	r3, #47	; 0x2f
 800c7da:	d0f8      	beq.n	800c7ce <follow_path+0x16>
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b5c      	cmp	r3, #92	; 0x5c
 800c7e2:	d0f4      	beq.n	800c7ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	2b1f      	cmp	r3, #31
 800c7f0:	d80a      	bhi.n	800c808 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2280      	movs	r2, #128	; 0x80
 800c7f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff fc7c 	bl	800c0fa <dir_sdi>
 800c802:	4603      	mov	r3, r0
 800c804:	75fb      	strb	r3, [r7, #23]
 800c806:	e048      	b.n	800c89a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c808:	463b      	mov	r3, r7
 800c80a:	4619      	mov	r1, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7ff ff3f 	bl	800c690 <create_name>
 800c812:	4603      	mov	r3, r0
 800c814:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c816:	7dfb      	ldrb	r3, [r7, #23]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d139      	bne.n	800c890 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f7ff fe51 	bl	800c4c4 <dir_find>
 800c822:	4603      	mov	r3, r0
 800c824:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c82c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c82e:	7dfb      	ldrb	r3, [r7, #23]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00a      	beq.n	800c84a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c834:	7dfb      	ldrb	r3, [r7, #23]
 800c836:	2b04      	cmp	r3, #4
 800c838:	d12c      	bne.n	800c894 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c83a:	7afb      	ldrb	r3, [r7, #11]
 800c83c:	f003 0304 	and.w	r3, r3, #4
 800c840:	2b00      	cmp	r3, #0
 800c842:	d127      	bne.n	800c894 <follow_path+0xdc>
 800c844:	2305      	movs	r3, #5
 800c846:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c848:	e024      	b.n	800c894 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c84a:	7afb      	ldrb	r3, [r7, #11]
 800c84c:	f003 0304 	and.w	r3, r3, #4
 800c850:	2b00      	cmp	r3, #0
 800c852:	d121      	bne.n	800c898 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	799b      	ldrb	r3, [r3, #6]
 800c858:	f003 0310 	and.w	r3, r3, #16
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d102      	bne.n	800c866 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c860:	2305      	movs	r3, #5
 800c862:	75fb      	strb	r3, [r7, #23]
 800c864:	e019      	b.n	800c89a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	695b      	ldr	r3, [r3, #20]
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	8992      	ldrh	r2, [r2, #12]
 800c874:	fbb3 f0f2 	udiv	r0, r3, r2
 800c878:	fb02 f200 	mul.w	r2, r2, r0
 800c87c:	1a9b      	subs	r3, r3, r2
 800c87e:	440b      	add	r3, r1
 800c880:	4619      	mov	r1, r3
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f7ff fddf 	bl	800c446 <ld_clust>
 800c888:	4602      	mov	r2, r0
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c88e:	e7bb      	b.n	800c808 <follow_path+0x50>
			if (res != FR_OK) break;
 800c890:	bf00      	nop
 800c892:	e002      	b.n	800c89a <follow_path+0xe2>
				break;
 800c894:	bf00      	nop
 800c896:	e000      	b.n	800c89a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c898:	bf00      	nop
			}
		}
	}

	return res;
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b087      	sub	sp, #28
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d031      	beq.n	800c91e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	e002      	b.n	800c8c8 <get_ldnumber+0x24>
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	617b      	str	r3, [r7, #20]
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	2b20      	cmp	r3, #32
 800c8ce:	d903      	bls.n	800c8d8 <get_ldnumber+0x34>
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b3a      	cmp	r3, #58	; 0x3a
 800c8d6:	d1f4      	bne.n	800c8c2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b3a      	cmp	r3, #58	; 0x3a
 800c8de:	d11c      	bne.n	800c91a <get_ldnumber+0x76>
			tp = *path;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	1c5a      	adds	r2, r3, #1
 800c8ea:	60fa      	str	r2, [r7, #12]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	3b30      	subs	r3, #48	; 0x30
 800c8f0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b09      	cmp	r3, #9
 800c8f6:	d80e      	bhi.n	800c916 <get_ldnumber+0x72>
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d10a      	bne.n	800c916 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d107      	bne.n	800c916 <get_ldnumber+0x72>
					vol = (int)i;
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	3301      	adds	r3, #1
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	e002      	b.n	800c920 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c91a:	2300      	movs	r3, #0
 800c91c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c91e:	693b      	ldr	r3, [r7, #16]
}
 800c920:	4618      	mov	r0, r3
 800c922:	371c      	adds	r7, #28
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	70da      	strb	r2, [r3, #3]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f04f 32ff 	mov.w	r2, #4294967295
 800c942:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c944:	6839      	ldr	r1, [r7, #0]
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7fe fffe 	bl	800b948 <move_window>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <check_fs+0x2a>
 800c952:	2304      	movs	r3, #4
 800c954:	e038      	b.n	800c9c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	3338      	adds	r3, #56	; 0x38
 800c95a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe fd12 	bl	800b388 <ld_word>
 800c964:	4603      	mov	r3, r0
 800c966:	461a      	mov	r2, r3
 800c968:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d001      	beq.n	800c974 <check_fs+0x48>
 800c970:	2303      	movs	r3, #3
 800c972:	e029      	b.n	800c9c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c97a:	2be9      	cmp	r3, #233	; 0xe9
 800c97c:	d009      	beq.n	800c992 <check_fs+0x66>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c984:	2beb      	cmp	r3, #235	; 0xeb
 800c986:	d11e      	bne.n	800c9c6 <check_fs+0x9a>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c98e:	2b90      	cmp	r3, #144	; 0x90
 800c990:	d119      	bne.n	800c9c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	3338      	adds	r3, #56	; 0x38
 800c996:	3336      	adds	r3, #54	; 0x36
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fe fd0d 	bl	800b3b8 <ld_dword>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c9a4:	4a0a      	ldr	r2, [pc, #40]	; (800c9d0 <check_fs+0xa4>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d101      	bne.n	800c9ae <check_fs+0x82>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	e00c      	b.n	800c9c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	3338      	adds	r3, #56	; 0x38
 800c9b2:	3352      	adds	r3, #82	; 0x52
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7fe fcff 	bl	800b3b8 <ld_dword>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	4b05      	ldr	r3, [pc, #20]	; (800c9d4 <check_fs+0xa8>)
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d101      	bne.n	800c9c6 <check_fs+0x9a>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e000      	b.n	800c9c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c9c6:	2302      	movs	r3, #2
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	00544146 	.word	0x00544146
 800c9d4:	33544146 	.word	0x33544146

0800c9d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b096      	sub	sp, #88	; 0x58
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f7ff ff59 	bl	800c8a4 <get_ldnumber>
 800c9f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	da01      	bge.n	800c9fe <find_volume+0x26>
 800c9fa:	230b      	movs	r3, #11
 800c9fc:	e26c      	b.n	800ced8 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c9fe:	4aa4      	ldr	r2, [pc, #656]	; (800cc90 <find_volume+0x2b8>)
 800ca00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ca08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d101      	bne.n	800ca12 <find_volume+0x3a>
 800ca0e:	230c      	movs	r3, #12
 800ca10:	e262      	b.n	800ced8 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800ca12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca14:	f7fe fdb7 	bl	800b586 <lock_fs>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d101      	bne.n	800ca22 <find_volume+0x4a>
 800ca1e:	230f      	movs	r3, #15
 800ca20:	e25a      	b.n	800ced8 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ca28:	79fb      	ldrb	r3, [r7, #7]
 800ca2a:	f023 0301 	bic.w	r3, r3, #1
 800ca2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d01a      	beq.n	800ca6e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	785b      	ldrb	r3, [r3, #1]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7fe fc05 	bl	800b24c <disk_status>
 800ca42:	4603      	mov	r3, r0
 800ca44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ca48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca4c:	f003 0301 	and.w	r3, r3, #1
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10c      	bne.n	800ca6e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ca54:	79fb      	ldrb	r3, [r7, #7]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d007      	beq.n	800ca6a <find_volume+0x92>
 800ca5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca5e:	f003 0304 	and.w	r3, r3, #4
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ca66:	230a      	movs	r3, #10
 800ca68:	e236      	b.n	800ced8 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e234      	b.n	800ced8 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca70:	2200      	movs	r2, #0
 800ca72:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	785b      	ldrb	r3, [r3, #1]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe fbfd 	bl	800b280 <disk_initialize>
 800ca86:	4603      	mov	r3, r0
 800ca88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ca8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca98:	2303      	movs	r3, #3
 800ca9a:	e21d      	b.n	800ced8 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca9c:	79fb      	ldrb	r3, [r7, #7]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d007      	beq.n	800cab2 <find_volume+0xda>
 800caa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800caa6:	f003 0304 	and.w	r3, r3, #4
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800caae:	230a      	movs	r3, #10
 800cab0:	e212      	b.n	800ced8 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab4:	7858      	ldrb	r0, [r3, #1]
 800cab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab8:	330c      	adds	r3, #12
 800caba:	461a      	mov	r2, r3
 800cabc:	2102      	movs	r1, #2
 800cabe:	f7fe fc45 	bl	800b34c <disk_ioctl>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d001      	beq.n	800cacc <find_volume+0xf4>
 800cac8:	2301      	movs	r3, #1
 800caca:	e205      	b.n	800ced8 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	899b      	ldrh	r3, [r3, #12]
 800cad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cad4:	d80d      	bhi.n	800caf2 <find_volume+0x11a>
 800cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad8:	899b      	ldrh	r3, [r3, #12]
 800cada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cade:	d308      	bcc.n	800caf2 <find_volume+0x11a>
 800cae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae2:	899b      	ldrh	r3, [r3, #12]
 800cae4:	461a      	mov	r2, r3
 800cae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae8:	899b      	ldrh	r3, [r3, #12]
 800caea:	3b01      	subs	r3, #1
 800caec:	4013      	ands	r3, r2
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <find_volume+0x11e>
 800caf2:	2301      	movs	r3, #1
 800caf4:	e1f0      	b.n	800ced8 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cafa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cafc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cafe:	f7ff ff15 	bl	800c92c <check_fs>
 800cb02:	4603      	mov	r3, r0
 800cb04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cb08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d14b      	bne.n	800cba8 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb10:	2300      	movs	r3, #0
 800cb12:	643b      	str	r3, [r7, #64]	; 0x40
 800cb14:	e01f      	b.n	800cb56 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb18:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cb1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb1e:	011b      	lsls	r3, r3, #4
 800cb20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cb24:	4413      	add	r3, r2
 800cb26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d006      	beq.n	800cb40 <find_volume+0x168>
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	3308      	adds	r3, #8
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7fe fc3e 	bl	800b3b8 <ld_dword>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	e000      	b.n	800cb42 <find_volume+0x16a>
 800cb40:	2200      	movs	r2, #0
 800cb42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cb4a:	440b      	add	r3, r1
 800cb4c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb52:	3301      	adds	r3, #1
 800cb54:	643b      	str	r3, [r7, #64]	; 0x40
 800cb56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb58:	2b03      	cmp	r3, #3
 800cb5a:	d9dc      	bls.n	800cb16 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cb60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d002      	beq.n	800cb6c <find_volume+0x194>
 800cb66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cb74:	4413      	add	r3, r2
 800cb76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d005      	beq.n	800cb8e <find_volume+0x1b6>
 800cb82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb86:	f7ff fed1 	bl	800c92c <check_fs>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	e000      	b.n	800cb90 <find_volume+0x1b8>
 800cb8e:	2303      	movs	r3, #3
 800cb90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d905      	bls.n	800cba8 <find_volume+0x1d0>
 800cb9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb9e:	3301      	adds	r3, #1
 800cba0:	643b      	str	r3, [r7, #64]	; 0x40
 800cba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cba4:	2b03      	cmp	r3, #3
 800cba6:	d9e1      	bls.n	800cb6c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbac:	2b04      	cmp	r3, #4
 800cbae:	d101      	bne.n	800cbb4 <find_volume+0x1dc>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e191      	b.n	800ced8 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cbb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d901      	bls.n	800cbc0 <find_volume+0x1e8>
 800cbbc:	230d      	movs	r3, #13
 800cbbe:	e18b      	b.n	800ced8 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	3338      	adds	r3, #56	; 0x38
 800cbc4:	330b      	adds	r3, #11
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fe fbde 	bl	800b388 <ld_word>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	461a      	mov	r2, r3
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	899b      	ldrh	r3, [r3, #12]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d001      	beq.n	800cbdc <find_volume+0x204>
 800cbd8:	230d      	movs	r3, #13
 800cbda:	e17d      	b.n	800ced8 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	3338      	adds	r3, #56	; 0x38
 800cbe0:	3316      	adds	r3, #22
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe fbd0 	bl	800b388 <ld_word>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d106      	bne.n	800cc00 <find_volume+0x228>
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	3338      	adds	r3, #56	; 0x38
 800cbf6:	3324      	adds	r3, #36	; 0x24
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fe fbdd 	bl	800b3b8 <ld_dword>
 800cbfe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc04:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc08:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	789b      	ldrb	r3, [r3, #2]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d005      	beq.n	800cc24 <find_volume+0x24c>
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	789b      	ldrb	r3, [r3, #2]
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d001      	beq.n	800cc24 <find_volume+0x24c>
 800cc20:	230d      	movs	r3, #13
 800cc22:	e159      	b.n	800ced8 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc26:	789b      	ldrb	r3, [r3, #2]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc2c:	fb02 f303 	mul.w	r3, r2, r3
 800cc30:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc40:	895b      	ldrh	r3, [r3, #10]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d008      	beq.n	800cc58 <find_volume+0x280>
 800cc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc48:	895b      	ldrh	r3, [r3, #10]
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	895b      	ldrh	r3, [r3, #10]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	4013      	ands	r3, r2
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d001      	beq.n	800cc5c <find_volume+0x284>
 800cc58:	230d      	movs	r3, #13
 800cc5a:	e13d      	b.n	800ced8 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	3338      	adds	r3, #56	; 0x38
 800cc60:	3311      	adds	r3, #17
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fe fb90 	bl	800b388 <ld_word>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	891b      	ldrh	r3, [r3, #8]
 800cc74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc76:	8992      	ldrh	r2, [r2, #12]
 800cc78:	0952      	lsrs	r2, r2, #5
 800cc7a:	b292      	uxth	r2, r2
 800cc7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc80:	fb02 f201 	mul.w	r2, r2, r1
 800cc84:	1a9b      	subs	r3, r3, r2
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d003      	beq.n	800cc94 <find_volume+0x2bc>
 800cc8c:	230d      	movs	r3, #13
 800cc8e:	e123      	b.n	800ced8 <find_volume+0x500>
 800cc90:	2000037c 	.word	0x2000037c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	3338      	adds	r3, #56	; 0x38
 800cc98:	3313      	adds	r3, #19
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fe fb74 	bl	800b388 <ld_word>
 800cca0:	4603      	mov	r3, r0
 800cca2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d106      	bne.n	800ccb8 <find_volume+0x2e0>
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccac:	3338      	adds	r3, #56	; 0x38
 800ccae:	3320      	adds	r3, #32
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7fe fb81 	bl	800b3b8 <ld_dword>
 800ccb6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	3338      	adds	r3, #56	; 0x38
 800ccbc:	330e      	adds	r3, #14
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7fe fb62 	bl	800b388 <ld_word>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ccc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <find_volume+0x2fa>
 800ccce:	230d      	movs	r3, #13
 800ccd0:	e102      	b.n	800ced8 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ccd2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ccd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccd6:	4413      	add	r3, r2
 800ccd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccda:	8911      	ldrh	r1, [r2, #8]
 800ccdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccde:	8992      	ldrh	r2, [r2, #12]
 800cce0:	0952      	lsrs	r2, r2, #5
 800cce2:	b292      	uxth	r2, r2
 800cce4:	fbb1 f2f2 	udiv	r2, r1, r2
 800cce8:	b292      	uxth	r2, r2
 800ccea:	4413      	add	r3, r2
 800ccec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ccee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d201      	bcs.n	800ccfa <find_volume+0x322>
 800ccf6:	230d      	movs	r3, #13
 800ccf8:	e0ee      	b.n	800ced8 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ccfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd02:	8952      	ldrh	r2, [r2, #10]
 800cd04:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd08:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <find_volume+0x33c>
 800cd10:	230d      	movs	r3, #13
 800cd12:	e0e1      	b.n	800ced8 <find_volume+0x500>
		fmt = FS_FAT32;
 800cd14:	2303      	movs	r3, #3
 800cd16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d802      	bhi.n	800cd2a <find_volume+0x352>
 800cd24:	2302      	movs	r3, #2
 800cd26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d802      	bhi.n	800cd3a <find_volume+0x362>
 800cd34:	2301      	movs	r3, #1
 800cd36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3c:	1c9a      	adds	r2, r3, #2
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd46:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd4c:	441a      	add	r2, r3
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd50:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cd52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd56:	441a      	add	r2, r3
 800cd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800cd5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd60:	2b03      	cmp	r3, #3
 800cd62:	d11e      	bne.n	800cda2 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd66:	3338      	adds	r3, #56	; 0x38
 800cd68:	332a      	adds	r3, #42	; 0x2a
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fe fb0c 	bl	800b388 <ld_word>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <find_volume+0x3a2>
 800cd76:	230d      	movs	r3, #13
 800cd78:	e0ae      	b.n	800ced8 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7c:	891b      	ldrh	r3, [r3, #8]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <find_volume+0x3ae>
 800cd82:	230d      	movs	r3, #13
 800cd84:	e0a8      	b.n	800ced8 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd88:	3338      	adds	r3, #56	; 0x38
 800cd8a:	332c      	adds	r3, #44	; 0x2c
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fe fb13 	bl	800b3b8 <ld_dword>
 800cd92:	4602      	mov	r2, r0
 800cd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd96:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	69db      	ldr	r3, [r3, #28]
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	647b      	str	r3, [r7, #68]	; 0x44
 800cda0:	e01f      	b.n	800cde2 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda4:	891b      	ldrh	r3, [r3, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d101      	bne.n	800cdae <find_volume+0x3d6>
 800cdaa:	230d      	movs	r3, #13
 800cdac:	e094      	b.n	800ced8 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cdb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdb4:	441a      	add	r2, r3
 800cdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cdba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	d103      	bne.n	800cdca <find_volume+0x3f2>
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	69db      	ldr	r3, [r3, #28]
 800cdc6:	005b      	lsls	r3, r3, #1
 800cdc8:	e00a      	b.n	800cde0 <find_volume+0x408>
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	69da      	ldr	r2, [r3, #28]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	4413      	add	r3, r2
 800cdd4:	085a      	lsrs	r2, r3, #1
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd8:	69db      	ldr	r3, [r3, #28]
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cde0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde4:	6a1a      	ldr	r2, [r3, #32]
 800cde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde8:	899b      	ldrh	r3, [r3, #12]
 800cdea:	4619      	mov	r1, r3
 800cdec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdee:	440b      	add	r3, r1
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdf4:	8989      	ldrh	r1, [r1, #12]
 800cdf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d201      	bcs.n	800ce02 <find_volume+0x42a>
 800cdfe:	230d      	movs	r3, #13
 800ce00:	e06a      	b.n	800ced8 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce04:	f04f 32ff 	mov.w	r2, #4294967295
 800ce08:	619a      	str	r2, [r3, #24]
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0c:	699a      	ldr	r2, [r3, #24]
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce10:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ce12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce14:	2280      	movs	r2, #128	; 0x80
 800ce16:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ce18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d149      	bne.n	800ceb4 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	3338      	adds	r3, #56	; 0x38
 800ce24:	3330      	adds	r3, #48	; 0x30
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe faae 	bl	800b388 <ld_word>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d140      	bne.n	800ceb4 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ce32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce34:	3301      	adds	r3, #1
 800ce36:	4619      	mov	r1, r3
 800ce38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce3a:	f7fe fd85 	bl	800b948 <move_window>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d137      	bne.n	800ceb4 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	2200      	movs	r2, #0
 800ce48:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4c:	3338      	adds	r3, #56	; 0x38
 800ce4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fe fa98 	bl	800b388 <ld_word>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d127      	bne.n	800ceb4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	3338      	adds	r3, #56	; 0x38
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fe faa5 	bl	800b3b8 <ld_dword>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	4b1b      	ldr	r3, [pc, #108]	; (800cee0 <find_volume+0x508>)
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d11e      	bne.n	800ceb4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce78:	3338      	adds	r3, #56	; 0x38
 800ce7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fe fa9a 	bl	800b3b8 <ld_dword>
 800ce84:	4602      	mov	r2, r0
 800ce86:	4b17      	ldr	r3, [pc, #92]	; (800cee4 <find_volume+0x50c>)
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d113      	bne.n	800ceb4 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8e:	3338      	adds	r3, #56	; 0x38
 800ce90:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fe fa8f 	bl	800b3b8 <ld_dword>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea2:	3338      	adds	r3, #56	; 0x38
 800cea4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7fe fa85 	bl	800b3b8 <ld_dword>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ceba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cebc:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <find_volume+0x510>)
 800cebe:	881b      	ldrh	r3, [r3, #0]
 800cec0:	3301      	adds	r3, #1
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	4b08      	ldr	r3, [pc, #32]	; (800cee8 <find_volume+0x510>)
 800cec6:	801a      	strh	r2, [r3, #0]
 800cec8:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <find_volume+0x510>)
 800ceca:	881a      	ldrh	r2, [r3, #0]
 800cecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cece:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ced0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ced2:	f7fe fcd1 	bl	800b878 <clear_lock>
#endif
	return FR_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3758      	adds	r7, #88	; 0x58
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	41615252 	.word	0x41615252
 800cee4:	61417272 	.word	0x61417272
 800cee8:	20000380 	.word	0x20000380

0800ceec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cef6:	2309      	movs	r3, #9
 800cef8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d02e      	beq.n	800cf5e <validate+0x72>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d02a      	beq.n	800cf5e <validate+0x72>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d025      	beq.n	800cf5e <validate+0x72>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	889a      	ldrh	r2, [r3, #4]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	88db      	ldrh	r3, [r3, #6]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d11e      	bne.n	800cf5e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fe fb2e 	bl	800b586 <lock_fs>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d014      	beq.n	800cf5a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	785b      	ldrb	r3, [r3, #1]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fe f988 	bl	800b24c <disk_status>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	f003 0301 	and.w	r3, r3, #1
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d102      	bne.n	800cf4c <validate+0x60>
				res = FR_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	73fb      	strb	r3, [r7, #15]
 800cf4a:	e008      	b.n	800cf5e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2100      	movs	r1, #0
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7fe fb2d 	bl	800b5b2 <unlock_fs>
 800cf58:	e001      	b.n	800cf5e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800cf5a:	230f      	movs	r3, #15
 800cf5c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d102      	bne.n	800cf6a <validate+0x7e>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	e000      	b.n	800cf6c <validate+0x80>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	683a      	ldr	r2, [r7, #0]
 800cf6e:	6013      	str	r3, [r2, #0]
	return res;
 800cf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
	...

0800cf7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b088      	sub	sp, #32
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	4613      	mov	r3, r2
 800cf88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf8e:	f107 0310 	add.w	r3, r7, #16
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff fc86 	bl	800c8a4 <get_ldnumber>
 800cf98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	da01      	bge.n	800cfa4 <f_mount+0x28>
 800cfa0:	230b      	movs	r3, #11
 800cfa2:	e048      	b.n	800d036 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cfa4:	4a26      	ldr	r2, [pc, #152]	; (800d040 <f_mount+0xc4>)
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00f      	beq.n	800cfd4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cfb4:	69b8      	ldr	r0, [r7, #24]
 800cfb6:	f7fe fc5f 	bl	800b878 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 fe05 	bl	800dbce <ff_del_syncobj>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d101      	bne.n	800cfce <f_mount+0x52>
 800cfca:	2302      	movs	r3, #2
 800cfcc:	e033      	b.n	800d036 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00f      	beq.n	800cffa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	3310      	adds	r3, #16
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4610      	mov	r0, r2
 800cfec:	f000 fdcf 	bl	800db8e <ff_cre_syncobj>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d101      	bne.n	800cffa <f_mount+0x7e>
 800cff6:	2302      	movs	r3, #2
 800cff8:	e01d      	b.n	800d036 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cffa:	68fa      	ldr	r2, [r7, #12]
 800cffc:	4910      	ldr	r1, [pc, #64]	; (800d040 <f_mount+0xc4>)
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d002      	beq.n	800d010 <f_mount+0x94>
 800d00a:	79fb      	ldrb	r3, [r7, #7]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d001      	beq.n	800d014 <f_mount+0x98>
 800d010:	2300      	movs	r3, #0
 800d012:	e010      	b.n	800d036 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d014:	f107 010c 	add.w	r1, r7, #12
 800d018:	f107 0308 	add.w	r3, r7, #8
 800d01c:	2200      	movs	r2, #0
 800d01e:	4618      	mov	r0, r3
 800d020:	f7ff fcda 	bl	800c9d8 <find_volume>
 800d024:	4603      	mov	r3, r0
 800d026:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	7dfa      	ldrb	r2, [r7, #23]
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe fabf 	bl	800b5b2 <unlock_fs>
 800d034:	7dfb      	ldrb	r3, [r7, #23]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3720      	adds	r7, #32
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	2000037c 	.word	0x2000037c

0800d044 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b098      	sub	sp, #96	; 0x60
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	4613      	mov	r3, r2
 800d050:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d101      	bne.n	800d05c <f_open+0x18>
 800d058:	2309      	movs	r3, #9
 800d05a:	e1c2      	b.n	800d3e2 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d05c:	79fb      	ldrb	r3, [r7, #7]
 800d05e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d062:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d064:	79fa      	ldrb	r2, [r7, #7]
 800d066:	f107 0110 	add.w	r1, r7, #16
 800d06a:	f107 0308 	add.w	r3, r7, #8
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff fcb2 	bl	800c9d8 <find_volume>
 800d074:	4603      	mov	r3, r0
 800d076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d07a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f040 819f 	bne.w	800d3c2 <f_open+0x37e>
		dj.obj.fs = fs;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	f107 0314 	add.w	r3, r7, #20
 800d08e:	4611      	mov	r1, r2
 800d090:	4618      	mov	r0, r3
 800d092:	f7ff fb91 	bl	800c7b8 <follow_path>
 800d096:	4603      	mov	r3, r0
 800d098:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d09c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d11a      	bne.n	800d0da <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d0a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d0a8:	b25b      	sxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	da03      	bge.n	800d0b6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d0ae:	2306      	movs	r3, #6
 800d0b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d0b4:	e011      	b.n	800d0da <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	f023 0301 	bic.w	r3, r3, #1
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	bf14      	ite	ne
 800d0c0:	2301      	movne	r3, #1
 800d0c2:	2300      	moveq	r3, #0
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	f107 0314 	add.w	r3, r7, #20
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fe fa8a 	bl	800b5e8 <chk_lock>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d0da:	79fb      	ldrb	r3, [r7, #7]
 800d0dc:	f003 031c 	and.w	r3, r3, #28
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d07f      	beq.n	800d1e4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d0e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d017      	beq.n	800d11c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d0ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0f0:	2b04      	cmp	r3, #4
 800d0f2:	d10e      	bne.n	800d112 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d0f4:	f7fe fad4 	bl	800b6a0 <enq_lock>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d006      	beq.n	800d10c <f_open+0xc8>
 800d0fe:	f107 0314 	add.w	r3, r7, #20
 800d102:	4618      	mov	r0, r3
 800d104:	f7ff fa33 	bl	800c56e <dir_register>
 800d108:	4603      	mov	r3, r0
 800d10a:	e000      	b.n	800d10e <f_open+0xca>
 800d10c:	2312      	movs	r3, #18
 800d10e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d112:	79fb      	ldrb	r3, [r7, #7]
 800d114:	f043 0308 	orr.w	r3, r3, #8
 800d118:	71fb      	strb	r3, [r7, #7]
 800d11a:	e010      	b.n	800d13e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d11c:	7ebb      	ldrb	r3, [r7, #26]
 800d11e:	f003 0311 	and.w	r3, r3, #17
 800d122:	2b00      	cmp	r3, #0
 800d124:	d003      	beq.n	800d12e <f_open+0xea>
					res = FR_DENIED;
 800d126:	2307      	movs	r3, #7
 800d128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d12c:	e007      	b.n	800d13e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d12e:	79fb      	ldrb	r3, [r7, #7]
 800d130:	f003 0304 	and.w	r3, r3, #4
 800d134:	2b00      	cmp	r3, #0
 800d136:	d002      	beq.n	800d13e <f_open+0xfa>
 800d138:	2308      	movs	r3, #8
 800d13a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d13e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d142:	2b00      	cmp	r3, #0
 800d144:	d168      	bne.n	800d218 <f_open+0x1d4>
 800d146:	79fb      	ldrb	r3, [r7, #7]
 800d148:	f003 0308 	and.w	r3, r3, #8
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d063      	beq.n	800d218 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d150:	f7fa fd82 	bl	8007c58 <get_fattime>
 800d154:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d158:	330e      	adds	r3, #14
 800d15a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fe f969 	bl	800b434 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d164:	3316      	adds	r3, #22
 800d166:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe f963 	bl	800b434 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d170:	330b      	adds	r3, #11
 800d172:	2220      	movs	r2, #32
 800d174:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d17a:	4611      	mov	r1, r2
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7ff f962 	bl	800c446 <ld_clust>
 800d182:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d188:	2200      	movs	r2, #0
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7ff f97a 	bl	800c484 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d192:	331c      	adds	r3, #28
 800d194:	2100      	movs	r1, #0
 800d196:	4618      	mov	r0, r3
 800d198:	f7fe f94c 	bl	800b434 <st_dword>
					fs->wflag = 1;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d037      	beq.n	800d218 <f_open+0x1d4>
						dw = fs->winsect;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ac:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d1ae:	f107 0314 	add.w	r3, r7, #20
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fe fe6a 	bl	800be90 <remove_chain>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d1c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d126      	bne.n	800d218 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe fbba 	bl	800b948 <move_window>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1de:	3a01      	subs	r2, #1
 800d1e0:	615a      	str	r2, [r3, #20]
 800d1e2:	e019      	b.n	800d218 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d1e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d115      	bne.n	800d218 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d1ec:	7ebb      	ldrb	r3, [r7, #26]
 800d1ee:	f003 0310 	and.w	r3, r3, #16
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d003      	beq.n	800d1fe <f_open+0x1ba>
					res = FR_NO_FILE;
 800d1f6:	2304      	movs	r3, #4
 800d1f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d1fc:	e00c      	b.n	800d218 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d1fe:	79fb      	ldrb	r3, [r7, #7]
 800d200:	f003 0302 	and.w	r3, r3, #2
 800d204:	2b00      	cmp	r3, #0
 800d206:	d007      	beq.n	800d218 <f_open+0x1d4>
 800d208:	7ebb      	ldrb	r3, [r7, #26]
 800d20a:	f003 0301 	and.w	r3, r3, #1
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d002      	beq.n	800d218 <f_open+0x1d4>
						res = FR_DENIED;
 800d212:	2307      	movs	r3, #7
 800d214:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d128      	bne.n	800d272 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d220:	79fb      	ldrb	r3, [r7, #7]
 800d222:	f003 0308 	and.w	r3, r3, #8
 800d226:	2b00      	cmp	r3, #0
 800d228:	d003      	beq.n	800d232 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d22a:	79fb      	ldrb	r3, [r7, #7]
 800d22c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d230:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d23a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d240:	79fb      	ldrb	r3, [r7, #7]
 800d242:	f023 0301 	bic.w	r3, r3, #1
 800d246:	2b00      	cmp	r3, #0
 800d248:	bf14      	ite	ne
 800d24a:	2301      	movne	r3, #1
 800d24c:	2300      	moveq	r3, #0
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	461a      	mov	r2, r3
 800d252:	f107 0314 	add.w	r3, r7, #20
 800d256:	4611      	mov	r1, r2
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fe fa43 	bl	800b6e4 <inc_lock>
 800d25e:	4602      	mov	r2, r0
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d102      	bne.n	800d272 <f_open+0x22e>
 800d26c:	2302      	movs	r3, #2
 800d26e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d276:	2b00      	cmp	r3, #0
 800d278:	f040 80a3 	bne.w	800d3c2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d280:	4611      	mov	r1, r2
 800d282:	4618      	mov	r0, r3
 800d284:	f7ff f8df 	bl	800c446 <ld_clust>
 800d288:	4602      	mov	r2, r0
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d290:	331c      	adds	r3, #28
 800d292:	4618      	mov	r0, r3
 800d294:	f7fe f890 	bl	800b3b8 <ld_dword>
 800d298:	4602      	mov	r2, r0
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	88da      	ldrh	r2, [r3, #6]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	79fa      	ldrb	r2, [r7, #7]
 800d2b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	3330      	adds	r3, #48	; 0x30
 800d2ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fe f8fa 	bl	800b4ce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d2da:	79fb      	ldrb	r3, [r7, #7]
 800d2dc:	f003 0320 	and.w	r3, r3, #32
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d06e      	beq.n	800d3c2 <f_open+0x37e>
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d06a      	beq.n	800d3c2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	68da      	ldr	r2, [r3, #12]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	895b      	ldrh	r3, [r3, #10]
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	899b      	ldrh	r3, [r3, #12]
 800d2fe:	fb03 f302 	mul.w	r3, r3, r2
 800d302:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	657b      	str	r3, [r7, #84]	; 0x54
 800d310:	e016      	b.n	800d340 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d316:	4618      	mov	r0, r3
 800d318:	f7fe fbd3 	bl	800bac2 <get_fat>
 800d31c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d31e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d320:	2b01      	cmp	r3, #1
 800d322:	d802      	bhi.n	800d32a <f_open+0x2e6>
 800d324:	2302      	movs	r3, #2
 800d326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d32a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d330:	d102      	bne.n	800d338 <f_open+0x2f4>
 800d332:	2301      	movs	r3, #1
 800d334:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	657b      	str	r3, [r7, #84]	; 0x54
 800d340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d344:	2b00      	cmp	r3, #0
 800d346:	d103      	bne.n	800d350 <f_open+0x30c>
 800d348:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d34a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d8e0      	bhi.n	800d312 <f_open+0x2ce>
				}
				fp->clust = clst;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d354:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d131      	bne.n	800d3c2 <f_open+0x37e>
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	899b      	ldrh	r3, [r3, #12]
 800d362:	461a      	mov	r2, r3
 800d364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d366:	fbb3 f1f2 	udiv	r1, r3, r2
 800d36a:	fb02 f201 	mul.w	r2, r2, r1
 800d36e:	1a9b      	subs	r3, r3, r2
 800d370:	2b00      	cmp	r3, #0
 800d372:	d026      	beq.n	800d3c2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d378:	4618      	mov	r0, r3
 800d37a:	f7fe fb83 	bl	800ba84 <clust2sect>
 800d37e:	6478      	str	r0, [r7, #68]	; 0x44
 800d380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d382:	2b00      	cmp	r3, #0
 800d384:	d103      	bne.n	800d38e <f_open+0x34a>
						res = FR_INT_ERR;
 800d386:	2302      	movs	r3, #2
 800d388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d38c:	e019      	b.n	800d3c2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	899b      	ldrh	r3, [r3, #12]
 800d392:	461a      	mov	r2, r3
 800d394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d396:	fbb3 f2f2 	udiv	r2, r3, r2
 800d39a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d39c:	441a      	add	r2, r3
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	7858      	ldrb	r0, [r3, #1]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6a1a      	ldr	r2, [r3, #32]
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	f7fd ff8b 	bl	800b2cc <disk_read>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <f_open+0x37e>
 800d3bc:	2301      	movs	r3, #1
 800d3be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d3c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d002      	beq.n	800d3d0 <f_open+0x38c>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fe f8ea 	bl	800b5b2 <unlock_fs>
 800d3de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3760      	adds	r7, #96	; 0x60
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b08c      	sub	sp, #48	; 0x30
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	607a      	str	r2, [r7, #4]
 800d3f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2200      	movs	r2, #0
 800d400:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f107 0210 	add.w	r2, r7, #16
 800d408:	4611      	mov	r1, r2
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7ff fd6e 	bl	800ceec <validate>
 800d410:	4603      	mov	r3, r0
 800d412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d107      	bne.n	800d42e <f_write+0x44>
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	7d5b      	ldrb	r3, [r3, #21]
 800d422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d009      	beq.n	800d442 <f_write+0x58>
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d434:	4611      	mov	r1, r2
 800d436:	4618      	mov	r0, r3
 800d438:	f7fe f8bb 	bl	800b5b2 <unlock_fs>
 800d43c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d440:	e192      	b.n	800d768 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	7d1b      	ldrb	r3, [r3, #20]
 800d446:	f003 0302 	and.w	r3, r3, #2
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d106      	bne.n	800d45c <f_write+0x72>
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	2107      	movs	r1, #7
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe f8ad 	bl	800b5b2 <unlock_fs>
 800d458:	2307      	movs	r3, #7
 800d45a:	e185      	b.n	800d768 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	699a      	ldr	r2, [r3, #24]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	441a      	add	r2, r3
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	699b      	ldr	r3, [r3, #24]
 800d468:	429a      	cmp	r2, r3
 800d46a:	f080 816a 	bcs.w	800d742 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	43db      	mvns	r3, r3
 800d474:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d476:	e164      	b.n	800d742 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	699b      	ldr	r3, [r3, #24]
 800d47c:	693a      	ldr	r2, [r7, #16]
 800d47e:	8992      	ldrh	r2, [r2, #12]
 800d480:	fbb3 f1f2 	udiv	r1, r3, r2
 800d484:	fb02 f201 	mul.w	r2, r2, r1
 800d488:	1a9b      	subs	r3, r3, r2
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f040 810f 	bne.w	800d6ae <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	699b      	ldr	r3, [r3, #24]
 800d494:	693a      	ldr	r2, [r7, #16]
 800d496:	8992      	ldrh	r2, [r2, #12]
 800d498:	fbb3 f3f2 	udiv	r3, r3, r2
 800d49c:	693a      	ldr	r2, [r7, #16]
 800d49e:	8952      	ldrh	r2, [r2, #10]
 800d4a0:	3a01      	subs	r2, #1
 800d4a2:	4013      	ands	r3, r2
 800d4a4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d14d      	bne.n	800d548 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	699b      	ldr	r3, [r3, #24]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10c      	bne.n	800d4ce <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d11a      	bne.n	800d4f6 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fe fd48 	bl	800bf5a <create_chain>
 800d4ca:	62b8      	str	r0, [r7, #40]	; 0x28
 800d4cc:	e013      	b.n	800d4f6 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d007      	beq.n	800d4e6 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	699b      	ldr	r3, [r3, #24]
 800d4da:	4619      	mov	r1, r3
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f7fe fdd4 	bl	800c08a <clmt_clust>
 800d4e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800d4e4:	e007      	b.n	800d4f6 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d4e6:	68fa      	ldr	r2, [r7, #12]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	69db      	ldr	r3, [r3, #28]
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	4610      	mov	r0, r2
 800d4f0:	f7fe fd33 	bl	800bf5a <create_chain>
 800d4f4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f000 8127 	beq.w	800d74c <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d500:	2b01      	cmp	r3, #1
 800d502:	d109      	bne.n	800d518 <f_write+0x12e>
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2202      	movs	r2, #2
 800d508:	755a      	strb	r2, [r3, #21]
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	2102      	movs	r1, #2
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fe f84f 	bl	800b5b2 <unlock_fs>
 800d514:	2302      	movs	r3, #2
 800d516:	e127      	b.n	800d768 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51e:	d109      	bne.n	800d534 <f_write+0x14a>
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2201      	movs	r2, #1
 800d524:	755a      	strb	r2, [r3, #21]
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	2101      	movs	r1, #1
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fe f841 	bl	800b5b2 <unlock_fs>
 800d530:	2301      	movs	r3, #1
 800d532:	e119      	b.n	800d768 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d538:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d102      	bne.n	800d548 <f_write+0x15e>
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d546:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	7d1b      	ldrb	r3, [r3, #20]
 800d54c:	b25b      	sxtb	r3, r3
 800d54e:	2b00      	cmp	r3, #0
 800d550:	da1d      	bge.n	800d58e <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	7858      	ldrb	r0, [r3, #1]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6a1a      	ldr	r2, [r3, #32]
 800d560:	2301      	movs	r3, #1
 800d562:	f7fd fed3 	bl	800b30c <disk_write>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d009      	beq.n	800d580 <f_write+0x196>
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2201      	movs	r2, #1
 800d570:	755a      	strb	r2, [r3, #21]
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	2101      	movs	r1, #1
 800d576:	4618      	mov	r0, r3
 800d578:	f7fe f81b 	bl	800b5b2 <unlock_fs>
 800d57c:	2301      	movs	r3, #1
 800d57e:	e0f3      	b.n	800d768 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	7d1b      	ldrb	r3, [r3, #20]
 800d584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d588:	b2da      	uxtb	r2, r3
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d58e:	693a      	ldr	r2, [r7, #16]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	4619      	mov	r1, r3
 800d596:	4610      	mov	r0, r2
 800d598:	f7fe fa74 	bl	800ba84 <clust2sect>
 800d59c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d109      	bne.n	800d5b8 <f_write+0x1ce>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2202      	movs	r2, #2
 800d5a8:	755a      	strb	r2, [r3, #21]
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2102      	movs	r1, #2
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fd ffff 	bl	800b5b2 <unlock_fs>
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	e0d7      	b.n	800d768 <f_write+0x37e>
			sect += csect;
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	4413      	add	r3, r2
 800d5be:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	899b      	ldrh	r3, [r3, #12]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5cc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d5ce:	6a3b      	ldr	r3, [r7, #32]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d048      	beq.n	800d666 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d5d4:	69ba      	ldr	r2, [r7, #24]
 800d5d6:	6a3b      	ldr	r3, [r7, #32]
 800d5d8:	4413      	add	r3, r2
 800d5da:	693a      	ldr	r2, [r7, #16]
 800d5dc:	8952      	ldrh	r2, [r2, #10]
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d905      	bls.n	800d5ee <f_write+0x204>
					cc = fs->csize - csect;
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	895b      	ldrh	r3, [r3, #10]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	7858      	ldrb	r0, [r3, #1]
 800d5f2:	6a3b      	ldr	r3, [r7, #32]
 800d5f4:	697a      	ldr	r2, [r7, #20]
 800d5f6:	69f9      	ldr	r1, [r7, #28]
 800d5f8:	f7fd fe88 	bl	800b30c <disk_write>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d009      	beq.n	800d616 <f_write+0x22c>
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2201      	movs	r2, #1
 800d606:	755a      	strb	r2, [r3, #21]
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	2101      	movs	r1, #1
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fd ffd0 	bl	800b5b2 <unlock_fs>
 800d612:	2301      	movs	r3, #1
 800d614:	e0a8      	b.n	800d768 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6a1a      	ldr	r2, [r3, #32]
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	6a3a      	ldr	r2, [r7, #32]
 800d620:	429a      	cmp	r2, r3
 800d622:	d918      	bls.n	800d656 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6a1a      	ldr	r2, [r3, #32]
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	1ad3      	subs	r3, r2, r3
 800d632:	693a      	ldr	r2, [r7, #16]
 800d634:	8992      	ldrh	r2, [r2, #12]
 800d636:	fb02 f303 	mul.w	r3, r2, r3
 800d63a:	69fa      	ldr	r2, [r7, #28]
 800d63c:	18d1      	adds	r1, r2, r3
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	899b      	ldrh	r3, [r3, #12]
 800d642:	461a      	mov	r2, r3
 800d644:	f7fd ff22 	bl	800b48c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	7d1b      	ldrb	r3, [r3, #20]
 800d64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d650:	b2da      	uxtb	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	899b      	ldrh	r3, [r3, #12]
 800d65a:	461a      	mov	r2, r3
 800d65c:	6a3b      	ldr	r3, [r7, #32]
 800d65e:	fb02 f303 	mul.w	r3, r2, r3
 800d662:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d664:	e050      	b.n	800d708 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d01b      	beq.n	800d6a8 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	699a      	ldr	r2, [r3, #24]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d678:	429a      	cmp	r2, r3
 800d67a:	d215      	bcs.n	800d6a8 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	7858      	ldrb	r0, [r3, #1]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d686:	2301      	movs	r3, #1
 800d688:	697a      	ldr	r2, [r7, #20]
 800d68a:	f7fd fe1f 	bl	800b2cc <disk_read>
 800d68e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d690:	2b00      	cmp	r3, #0
 800d692:	d009      	beq.n	800d6a8 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2201      	movs	r2, #1
 800d698:	755a      	strb	r2, [r3, #21]
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	2101      	movs	r1, #1
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fd ff87 	bl	800b5b2 <unlock_fs>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e05f      	b.n	800d768 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	697a      	ldr	r2, [r7, #20]
 800d6ac:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	899b      	ldrh	r3, [r3, #12]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	693a      	ldr	r2, [r7, #16]
 800d6ba:	8992      	ldrh	r2, [r2, #12]
 800d6bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6c0:	fb02 f201 	mul.w	r2, r2, r1
 800d6c4:	1a9b      	subs	r3, r3, r2
 800d6c6:	1ac3      	subs	r3, r0, r3
 800d6c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d901      	bls.n	800d6d6 <f_write+0x2ec>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	699b      	ldr	r3, [r3, #24]
 800d6e0:	693a      	ldr	r2, [r7, #16]
 800d6e2:	8992      	ldrh	r2, [r2, #12]
 800d6e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d6e8:	fb02 f200 	mul.w	r2, r2, r0
 800d6ec:	1a9b      	subs	r3, r3, r2
 800d6ee:	440b      	add	r3, r1
 800d6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6f2:	69f9      	ldr	r1, [r7, #28]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fd fec9 	bl	800b48c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	7d1b      	ldrb	r3, [r3, #20]
 800d6fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d702:	b2da      	uxtb	r2, r3
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d708:	69fa      	ldr	r2, [r7, #28]
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	4413      	add	r3, r2
 800d70e:	61fb      	str	r3, [r7, #28]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	699a      	ldr	r2, [r3, #24]
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	441a      	add	r2, r3
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	619a      	str	r2, [r3, #24]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	68da      	ldr	r2, [r3, #12]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	429a      	cmp	r2, r3
 800d726:	bf38      	it	cc
 800d728:	461a      	movcc	r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	60da      	str	r2, [r3, #12]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d734:	441a      	add	r2, r3
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	601a      	str	r2, [r3, #0]
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	f47f ae97 	bne.w	800d478 <f_write+0x8e>
 800d74a:	e000      	b.n	800d74e <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d74c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	7d1b      	ldrb	r3, [r3, #20]
 800d752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d756:	b2da      	uxtb	r2, r3
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	2100      	movs	r1, #0
 800d760:	4618      	mov	r0, r3
 800d762:	f7fd ff26 	bl	800b5b2 <unlock_fs>
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3730      	adds	r7, #48	; 0x30
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f107 0208 	add.w	r2, r7, #8
 800d77e:	4611      	mov	r1, r2
 800d780:	4618      	mov	r0, r3
 800d782:	f7ff fbb3 	bl	800ceec <validate>
 800d786:	4603      	mov	r3, r0
 800d788:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d78a:	7dfb      	ldrb	r3, [r7, #23]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d16d      	bne.n	800d86c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	7d1b      	ldrb	r3, [r3, #20]
 800d794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d067      	beq.n	800d86c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	7d1b      	ldrb	r3, [r3, #20]
 800d7a0:	b25b      	sxtb	r3, r3
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	da1a      	bge.n	800d7dc <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	7858      	ldrb	r0, [r3, #1]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6a1a      	ldr	r2, [r3, #32]
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	f7fd fda9 	bl	800b30c <disk_write>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d006      	beq.n	800d7ce <f_sync+0x5e>
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	2101      	movs	r1, #1
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7fd fef4 	bl	800b5b2 <unlock_fs>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e055      	b.n	800d87a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	7d1b      	ldrb	r3, [r3, #20]
 800d7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d7dc:	f7fa fa3c 	bl	8007c58 <get_fattime>
 800d7e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	4610      	mov	r0, r2
 800d7ec:	f7fe f8ac 	bl	800b948 <move_window>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d7f4:	7dfb      	ldrb	r3, [r7, #23]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d138      	bne.n	800d86c <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	330b      	adds	r3, #11
 800d804:	781a      	ldrb	r2, [r3, #0]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	330b      	adds	r3, #11
 800d80a:	f042 0220 	orr.w	r2, r2, #32
 800d80e:	b2d2      	uxtb	r2, r2
 800d810:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6818      	ldr	r0, [r3, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	461a      	mov	r2, r3
 800d81c:	68f9      	ldr	r1, [r7, #12]
 800d81e:	f7fe fe31 	bl	800c484 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f103 021c 	add.w	r2, r3, #28
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	4619      	mov	r1, r3
 800d82e:	4610      	mov	r0, r2
 800d830:	f7fd fe00 	bl	800b434 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	3316      	adds	r3, #22
 800d838:	6939      	ldr	r1, [r7, #16]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7fd fdfa 	bl	800b434 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	3312      	adds	r3, #18
 800d844:	2100      	movs	r1, #0
 800d846:	4618      	mov	r0, r3
 800d848:	f7fd fdd9 	bl	800b3fe <st_word>
					fs->wflag = 1;
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	2201      	movs	r2, #1
 800d850:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	4618      	mov	r0, r3
 800d856:	f7fe f8a5 	bl	800b9a4 <sync_fs>
 800d85a:	4603      	mov	r3, r0
 800d85c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	7d1b      	ldrb	r3, [r3, #20]
 800d862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d866:	b2da      	uxtb	r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	7dfa      	ldrb	r2, [r7, #23]
 800d870:	4611      	mov	r1, r2
 800d872:	4618      	mov	r0, r3
 800d874:	f7fd fe9d 	bl	800b5b2 <unlock_fs>
 800d878:	7dfb      	ldrb	r3, [r7, #23]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3718      	adds	r7, #24
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b084      	sub	sp, #16
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7ff ff70 	bl	800d770 <f_sync>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d894:	7bfb      	ldrb	r3, [r7, #15]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d11d      	bne.n	800d8d6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f107 0208 	add.w	r2, r7, #8
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7ff fb22 	bl	800ceec <validate>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d111      	bne.n	800d8d6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	691b      	ldr	r3, [r3, #16]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fd ffa2 	bl	800b800 <dec_lock>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d102      	bne.n	800d8cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	2100      	movs	r1, #0
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fd fe6e 	bl	800b5b2 <unlock_fs>
#endif
		}
	}
	return res;
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b090      	sub	sp, #64	; 0x40
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d8ea:	f107 010c 	add.w	r1, r7, #12
 800d8ee:	1d3b      	adds	r3, r7, #4
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7ff f870 	bl	800c9d8 <find_volume>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d8fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d902:	2b00      	cmp	r3, #0
 800d904:	d11f      	bne.n	800d946 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	f107 030c 	add.w	r3, r7, #12
 800d90c:	4611      	mov	r1, r2
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fe ff52 	bl	800c7b8 <follow_path>
 800d914:	4603      	mov	r3, r0
 800d916:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d91a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d111      	bne.n	800d946 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d922:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d926:	b25b      	sxtb	r3, r3
 800d928:	2b00      	cmp	r3, #0
 800d92a:	da03      	bge.n	800d934 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d92c:	2306      	movs	r3, #6
 800d92e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d932:	e008      	b.n	800d946 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d005      	beq.n	800d946 <f_stat+0x66>
 800d93a:	f107 030c 	add.w	r3, r7, #12
 800d93e:	6839      	ldr	r1, [r7, #0]
 800d940:	4618      	mov	r0, r3
 800d942:	f7fe fe46 	bl	800c5d2 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d94c:	4611      	mov	r1, r2
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fd fe2f 	bl	800b5b2 <unlock_fs>
 800d954:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3740      	adds	r7, #64	; 0x40
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b092      	sub	sp, #72	; 0x48
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d96c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d970:	f107 030c 	add.w	r3, r7, #12
 800d974:	2200      	movs	r2, #0
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff f82e 	bl	800c9d8 <find_volume>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d982:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d986:	2b00      	cmp	r3, #0
 800d988:	f040 8099 	bne.w	800dabe <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d98c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d994:	699a      	ldr	r2, [r3, #24]
 800d996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d998:	69db      	ldr	r3, [r3, #28]
 800d99a:	3b02      	subs	r3, #2
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d804      	bhi.n	800d9aa <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a2:	699a      	ldr	r2, [r3, #24]
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	e089      	b.n	800dabe <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d128      	bne.n	800da08 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d9b6:	2302      	movs	r3, #2
 800d9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d9be:	f107 0314 	add.w	r3, r7, #20
 800d9c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fe f87c 	bl	800bac2 <get_fat>
 800d9ca:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d2:	d103      	bne.n	800d9dc <f_getfree+0x7c>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d9da:	e063      	b.n	800daa4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d103      	bne.n	800d9ea <f_getfree+0x8a>
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d9e8:	e05c      	b.n	800daa4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d102      	bne.n	800d9f6 <f_getfree+0x96>
 800d9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fe:	69db      	ldr	r3, [r3, #28]
 800da00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da02:	429a      	cmp	r2, r3
 800da04:	d3db      	bcc.n	800d9be <f_getfree+0x5e>
 800da06:	e04d      	b.n	800daa4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800da08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0a:	69db      	ldr	r3, [r3, #28]
 800da0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da12:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800da14:	2300      	movs	r3, #0
 800da16:	637b      	str	r3, [r7, #52]	; 0x34
 800da18:	2300      	movs	r3, #0
 800da1a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800da1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d113      	bne.n	800da4a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800da22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da26:	1c5a      	adds	r2, r3, #1
 800da28:	63ba      	str	r2, [r7, #56]	; 0x38
 800da2a:	4619      	mov	r1, r3
 800da2c:	f7fd ff8c 	bl	800b948 <move_window>
 800da30:	4603      	mov	r3, r0
 800da32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800da36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d131      	bne.n	800daa2 <f_getfree+0x142>
							p = fs->win;
 800da3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da40:	3338      	adds	r3, #56	; 0x38
 800da42:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800da44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da46:	899b      	ldrh	r3, [r3, #12]
 800da48:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800da4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	2b02      	cmp	r3, #2
 800da50:	d10f      	bne.n	800da72 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800da52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da54:	f7fd fc98 	bl	800b388 <ld_word>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d102      	bne.n	800da64 <f_getfree+0x104>
 800da5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da60:	3301      	adds	r3, #1
 800da62:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800da64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da66:	3302      	adds	r3, #2
 800da68:	633b      	str	r3, [r7, #48]	; 0x30
 800da6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6c:	3b02      	subs	r3, #2
 800da6e:	637b      	str	r3, [r7, #52]	; 0x34
 800da70:	e010      	b.n	800da94 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800da72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da74:	f7fd fca0 	bl	800b3b8 <ld_dword>
 800da78:	4603      	mov	r3, r0
 800da7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d102      	bne.n	800da88 <f_getfree+0x128>
 800da82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da84:	3301      	adds	r3, #1
 800da86:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800da88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8a:	3304      	adds	r3, #4
 800da8c:	633b      	str	r3, [r7, #48]	; 0x30
 800da8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da90:	3b04      	subs	r3, #4
 800da92:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800da94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da96:	3b01      	subs	r3, #1
 800da98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1bd      	bne.n	800da1c <f_getfree+0xbc>
 800daa0:	e000      	b.n	800daa4 <f_getfree+0x144>
							if (res != FR_OK) break;
 800daa2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800daa8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800daae:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800dab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab2:	791a      	ldrb	r2, [r3, #4]
 800dab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab6:	f042 0201 	orr.w	r2, r2, #1
 800daba:	b2d2      	uxtb	r2, r2
 800dabc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800dabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800dac4:	4611      	mov	r1, r2
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fd fd73 	bl	800b5b2 <unlock_fs>
 800dacc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3748      	adds	r7, #72	; 0x48
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dad8:	b480      	push	{r7}
 800dada:	b087      	sub	sp, #28
 800dadc:	af00      	add	r7, sp, #0
 800dade:	60f8      	str	r0, [r7, #12]
 800dae0:	60b9      	str	r1, [r7, #8]
 800dae2:	4613      	mov	r3, r2
 800dae4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dae6:	2301      	movs	r3, #1
 800dae8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800daea:	2300      	movs	r3, #0
 800daec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800daee:	4b1f      	ldr	r3, [pc, #124]	; (800db6c <FATFS_LinkDriverEx+0x94>)
 800daf0:	7a5b      	ldrb	r3, [r3, #9]
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d131      	bne.n	800db5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800daf8:	4b1c      	ldr	r3, [pc, #112]	; (800db6c <FATFS_LinkDriverEx+0x94>)
 800dafa:	7a5b      	ldrb	r3, [r3, #9]
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	461a      	mov	r2, r3
 800db00:	4b1a      	ldr	r3, [pc, #104]	; (800db6c <FATFS_LinkDriverEx+0x94>)
 800db02:	2100      	movs	r1, #0
 800db04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800db06:	4b19      	ldr	r3, [pc, #100]	; (800db6c <FATFS_LinkDriverEx+0x94>)
 800db08:	7a5b      	ldrb	r3, [r3, #9]
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	4a17      	ldr	r2, [pc, #92]	; (800db6c <FATFS_LinkDriverEx+0x94>)
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4413      	add	r3, r2
 800db12:	68fa      	ldr	r2, [r7, #12]
 800db14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800db16:	4b15      	ldr	r3, [pc, #84]	; (800db6c <FATFS_LinkDriverEx+0x94>)
 800db18:	7a5b      	ldrb	r3, [r3, #9]
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	461a      	mov	r2, r3
 800db1e:	4b13      	ldr	r3, [pc, #76]	; (800db6c <FATFS_LinkDriverEx+0x94>)
 800db20:	4413      	add	r3, r2
 800db22:	79fa      	ldrb	r2, [r7, #7]
 800db24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800db26:	4b11      	ldr	r3, [pc, #68]	; (800db6c <FATFS_LinkDriverEx+0x94>)
 800db28:	7a5b      	ldrb	r3, [r3, #9]
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	1c5a      	adds	r2, r3, #1
 800db2e:	b2d1      	uxtb	r1, r2
 800db30:	4a0e      	ldr	r2, [pc, #56]	; (800db6c <FATFS_LinkDriverEx+0x94>)
 800db32:	7251      	strb	r1, [r2, #9]
 800db34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800db36:	7dbb      	ldrb	r3, [r7, #22]
 800db38:	3330      	adds	r3, #48	; 0x30
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	3301      	adds	r3, #1
 800db44:	223a      	movs	r2, #58	; 0x3a
 800db46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	3302      	adds	r3, #2
 800db4c:	222f      	movs	r2, #47	; 0x2f
 800db4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	3303      	adds	r3, #3
 800db54:	2200      	movs	r2, #0
 800db56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800db58:	2300      	movs	r3, #0
 800db5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800db5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	371c      	adds	r7, #28
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	200003a4 	.word	0x200003a4

0800db70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800db7a:	2200      	movs	r2, #0
 800db7c:	6839      	ldr	r1, [r7, #0]
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7ff ffaa 	bl	800dad8 <FATFS_LinkDriverEx>
 800db84:	4603      	mov	r3, r0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}

0800db8e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800db8e:	b580      	push	{r7, lr}
 800db90:	b086      	sub	sp, #24
 800db92:	af00      	add	r7, sp, #0
 800db94:	4603      	mov	r3, r0
 800db96:	6039      	str	r1, [r7, #0]
 800db98:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800db9a:	2300      	movs	r3, #0
 800db9c:	60fb      	str	r3, [r7, #12]
 800db9e:	2300      	movs	r3, #0
 800dba0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800dba2:	f107 030c 	add.w	r3, r7, #12
 800dba6:	2101      	movs	r1, #1
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 f8cd 	bl	800dd48 <osSemaphoreCreate>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	bf14      	ite	ne
 800dbbc:	2301      	movne	r3, #1
 800dbbe:	2300      	moveq	r3, #0
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	617b      	str	r3, [r7, #20]

    return ret;
 800dbc4:	697b      	ldr	r3, [r7, #20]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3718      	adds	r7, #24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b082      	sub	sp, #8
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 f96e 	bl	800deb8 <osSemaphoreDelete>
#endif
    return 1;
 800dbdc:	2301      	movs	r3, #1
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3708      	adds	r7, #8
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b084      	sub	sp, #16
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800dbf2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 f8da 	bl	800ddb0 <osSemaphoreWait>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800dc02:	2301      	movs	r3, #1
 800dc04:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800dc06:	68fb      	ldr	r3, [r7, #12]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 f917 	bl	800de4c <osSemaphoreRelease>
#endif
}
 800dc1e:	bf00      	nop
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dc26:	b480      	push	{r7}
 800dc28:	b085      	sub	sp, #20
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dc30:	2300      	movs	r3, #0
 800dc32:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dc34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc38:	2b84      	cmp	r3, #132	; 0x84
 800dc3a:	d005      	beq.n	800dc48 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dc3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	4413      	add	r3, r2
 800dc44:	3303      	adds	r3, #3
 800dc46:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dc48:	68fb      	ldr	r3, [r7, #12]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3714      	adds	r7, #20
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dc56:	b480      	push	{r7}
 800dc58:	b083      	sub	sp, #12
 800dc5a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc5c:	f3ef 8305 	mrs	r3, IPSR
 800dc60:	607b      	str	r3, [r7, #4]
  return(result);
 800dc62:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	bf14      	ite	ne
 800dc68:	2301      	movne	r3, #1
 800dc6a:	2300      	moveq	r3, #0
 800dc6c:	b2db      	uxtb	r3, r3
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	370c      	adds	r7, #12
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dc7e:	f001 fbf1 	bl	800f464 <vTaskStartScheduler>
  
  return osOK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc8a:	b089      	sub	sp, #36	; 0x24
 800dc8c:	af04      	add	r7, sp, #16
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	695b      	ldr	r3, [r3, #20]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d020      	beq.n	800dcdc <osThreadCreate+0x54>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	699b      	ldr	r3, [r3, #24]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d01c      	beq.n	800dcdc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685c      	ldr	r4, [r3, #4]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681d      	ldr	r5, [r3, #0]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	691e      	ldr	r6, [r3, #16]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7ff ffb6 	bl	800dc26 <makeFreeRtosPriority>
 800dcba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	695b      	ldr	r3, [r3, #20]
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dcc4:	9202      	str	r2, [sp, #8]
 800dcc6:	9301      	str	r3, [sp, #4]
 800dcc8:	9100      	str	r1, [sp, #0]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	4632      	mov	r2, r6
 800dcce:	4629      	mov	r1, r5
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f001 f9f9 	bl	800f0c8 <xTaskCreateStatic>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	60fb      	str	r3, [r7, #12]
 800dcda:	e01c      	b.n	800dd16 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685c      	ldr	r4, [r3, #4]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dce8:	b29e      	uxth	r6, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff ff98 	bl	800dc26 <makeFreeRtosPriority>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	f107 030c 	add.w	r3, r7, #12
 800dcfc:	9301      	str	r3, [sp, #4]
 800dcfe:	9200      	str	r2, [sp, #0]
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	4632      	mov	r2, r6
 800dd04:	4629      	mov	r1, r5
 800dd06:	4620      	mov	r0, r4
 800dd08:	f001 fa3e 	bl	800f188 <xTaskCreate>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d001      	beq.n	800dd16 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800dd12:	2300      	movs	r3, #0
 800dd14:	e000      	b.n	800dd18 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dd16:	68fb      	ldr	r3, [r7, #12]
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3714      	adds	r7, #20
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd20 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d001      	beq.n	800dd36 <osDelay+0x16>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	e000      	b.n	800dd38 <osDelay+0x18>
 800dd36:	2301      	movs	r3, #1
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f001 fb5d 	bl	800f3f8 <vTaskDelay>
  
  return osOK;
 800dd3e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af02      	add	r7, sp, #8
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d010      	beq.n	800dd7c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d10b      	bne.n	800dd78 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	685a      	ldr	r2, [r3, #4]
 800dd64:	2303      	movs	r3, #3
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	4613      	mov	r3, r2
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	2001      	movs	r0, #1
 800dd70:	f000 fab0 	bl	800e2d4 <xQueueGenericCreateStatic>
 800dd74:	4603      	mov	r3, r0
 800dd76:	e016      	b.n	800dda6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e014      	b.n	800dda6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d110      	bne.n	800dda4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800dd82:	2203      	movs	r2, #3
 800dd84:	2100      	movs	r1, #0
 800dd86:	2001      	movs	r0, #1
 800dd88:	f000 fb21 	bl	800e3ce <xQueueGenericCreate>
 800dd8c:	60f8      	str	r0, [r7, #12]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d005      	beq.n	800dda0 <osSemaphoreCreate+0x58>
 800dd94:	2300      	movs	r3, #0
 800dd96:	2200      	movs	r2, #0
 800dd98:	2100      	movs	r1, #0
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f000 fb78 	bl	800e490 <xQueueGenericSend>
      return sema;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	e000      	b.n	800dda6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800dda4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
	...

0800ddb0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d101      	bne.n	800ddc8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ddc4:	2380      	movs	r3, #128	; 0x80
 800ddc6:	e03a      	b.n	800de3e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd2:	d103      	bne.n	800dddc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ddd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddd8:	60fb      	str	r3, [r7, #12]
 800ddda:	e009      	b.n	800ddf0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d006      	beq.n	800ddf0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d101      	bne.n	800ddf0 <osSemaphoreWait+0x40>
      ticks = 1;
 800ddec:	2301      	movs	r3, #1
 800ddee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ddf0:	f7ff ff31 	bl	800dc56 <inHandlerMode>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d017      	beq.n	800de2a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ddfa:	f107 0308 	add.w	r3, r7, #8
 800ddfe:	461a      	mov	r2, r3
 800de00:	2100      	movs	r1, #0
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 ff66 	bl	800ecd4 <xQueueReceiveFromISR>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d001      	beq.n	800de12 <osSemaphoreWait+0x62>
      return osErrorOS;
 800de0e:	23ff      	movs	r3, #255	; 0xff
 800de10:	e015      	b.n	800de3e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d011      	beq.n	800de3c <osSemaphoreWait+0x8c>
 800de18:	4b0b      	ldr	r3, [pc, #44]	; (800de48 <osSemaphoreWait+0x98>)
 800de1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de1e:	601a      	str	r2, [r3, #0]
 800de20:	f3bf 8f4f 	dsb	sy
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	e008      	b.n	800de3c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800de2a:	68f9      	ldr	r1, [r7, #12]
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 fe41 	bl	800eab4 <xQueueSemaphoreTake>
 800de32:	4603      	mov	r3, r0
 800de34:	2b01      	cmp	r3, #1
 800de36:	d001      	beq.n	800de3c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800de38:	23ff      	movs	r3, #255	; 0xff
 800de3a:	e000      	b.n	800de3e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	e000ed04 	.word	0xe000ed04

0800de4c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800de54:	2300      	movs	r3, #0
 800de56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800de58:	2300      	movs	r3, #0
 800de5a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800de5c:	f7ff fefb 	bl	800dc56 <inHandlerMode>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d016      	beq.n	800de94 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800de66:	f107 0308 	add.w	r3, r7, #8
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fcad 	bl	800e7cc <xQueueGiveFromISR>
 800de72:	4603      	mov	r3, r0
 800de74:	2b01      	cmp	r3, #1
 800de76:	d001      	beq.n	800de7c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800de78:	23ff      	movs	r3, #255	; 0xff
 800de7a:	e017      	b.n	800deac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d013      	beq.n	800deaa <osSemaphoreRelease+0x5e>
 800de82:	4b0c      	ldr	r3, [pc, #48]	; (800deb4 <osSemaphoreRelease+0x68>)
 800de84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de88:	601a      	str	r2, [r3, #0]
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	e00a      	b.n	800deaa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800de94:	2300      	movs	r3, #0
 800de96:	2200      	movs	r2, #0
 800de98:	2100      	movs	r1, #0
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 faf8 	bl	800e490 <xQueueGenericSend>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d001      	beq.n	800deaa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800dea6:	23ff      	movs	r3, #255	; 0xff
 800dea8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800deaa:	68fb      	ldr	r3, [r7, #12]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	e000ed04 	.word	0xe000ed04

0800deb8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800dec0:	f7ff fec9 	bl	800dc56 <inHandlerMode>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <osSemaphoreDelete+0x16>
    return osErrorISR;
 800deca:	2382      	movs	r3, #130	; 0x82
 800decc:	e003      	b.n	800ded6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 ff83 	bl	800edda <vQueueDelete>

  return osOK; 
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800dede:	b590      	push	{r4, r7, lr}
 800dee0:	b085      	sub	sp, #20
 800dee2:	af02      	add	r7, sp, #8
 800dee4:	6078      	str	r0, [r7, #4]
 800dee6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	689b      	ldr	r3, [r3, #8]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d012      	beq.n	800df16 <osMessageCreate+0x38>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00e      	beq.n	800df16 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6818      	ldr	r0, [r3, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6859      	ldr	r1, [r3, #4]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	689a      	ldr	r2, [r3, #8]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68dc      	ldr	r4, [r3, #12]
 800df08:	2300      	movs	r3, #0
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	4623      	mov	r3, r4
 800df0e:	f000 f9e1 	bl	800e2d4 <xQueueGenericCreateStatic>
 800df12:	4603      	mov	r3, r0
 800df14:	e008      	b.n	800df28 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6818      	ldr	r0, [r3, #0]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	4619      	mov	r1, r3
 800df22:	f000 fa54 	bl	800e3ce <xQueueGenericCreate>
 800df26:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800df28:	4618      	mov	r0, r3
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd90      	pop	{r4, r7, pc}

0800df30 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b086      	sub	sp, #24
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800df3c:	2300      	movs	r3, #0
 800df3e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d101      	bne.n	800df4e <osMessagePut+0x1e>
    ticks = 1;
 800df4a:	2301      	movs	r3, #1
 800df4c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800df4e:	f7ff fe82 	bl	800dc56 <inHandlerMode>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d018      	beq.n	800df8a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800df58:	f107 0210 	add.w	r2, r7, #16
 800df5c:	f107 0108 	add.w	r1, r7, #8
 800df60:	2300      	movs	r3, #0
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f000 fb96 	bl	800e694 <xQueueGenericSendFromISR>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d001      	beq.n	800df72 <osMessagePut+0x42>
      return osErrorOS;
 800df6e:	23ff      	movs	r3, #255	; 0xff
 800df70:	e018      	b.n	800dfa4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d014      	beq.n	800dfa2 <osMessagePut+0x72>
 800df78:	4b0c      	ldr	r3, [pc, #48]	; (800dfac <osMessagePut+0x7c>)
 800df7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df7e:	601a      	str	r2, [r3, #0]
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	e00b      	b.n	800dfa2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800df8a:	f107 0108 	add.w	r1, r7, #8
 800df8e:	2300      	movs	r3, #0
 800df90:	697a      	ldr	r2, [r7, #20]
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f000 fa7c 	bl	800e490 <xQueueGenericSend>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d001      	beq.n	800dfa2 <osMessagePut+0x72>
      return osErrorOS;
 800df9e:	23ff      	movs	r3, #255	; 0xff
 800dfa0:	e000      	b.n	800dfa4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3718      	adds	r7, #24
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	e000ed04 	.word	0xe000ed04

0800dfb0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800dfb0:	b590      	push	{r4, r7, lr}
 800dfb2:	b08b      	sub	sp, #44	; 0x2c
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	60b9      	str	r1, [r7, #8]
 800dfba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d10a      	bne.n	800dfe0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800dfca:	2380      	movs	r3, #128	; 0x80
 800dfcc:	617b      	str	r3, [r7, #20]
    return event;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	461c      	mov	r4, r3
 800dfd2:	f107 0314 	add.w	r3, r7, #20
 800dfd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dfda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dfde:	e054      	b.n	800e08a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfee:	d103      	bne.n	800dff8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800dff0:	f04f 33ff 	mov.w	r3, #4294967295
 800dff4:	627b      	str	r3, [r7, #36]	; 0x24
 800dff6:	e009      	b.n	800e00c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d006      	beq.n	800e00c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e004:	2b00      	cmp	r3, #0
 800e006:	d101      	bne.n	800e00c <osMessageGet+0x5c>
      ticks = 1;
 800e008:	2301      	movs	r3, #1
 800e00a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e00c:	f7ff fe23 	bl	800dc56 <inHandlerMode>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	d01c      	beq.n	800e050 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e016:	f107 0220 	add.w	r2, r7, #32
 800e01a:	f107 0314 	add.w	r3, r7, #20
 800e01e:	3304      	adds	r3, #4
 800e020:	4619      	mov	r1, r3
 800e022:	68b8      	ldr	r0, [r7, #8]
 800e024:	f000 fe56 	bl	800ecd4 <xQueueReceiveFromISR>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d102      	bne.n	800e034 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e02e:	2310      	movs	r3, #16
 800e030:	617b      	str	r3, [r7, #20]
 800e032:	e001      	b.n	800e038 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e034:	2300      	movs	r3, #0
 800e036:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e038:	6a3b      	ldr	r3, [r7, #32]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d01d      	beq.n	800e07a <osMessageGet+0xca>
 800e03e:	4b15      	ldr	r3, [pc, #84]	; (800e094 <osMessageGet+0xe4>)
 800e040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	f3bf 8f4f 	dsb	sy
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	e014      	b.n	800e07a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e050:	f107 0314 	add.w	r3, r7, #20
 800e054:	3304      	adds	r3, #4
 800e056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e058:	4619      	mov	r1, r3
 800e05a:	68b8      	ldr	r0, [r7, #8]
 800e05c:	f000 fc48 	bl	800e8f0 <xQueueReceive>
 800e060:	4603      	mov	r3, r0
 800e062:	2b01      	cmp	r3, #1
 800e064:	d102      	bne.n	800e06c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e066:	2310      	movs	r3, #16
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	e006      	b.n	800e07a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d101      	bne.n	800e076 <osMessageGet+0xc6>
 800e072:	2300      	movs	r3, #0
 800e074:	e000      	b.n	800e078 <osMessageGet+0xc8>
 800e076:	2340      	movs	r3, #64	; 0x40
 800e078:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	461c      	mov	r4, r3
 800e07e:	f107 0314 	add.w	r3, r7, #20
 800e082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	372c      	adds	r7, #44	; 0x2c
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd90      	pop	{r4, r7, pc}
 800e092:	bf00      	nop
 800e094:	e000ed04 	.word	0xe000ed04

0800e098 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f103 0208 	add.w	r2, r3, #8
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f103 0208 	add.w	r2, r3, #8
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f103 0208 	add.w	r2, r3, #8
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e0cc:	bf00      	nop
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e0e6:	bf00      	nop
 800e0e8:	370c      	adds	r7, #12
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e0f2:	b480      	push	{r7}
 800e0f4:	b085      	sub	sp, #20
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
 800e0fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	68fa      	ldr	r2, [r7, #12]
 800e106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	689a      	ldr	r2, [r3, #8]
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	683a      	ldr	r2, [r7, #0]
 800e116:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	683a      	ldr	r2, [r7, #0]
 800e11c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	1c5a      	adds	r2, r3, #1
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	601a      	str	r2, [r3, #0]
}
 800e12e:	bf00      	nop
 800e130:	3714      	adds	r7, #20
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr

0800e13a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e13a:	b480      	push	{r7}
 800e13c:	b085      	sub	sp, #20
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
 800e142:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e150:	d103      	bne.n	800e15a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	691b      	ldr	r3, [r3, #16]
 800e156:	60fb      	str	r3, [r7, #12]
 800e158:	e00c      	b.n	800e174 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	3308      	adds	r3, #8
 800e15e:	60fb      	str	r3, [r7, #12]
 800e160:	e002      	b.n	800e168 <vListInsert+0x2e>
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	60fb      	str	r3, [r7, #12]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	429a      	cmp	r2, r3
 800e172:	d2f6      	bcs.n	800e162 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	685a      	ldr	r2, [r3, #4]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	683a      	ldr	r2, [r7, #0]
 800e182:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	683a      	ldr	r2, [r7, #0]
 800e18e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	1c5a      	adds	r2, r3, #1
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	601a      	str	r2, [r3, #0]
}
 800e1a0:	bf00      	nop
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	6892      	ldr	r2, [r2, #8]
 800e1c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	6852      	ldr	r2, [r2, #4]
 800e1cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d103      	bne.n	800e1e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	689a      	ldr	r2, [r3, #8]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	1e5a      	subs	r2, r3, #1
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3714      	adds	r7, #20
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10b      	bne.n	800e22c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e218:	b672      	cpsid	i
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	b662      	cpsie	i
 800e228:	60bb      	str	r3, [r7, #8]
 800e22a:	e7fe      	b.n	800e22a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800e22c:	f002 f864 	bl	80102f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e238:	68f9      	ldr	r1, [r7, #12]
 800e23a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e23c:	fb01 f303 	mul.w	r3, r1, r3
 800e240:	441a      	add	r2, r3
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2200      	movs	r2, #0
 800e24a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e25c:	3b01      	subs	r3, #1
 800e25e:	68f9      	ldr	r1, [r7, #12]
 800e260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e262:	fb01 f303 	mul.w	r3, r1, r3
 800e266:	441a      	add	r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	22ff      	movs	r2, #255	; 0xff
 800e270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	22ff      	movs	r2, #255	; 0xff
 800e278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d114      	bne.n	800e2ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d01a      	beq.n	800e2c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	3310      	adds	r3, #16
 800e28e:	4618      	mov	r0, r3
 800e290:	f001 fb32 	bl	800f8f8 <xTaskRemoveFromEventList>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d012      	beq.n	800e2c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e29a:	4b0d      	ldr	r3, [pc, #52]	; (800e2d0 <xQueueGenericReset+0xd0>)
 800e29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2a0:	601a      	str	r2, [r3, #0]
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	e009      	b.n	800e2c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	3310      	adds	r3, #16
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7ff fef1 	bl	800e098 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	3324      	adds	r3, #36	; 0x24
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7ff feec 	bl	800e098 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e2c0:	f002 f84c 	bl	801035c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e2c4:	2301      	movs	r3, #1
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	e000ed04 	.word	0xe000ed04

0800e2d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b08e      	sub	sp, #56	; 0x38
 800e2d8:	af02      	add	r7, sp, #8
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	607a      	str	r2, [r7, #4]
 800e2e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d10b      	bne.n	800e300 <xQueueGenericCreateStatic+0x2c>
 800e2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ec:	b672      	cpsid	i
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	b662      	cpsie	i
 800e2fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2fe:	e7fe      	b.n	800e2fe <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d10b      	bne.n	800e31e <xQueueGenericCreateStatic+0x4a>
 800e306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30a:	b672      	cpsid	i
 800e30c:	f383 8811 	msr	BASEPRI, r3
 800e310:	f3bf 8f6f 	isb	sy
 800e314:	f3bf 8f4f 	dsb	sy
 800e318:	b662      	cpsie	i
 800e31a:	627b      	str	r3, [r7, #36]	; 0x24
 800e31c:	e7fe      	b.n	800e31c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <xQueueGenericCreateStatic+0x56>
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <xQueueGenericCreateStatic+0x5a>
 800e32a:	2301      	movs	r3, #1
 800e32c:	e000      	b.n	800e330 <xQueueGenericCreateStatic+0x5c>
 800e32e:	2300      	movs	r3, #0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d10b      	bne.n	800e34c <xQueueGenericCreateStatic+0x78>
 800e334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e338:	b672      	cpsid	i
 800e33a:	f383 8811 	msr	BASEPRI, r3
 800e33e:	f3bf 8f6f 	isb	sy
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	b662      	cpsie	i
 800e348:	623b      	str	r3, [r7, #32]
 800e34a:	e7fe      	b.n	800e34a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d102      	bne.n	800e358 <xQueueGenericCreateStatic+0x84>
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d101      	bne.n	800e35c <xQueueGenericCreateStatic+0x88>
 800e358:	2301      	movs	r3, #1
 800e35a:	e000      	b.n	800e35e <xQueueGenericCreateStatic+0x8a>
 800e35c:	2300      	movs	r3, #0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d10b      	bne.n	800e37a <xQueueGenericCreateStatic+0xa6>
 800e362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e366:	b672      	cpsid	i
 800e368:	f383 8811 	msr	BASEPRI, r3
 800e36c:	f3bf 8f6f 	isb	sy
 800e370:	f3bf 8f4f 	dsb	sy
 800e374:	b662      	cpsie	i
 800e376:	61fb      	str	r3, [r7, #28]
 800e378:	e7fe      	b.n	800e378 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e37a:	2348      	movs	r3, #72	; 0x48
 800e37c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	2b48      	cmp	r3, #72	; 0x48
 800e382:	d00b      	beq.n	800e39c <xQueueGenericCreateStatic+0xc8>
 800e384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e388:	b672      	cpsid	i
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	b662      	cpsie	i
 800e398:	61bb      	str	r3, [r7, #24]
 800e39a:	e7fe      	b.n	800e39a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e39c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d00d      	beq.n	800e3c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	68b9      	ldr	r1, [r7, #8]
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 f846 	bl	800e450 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3730      	adds	r7, #48	; 0x30
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b08a      	sub	sp, #40	; 0x28
 800e3d2:	af02      	add	r7, sp, #8
 800e3d4:	60f8      	str	r0, [r7, #12]
 800e3d6:	60b9      	str	r1, [r7, #8]
 800e3d8:	4613      	mov	r3, r2
 800e3da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d10b      	bne.n	800e3fa <xQueueGenericCreate+0x2c>
 800e3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e6:	b672      	cpsid	i
 800e3e8:	f383 8811 	msr	BASEPRI, r3
 800e3ec:	f3bf 8f6f 	isb	sy
 800e3f0:	f3bf 8f4f 	dsb	sy
 800e3f4:	b662      	cpsie	i
 800e3f6:	613b      	str	r3, [r7, #16]
 800e3f8:	e7fe      	b.n	800e3f8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d102      	bne.n	800e406 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e400:	2300      	movs	r3, #0
 800e402:	61fb      	str	r3, [r7, #28]
 800e404:	e004      	b.n	800e410 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	68ba      	ldr	r2, [r7, #8]
 800e40a:	fb02 f303 	mul.w	r3, r2, r3
 800e40e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	3348      	adds	r3, #72	; 0x48
 800e414:	4618      	mov	r0, r3
 800e416:	f002 f891 	bl	801053c <pvPortMalloc>
 800e41a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d011      	beq.n	800e446 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	3348      	adds	r3, #72	; 0x48
 800e42a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	2200      	movs	r2, #0
 800e430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e434:	79fa      	ldrb	r2, [r7, #7]
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	9300      	str	r3, [sp, #0]
 800e43a:	4613      	mov	r3, r2
 800e43c:	697a      	ldr	r2, [r7, #20]
 800e43e:	68b9      	ldr	r1, [r7, #8]
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f000 f805 	bl	800e450 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e446:	69bb      	ldr	r3, [r7, #24]
	}
 800e448:	4618      	mov	r0, r3
 800e44a:	3720      	adds	r7, #32
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
 800e45c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d103      	bne.n	800e46c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	69ba      	ldr	r2, [r7, #24]
 800e468:	601a      	str	r2, [r3, #0]
 800e46a:	e002      	b.n	800e472 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e478:	69bb      	ldr	r3, [r7, #24]
 800e47a:	68ba      	ldr	r2, [r7, #8]
 800e47c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e47e:	2101      	movs	r1, #1
 800e480:	69b8      	ldr	r0, [r7, #24]
 800e482:	f7ff febd 	bl	800e200 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e486:	bf00      	nop
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
	...

0800e490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b08e      	sub	sp, #56	; 0x38
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
 800e49c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10b      	bne.n	800e4c4 <xQueueGenericSend+0x34>
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	b672      	cpsid	i
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	b662      	cpsie	i
 800e4c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4c2:	e7fe      	b.n	800e4c2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d103      	bne.n	800e4d2 <xQueueGenericSend+0x42>
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d101      	bne.n	800e4d6 <xQueueGenericSend+0x46>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e000      	b.n	800e4d8 <xQueueGenericSend+0x48>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d10b      	bne.n	800e4f4 <xQueueGenericSend+0x64>
 800e4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e0:	b672      	cpsid	i
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	b662      	cpsie	i
 800e4f0:	627b      	str	r3, [r7, #36]	; 0x24
 800e4f2:	e7fe      	b.n	800e4f2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	d103      	bne.n	800e502 <xQueueGenericSend+0x72>
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d101      	bne.n	800e506 <xQueueGenericSend+0x76>
 800e502:	2301      	movs	r3, #1
 800e504:	e000      	b.n	800e508 <xQueueGenericSend+0x78>
 800e506:	2300      	movs	r3, #0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10b      	bne.n	800e524 <xQueueGenericSend+0x94>
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	b672      	cpsid	i
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	b662      	cpsie	i
 800e520:	623b      	str	r3, [r7, #32]
 800e522:	e7fe      	b.n	800e522 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e524:	f001 fba6 	bl	800fc74 <xTaskGetSchedulerState>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d102      	bne.n	800e534 <xQueueGenericSend+0xa4>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d101      	bne.n	800e538 <xQueueGenericSend+0xa8>
 800e534:	2301      	movs	r3, #1
 800e536:	e000      	b.n	800e53a <xQueueGenericSend+0xaa>
 800e538:	2300      	movs	r3, #0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10b      	bne.n	800e556 <xQueueGenericSend+0xc6>
 800e53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e542:	b672      	cpsid	i
 800e544:	f383 8811 	msr	BASEPRI, r3
 800e548:	f3bf 8f6f 	isb	sy
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	b662      	cpsie	i
 800e552:	61fb      	str	r3, [r7, #28]
 800e554:	e7fe      	b.n	800e554 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e556:	f001 fecf 	bl	80102f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e562:	429a      	cmp	r2, r3
 800e564:	d302      	bcc.n	800e56c <xQueueGenericSend+0xdc>
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	2b02      	cmp	r3, #2
 800e56a:	d129      	bne.n	800e5c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	68b9      	ldr	r1, [r7, #8]
 800e570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e572:	f000 fc6e 	bl	800ee52 <prvCopyDataToQueue>
 800e576:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d010      	beq.n	800e5a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e582:	3324      	adds	r3, #36	; 0x24
 800e584:	4618      	mov	r0, r3
 800e586:	f001 f9b7 	bl	800f8f8 <xTaskRemoveFromEventList>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d013      	beq.n	800e5b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e590:	4b3f      	ldr	r3, [pc, #252]	; (800e690 <xQueueGenericSend+0x200>)
 800e592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e596:	601a      	str	r2, [r3, #0]
 800e598:	f3bf 8f4f 	dsb	sy
 800e59c:	f3bf 8f6f 	isb	sy
 800e5a0:	e00a      	b.n	800e5b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d007      	beq.n	800e5b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e5a8:	4b39      	ldr	r3, [pc, #228]	; (800e690 <xQueueGenericSend+0x200>)
 800e5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ae:	601a      	str	r2, [r3, #0]
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e5b8:	f001 fed0 	bl	801035c <vPortExitCritical>
				return pdPASS;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e063      	b.n	800e688 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d103      	bne.n	800e5ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e5c6:	f001 fec9 	bl	801035c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	e05c      	b.n	800e688 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d106      	bne.n	800e5e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e5d4:	f107 0314 	add.w	r3, r7, #20
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f001 f9f1 	bl	800f9c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5e2:	f001 febb 	bl	801035c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5e6:	f000 ff9f 	bl	800f528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5ea:	f001 fe85 	bl	80102f8 <vPortEnterCritical>
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5f4:	b25b      	sxtb	r3, r3
 800e5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5fa:	d103      	bne.n	800e604 <xQueueGenericSend+0x174>
 800e5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fe:	2200      	movs	r2, #0
 800e600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e60a:	b25b      	sxtb	r3, r3
 800e60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e610:	d103      	bne.n	800e61a <xQueueGenericSend+0x18a>
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	2200      	movs	r2, #0
 800e616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e61a:	f001 fe9f 	bl	801035c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e61e:	1d3a      	adds	r2, r7, #4
 800e620:	f107 0314 	add.w	r3, r7, #20
 800e624:	4611      	mov	r1, r2
 800e626:	4618      	mov	r0, r3
 800e628:	f001 f9e0 	bl	800f9ec <xTaskCheckForTimeOut>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d124      	bne.n	800e67c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e634:	f000 fd05 	bl	800f042 <prvIsQueueFull>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d018      	beq.n	800e670 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	3310      	adds	r3, #16
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f001 f930 	bl	800f8ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e64c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e64e:	f000 fc90 	bl	800ef72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e652:	f000 ff77 	bl	800f544 <xTaskResumeAll>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	f47f af7c 	bne.w	800e556 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e65e:	4b0c      	ldr	r3, [pc, #48]	; (800e690 <xQueueGenericSend+0x200>)
 800e660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e664:	601a      	str	r2, [r3, #0]
 800e666:	f3bf 8f4f 	dsb	sy
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	e772      	b.n	800e556 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e672:	f000 fc7e 	bl	800ef72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e676:	f000 ff65 	bl	800f544 <xTaskResumeAll>
 800e67a:	e76c      	b.n	800e556 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e67c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e67e:	f000 fc78 	bl	800ef72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e682:	f000 ff5f 	bl	800f544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3738      	adds	r7, #56	; 0x38
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	e000ed04 	.word	0xe000ed04

0800e694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b08e      	sub	sp, #56	; 0x38
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	607a      	str	r2, [r7, #4]
 800e6a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d10b      	bne.n	800e6c4 <xQueueGenericSendFromISR+0x30>
 800e6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b0:	b672      	cpsid	i
 800e6b2:	f383 8811 	msr	BASEPRI, r3
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	f3bf 8f4f 	dsb	sy
 800e6be:	b662      	cpsie	i
 800e6c0:	627b      	str	r3, [r7, #36]	; 0x24
 800e6c2:	e7fe      	b.n	800e6c2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d103      	bne.n	800e6d2 <xQueueGenericSendFromISR+0x3e>
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d101      	bne.n	800e6d6 <xQueueGenericSendFromISR+0x42>
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e000      	b.n	800e6d8 <xQueueGenericSendFromISR+0x44>
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d10b      	bne.n	800e6f4 <xQueueGenericSendFromISR+0x60>
 800e6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e0:	b672      	cpsid	i
 800e6e2:	f383 8811 	msr	BASEPRI, r3
 800e6e6:	f3bf 8f6f 	isb	sy
 800e6ea:	f3bf 8f4f 	dsb	sy
 800e6ee:	b662      	cpsie	i
 800e6f0:	623b      	str	r3, [r7, #32]
 800e6f2:	e7fe      	b.n	800e6f2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	d103      	bne.n	800e702 <xQueueGenericSendFromISR+0x6e>
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d101      	bne.n	800e706 <xQueueGenericSendFromISR+0x72>
 800e702:	2301      	movs	r3, #1
 800e704:	e000      	b.n	800e708 <xQueueGenericSendFromISR+0x74>
 800e706:	2300      	movs	r3, #0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d10b      	bne.n	800e724 <xQueueGenericSendFromISR+0x90>
 800e70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e710:	b672      	cpsid	i
 800e712:	f383 8811 	msr	BASEPRI, r3
 800e716:	f3bf 8f6f 	isb	sy
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	b662      	cpsie	i
 800e720:	61fb      	str	r3, [r7, #28]
 800e722:	e7fe      	b.n	800e722 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e724:	f001 fec8 	bl	80104b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e728:	f3ef 8211 	mrs	r2, BASEPRI
 800e72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e730:	b672      	cpsid	i
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	b662      	cpsie	i
 800e740:	61ba      	str	r2, [r7, #24]
 800e742:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e744:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e746:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e750:	429a      	cmp	r2, r3
 800e752:	d302      	bcc.n	800e75a <xQueueGenericSendFromISR+0xc6>
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	2b02      	cmp	r3, #2
 800e758:	d12c      	bne.n	800e7b4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e764:	683a      	ldr	r2, [r7, #0]
 800e766:	68b9      	ldr	r1, [r7, #8]
 800e768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e76a:	f000 fb72 	bl	800ee52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e76e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e776:	d112      	bne.n	800e79e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d016      	beq.n	800e7ae <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e782:	3324      	adds	r3, #36	; 0x24
 800e784:	4618      	mov	r0, r3
 800e786:	f001 f8b7 	bl	800f8f8 <xTaskRemoveFromEventList>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00e      	beq.n	800e7ae <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00b      	beq.n	800e7ae <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2201      	movs	r2, #1
 800e79a:	601a      	str	r2, [r3, #0]
 800e79c:	e007      	b.n	800e7ae <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e79e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	b2db      	uxtb	r3, r3
 800e7a6:	b25a      	sxtb	r2, r3
 800e7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e7b2:	e001      	b.n	800e7b8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3738      	adds	r7, #56	; 0x38
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b08e      	sub	sp, #56	; 0x38
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10b      	bne.n	800e7f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	b672      	cpsid	i
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	b662      	cpsie	i
 800e7f4:	623b      	str	r3, [r7, #32]
 800e7f6:	e7fe      	b.n	800e7f6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d00b      	beq.n	800e818 <xQueueGiveFromISR+0x4c>
 800e800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e804:	b672      	cpsid	i
 800e806:	f383 8811 	msr	BASEPRI, r3
 800e80a:	f3bf 8f6f 	isb	sy
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	b662      	cpsie	i
 800e814:	61fb      	str	r3, [r7, #28]
 800e816:	e7fe      	b.n	800e816 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d103      	bne.n	800e828 <xQueueGiveFromISR+0x5c>
 800e820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e822:	689b      	ldr	r3, [r3, #8]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d101      	bne.n	800e82c <xQueueGiveFromISR+0x60>
 800e828:	2301      	movs	r3, #1
 800e82a:	e000      	b.n	800e82e <xQueueGiveFromISR+0x62>
 800e82c:	2300      	movs	r3, #0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d10b      	bne.n	800e84a <xQueueGiveFromISR+0x7e>
 800e832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e836:	b672      	cpsid	i
 800e838:	f383 8811 	msr	BASEPRI, r3
 800e83c:	f3bf 8f6f 	isb	sy
 800e840:	f3bf 8f4f 	dsb	sy
 800e844:	b662      	cpsie	i
 800e846:	61bb      	str	r3, [r7, #24]
 800e848:	e7fe      	b.n	800e848 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e84a:	f001 fe35 	bl	80104b8 <vPortValidateInterruptPriority>
	__asm volatile
 800e84e:	f3ef 8211 	mrs	r2, BASEPRI
 800e852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e856:	b672      	cpsid	i
 800e858:	f383 8811 	msr	BASEPRI, r3
 800e85c:	f3bf 8f6f 	isb	sy
 800e860:	f3bf 8f4f 	dsb	sy
 800e864:	b662      	cpsie	i
 800e866:	617a      	str	r2, [r7, #20]
 800e868:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e86a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e86c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e872:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d22b      	bcs.n	800e8d6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88a:	1c5a      	adds	r2, r3, #1
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e890:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e898:	d112      	bne.n	800e8c0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d016      	beq.n	800e8d0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	3324      	adds	r3, #36	; 0x24
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f001 f826 	bl	800f8f8 <xTaskRemoveFromEventList>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d00e      	beq.n	800e8d0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00b      	beq.n	800e8d0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	601a      	str	r2, [r3, #0]
 800e8be:	e007      	b.n	800e8d0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	b25a      	sxtb	r2, r3
 800e8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	637b      	str	r3, [r7, #52]	; 0x34
 800e8d4:	e001      	b.n	800e8da <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	637b      	str	r3, [r7, #52]	; 0x34
 800e8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8dc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3738      	adds	r7, #56	; 0x38
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
	...

0800e8f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b08c      	sub	sp, #48	; 0x30
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e906:	2b00      	cmp	r3, #0
 800e908:	d10b      	bne.n	800e922 <xQueueReceive+0x32>
	__asm volatile
 800e90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90e:	b672      	cpsid	i
 800e910:	f383 8811 	msr	BASEPRI, r3
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	f3bf 8f4f 	dsb	sy
 800e91c:	b662      	cpsie	i
 800e91e:	623b      	str	r3, [r7, #32]
 800e920:	e7fe      	b.n	800e920 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d103      	bne.n	800e930 <xQueueReceive+0x40>
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d101      	bne.n	800e934 <xQueueReceive+0x44>
 800e930:	2301      	movs	r3, #1
 800e932:	e000      	b.n	800e936 <xQueueReceive+0x46>
 800e934:	2300      	movs	r3, #0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10b      	bne.n	800e952 <xQueueReceive+0x62>
 800e93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93e:	b672      	cpsid	i
 800e940:	f383 8811 	msr	BASEPRI, r3
 800e944:	f3bf 8f6f 	isb	sy
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	b662      	cpsie	i
 800e94e:	61fb      	str	r3, [r7, #28]
 800e950:	e7fe      	b.n	800e950 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e952:	f001 f98f 	bl	800fc74 <xTaskGetSchedulerState>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d102      	bne.n	800e962 <xQueueReceive+0x72>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d101      	bne.n	800e966 <xQueueReceive+0x76>
 800e962:	2301      	movs	r3, #1
 800e964:	e000      	b.n	800e968 <xQueueReceive+0x78>
 800e966:	2300      	movs	r3, #0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10b      	bne.n	800e984 <xQueueReceive+0x94>
 800e96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e970:	b672      	cpsid	i
 800e972:	f383 8811 	msr	BASEPRI, r3
 800e976:	f3bf 8f6f 	isb	sy
 800e97a:	f3bf 8f4f 	dsb	sy
 800e97e:	b662      	cpsie	i
 800e980:	61bb      	str	r3, [r7, #24]
 800e982:	e7fe      	b.n	800e982 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e984:	f001 fcb8 	bl	80102f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e98c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	2b00      	cmp	r3, #0
 800e992:	d01f      	beq.n	800e9d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e998:	f000 fac5 	bl	800ef26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99e:	1e5a      	subs	r2, r3, #1
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a6:	691b      	ldr	r3, [r3, #16]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00f      	beq.n	800e9cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ae:	3310      	adds	r3, #16
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f000 ffa1 	bl	800f8f8 <xTaskRemoveFromEventList>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d007      	beq.n	800e9cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e9bc:	4b3c      	ldr	r3, [pc, #240]	; (800eab0 <xQueueReceive+0x1c0>)
 800e9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9c2:	601a      	str	r2, [r3, #0]
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e9cc:	f001 fcc6 	bl	801035c <vPortExitCritical>
				return pdPASS;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e069      	b.n	800eaa8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d103      	bne.n	800e9e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e9da:	f001 fcbf 	bl	801035c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	e062      	b.n	800eaa8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d106      	bne.n	800e9f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9e8:	f107 0310 	add.w	r3, r7, #16
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 ffe7 	bl	800f9c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9f6:	f001 fcb1 	bl	801035c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e9fa:	f000 fd95 	bl	800f528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9fe:	f001 fc7b 	bl	80102f8 <vPortEnterCritical>
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea08:	b25b      	sxtb	r3, r3
 800ea0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea0e:	d103      	bne.n	800ea18 <xQueueReceive+0x128>
 800ea10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea12:	2200      	movs	r2, #0
 800ea14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea1e:	b25b      	sxtb	r3, r3
 800ea20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea24:	d103      	bne.n	800ea2e <xQueueReceive+0x13e>
 800ea26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea2e:	f001 fc95 	bl	801035c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea32:	1d3a      	adds	r2, r7, #4
 800ea34:	f107 0310 	add.w	r3, r7, #16
 800ea38:	4611      	mov	r1, r2
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f000 ffd6 	bl	800f9ec <xTaskCheckForTimeOut>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d123      	bne.n	800ea8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea48:	f000 fae5 	bl	800f016 <prvIsQueueEmpty>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d017      	beq.n	800ea82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea54:	3324      	adds	r3, #36	; 0x24
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	4611      	mov	r1, r2
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f000 ff26 	bl	800f8ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea62:	f000 fa86 	bl	800ef72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea66:	f000 fd6d 	bl	800f544 <xTaskResumeAll>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d189      	bne.n	800e984 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ea70:	4b0f      	ldr	r3, [pc, #60]	; (800eab0 <xQueueReceive+0x1c0>)
 800ea72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea76:	601a      	str	r2, [r3, #0]
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	e780      	b.n	800e984 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ea82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea84:	f000 fa75 	bl	800ef72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea88:	f000 fd5c 	bl	800f544 <xTaskResumeAll>
 800ea8c:	e77a      	b.n	800e984 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea90:	f000 fa6f 	bl	800ef72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea94:	f000 fd56 	bl	800f544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea9a:	f000 fabc 	bl	800f016 <prvIsQueueEmpty>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	f43f af6f 	beq.w	800e984 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eaa6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3730      	adds	r7, #48	; 0x30
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	e000ed04 	.word	0xe000ed04

0800eab4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b08e      	sub	sp, #56	; 0x38
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800eabe:	2300      	movs	r3, #0
 800eac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800eac6:	2300      	movs	r3, #0
 800eac8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d10b      	bne.n	800eae8 <xQueueSemaphoreTake+0x34>
 800ead0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead4:	b672      	cpsid	i
 800ead6:	f383 8811 	msr	BASEPRI, r3
 800eada:	f3bf 8f6f 	isb	sy
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	b662      	cpsie	i
 800eae4:	623b      	str	r3, [r7, #32]
 800eae6:	e7fe      	b.n	800eae6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d00b      	beq.n	800eb08 <xQueueSemaphoreTake+0x54>
 800eaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf4:	b672      	cpsid	i
 800eaf6:	f383 8811 	msr	BASEPRI, r3
 800eafa:	f3bf 8f6f 	isb	sy
 800eafe:	f3bf 8f4f 	dsb	sy
 800eb02:	b662      	cpsie	i
 800eb04:	61fb      	str	r3, [r7, #28]
 800eb06:	e7fe      	b.n	800eb06 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb08:	f001 f8b4 	bl	800fc74 <xTaskGetSchedulerState>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d102      	bne.n	800eb18 <xQueueSemaphoreTake+0x64>
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d101      	bne.n	800eb1c <xQueueSemaphoreTake+0x68>
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e000      	b.n	800eb1e <xQueueSemaphoreTake+0x6a>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d10b      	bne.n	800eb3a <xQueueSemaphoreTake+0x86>
 800eb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb26:	b672      	cpsid	i
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	b662      	cpsie	i
 800eb36:	61bb      	str	r3, [r7, #24]
 800eb38:	e7fe      	b.n	800eb38 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb3a:	f001 fbdd 	bl	80102f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb42:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d024      	beq.n	800eb94 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4c:	1e5a      	subs	r2, r3, #1
 800eb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb50:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d104      	bne.n	800eb64 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eb5a:	f001 fa4d 	bl	800fff8 <pvTaskIncrementMutexHeldCount>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00f      	beq.n	800eb8c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6e:	3310      	adds	r3, #16
 800eb70:	4618      	mov	r0, r3
 800eb72:	f000 fec1 	bl	800f8f8 <xTaskRemoveFromEventList>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d007      	beq.n	800eb8c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb7c:	4b54      	ldr	r3, [pc, #336]	; (800ecd0 <xQueueSemaphoreTake+0x21c>)
 800eb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb82:	601a      	str	r2, [r3, #0]
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb8c:	f001 fbe6 	bl	801035c <vPortExitCritical>
				return pdPASS;
 800eb90:	2301      	movs	r3, #1
 800eb92:	e098      	b.n	800ecc6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d112      	bne.n	800ebc0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00b      	beq.n	800ebb8 <xQueueSemaphoreTake+0x104>
 800eba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba4:	b672      	cpsid	i
 800eba6:	f383 8811 	msr	BASEPRI, r3
 800ebaa:	f3bf 8f6f 	isb	sy
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	b662      	cpsie	i
 800ebb4:	617b      	str	r3, [r7, #20]
 800ebb6:	e7fe      	b.n	800ebb6 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ebb8:	f001 fbd0 	bl	801035c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	e082      	b.n	800ecc6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d106      	bne.n	800ebd4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebc6:	f107 030c 	add.w	r3, r7, #12
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f000 fef8 	bl	800f9c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebd4:	f001 fbc2 	bl	801035c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebd8:	f000 fca6 	bl	800f528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebdc:	f001 fb8c 	bl	80102f8 <vPortEnterCritical>
 800ebe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebe6:	b25b      	sxtb	r3, r3
 800ebe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebec:	d103      	bne.n	800ebf6 <xQueueSemaphoreTake+0x142>
 800ebee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebfc:	b25b      	sxtb	r3, r3
 800ebfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec02:	d103      	bne.n	800ec0c <xQueueSemaphoreTake+0x158>
 800ec04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec06:	2200      	movs	r2, #0
 800ec08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec0c:	f001 fba6 	bl	801035c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec10:	463a      	mov	r2, r7
 800ec12:	f107 030c 	add.w	r3, r7, #12
 800ec16:	4611      	mov	r1, r2
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 fee7 	bl	800f9ec <xTaskCheckForTimeOut>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d132      	bne.n	800ec8a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec26:	f000 f9f6 	bl	800f016 <prvIsQueueEmpty>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d026      	beq.n	800ec7e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d109      	bne.n	800ec4c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ec38:	f001 fb5e 	bl	80102f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f001 f835 	bl	800fcb0 <xTaskPriorityInherit>
 800ec46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ec48:	f001 fb88 	bl	801035c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4e:	3324      	adds	r3, #36	; 0x24
 800ec50:	683a      	ldr	r2, [r7, #0]
 800ec52:	4611      	mov	r1, r2
 800ec54:	4618      	mov	r0, r3
 800ec56:	f000 fe29 	bl	800f8ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec5c:	f000 f989 	bl	800ef72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec60:	f000 fc70 	bl	800f544 <xTaskResumeAll>
 800ec64:	4603      	mov	r3, r0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f47f af67 	bne.w	800eb3a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ec6c:	4b18      	ldr	r3, [pc, #96]	; (800ecd0 <xQueueSemaphoreTake+0x21c>)
 800ec6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec72:	601a      	str	r2, [r3, #0]
 800ec74:	f3bf 8f4f 	dsb	sy
 800ec78:	f3bf 8f6f 	isb	sy
 800ec7c:	e75d      	b.n	800eb3a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ec7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec80:	f000 f977 	bl	800ef72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec84:	f000 fc5e 	bl	800f544 <xTaskResumeAll>
 800ec88:	e757      	b.n	800eb3a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec8c:	f000 f971 	bl	800ef72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec90:	f000 fc58 	bl	800f544 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec96:	f000 f9be 	bl	800f016 <prvIsQueueEmpty>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f43f af4c 	beq.w	800eb3a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00d      	beq.n	800ecc4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800eca8:	f001 fb26 	bl	80102f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ecac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecae:	f000 f8b8 	bl	800ee22 <prvGetDisinheritPriorityAfterTimeout>
 800ecb2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ecb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f001 f900 	bl	800fec0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ecc0:	f001 fb4c 	bl	801035c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ecc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3738      	adds	r7, #56	; 0x38
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	e000ed04 	.word	0xe000ed04

0800ecd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08e      	sub	sp, #56	; 0x38
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ece4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10b      	bne.n	800ed02 <xQueueReceiveFromISR+0x2e>
 800ecea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecee:	b672      	cpsid	i
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	b662      	cpsie	i
 800ecfe:	623b      	str	r3, [r7, #32]
 800ed00:	e7fe      	b.n	800ed00 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d103      	bne.n	800ed10 <xQueueReceiveFromISR+0x3c>
 800ed08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d101      	bne.n	800ed14 <xQueueReceiveFromISR+0x40>
 800ed10:	2301      	movs	r3, #1
 800ed12:	e000      	b.n	800ed16 <xQueueReceiveFromISR+0x42>
 800ed14:	2300      	movs	r3, #0
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d10b      	bne.n	800ed32 <xQueueReceiveFromISR+0x5e>
 800ed1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1e:	b672      	cpsid	i
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	b662      	cpsie	i
 800ed2e:	61fb      	str	r3, [r7, #28]
 800ed30:	e7fe      	b.n	800ed30 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed32:	f001 fbc1 	bl	80104b8 <vPortValidateInterruptPriority>
	__asm volatile
 800ed36:	f3ef 8211 	mrs	r2, BASEPRI
 800ed3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3e:	b672      	cpsid	i
 800ed40:	f383 8811 	msr	BASEPRI, r3
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	f3bf 8f4f 	dsb	sy
 800ed4c:	b662      	cpsie	i
 800ed4e:	61ba      	str	r2, [r7, #24]
 800ed50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ed52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d02f      	beq.n	800edc2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed6c:	68b9      	ldr	r1, [r7, #8]
 800ed6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed70:	f000 f8d9 	bl	800ef26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed76:	1e5a      	subs	r2, r3, #1
 800ed78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ed7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed84:	d112      	bne.n	800edac <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	691b      	ldr	r3, [r3, #16]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d016      	beq.n	800edbc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed90:	3310      	adds	r3, #16
 800ed92:	4618      	mov	r0, r3
 800ed94:	f000 fdb0 	bl	800f8f8 <xTaskRemoveFromEventList>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d00e      	beq.n	800edbc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00b      	beq.n	800edbc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	e007      	b.n	800edbc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800edac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edb0:	3301      	adds	r3, #1
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	b25a      	sxtb	r2, r3
 800edb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800edbc:	2301      	movs	r3, #1
 800edbe:	637b      	str	r3, [r7, #52]	; 0x34
 800edc0:	e001      	b.n	800edc6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800edc2:	2300      	movs	r3, #0
 800edc4:	637b      	str	r3, [r7, #52]	; 0x34
 800edc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3738      	adds	r7, #56	; 0x38
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b084      	sub	sp, #16
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10b      	bne.n	800ee04 <vQueueDelete+0x2a>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	b672      	cpsid	i
 800edf2:	f383 8811 	msr	BASEPRI, r3
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	f3bf 8f4f 	dsb	sy
 800edfe:	b662      	cpsie	i
 800ee00:	60bb      	str	r3, [r7, #8]
 800ee02:	e7fe      	b.n	800ee02 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f000 f935 	bl	800f074 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d102      	bne.n	800ee1a <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	f001 fc59 	bl	80106cc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ee1a:	bf00      	nop
 800ee1c:	3710      	adds	r7, #16
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ee22:	b480      	push	{r7}
 800ee24:	b085      	sub	sp, #20
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d006      	beq.n	800ee40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f1c3 0307 	rsb	r3, r3, #7
 800ee3c:	60fb      	str	r3, [r7, #12]
 800ee3e:	e001      	b.n	800ee44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ee40:	2300      	movs	r3, #0
 800ee42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ee44:	68fb      	ldr	r3, [r7, #12]
	}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr

0800ee52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b086      	sub	sp, #24
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	60f8      	str	r0, [r7, #12]
 800ee5a:	60b9      	str	r1, [r7, #8]
 800ee5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d10d      	bne.n	800ee8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d14d      	bne.n	800ef14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f000 ff97 	bl	800fdb0 <xTaskPriorityDisinherit>
 800ee82:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2200      	movs	r2, #0
 800ee88:	609a      	str	r2, [r3, #8]
 800ee8a:	e043      	b.n	800ef14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d119      	bne.n	800eec6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	6858      	ldr	r0, [r3, #4]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	68b9      	ldr	r1, [r7, #8]
 800ee9e:	f002 f87d 	bl	8010f9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	685a      	ldr	r2, [r3, #4]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeaa:	441a      	add	r2, r3
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	685a      	ldr	r2, [r3, #4]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d32b      	bcc.n	800ef14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	605a      	str	r2, [r3, #4]
 800eec4:	e026      	b.n	800ef14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	68d8      	ldr	r0, [r3, #12]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eece:	461a      	mov	r2, r3
 800eed0:	68b9      	ldr	r1, [r7, #8]
 800eed2:	f002 f863 	bl	8010f9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	68da      	ldr	r2, [r3, #12]
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eede:	425b      	negs	r3, r3
 800eee0:	441a      	add	r2, r3
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	68da      	ldr	r2, [r3, #12]
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d207      	bcs.n	800ef02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	689a      	ldr	r2, [r3, #8]
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eefa:	425b      	negs	r3, r3
 800eefc:	441a      	add	r2, r3
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d105      	bne.n	800ef14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d002      	beq.n	800ef14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	3b01      	subs	r3, #1
 800ef12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	1c5a      	adds	r2, r3, #1
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ef1c:	697b      	ldr	r3, [r7, #20]
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3718      	adds	r7, #24
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b082      	sub	sp, #8
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
 800ef2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d018      	beq.n	800ef6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	68da      	ldr	r2, [r3, #12]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef40:	441a      	add	r2, r3
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	68da      	ldr	r2, [r3, #12]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d303      	bcc.n	800ef5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	68d9      	ldr	r1, [r3, #12]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef62:	461a      	mov	r2, r3
 800ef64:	6838      	ldr	r0, [r7, #0]
 800ef66:	f002 f819 	bl	8010f9c <memcpy>
	}
}
 800ef6a:	bf00      	nop
 800ef6c:	3708      	adds	r7, #8
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b084      	sub	sp, #16
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ef7a:	f001 f9bd 	bl	80102f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef86:	e011      	b.n	800efac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d012      	beq.n	800efb6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	3324      	adds	r3, #36	; 0x24
 800ef94:	4618      	mov	r0, r3
 800ef96:	f000 fcaf 	bl	800f8f8 <xTaskRemoveFromEventList>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800efa0:	f000 fd88 	bl	800fab4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800efa4:	7bfb      	ldrb	r3, [r7, #15]
 800efa6:	3b01      	subs	r3, #1
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800efac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	dce9      	bgt.n	800ef88 <prvUnlockQueue+0x16>
 800efb4:	e000      	b.n	800efb8 <prvUnlockQueue+0x46>
					break;
 800efb6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	22ff      	movs	r2, #255	; 0xff
 800efbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800efc0:	f001 f9cc 	bl	801035c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800efc4:	f001 f998 	bl	80102f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800efd0:	e011      	b.n	800eff6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	691b      	ldr	r3, [r3, #16]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d012      	beq.n	800f000 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	3310      	adds	r3, #16
 800efde:	4618      	mov	r0, r3
 800efe0:	f000 fc8a 	bl	800f8f8 <xTaskRemoveFromEventList>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d001      	beq.n	800efee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800efea:	f000 fd63 	bl	800fab4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800efee:	7bbb      	ldrb	r3, [r7, #14]
 800eff0:	3b01      	subs	r3, #1
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800effa:	2b00      	cmp	r3, #0
 800effc:	dce9      	bgt.n	800efd2 <prvUnlockQueue+0x60>
 800effe:	e000      	b.n	800f002 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f000:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	22ff      	movs	r2, #255	; 0xff
 800f006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f00a:	f001 f9a7 	bl	801035c <vPortExitCritical>
}
 800f00e:	bf00      	nop
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b084      	sub	sp, #16
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f01e:	f001 f96b 	bl	80102f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f026:	2b00      	cmp	r3, #0
 800f028:	d102      	bne.n	800f030 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f02a:	2301      	movs	r3, #1
 800f02c:	60fb      	str	r3, [r7, #12]
 800f02e:	e001      	b.n	800f034 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f030:	2300      	movs	r3, #0
 800f032:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f034:	f001 f992 	bl	801035c <vPortExitCritical>

	return xReturn;
 800f038:	68fb      	ldr	r3, [r7, #12]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}

0800f042 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f042:	b580      	push	{r7, lr}
 800f044:	b084      	sub	sp, #16
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f04a:	f001 f955 	bl	80102f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f056:	429a      	cmp	r2, r3
 800f058:	d102      	bne.n	800f060 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f05a:	2301      	movs	r3, #1
 800f05c:	60fb      	str	r3, [r7, #12]
 800f05e:	e001      	b.n	800f064 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f060:	2300      	movs	r3, #0
 800f062:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f064:	f001 f97a 	bl	801035c <vPortExitCritical>

	return xReturn;
 800f068:	68fb      	ldr	r3, [r7, #12]
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
	...

0800f074 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f074:	b480      	push	{r7}
 800f076:	b085      	sub	sp, #20
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f07c:	2300      	movs	r3, #0
 800f07e:	60fb      	str	r3, [r7, #12]
 800f080:	e016      	b.n	800f0b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f082:	4a10      	ldr	r2, [pc, #64]	; (800f0c4 <vQueueUnregisterQueue+0x50>)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	00db      	lsls	r3, r3, #3
 800f088:	4413      	add	r3, r2
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d10b      	bne.n	800f0aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f092:	4a0c      	ldr	r2, [pc, #48]	; (800f0c4 <vQueueUnregisterQueue+0x50>)
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2100      	movs	r1, #0
 800f098:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f09c:	4a09      	ldr	r2, [pc, #36]	; (800f0c4 <vQueueUnregisterQueue+0x50>)
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	00db      	lsls	r3, r3, #3
 800f0a2:	4413      	add	r3, r2
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	605a      	str	r2, [r3, #4]
				break;
 800f0a8:	e005      	b.n	800f0b6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	60fb      	str	r3, [r7, #12]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2b07      	cmp	r3, #7
 800f0b4:	d9e5      	bls.n	800f082 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f0b6:	bf00      	nop
 800f0b8:	3714      	adds	r7, #20
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	20006964 	.word	0x20006964

0800f0c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b08e      	sub	sp, #56	; 0x38
 800f0cc:	af04      	add	r7, sp, #16
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	607a      	str	r2, [r7, #4]
 800f0d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d10b      	bne.n	800f0f4 <xTaskCreateStatic+0x2c>
 800f0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e0:	b672      	cpsid	i
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	b662      	cpsie	i
 800f0f0:	623b      	str	r3, [r7, #32]
 800f0f2:	e7fe      	b.n	800f0f2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d10b      	bne.n	800f112 <xTaskCreateStatic+0x4a>
 800f0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fe:	b672      	cpsid	i
 800f100:	f383 8811 	msr	BASEPRI, r3
 800f104:	f3bf 8f6f 	isb	sy
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	b662      	cpsie	i
 800f10e:	61fb      	str	r3, [r7, #28]
 800f110:	e7fe      	b.n	800f110 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f112:	2354      	movs	r3, #84	; 0x54
 800f114:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	2b54      	cmp	r3, #84	; 0x54
 800f11a:	d00b      	beq.n	800f134 <xTaskCreateStatic+0x6c>
 800f11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f120:	b672      	cpsid	i
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	b662      	cpsie	i
 800f130:	61bb      	str	r3, [r7, #24]
 800f132:	e7fe      	b.n	800f132 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f134:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d01e      	beq.n	800f17a <xTaskCreateStatic+0xb2>
 800f13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d01b      	beq.n	800f17a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f144:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f14a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14e:	2202      	movs	r2, #2
 800f150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f154:	2300      	movs	r3, #0
 800f156:	9303      	str	r3, [sp, #12]
 800f158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15a:	9302      	str	r3, [sp, #8]
 800f15c:	f107 0314 	add.w	r3, r7, #20
 800f160:	9301      	str	r3, [sp, #4]
 800f162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	68b9      	ldr	r1, [r7, #8]
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f000 f850 	bl	800f212 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f174:	f000 f8d6 	bl	800f324 <prvAddNewTaskToReadyList>
 800f178:	e001      	b.n	800f17e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f17a:	2300      	movs	r3, #0
 800f17c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f17e:	697b      	ldr	r3, [r7, #20]
	}
 800f180:	4618      	mov	r0, r3
 800f182:	3728      	adds	r7, #40	; 0x28
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b08c      	sub	sp, #48	; 0x30
 800f18c:	af04      	add	r7, sp, #16
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	603b      	str	r3, [r7, #0]
 800f194:	4613      	mov	r3, r2
 800f196:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f198:	88fb      	ldrh	r3, [r7, #6]
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	4618      	mov	r0, r3
 800f19e:	f001 f9cd 	bl	801053c <pvPortMalloc>
 800f1a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00e      	beq.n	800f1c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f1aa:	2054      	movs	r0, #84	; 0x54
 800f1ac:	f001 f9c6 	bl	801053c <pvPortMalloc>
 800f1b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d003      	beq.n	800f1c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	697a      	ldr	r2, [r7, #20]
 800f1bc:	631a      	str	r2, [r3, #48]	; 0x30
 800f1be:	e005      	b.n	800f1cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f1c0:	6978      	ldr	r0, [r7, #20]
 800f1c2:	f001 fa83 	bl	80106cc <vPortFree>
 800f1c6:	e001      	b.n	800f1cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d017      	beq.n	800f202 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f1da:	88fa      	ldrh	r2, [r7, #6]
 800f1dc:	2300      	movs	r3, #0
 800f1de:	9303      	str	r3, [sp, #12]
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	9302      	str	r3, [sp, #8]
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	9301      	str	r3, [sp, #4]
 800f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ea:	9300      	str	r3, [sp, #0]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	68b9      	ldr	r1, [r7, #8]
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	f000 f80e 	bl	800f212 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f1f6:	69f8      	ldr	r0, [r7, #28]
 800f1f8:	f000 f894 	bl	800f324 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	61bb      	str	r3, [r7, #24]
 800f200:	e002      	b.n	800f208 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f202:	f04f 33ff 	mov.w	r3, #4294967295
 800f206:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f208:	69bb      	ldr	r3, [r7, #24]
	}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3720      	adds	r7, #32
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b088      	sub	sp, #32
 800f216:	af00      	add	r7, sp, #0
 800f218:	60f8      	str	r0, [r7, #12]
 800f21a:	60b9      	str	r1, [r7, #8]
 800f21c:	607a      	str	r2, [r7, #4]
 800f21e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f224:	6879      	ldr	r1, [r7, #4]
 800f226:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f22a:	440b      	add	r3, r1
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	4413      	add	r3, r2
 800f230:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f232:	69bb      	ldr	r3, [r7, #24]
 800f234:	f023 0307 	bic.w	r3, r3, #7
 800f238:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f23a:	69bb      	ldr	r3, [r7, #24]
 800f23c:	f003 0307 	and.w	r3, r3, #7
 800f240:	2b00      	cmp	r3, #0
 800f242:	d00b      	beq.n	800f25c <prvInitialiseNewTask+0x4a>
 800f244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f248:	b672      	cpsid	i
 800f24a:	f383 8811 	msr	BASEPRI, r3
 800f24e:	f3bf 8f6f 	isb	sy
 800f252:	f3bf 8f4f 	dsb	sy
 800f256:	b662      	cpsie	i
 800f258:	617b      	str	r3, [r7, #20]
 800f25a:	e7fe      	b.n	800f25a <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d01f      	beq.n	800f2a2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f262:	2300      	movs	r3, #0
 800f264:	61fb      	str	r3, [r7, #28]
 800f266:	e012      	b.n	800f28e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	4413      	add	r3, r2
 800f26e:	7819      	ldrb	r1, [r3, #0]
 800f270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	4413      	add	r3, r2
 800f276:	3334      	adds	r3, #52	; 0x34
 800f278:	460a      	mov	r2, r1
 800f27a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f27c:	68ba      	ldr	r2, [r7, #8]
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	4413      	add	r3, r2
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d006      	beq.n	800f296 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	3301      	adds	r3, #1
 800f28c:	61fb      	str	r3, [r7, #28]
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	2b0f      	cmp	r3, #15
 800f292:	d9e9      	bls.n	800f268 <prvInitialiseNewTask+0x56>
 800f294:	e000      	b.n	800f298 <prvInitialiseNewTask+0x86>
			{
				break;
 800f296:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29a:	2200      	movs	r2, #0
 800f29c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f2a0:	e003      	b.n	800f2aa <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ac:	2b06      	cmp	r3, #6
 800f2ae:	d901      	bls.n	800f2b4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f2b0:	2306      	movs	r3, #6
 800f2b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c8:	3304      	adds	r3, #4
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fe ff04 	bl	800e0d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d2:	3318      	adds	r3, #24
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fe feff 	bl	800e0d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e2:	f1c3 0207 	rsb	r2, r3, #7
 800f2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f2fe:	683a      	ldr	r2, [r7, #0]
 800f300:	68f9      	ldr	r1, [r7, #12]
 800f302:	69b8      	ldr	r0, [r7, #24]
 800f304:	f000 fef2 	bl	80100ec <pxPortInitialiseStack>
 800f308:	4602      	mov	r2, r0
 800f30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f310:	2b00      	cmp	r3, #0
 800f312:	d002      	beq.n	800f31a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f31a:	bf00      	nop
 800f31c:	3720      	adds	r7, #32
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
	...

0800f324 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f32c:	f000 ffe4 	bl	80102f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f330:	4b2a      	ldr	r3, [pc, #168]	; (800f3dc <prvAddNewTaskToReadyList+0xb8>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	3301      	adds	r3, #1
 800f336:	4a29      	ldr	r2, [pc, #164]	; (800f3dc <prvAddNewTaskToReadyList+0xb8>)
 800f338:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f33a:	4b29      	ldr	r3, [pc, #164]	; (800f3e0 <prvAddNewTaskToReadyList+0xbc>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d109      	bne.n	800f356 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f342:	4a27      	ldr	r2, [pc, #156]	; (800f3e0 <prvAddNewTaskToReadyList+0xbc>)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f348:	4b24      	ldr	r3, [pc, #144]	; (800f3dc <prvAddNewTaskToReadyList+0xb8>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d110      	bne.n	800f372 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f350:	f000 fbd4 	bl	800fafc <prvInitialiseTaskLists>
 800f354:	e00d      	b.n	800f372 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f356:	4b23      	ldr	r3, [pc, #140]	; (800f3e4 <prvAddNewTaskToReadyList+0xc0>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d109      	bne.n	800f372 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f35e:	4b20      	ldr	r3, [pc, #128]	; (800f3e0 <prvAddNewTaskToReadyList+0xbc>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f368:	429a      	cmp	r2, r3
 800f36a:	d802      	bhi.n	800f372 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f36c:	4a1c      	ldr	r2, [pc, #112]	; (800f3e0 <prvAddNewTaskToReadyList+0xbc>)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f372:	4b1d      	ldr	r3, [pc, #116]	; (800f3e8 <prvAddNewTaskToReadyList+0xc4>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3301      	adds	r3, #1
 800f378:	4a1b      	ldr	r2, [pc, #108]	; (800f3e8 <prvAddNewTaskToReadyList+0xc4>)
 800f37a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f380:	2201      	movs	r2, #1
 800f382:	409a      	lsls	r2, r3
 800f384:	4b19      	ldr	r3, [pc, #100]	; (800f3ec <prvAddNewTaskToReadyList+0xc8>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4313      	orrs	r3, r2
 800f38a:	4a18      	ldr	r2, [pc, #96]	; (800f3ec <prvAddNewTaskToReadyList+0xc8>)
 800f38c:	6013      	str	r3, [r2, #0]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f392:	4613      	mov	r3, r2
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	4413      	add	r3, r2
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	4a15      	ldr	r2, [pc, #84]	; (800f3f0 <prvAddNewTaskToReadyList+0xcc>)
 800f39c:	441a      	add	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	3304      	adds	r3, #4
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	4610      	mov	r0, r2
 800f3a6:	f7fe fea4 	bl	800e0f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f3aa:	f000 ffd7 	bl	801035c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f3ae:	4b0d      	ldr	r3, [pc, #52]	; (800f3e4 <prvAddNewTaskToReadyList+0xc0>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00e      	beq.n	800f3d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f3b6:	4b0a      	ldr	r3, [pc, #40]	; (800f3e0 <prvAddNewTaskToReadyList+0xbc>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d207      	bcs.n	800f3d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f3c4:	4b0b      	ldr	r3, [pc, #44]	; (800f3f4 <prvAddNewTaskToReadyList+0xd0>)
 800f3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3ca:	601a      	str	r2, [r3, #0]
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3d4:	bf00      	nop
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	200004b0 	.word	0x200004b0
 800f3e0:	200003b0 	.word	0x200003b0
 800f3e4:	200004bc 	.word	0x200004bc
 800f3e8:	200004cc 	.word	0x200004cc
 800f3ec:	200004b8 	.word	0x200004b8
 800f3f0:	200003b4 	.word	0x200003b4
 800f3f4:	e000ed04 	.word	0xe000ed04

0800f3f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f400:	2300      	movs	r3, #0
 800f402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d018      	beq.n	800f43c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f40a:	4b14      	ldr	r3, [pc, #80]	; (800f45c <vTaskDelay+0x64>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00b      	beq.n	800f42a <vTaskDelay+0x32>
 800f412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f416:	b672      	cpsid	i
 800f418:	f383 8811 	msr	BASEPRI, r3
 800f41c:	f3bf 8f6f 	isb	sy
 800f420:	f3bf 8f4f 	dsb	sy
 800f424:	b662      	cpsie	i
 800f426:	60bb      	str	r3, [r7, #8]
 800f428:	e7fe      	b.n	800f428 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800f42a:	f000 f87d 	bl	800f528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f42e:	2100      	movs	r1, #0
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fdf5 	bl	8010020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f436:	f000 f885 	bl	800f544 <xTaskResumeAll>
 800f43a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d107      	bne.n	800f452 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f442:	4b07      	ldr	r3, [pc, #28]	; (800f460 <vTaskDelay+0x68>)
 800f444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f452:	bf00      	nop
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	200004d8 	.word	0x200004d8
 800f460:	e000ed04 	.word	0xe000ed04

0800f464 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b08a      	sub	sp, #40	; 0x28
 800f468:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f46a:	2300      	movs	r3, #0
 800f46c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f46e:	2300      	movs	r3, #0
 800f470:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f472:	463a      	mov	r2, r7
 800f474:	1d39      	adds	r1, r7, #4
 800f476:	f107 0308 	add.w	r3, r7, #8
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7f2 fe54 	bl	8002128 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f480:	6839      	ldr	r1, [r7, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	68ba      	ldr	r2, [r7, #8]
 800f486:	9202      	str	r2, [sp, #8]
 800f488:	9301      	str	r3, [sp, #4]
 800f48a:	2300      	movs	r3, #0
 800f48c:	9300      	str	r3, [sp, #0]
 800f48e:	2300      	movs	r3, #0
 800f490:	460a      	mov	r2, r1
 800f492:	491f      	ldr	r1, [pc, #124]	; (800f510 <vTaskStartScheduler+0xac>)
 800f494:	481f      	ldr	r0, [pc, #124]	; (800f514 <vTaskStartScheduler+0xb0>)
 800f496:	f7ff fe17 	bl	800f0c8 <xTaskCreateStatic>
 800f49a:	4602      	mov	r2, r0
 800f49c:	4b1e      	ldr	r3, [pc, #120]	; (800f518 <vTaskStartScheduler+0xb4>)
 800f49e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f4a0:	4b1d      	ldr	r3, [pc, #116]	; (800f518 <vTaskStartScheduler+0xb4>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d002      	beq.n	800f4ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	617b      	str	r3, [r7, #20]
 800f4ac:	e001      	b.n	800f4b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d117      	bne.n	800f4e8 <vTaskStartScheduler+0x84>
 800f4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4bc:	b672      	cpsid	i
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	b662      	cpsie	i
 800f4cc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f4ce:	4b13      	ldr	r3, [pc, #76]	; (800f51c <vTaskStartScheduler+0xb8>)
 800f4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f4d6:	4b12      	ldr	r3, [pc, #72]	; (800f520 <vTaskStartScheduler+0xbc>)
 800f4d8:	2201      	movs	r2, #1
 800f4da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f4dc:	4b11      	ldr	r3, [pc, #68]	; (800f524 <vTaskStartScheduler+0xc0>)
 800f4de:	2200      	movs	r2, #0
 800f4e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f4e2:	f000 fe8d 	bl	8010200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f4e6:	e00f      	b.n	800f508 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ee:	d10b      	bne.n	800f508 <vTaskStartScheduler+0xa4>
 800f4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f4:	b672      	cpsid	i
 800f4f6:	f383 8811 	msr	BASEPRI, r3
 800f4fa:	f3bf 8f6f 	isb	sy
 800f4fe:	f3bf 8f4f 	dsb	sy
 800f502:	b662      	cpsie	i
 800f504:	60fb      	str	r3, [r7, #12]
 800f506:	e7fe      	b.n	800f506 <vTaskStartScheduler+0xa2>
}
 800f508:	bf00      	nop
 800f50a:	3718      	adds	r7, #24
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	08011238 	.word	0x08011238
 800f514:	0800facd 	.word	0x0800facd
 800f518:	200004d4 	.word	0x200004d4
 800f51c:	200004d0 	.word	0x200004d0
 800f520:	200004bc 	.word	0x200004bc
 800f524:	200004b4 	.word	0x200004b4

0800f528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f528:	b480      	push	{r7}
 800f52a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f52c:	4b04      	ldr	r3, [pc, #16]	; (800f540 <vTaskSuspendAll+0x18>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	3301      	adds	r3, #1
 800f532:	4a03      	ldr	r2, [pc, #12]	; (800f540 <vTaskSuspendAll+0x18>)
 800f534:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f536:	bf00      	nop
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr
 800f540:	200004d8 	.word	0x200004d8

0800f544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f54a:	2300      	movs	r3, #0
 800f54c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f54e:	2300      	movs	r3, #0
 800f550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f552:	4b42      	ldr	r3, [pc, #264]	; (800f65c <xTaskResumeAll+0x118>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10b      	bne.n	800f572 <xTaskResumeAll+0x2e>
 800f55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f55e:	b672      	cpsid	i
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	b662      	cpsie	i
 800f56e:	603b      	str	r3, [r7, #0]
 800f570:	e7fe      	b.n	800f570 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f572:	f000 fec1 	bl	80102f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f576:	4b39      	ldr	r3, [pc, #228]	; (800f65c <xTaskResumeAll+0x118>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	3b01      	subs	r3, #1
 800f57c:	4a37      	ldr	r2, [pc, #220]	; (800f65c <xTaskResumeAll+0x118>)
 800f57e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f580:	4b36      	ldr	r3, [pc, #216]	; (800f65c <xTaskResumeAll+0x118>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d161      	bne.n	800f64c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f588:	4b35      	ldr	r3, [pc, #212]	; (800f660 <xTaskResumeAll+0x11c>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d05d      	beq.n	800f64c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f590:	e02e      	b.n	800f5f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f592:	4b34      	ldr	r3, [pc, #208]	; (800f664 <xTaskResumeAll+0x120>)
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	3318      	adds	r3, #24
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fe fe04 	bl	800e1ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	3304      	adds	r3, #4
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fe fdff 	bl	800e1ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	409a      	lsls	r2, r3
 800f5b6:	4b2c      	ldr	r3, [pc, #176]	; (800f668 <xTaskResumeAll+0x124>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	4a2a      	ldr	r2, [pc, #168]	; (800f668 <xTaskResumeAll+0x124>)
 800f5be:	6013      	str	r3, [r2, #0]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	4413      	add	r3, r2
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	4a27      	ldr	r2, [pc, #156]	; (800f66c <xTaskResumeAll+0x128>)
 800f5ce:	441a      	add	r2, r3
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	3304      	adds	r3, #4
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	4610      	mov	r0, r2
 800f5d8:	f7fe fd8b 	bl	800e0f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5e0:	4b23      	ldr	r3, [pc, #140]	; (800f670 <xTaskResumeAll+0x12c>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d302      	bcc.n	800f5f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f5ea:	4b22      	ldr	r3, [pc, #136]	; (800f674 <xTaskResumeAll+0x130>)
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f5f0:	4b1c      	ldr	r3, [pc, #112]	; (800f664 <xTaskResumeAll+0x120>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d1cc      	bne.n	800f592 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d001      	beq.n	800f602 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f5fe:	f000 fb19 	bl	800fc34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f602:	4b1d      	ldr	r3, [pc, #116]	; (800f678 <xTaskResumeAll+0x134>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d010      	beq.n	800f630 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f60e:	f000 f837 	bl	800f680 <xTaskIncrementTick>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d002      	beq.n	800f61e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f618:	4b16      	ldr	r3, [pc, #88]	; (800f674 <xTaskResumeAll+0x130>)
 800f61a:	2201      	movs	r2, #1
 800f61c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	3b01      	subs	r3, #1
 800f622:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d1f1      	bne.n	800f60e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800f62a:	4b13      	ldr	r3, [pc, #76]	; (800f678 <xTaskResumeAll+0x134>)
 800f62c:	2200      	movs	r2, #0
 800f62e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f630:	4b10      	ldr	r3, [pc, #64]	; (800f674 <xTaskResumeAll+0x130>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d009      	beq.n	800f64c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f638:	2301      	movs	r3, #1
 800f63a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f63c:	4b0f      	ldr	r3, [pc, #60]	; (800f67c <xTaskResumeAll+0x138>)
 800f63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f642:	601a      	str	r2, [r3, #0]
 800f644:	f3bf 8f4f 	dsb	sy
 800f648:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f64c:	f000 fe86 	bl	801035c <vPortExitCritical>

	return xAlreadyYielded;
 800f650:	68bb      	ldr	r3, [r7, #8]
}
 800f652:	4618      	mov	r0, r3
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	200004d8 	.word	0x200004d8
 800f660:	200004b0 	.word	0x200004b0
 800f664:	20000470 	.word	0x20000470
 800f668:	200004b8 	.word	0x200004b8
 800f66c:	200003b4 	.word	0x200003b4
 800f670:	200003b0 	.word	0x200003b0
 800f674:	200004c4 	.word	0x200004c4
 800f678:	200004c0 	.word	0x200004c0
 800f67c:	e000ed04 	.word	0xe000ed04

0800f680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f686:	2300      	movs	r3, #0
 800f688:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f68a:	4b4f      	ldr	r3, [pc, #316]	; (800f7c8 <xTaskIncrementTick+0x148>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f040 8089 	bne.w	800f7a6 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f694:	4b4d      	ldr	r3, [pc, #308]	; (800f7cc <xTaskIncrementTick+0x14c>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3301      	adds	r3, #1
 800f69a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f69c:	4a4b      	ldr	r2, [pc, #300]	; (800f7cc <xTaskIncrementTick+0x14c>)
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d121      	bne.n	800f6ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f6a8:	4b49      	ldr	r3, [pc, #292]	; (800f7d0 <xTaskIncrementTick+0x150>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d00b      	beq.n	800f6ca <xTaskIncrementTick+0x4a>
 800f6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b6:	b672      	cpsid	i
 800f6b8:	f383 8811 	msr	BASEPRI, r3
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	b662      	cpsie	i
 800f6c6:	603b      	str	r3, [r7, #0]
 800f6c8:	e7fe      	b.n	800f6c8 <xTaskIncrementTick+0x48>
 800f6ca:	4b41      	ldr	r3, [pc, #260]	; (800f7d0 <xTaskIncrementTick+0x150>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	60fb      	str	r3, [r7, #12]
 800f6d0:	4b40      	ldr	r3, [pc, #256]	; (800f7d4 <xTaskIncrementTick+0x154>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a3e      	ldr	r2, [pc, #248]	; (800f7d0 <xTaskIncrementTick+0x150>)
 800f6d6:	6013      	str	r3, [r2, #0]
 800f6d8:	4a3e      	ldr	r2, [pc, #248]	; (800f7d4 <xTaskIncrementTick+0x154>)
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	6013      	str	r3, [r2, #0]
 800f6de:	4b3e      	ldr	r3, [pc, #248]	; (800f7d8 <xTaskIncrementTick+0x158>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	4a3c      	ldr	r2, [pc, #240]	; (800f7d8 <xTaskIncrementTick+0x158>)
 800f6e6:	6013      	str	r3, [r2, #0]
 800f6e8:	f000 faa4 	bl	800fc34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f6ec:	4b3b      	ldr	r3, [pc, #236]	; (800f7dc <xTaskIncrementTick+0x15c>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	693a      	ldr	r2, [r7, #16]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d348      	bcc.n	800f788 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6f6:	4b36      	ldr	r3, [pc, #216]	; (800f7d0 <xTaskIncrementTick+0x150>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d104      	bne.n	800f70a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f700:	4b36      	ldr	r3, [pc, #216]	; (800f7dc <xTaskIncrementTick+0x15c>)
 800f702:	f04f 32ff 	mov.w	r2, #4294967295
 800f706:	601a      	str	r2, [r3, #0]
					break;
 800f708:	e03e      	b.n	800f788 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f70a:	4b31      	ldr	r3, [pc, #196]	; (800f7d0 <xTaskIncrementTick+0x150>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f71a:	693a      	ldr	r2, [r7, #16]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d203      	bcs.n	800f72a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f722:	4a2e      	ldr	r2, [pc, #184]	; (800f7dc <xTaskIncrementTick+0x15c>)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f728:	e02e      	b.n	800f788 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	3304      	adds	r3, #4
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fe fd3c 	bl	800e1ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d004      	beq.n	800f746 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	3318      	adds	r3, #24
 800f740:	4618      	mov	r0, r3
 800f742:	f7fe fd33 	bl	800e1ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74a:	2201      	movs	r2, #1
 800f74c:	409a      	lsls	r2, r3
 800f74e:	4b24      	ldr	r3, [pc, #144]	; (800f7e0 <xTaskIncrementTick+0x160>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4313      	orrs	r3, r2
 800f754:	4a22      	ldr	r2, [pc, #136]	; (800f7e0 <xTaskIncrementTick+0x160>)
 800f756:	6013      	str	r3, [r2, #0]
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f75c:	4613      	mov	r3, r2
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	4413      	add	r3, r2
 800f762:	009b      	lsls	r3, r3, #2
 800f764:	4a1f      	ldr	r2, [pc, #124]	; (800f7e4 <xTaskIncrementTick+0x164>)
 800f766:	441a      	add	r2, r3
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	3304      	adds	r3, #4
 800f76c:	4619      	mov	r1, r3
 800f76e:	4610      	mov	r0, r2
 800f770:	f7fe fcbf 	bl	800e0f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f778:	4b1b      	ldr	r3, [pc, #108]	; (800f7e8 <xTaskIncrementTick+0x168>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f77e:	429a      	cmp	r2, r3
 800f780:	d3b9      	bcc.n	800f6f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f782:	2301      	movs	r3, #1
 800f784:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f786:	e7b6      	b.n	800f6f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f788:	4b17      	ldr	r3, [pc, #92]	; (800f7e8 <xTaskIncrementTick+0x168>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f78e:	4915      	ldr	r1, [pc, #84]	; (800f7e4 <xTaskIncrementTick+0x164>)
 800f790:	4613      	mov	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	440b      	add	r3, r1
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d907      	bls.n	800f7b0 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	617b      	str	r3, [r7, #20]
 800f7a4:	e004      	b.n	800f7b0 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f7a6:	4b11      	ldr	r3, [pc, #68]	; (800f7ec <xTaskIncrementTick+0x16c>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	4a0f      	ldr	r2, [pc, #60]	; (800f7ec <xTaskIncrementTick+0x16c>)
 800f7ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f7b0:	4b0f      	ldr	r3, [pc, #60]	; (800f7f0 <xTaskIncrementTick+0x170>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d001      	beq.n	800f7bc <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f7bc:	697b      	ldr	r3, [r7, #20]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3718      	adds	r7, #24
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	200004d8 	.word	0x200004d8
 800f7cc:	200004b4 	.word	0x200004b4
 800f7d0:	20000468 	.word	0x20000468
 800f7d4:	2000046c 	.word	0x2000046c
 800f7d8:	200004c8 	.word	0x200004c8
 800f7dc:	200004d0 	.word	0x200004d0
 800f7e0:	200004b8 	.word	0x200004b8
 800f7e4:	200003b4 	.word	0x200003b4
 800f7e8:	200003b0 	.word	0x200003b0
 800f7ec:	200004c0 	.word	0x200004c0
 800f7f0:	200004c4 	.word	0x200004c4

0800f7f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f7fa:	4b27      	ldr	r3, [pc, #156]	; (800f898 <vTaskSwitchContext+0xa4>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d003      	beq.n	800f80a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f802:	4b26      	ldr	r3, [pc, #152]	; (800f89c <vTaskSwitchContext+0xa8>)
 800f804:	2201      	movs	r2, #1
 800f806:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f808:	e040      	b.n	800f88c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800f80a:	4b24      	ldr	r3, [pc, #144]	; (800f89c <vTaskSwitchContext+0xa8>)
 800f80c:	2200      	movs	r2, #0
 800f80e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f810:	4b23      	ldr	r3, [pc, #140]	; (800f8a0 <vTaskSwitchContext+0xac>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	fab3 f383 	clz	r3, r3
 800f81c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f81e:	7afb      	ldrb	r3, [r7, #11]
 800f820:	f1c3 031f 	rsb	r3, r3, #31
 800f824:	617b      	str	r3, [r7, #20]
 800f826:	491f      	ldr	r1, [pc, #124]	; (800f8a4 <vTaskSwitchContext+0xb0>)
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	4613      	mov	r3, r2
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	4413      	add	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	440b      	add	r3, r1
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10b      	bne.n	800f852 <vTaskSwitchContext+0x5e>
	__asm volatile
 800f83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83e:	b672      	cpsid	i
 800f840:	f383 8811 	msr	BASEPRI, r3
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	f3bf 8f4f 	dsb	sy
 800f84c:	b662      	cpsie	i
 800f84e:	607b      	str	r3, [r7, #4]
 800f850:	e7fe      	b.n	800f850 <vTaskSwitchContext+0x5c>
 800f852:	697a      	ldr	r2, [r7, #20]
 800f854:	4613      	mov	r3, r2
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	4413      	add	r3, r2
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	4a11      	ldr	r2, [pc, #68]	; (800f8a4 <vTaskSwitchContext+0xb0>)
 800f85e:	4413      	add	r3, r2
 800f860:	613b      	str	r3, [r7, #16]
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	685a      	ldr	r2, [r3, #4]
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	605a      	str	r2, [r3, #4]
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	685a      	ldr	r2, [r3, #4]
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	3308      	adds	r3, #8
 800f874:	429a      	cmp	r2, r3
 800f876:	d104      	bne.n	800f882 <vTaskSwitchContext+0x8e>
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	685a      	ldr	r2, [r3, #4]
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	605a      	str	r2, [r3, #4]
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	4a07      	ldr	r2, [pc, #28]	; (800f8a8 <vTaskSwitchContext+0xb4>)
 800f88a:	6013      	str	r3, [r2, #0]
}
 800f88c:	bf00      	nop
 800f88e:	371c      	adds	r7, #28
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr
 800f898:	200004d8 	.word	0x200004d8
 800f89c:	200004c4 	.word	0x200004c4
 800f8a0:	200004b8 	.word	0x200004b8
 800f8a4:	200003b4 	.word	0x200003b4
 800f8a8:	200003b0 	.word	0x200003b0

0800f8ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d10b      	bne.n	800f8d4 <vTaskPlaceOnEventList+0x28>
 800f8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c0:	b672      	cpsid	i
 800f8c2:	f383 8811 	msr	BASEPRI, r3
 800f8c6:	f3bf 8f6f 	isb	sy
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	b662      	cpsie	i
 800f8d0:	60fb      	str	r3, [r7, #12]
 800f8d2:	e7fe      	b.n	800f8d2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f8d4:	4b07      	ldr	r3, [pc, #28]	; (800f8f4 <vTaskPlaceOnEventList+0x48>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	3318      	adds	r3, #24
 800f8da:	4619      	mov	r1, r3
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f7fe fc2c 	bl	800e13a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f8e2:	2101      	movs	r1, #1
 800f8e4:	6838      	ldr	r0, [r7, #0]
 800f8e6:	f000 fb9b 	bl	8010020 <prvAddCurrentTaskToDelayedList>
}
 800f8ea:	bf00      	nop
 800f8ec:	3710      	adds	r7, #16
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	200003b0 	.word	0x200003b0

0800f8f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b086      	sub	sp, #24
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d10b      	bne.n	800f926 <xTaskRemoveFromEventList+0x2e>
 800f90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f912:	b672      	cpsid	i
 800f914:	f383 8811 	msr	BASEPRI, r3
 800f918:	f3bf 8f6f 	isb	sy
 800f91c:	f3bf 8f4f 	dsb	sy
 800f920:	b662      	cpsie	i
 800f922:	60fb      	str	r3, [r7, #12]
 800f924:	e7fe      	b.n	800f924 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	3318      	adds	r3, #24
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fe fc3e 	bl	800e1ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f930:	4b1d      	ldr	r3, [pc, #116]	; (800f9a8 <xTaskRemoveFromEventList+0xb0>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d11c      	bne.n	800f972 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	3304      	adds	r3, #4
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fe fc35 	bl	800e1ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f946:	2201      	movs	r2, #1
 800f948:	409a      	lsls	r2, r3
 800f94a:	4b18      	ldr	r3, [pc, #96]	; (800f9ac <xTaskRemoveFromEventList+0xb4>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4313      	orrs	r3, r2
 800f950:	4a16      	ldr	r2, [pc, #88]	; (800f9ac <xTaskRemoveFromEventList+0xb4>)
 800f952:	6013      	str	r3, [r2, #0]
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f958:	4613      	mov	r3, r2
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	4413      	add	r3, r2
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	4a13      	ldr	r2, [pc, #76]	; (800f9b0 <xTaskRemoveFromEventList+0xb8>)
 800f962:	441a      	add	r2, r3
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	3304      	adds	r3, #4
 800f968:	4619      	mov	r1, r3
 800f96a:	4610      	mov	r0, r2
 800f96c:	f7fe fbc1 	bl	800e0f2 <vListInsertEnd>
 800f970:	e005      	b.n	800f97e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	3318      	adds	r3, #24
 800f976:	4619      	mov	r1, r3
 800f978:	480e      	ldr	r0, [pc, #56]	; (800f9b4 <xTaskRemoveFromEventList+0xbc>)
 800f97a:	f7fe fbba 	bl	800e0f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f982:	4b0d      	ldr	r3, [pc, #52]	; (800f9b8 <xTaskRemoveFromEventList+0xc0>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f988:	429a      	cmp	r2, r3
 800f98a:	d905      	bls.n	800f998 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f98c:	2301      	movs	r3, #1
 800f98e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f990:	4b0a      	ldr	r3, [pc, #40]	; (800f9bc <xTaskRemoveFromEventList+0xc4>)
 800f992:	2201      	movs	r2, #1
 800f994:	601a      	str	r2, [r3, #0]
 800f996:	e001      	b.n	800f99c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f998:	2300      	movs	r3, #0
 800f99a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f99c:	697b      	ldr	r3, [r7, #20]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3718      	adds	r7, #24
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	200004d8 	.word	0x200004d8
 800f9ac:	200004b8 	.word	0x200004b8
 800f9b0:	200003b4 	.word	0x200003b4
 800f9b4:	20000470 	.word	0x20000470
 800f9b8:	200003b0 	.word	0x200003b0
 800f9bc:	200004c4 	.word	0x200004c4

0800f9c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f9c8:	4b06      	ldr	r3, [pc, #24]	; (800f9e4 <vTaskInternalSetTimeOutState+0x24>)
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f9d0:	4b05      	ldr	r3, [pc, #20]	; (800f9e8 <vTaskInternalSetTimeOutState+0x28>)
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	605a      	str	r2, [r3, #4]
}
 800f9d8:	bf00      	nop
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	200004c8 	.word	0x200004c8
 800f9e8:	200004b4 	.word	0x200004b4

0800f9ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b088      	sub	sp, #32
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d10b      	bne.n	800fa14 <xTaskCheckForTimeOut+0x28>
 800f9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa00:	b672      	cpsid	i
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	b662      	cpsie	i
 800fa10:	613b      	str	r3, [r7, #16]
 800fa12:	e7fe      	b.n	800fa12 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d10b      	bne.n	800fa32 <xTaskCheckForTimeOut+0x46>
 800fa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1e:	b672      	cpsid	i
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	b662      	cpsie	i
 800fa2e:	60fb      	str	r3, [r7, #12]
 800fa30:	e7fe      	b.n	800fa30 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800fa32:	f000 fc61 	bl	80102f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fa36:	4b1d      	ldr	r3, [pc, #116]	; (800faac <xTaskCheckForTimeOut+0xc0>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	69ba      	ldr	r2, [r7, #24]
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa4e:	d102      	bne.n	800fa56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fa50:	2300      	movs	r3, #0
 800fa52:	61fb      	str	r3, [r7, #28]
 800fa54:	e023      	b.n	800fa9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	4b15      	ldr	r3, [pc, #84]	; (800fab0 <xTaskCheckForTimeOut+0xc4>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d007      	beq.n	800fa72 <xTaskCheckForTimeOut+0x86>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	69ba      	ldr	r2, [r7, #24]
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d302      	bcc.n	800fa72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	61fb      	str	r3, [r7, #28]
 800fa70:	e015      	b.n	800fa9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	697a      	ldr	r2, [r7, #20]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d20b      	bcs.n	800fa94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	1ad2      	subs	r2, r2, r3
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f7ff ff99 	bl	800f9c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	61fb      	str	r3, [r7, #28]
 800fa92:	e004      	b.n	800fa9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	2200      	movs	r2, #0
 800fa98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa9e:	f000 fc5d 	bl	801035c <vPortExitCritical>

	return xReturn;
 800faa2:	69fb      	ldr	r3, [r7, #28]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3720      	adds	r7, #32
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	200004b4 	.word	0x200004b4
 800fab0:	200004c8 	.word	0x200004c8

0800fab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fab4:	b480      	push	{r7}
 800fab6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fab8:	4b03      	ldr	r3, [pc, #12]	; (800fac8 <vTaskMissedYield+0x14>)
 800faba:	2201      	movs	r2, #1
 800fabc:	601a      	str	r2, [r3, #0]
}
 800fabe:	bf00      	nop
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	200004c4 	.word	0x200004c4

0800facc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fad4:	f000 f852 	bl	800fb7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fad8:	4b06      	ldr	r3, [pc, #24]	; (800faf4 <prvIdleTask+0x28>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d9f9      	bls.n	800fad4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fae0:	4b05      	ldr	r3, [pc, #20]	; (800faf8 <prvIdleTask+0x2c>)
 800fae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fae6:	601a      	str	r2, [r3, #0]
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800faf0:	e7f0      	b.n	800fad4 <prvIdleTask+0x8>
 800faf2:	bf00      	nop
 800faf4:	200003b4 	.word	0x200003b4
 800faf8:	e000ed04 	.word	0xe000ed04

0800fafc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb02:	2300      	movs	r3, #0
 800fb04:	607b      	str	r3, [r7, #4]
 800fb06:	e00c      	b.n	800fb22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	4613      	mov	r3, r2
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	4413      	add	r3, r2
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	4a12      	ldr	r2, [pc, #72]	; (800fb5c <prvInitialiseTaskLists+0x60>)
 800fb14:	4413      	add	r3, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fe fabe 	bl	800e098 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	607b      	str	r3, [r7, #4]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2b06      	cmp	r3, #6
 800fb26:	d9ef      	bls.n	800fb08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fb28:	480d      	ldr	r0, [pc, #52]	; (800fb60 <prvInitialiseTaskLists+0x64>)
 800fb2a:	f7fe fab5 	bl	800e098 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fb2e:	480d      	ldr	r0, [pc, #52]	; (800fb64 <prvInitialiseTaskLists+0x68>)
 800fb30:	f7fe fab2 	bl	800e098 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fb34:	480c      	ldr	r0, [pc, #48]	; (800fb68 <prvInitialiseTaskLists+0x6c>)
 800fb36:	f7fe faaf 	bl	800e098 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fb3a:	480c      	ldr	r0, [pc, #48]	; (800fb6c <prvInitialiseTaskLists+0x70>)
 800fb3c:	f7fe faac 	bl	800e098 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fb40:	480b      	ldr	r0, [pc, #44]	; (800fb70 <prvInitialiseTaskLists+0x74>)
 800fb42:	f7fe faa9 	bl	800e098 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb46:	4b0b      	ldr	r3, [pc, #44]	; (800fb74 <prvInitialiseTaskLists+0x78>)
 800fb48:	4a05      	ldr	r2, [pc, #20]	; (800fb60 <prvInitialiseTaskLists+0x64>)
 800fb4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	; (800fb78 <prvInitialiseTaskLists+0x7c>)
 800fb4e:	4a05      	ldr	r2, [pc, #20]	; (800fb64 <prvInitialiseTaskLists+0x68>)
 800fb50:	601a      	str	r2, [r3, #0]
}
 800fb52:	bf00      	nop
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	200003b4 	.word	0x200003b4
 800fb60:	20000440 	.word	0x20000440
 800fb64:	20000454 	.word	0x20000454
 800fb68:	20000470 	.word	0x20000470
 800fb6c:	20000484 	.word	0x20000484
 800fb70:	2000049c 	.word	0x2000049c
 800fb74:	20000468 	.word	0x20000468
 800fb78:	2000046c 	.word	0x2000046c

0800fb7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb82:	e019      	b.n	800fbb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb84:	f000 fbb8 	bl	80102f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb88:	4b0f      	ldr	r3, [pc, #60]	; (800fbc8 <prvCheckTasksWaitingTermination+0x4c>)
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	68db      	ldr	r3, [r3, #12]
 800fb8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	3304      	adds	r3, #4
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fe fb09 	bl	800e1ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb9a:	4b0c      	ldr	r3, [pc, #48]	; (800fbcc <prvCheckTasksWaitingTermination+0x50>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	3b01      	subs	r3, #1
 800fba0:	4a0a      	ldr	r2, [pc, #40]	; (800fbcc <prvCheckTasksWaitingTermination+0x50>)
 800fba2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fba4:	4b0a      	ldr	r3, [pc, #40]	; (800fbd0 <prvCheckTasksWaitingTermination+0x54>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	4a09      	ldr	r2, [pc, #36]	; (800fbd0 <prvCheckTasksWaitingTermination+0x54>)
 800fbac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fbae:	f000 fbd5 	bl	801035c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 f80e 	bl	800fbd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fbb8:	4b05      	ldr	r3, [pc, #20]	; (800fbd0 <prvCheckTasksWaitingTermination+0x54>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1e1      	bne.n	800fb84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fbc0:	bf00      	nop
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	20000484 	.word	0x20000484
 800fbcc:	200004b0 	.word	0x200004b0
 800fbd0:	20000498 	.word	0x20000498

0800fbd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b084      	sub	sp, #16
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d108      	bne.n	800fbf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbea:	4618      	mov	r0, r3
 800fbec:	f000 fd6e 	bl	80106cc <vPortFree>
				vPortFree( pxTCB );
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f000 fd6b 	bl	80106cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fbf6:	e019      	b.n	800fc2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d103      	bne.n	800fc0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 fd62 	bl	80106cc <vPortFree>
	}
 800fc08:	e010      	b.n	800fc2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fc10:	2b02      	cmp	r3, #2
 800fc12:	d00b      	beq.n	800fc2c <prvDeleteTCB+0x58>
 800fc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc18:	b672      	cpsid	i
 800fc1a:	f383 8811 	msr	BASEPRI, r3
 800fc1e:	f3bf 8f6f 	isb	sy
 800fc22:	f3bf 8f4f 	dsb	sy
 800fc26:	b662      	cpsie	i
 800fc28:	60fb      	str	r3, [r7, #12]
 800fc2a:	e7fe      	b.n	800fc2a <prvDeleteTCB+0x56>
	}
 800fc2c:	bf00      	nop
 800fc2e:	3710      	adds	r7, #16
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc3a:	4b0c      	ldr	r3, [pc, #48]	; (800fc6c <prvResetNextTaskUnblockTime+0x38>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d104      	bne.n	800fc4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fc44:	4b0a      	ldr	r3, [pc, #40]	; (800fc70 <prvResetNextTaskUnblockTime+0x3c>)
 800fc46:	f04f 32ff 	mov.w	r2, #4294967295
 800fc4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fc4c:	e008      	b.n	800fc60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc4e:	4b07      	ldr	r3, [pc, #28]	; (800fc6c <prvResetNextTaskUnblockTime+0x38>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	68db      	ldr	r3, [r3, #12]
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	4a04      	ldr	r2, [pc, #16]	; (800fc70 <prvResetNextTaskUnblockTime+0x3c>)
 800fc5e:	6013      	str	r3, [r2, #0]
}
 800fc60:	bf00      	nop
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr
 800fc6c:	20000468 	.word	0x20000468
 800fc70:	200004d0 	.word	0x200004d0

0800fc74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fc74:	b480      	push	{r7}
 800fc76:	b083      	sub	sp, #12
 800fc78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fc7a:	4b0b      	ldr	r3, [pc, #44]	; (800fca8 <xTaskGetSchedulerState+0x34>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d102      	bne.n	800fc88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc82:	2301      	movs	r3, #1
 800fc84:	607b      	str	r3, [r7, #4]
 800fc86:	e008      	b.n	800fc9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc88:	4b08      	ldr	r3, [pc, #32]	; (800fcac <xTaskGetSchedulerState+0x38>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d102      	bne.n	800fc96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fc90:	2302      	movs	r3, #2
 800fc92:	607b      	str	r3, [r7, #4]
 800fc94:	e001      	b.n	800fc9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc96:	2300      	movs	r3, #0
 800fc98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc9a:	687b      	ldr	r3, [r7, #4]
	}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	370c      	adds	r7, #12
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr
 800fca8:	200004bc 	.word	0x200004bc
 800fcac:	200004d8 	.word	0x200004d8

0800fcb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d069      	beq.n	800fd9a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcca:	4b36      	ldr	r3, [pc, #216]	; (800fda4 <xTaskPriorityInherit+0xf4>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d259      	bcs.n	800fd88 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	699b      	ldr	r3, [r3, #24]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	db06      	blt.n	800fcea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcdc:	4b31      	ldr	r3, [pc, #196]	; (800fda4 <xTaskPriorityInherit+0xf4>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fce2:	f1c3 0207 	rsb	r2, r3, #7
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	6959      	ldr	r1, [r3, #20]
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcf2:	4613      	mov	r3, r2
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	4413      	add	r3, r2
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	4a2b      	ldr	r2, [pc, #172]	; (800fda8 <xTaskPriorityInherit+0xf8>)
 800fcfc:	4413      	add	r3, r2
 800fcfe:	4299      	cmp	r1, r3
 800fd00:	d13a      	bne.n	800fd78 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	3304      	adds	r3, #4
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fe fa50 	bl	800e1ac <uxListRemove>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d115      	bne.n	800fd3e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd16:	4924      	ldr	r1, [pc, #144]	; (800fda8 <xTaskPriorityInherit+0xf8>)
 800fd18:	4613      	mov	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	4413      	add	r3, r2
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	440b      	add	r3, r1
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d10a      	bne.n	800fd3e <xTaskPriorityInherit+0x8e>
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800fd32:	43da      	mvns	r2, r3
 800fd34:	4b1d      	ldr	r3, [pc, #116]	; (800fdac <xTaskPriorityInherit+0xfc>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4013      	ands	r3, r2
 800fd3a:	4a1c      	ldr	r2, [pc, #112]	; (800fdac <xTaskPriorityInherit+0xfc>)
 800fd3c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd3e:	4b19      	ldr	r3, [pc, #100]	; (800fda4 <xTaskPriorityInherit+0xf4>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	409a      	lsls	r2, r3
 800fd50:	4b16      	ldr	r3, [pc, #88]	; (800fdac <xTaskPriorityInherit+0xfc>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4313      	orrs	r3, r2
 800fd56:	4a15      	ldr	r2, [pc, #84]	; (800fdac <xTaskPriorityInherit+0xfc>)
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd5e:	4613      	mov	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4413      	add	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	4a10      	ldr	r2, [pc, #64]	; (800fda8 <xTaskPriorityInherit+0xf8>)
 800fd68:	441a      	add	r2, r3
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	3304      	adds	r3, #4
 800fd6e:	4619      	mov	r1, r3
 800fd70:	4610      	mov	r0, r2
 800fd72:	f7fe f9be 	bl	800e0f2 <vListInsertEnd>
 800fd76:	e004      	b.n	800fd82 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd78:	4b0a      	ldr	r3, [pc, #40]	; (800fda4 <xTaskPriorityInherit+0xf4>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fd82:	2301      	movs	r3, #1
 800fd84:	60fb      	str	r3, [r7, #12]
 800fd86:	e008      	b.n	800fd9a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd8c:	4b05      	ldr	r3, [pc, #20]	; (800fda4 <xTaskPriorityInherit+0xf4>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d201      	bcs.n	800fd9a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fd96:	2301      	movs	r3, #1
 800fd98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
	}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	200003b0 	.word	0x200003b0
 800fda8:	200003b4 	.word	0x200003b4
 800fdac:	200004b8 	.word	0x200004b8

0800fdb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d070      	beq.n	800fea8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fdc6:	4b3b      	ldr	r3, [pc, #236]	; (800feb4 <xTaskPriorityDisinherit+0x104>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	693a      	ldr	r2, [r7, #16]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d00b      	beq.n	800fde8 <xTaskPriorityDisinherit+0x38>
 800fdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd4:	b672      	cpsid	i
 800fdd6:	f383 8811 	msr	BASEPRI, r3
 800fdda:	f3bf 8f6f 	isb	sy
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	b662      	cpsie	i
 800fde4:	60fb      	str	r3, [r7, #12]
 800fde6:	e7fe      	b.n	800fde6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d10b      	bne.n	800fe08 <xTaskPriorityDisinherit+0x58>
 800fdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf4:	b672      	cpsid	i
 800fdf6:	f383 8811 	msr	BASEPRI, r3
 800fdfa:	f3bf 8f6f 	isb	sy
 800fdfe:	f3bf 8f4f 	dsb	sy
 800fe02:	b662      	cpsie	i
 800fe04:	60bb      	str	r3, [r7, #8]
 800fe06:	e7fe      	b.n	800fe06 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe0c:	1e5a      	subs	r2, r3, #1
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d044      	beq.n	800fea8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d140      	bne.n	800fea8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	3304      	adds	r3, #4
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7fe f9be 	bl	800e1ac <uxListRemove>
 800fe30:	4603      	mov	r3, r0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d115      	bne.n	800fe62 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe3a:	491f      	ldr	r1, [pc, #124]	; (800feb8 <xTaskPriorityDisinherit+0x108>)
 800fe3c:	4613      	mov	r3, r2
 800fe3e:	009b      	lsls	r3, r3, #2
 800fe40:	4413      	add	r3, r2
 800fe42:	009b      	lsls	r3, r3, #2
 800fe44:	440b      	add	r3, r1
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d10a      	bne.n	800fe62 <xTaskPriorityDisinherit+0xb2>
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe50:	2201      	movs	r2, #1
 800fe52:	fa02 f303 	lsl.w	r3, r2, r3
 800fe56:	43da      	mvns	r2, r3
 800fe58:	4b18      	ldr	r3, [pc, #96]	; (800febc <xTaskPriorityDisinherit+0x10c>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4013      	ands	r3, r2
 800fe5e:	4a17      	ldr	r2, [pc, #92]	; (800febc <xTaskPriorityDisinherit+0x10c>)
 800fe60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe6e:	f1c3 0207 	rsb	r2, r3, #7
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	409a      	lsls	r2, r3
 800fe7e:	4b0f      	ldr	r3, [pc, #60]	; (800febc <xTaskPriorityDisinherit+0x10c>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	4313      	orrs	r3, r2
 800fe84:	4a0d      	ldr	r2, [pc, #52]	; (800febc <xTaskPriorityDisinherit+0x10c>)
 800fe86:	6013      	str	r3, [r2, #0]
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	4413      	add	r3, r2
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	4a08      	ldr	r2, [pc, #32]	; (800feb8 <xTaskPriorityDisinherit+0x108>)
 800fe96:	441a      	add	r2, r3
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	4610      	mov	r0, r2
 800fea0:	f7fe f927 	bl	800e0f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fea4:	2301      	movs	r3, #1
 800fea6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fea8:	697b      	ldr	r3, [r7, #20]
	}
 800feaa:	4618      	mov	r0, r3
 800feac:	3718      	adds	r7, #24
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	200003b0 	.word	0x200003b0
 800feb8:	200003b4 	.word	0x200003b4
 800febc:	200004b8 	.word	0x200004b8

0800fec0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b088      	sub	sp, #32
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fece:	2301      	movs	r3, #1
 800fed0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f000 8085 	beq.w	800ffe4 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800feda:	69bb      	ldr	r3, [r7, #24]
 800fedc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10b      	bne.n	800fefa <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800fee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee6:	b672      	cpsid	i
 800fee8:	f383 8811 	msr	BASEPRI, r3
 800feec:	f3bf 8f6f 	isb	sy
 800fef0:	f3bf 8f4f 	dsb	sy
 800fef4:	b662      	cpsie	i
 800fef6:	60fb      	str	r3, [r7, #12]
 800fef8:	e7fe      	b.n	800fef8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d902      	bls.n	800ff0a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	61fb      	str	r3, [r7, #28]
 800ff08:	e002      	b.n	800ff10 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff0e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ff10:	69bb      	ldr	r3, [r7, #24]
 800ff12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff14:	69fa      	ldr	r2, [r7, #28]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d064      	beq.n	800ffe4 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff1e:	697a      	ldr	r2, [r7, #20]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d15f      	bne.n	800ffe4 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ff24:	4b31      	ldr	r3, [pc, #196]	; (800ffec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	69ba      	ldr	r2, [r7, #24]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d10b      	bne.n	800ff46 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800ff2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff32:	b672      	cpsid	i
 800ff34:	f383 8811 	msr	BASEPRI, r3
 800ff38:	f3bf 8f6f 	isb	sy
 800ff3c:	f3bf 8f4f 	dsb	sy
 800ff40:	b662      	cpsie	i
 800ff42:	60bb      	str	r3, [r7, #8]
 800ff44:	e7fe      	b.n	800ff44 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ff46:	69bb      	ldr	r3, [r7, #24]
 800ff48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff4a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ff4c:	69bb      	ldr	r3, [r7, #24]
 800ff4e:	69fa      	ldr	r2, [r7, #28]
 800ff50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	699b      	ldr	r3, [r3, #24]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	db04      	blt.n	800ff64 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff5a:	69fb      	ldr	r3, [r7, #28]
 800ff5c:	f1c3 0207 	rsb	r2, r3, #7
 800ff60:	69bb      	ldr	r3, [r7, #24]
 800ff62:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ff64:	69bb      	ldr	r3, [r7, #24]
 800ff66:	6959      	ldr	r1, [r3, #20]
 800ff68:	693a      	ldr	r2, [r7, #16]
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	4413      	add	r3, r2
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	4a1f      	ldr	r2, [pc, #124]	; (800fff0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ff74:	4413      	add	r3, r2
 800ff76:	4299      	cmp	r1, r3
 800ff78:	d134      	bne.n	800ffe4 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff7a:	69bb      	ldr	r3, [r7, #24]
 800ff7c:	3304      	adds	r3, #4
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fe f914 	bl	800e1ac <uxListRemove>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d115      	bne.n	800ffb6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8e:	4918      	ldr	r1, [pc, #96]	; (800fff0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ff90:	4613      	mov	r3, r2
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	4413      	add	r3, r2
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	440b      	add	r3, r1
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d10a      	bne.n	800ffb6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800ffa0:	69bb      	ldr	r3, [r7, #24]
 800ffa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	fa02 f303 	lsl.w	r3, r2, r3
 800ffaa:	43da      	mvns	r2, r3
 800ffac:	4b11      	ldr	r3, [pc, #68]	; (800fff4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4013      	ands	r3, r2
 800ffb2:	4a10      	ldr	r2, [pc, #64]	; (800fff4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ffb4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ffb6:	69bb      	ldr	r3, [r7, #24]
 800ffb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffba:	2201      	movs	r2, #1
 800ffbc:	409a      	lsls	r2, r3
 800ffbe:	4b0d      	ldr	r3, [pc, #52]	; (800fff4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	4a0b      	ldr	r2, [pc, #44]	; (800fff4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ffc6:	6013      	str	r3, [r2, #0]
 800ffc8:	69bb      	ldr	r3, [r7, #24]
 800ffca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffcc:	4613      	mov	r3, r2
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	4413      	add	r3, r2
 800ffd2:	009b      	lsls	r3, r3, #2
 800ffd4:	4a06      	ldr	r2, [pc, #24]	; (800fff0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ffd6:	441a      	add	r2, r3
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	3304      	adds	r3, #4
 800ffdc:	4619      	mov	r1, r3
 800ffde:	4610      	mov	r0, r2
 800ffe0:	f7fe f887 	bl	800e0f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ffe4:	bf00      	nop
 800ffe6:	3720      	adds	r7, #32
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	200003b0 	.word	0x200003b0
 800fff0:	200003b4 	.word	0x200003b4
 800fff4:	200004b8 	.word	0x200004b8

0800fff8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fff8:	b480      	push	{r7}
 800fffa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fffc:	4b07      	ldr	r3, [pc, #28]	; (801001c <pvTaskIncrementMutexHeldCount+0x24>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d004      	beq.n	801000e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010004:	4b05      	ldr	r3, [pc, #20]	; (801001c <pvTaskIncrementMutexHeldCount+0x24>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801000a:	3201      	adds	r2, #1
 801000c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801000e:	4b03      	ldr	r3, [pc, #12]	; (801001c <pvTaskIncrementMutexHeldCount+0x24>)
 8010010:	681b      	ldr	r3, [r3, #0]
	}
 8010012:	4618      	mov	r0, r3
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr
 801001c:	200003b0 	.word	0x200003b0

08010020 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801002a:	4b29      	ldr	r3, [pc, #164]	; (80100d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010030:	4b28      	ldr	r3, [pc, #160]	; (80100d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	3304      	adds	r3, #4
 8010036:	4618      	mov	r0, r3
 8010038:	f7fe f8b8 	bl	800e1ac <uxListRemove>
 801003c:	4603      	mov	r3, r0
 801003e:	2b00      	cmp	r3, #0
 8010040:	d10b      	bne.n	801005a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010042:	4b24      	ldr	r3, [pc, #144]	; (80100d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010048:	2201      	movs	r2, #1
 801004a:	fa02 f303 	lsl.w	r3, r2, r3
 801004e:	43da      	mvns	r2, r3
 8010050:	4b21      	ldr	r3, [pc, #132]	; (80100d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4013      	ands	r3, r2
 8010056:	4a20      	ldr	r2, [pc, #128]	; (80100d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010058:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010060:	d10a      	bne.n	8010078 <prvAddCurrentTaskToDelayedList+0x58>
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d007      	beq.n	8010078 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010068:	4b1a      	ldr	r3, [pc, #104]	; (80100d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	3304      	adds	r3, #4
 801006e:	4619      	mov	r1, r3
 8010070:	481a      	ldr	r0, [pc, #104]	; (80100dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8010072:	f7fe f83e 	bl	800e0f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010076:	e026      	b.n	80100c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010078:	68fa      	ldr	r2, [r7, #12]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4413      	add	r3, r2
 801007e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010080:	4b14      	ldr	r3, [pc, #80]	; (80100d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	68ba      	ldr	r2, [r7, #8]
 8010086:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010088:	68ba      	ldr	r2, [r7, #8]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	429a      	cmp	r2, r3
 801008e:	d209      	bcs.n	80100a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010090:	4b13      	ldr	r3, [pc, #76]	; (80100e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	4b0f      	ldr	r3, [pc, #60]	; (80100d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	3304      	adds	r3, #4
 801009a:	4619      	mov	r1, r3
 801009c:	4610      	mov	r0, r2
 801009e:	f7fe f84c 	bl	800e13a <vListInsert>
}
 80100a2:	e010      	b.n	80100c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100a4:	4b0f      	ldr	r3, [pc, #60]	; (80100e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	4b0a      	ldr	r3, [pc, #40]	; (80100d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	3304      	adds	r3, #4
 80100ae:	4619      	mov	r1, r3
 80100b0:	4610      	mov	r0, r2
 80100b2:	f7fe f842 	bl	800e13a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80100b6:	4b0c      	ldr	r3, [pc, #48]	; (80100e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	68ba      	ldr	r2, [r7, #8]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d202      	bcs.n	80100c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80100c0:	4a09      	ldr	r2, [pc, #36]	; (80100e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	6013      	str	r3, [r2, #0]
}
 80100c6:	bf00      	nop
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	200004b4 	.word	0x200004b4
 80100d4:	200003b0 	.word	0x200003b0
 80100d8:	200004b8 	.word	0x200004b8
 80100dc:	2000049c 	.word	0x2000049c
 80100e0:	2000046c 	.word	0x2000046c
 80100e4:	20000468 	.word	0x20000468
 80100e8:	200004d0 	.word	0x200004d0

080100ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80100ec:	b480      	push	{r7}
 80100ee:	b085      	sub	sp, #20
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	3b04      	subs	r3, #4
 80100fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	3b04      	subs	r3, #4
 801010a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	f023 0201 	bic.w	r2, r3, #1
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	3b04      	subs	r3, #4
 801011a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801011c:	4a0c      	ldr	r2, [pc, #48]	; (8010150 <pxPortInitialiseStack+0x64>)
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	3b14      	subs	r3, #20
 8010126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	3b04      	subs	r3, #4
 8010132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f06f 0202 	mvn.w	r2, #2
 801013a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	3b20      	subs	r3, #32
 8010140:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010142:	68fb      	ldr	r3, [r7, #12]
}
 8010144:	4618      	mov	r0, r3
 8010146:	3714      	adds	r7, #20
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr
 8010150:	08010155 	.word	0x08010155

08010154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801015a:	2300      	movs	r3, #0
 801015c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801015e:	4b13      	ldr	r3, [pc, #76]	; (80101ac <prvTaskExitError+0x58>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010166:	d00b      	beq.n	8010180 <prvTaskExitError+0x2c>
 8010168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801016c:	b672      	cpsid	i
 801016e:	f383 8811 	msr	BASEPRI, r3
 8010172:	f3bf 8f6f 	isb	sy
 8010176:	f3bf 8f4f 	dsb	sy
 801017a:	b662      	cpsie	i
 801017c:	60fb      	str	r3, [r7, #12]
 801017e:	e7fe      	b.n	801017e <prvTaskExitError+0x2a>
 8010180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010184:	b672      	cpsid	i
 8010186:	f383 8811 	msr	BASEPRI, r3
 801018a:	f3bf 8f6f 	isb	sy
 801018e:	f3bf 8f4f 	dsb	sy
 8010192:	b662      	cpsie	i
 8010194:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010196:	bf00      	nop
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d0fc      	beq.n	8010198 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801019e:	bf00      	nop
 80101a0:	3714      	adds	r7, #20
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop
 80101ac:	20000070 	.word	0x20000070

080101b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80101b0:	4b07      	ldr	r3, [pc, #28]	; (80101d0 <pxCurrentTCBConst2>)
 80101b2:	6819      	ldr	r1, [r3, #0]
 80101b4:	6808      	ldr	r0, [r1, #0]
 80101b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ba:	f380 8809 	msr	PSP, r0
 80101be:	f3bf 8f6f 	isb	sy
 80101c2:	f04f 0000 	mov.w	r0, #0
 80101c6:	f380 8811 	msr	BASEPRI, r0
 80101ca:	4770      	bx	lr
 80101cc:	f3af 8000 	nop.w

080101d0 <pxCurrentTCBConst2>:
 80101d0:	200003b0 	.word	0x200003b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80101d4:	bf00      	nop
 80101d6:	bf00      	nop

080101d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80101d8:	4808      	ldr	r0, [pc, #32]	; (80101fc <prvPortStartFirstTask+0x24>)
 80101da:	6800      	ldr	r0, [r0, #0]
 80101dc:	6800      	ldr	r0, [r0, #0]
 80101de:	f380 8808 	msr	MSP, r0
 80101e2:	f04f 0000 	mov.w	r0, #0
 80101e6:	f380 8814 	msr	CONTROL, r0
 80101ea:	b662      	cpsie	i
 80101ec:	b661      	cpsie	f
 80101ee:	f3bf 8f4f 	dsb	sy
 80101f2:	f3bf 8f6f 	isb	sy
 80101f6:	df00      	svc	0
 80101f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80101fa:	bf00      	nop
 80101fc:	e000ed08 	.word	0xe000ed08

08010200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010206:	4b36      	ldr	r3, [pc, #216]	; (80102e0 <xPortStartScheduler+0xe0>)
 8010208:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	b2db      	uxtb	r3, r3
 8010210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	22ff      	movs	r2, #255	; 0xff
 8010216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	b2db      	uxtb	r3, r3
 801021e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010220:	78fb      	ldrb	r3, [r7, #3]
 8010222:	b2db      	uxtb	r3, r3
 8010224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010228:	b2da      	uxtb	r2, r3
 801022a:	4b2e      	ldr	r3, [pc, #184]	; (80102e4 <xPortStartScheduler+0xe4>)
 801022c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801022e:	4b2e      	ldr	r3, [pc, #184]	; (80102e8 <xPortStartScheduler+0xe8>)
 8010230:	2207      	movs	r2, #7
 8010232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010234:	e009      	b.n	801024a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010236:	4b2c      	ldr	r3, [pc, #176]	; (80102e8 <xPortStartScheduler+0xe8>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	3b01      	subs	r3, #1
 801023c:	4a2a      	ldr	r2, [pc, #168]	; (80102e8 <xPortStartScheduler+0xe8>)
 801023e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010240:	78fb      	ldrb	r3, [r7, #3]
 8010242:	b2db      	uxtb	r3, r3
 8010244:	005b      	lsls	r3, r3, #1
 8010246:	b2db      	uxtb	r3, r3
 8010248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801024a:	78fb      	ldrb	r3, [r7, #3]
 801024c:	b2db      	uxtb	r3, r3
 801024e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010252:	2b80      	cmp	r3, #128	; 0x80
 8010254:	d0ef      	beq.n	8010236 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010256:	4b24      	ldr	r3, [pc, #144]	; (80102e8 <xPortStartScheduler+0xe8>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f1c3 0307 	rsb	r3, r3, #7
 801025e:	2b04      	cmp	r3, #4
 8010260:	d00b      	beq.n	801027a <xPortStartScheduler+0x7a>
 8010262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010266:	b672      	cpsid	i
 8010268:	f383 8811 	msr	BASEPRI, r3
 801026c:	f3bf 8f6f 	isb	sy
 8010270:	f3bf 8f4f 	dsb	sy
 8010274:	b662      	cpsie	i
 8010276:	60bb      	str	r3, [r7, #8]
 8010278:	e7fe      	b.n	8010278 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801027a:	4b1b      	ldr	r3, [pc, #108]	; (80102e8 <xPortStartScheduler+0xe8>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	021b      	lsls	r3, r3, #8
 8010280:	4a19      	ldr	r2, [pc, #100]	; (80102e8 <xPortStartScheduler+0xe8>)
 8010282:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010284:	4b18      	ldr	r3, [pc, #96]	; (80102e8 <xPortStartScheduler+0xe8>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801028c:	4a16      	ldr	r2, [pc, #88]	; (80102e8 <xPortStartScheduler+0xe8>)
 801028e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	b2da      	uxtb	r2, r3
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010298:	4b14      	ldr	r3, [pc, #80]	; (80102ec <xPortStartScheduler+0xec>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	4a13      	ldr	r2, [pc, #76]	; (80102ec <xPortStartScheduler+0xec>)
 801029e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80102a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80102a4:	4b11      	ldr	r3, [pc, #68]	; (80102ec <xPortStartScheduler+0xec>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	4a10      	ldr	r2, [pc, #64]	; (80102ec <xPortStartScheduler+0xec>)
 80102aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80102ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80102b0:	f000 f8d4 	bl	801045c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80102b4:	4b0e      	ldr	r3, [pc, #56]	; (80102f0 <xPortStartScheduler+0xf0>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80102ba:	f000 f8f3 	bl	80104a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80102be:	4b0d      	ldr	r3, [pc, #52]	; (80102f4 <xPortStartScheduler+0xf4>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	4a0c      	ldr	r2, [pc, #48]	; (80102f4 <xPortStartScheduler+0xf4>)
 80102c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80102c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80102ca:	f7ff ff85 	bl	80101d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80102ce:	f7ff fa91 	bl	800f7f4 <vTaskSwitchContext>
	prvTaskExitError();
 80102d2:	f7ff ff3f 	bl	8010154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80102d6:	2300      	movs	r3, #0
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3710      	adds	r7, #16
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	e000e400 	.word	0xe000e400
 80102e4:	200004dc 	.word	0x200004dc
 80102e8:	200004e0 	.word	0x200004e0
 80102ec:	e000ed20 	.word	0xe000ed20
 80102f0:	20000070 	.word	0x20000070
 80102f4:	e000ef34 	.word	0xe000ef34

080102f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80102f8:	b480      	push	{r7}
 80102fa:	b083      	sub	sp, #12
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010302:	b672      	cpsid	i
 8010304:	f383 8811 	msr	BASEPRI, r3
 8010308:	f3bf 8f6f 	isb	sy
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	b662      	cpsie	i
 8010312:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010314:	4b0f      	ldr	r3, [pc, #60]	; (8010354 <vPortEnterCritical+0x5c>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	3301      	adds	r3, #1
 801031a:	4a0e      	ldr	r2, [pc, #56]	; (8010354 <vPortEnterCritical+0x5c>)
 801031c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801031e:	4b0d      	ldr	r3, [pc, #52]	; (8010354 <vPortEnterCritical+0x5c>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2b01      	cmp	r3, #1
 8010324:	d110      	bne.n	8010348 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010326:	4b0c      	ldr	r3, [pc, #48]	; (8010358 <vPortEnterCritical+0x60>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	b2db      	uxtb	r3, r3
 801032c:	2b00      	cmp	r3, #0
 801032e:	d00b      	beq.n	8010348 <vPortEnterCritical+0x50>
 8010330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010334:	b672      	cpsid	i
 8010336:	f383 8811 	msr	BASEPRI, r3
 801033a:	f3bf 8f6f 	isb	sy
 801033e:	f3bf 8f4f 	dsb	sy
 8010342:	b662      	cpsie	i
 8010344:	603b      	str	r3, [r7, #0]
 8010346:	e7fe      	b.n	8010346 <vPortEnterCritical+0x4e>
	}
}
 8010348:	bf00      	nop
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr
 8010354:	20000070 	.word	0x20000070
 8010358:	e000ed04 	.word	0xe000ed04

0801035c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801035c:	b480      	push	{r7}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010362:	4b12      	ldr	r3, [pc, #72]	; (80103ac <vPortExitCritical+0x50>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d10b      	bne.n	8010382 <vPortExitCritical+0x26>
 801036a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036e:	b672      	cpsid	i
 8010370:	f383 8811 	msr	BASEPRI, r3
 8010374:	f3bf 8f6f 	isb	sy
 8010378:	f3bf 8f4f 	dsb	sy
 801037c:	b662      	cpsie	i
 801037e:	607b      	str	r3, [r7, #4]
 8010380:	e7fe      	b.n	8010380 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8010382:	4b0a      	ldr	r3, [pc, #40]	; (80103ac <vPortExitCritical+0x50>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	3b01      	subs	r3, #1
 8010388:	4a08      	ldr	r2, [pc, #32]	; (80103ac <vPortExitCritical+0x50>)
 801038a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801038c:	4b07      	ldr	r3, [pc, #28]	; (80103ac <vPortExitCritical+0x50>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d104      	bne.n	801039e <vPortExitCritical+0x42>
 8010394:	2300      	movs	r3, #0
 8010396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801039e:	bf00      	nop
 80103a0:	370c      	adds	r7, #12
 80103a2:	46bd      	mov	sp, r7
 80103a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a8:	4770      	bx	lr
 80103aa:	bf00      	nop
 80103ac:	20000070 	.word	0x20000070

080103b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80103b0:	f3ef 8009 	mrs	r0, PSP
 80103b4:	f3bf 8f6f 	isb	sy
 80103b8:	4b15      	ldr	r3, [pc, #84]	; (8010410 <pxCurrentTCBConst>)
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	f01e 0f10 	tst.w	lr, #16
 80103c0:	bf08      	it	eq
 80103c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80103c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ca:	6010      	str	r0, [r2, #0]
 80103cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80103d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80103d4:	b672      	cpsid	i
 80103d6:	f380 8811 	msr	BASEPRI, r0
 80103da:	f3bf 8f4f 	dsb	sy
 80103de:	f3bf 8f6f 	isb	sy
 80103e2:	b662      	cpsie	i
 80103e4:	f7ff fa06 	bl	800f7f4 <vTaskSwitchContext>
 80103e8:	f04f 0000 	mov.w	r0, #0
 80103ec:	f380 8811 	msr	BASEPRI, r0
 80103f0:	bc09      	pop	{r0, r3}
 80103f2:	6819      	ldr	r1, [r3, #0]
 80103f4:	6808      	ldr	r0, [r1, #0]
 80103f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fa:	f01e 0f10 	tst.w	lr, #16
 80103fe:	bf08      	it	eq
 8010400:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010404:	f380 8809 	msr	PSP, r0
 8010408:	f3bf 8f6f 	isb	sy
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop

08010410 <pxCurrentTCBConst>:
 8010410:	200003b0 	.word	0x200003b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010414:	bf00      	nop
 8010416:	bf00      	nop

08010418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
	__asm volatile
 801041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010422:	b672      	cpsid	i
 8010424:	f383 8811 	msr	BASEPRI, r3
 8010428:	f3bf 8f6f 	isb	sy
 801042c:	f3bf 8f4f 	dsb	sy
 8010430:	b662      	cpsie	i
 8010432:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010434:	f7ff f924 	bl	800f680 <xTaskIncrementTick>
 8010438:	4603      	mov	r3, r0
 801043a:	2b00      	cmp	r3, #0
 801043c:	d003      	beq.n	8010446 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801043e:	4b06      	ldr	r3, [pc, #24]	; (8010458 <SysTick_Handler+0x40>)
 8010440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010444:	601a      	str	r2, [r3, #0]
 8010446:	2300      	movs	r3, #0
 8010448:	603b      	str	r3, [r7, #0]
	__asm volatile
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010450:	bf00      	nop
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	e000ed04 	.word	0xe000ed04

0801045c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801045c:	b480      	push	{r7}
 801045e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010460:	4b0b      	ldr	r3, [pc, #44]	; (8010490 <vPortSetupTimerInterrupt+0x34>)
 8010462:	2200      	movs	r2, #0
 8010464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010466:	4b0b      	ldr	r3, [pc, #44]	; (8010494 <vPortSetupTimerInterrupt+0x38>)
 8010468:	2200      	movs	r2, #0
 801046a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801046c:	4b0a      	ldr	r3, [pc, #40]	; (8010498 <vPortSetupTimerInterrupt+0x3c>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a0a      	ldr	r2, [pc, #40]	; (801049c <vPortSetupTimerInterrupt+0x40>)
 8010472:	fba2 2303 	umull	r2, r3, r2, r3
 8010476:	099b      	lsrs	r3, r3, #6
 8010478:	4a09      	ldr	r2, [pc, #36]	; (80104a0 <vPortSetupTimerInterrupt+0x44>)
 801047a:	3b01      	subs	r3, #1
 801047c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801047e:	4b04      	ldr	r3, [pc, #16]	; (8010490 <vPortSetupTimerInterrupt+0x34>)
 8010480:	2207      	movs	r2, #7
 8010482:	601a      	str	r2, [r3, #0]
}
 8010484:	bf00      	nop
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop
 8010490:	e000e010 	.word	0xe000e010
 8010494:	e000e018 	.word	0xe000e018
 8010498:	20000044 	.word	0x20000044
 801049c:	10624dd3 	.word	0x10624dd3
 80104a0:	e000e014 	.word	0xe000e014

080104a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80104a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80104b4 <vPortEnableVFP+0x10>
 80104a8:	6801      	ldr	r1, [r0, #0]
 80104aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104ae:	6001      	str	r1, [r0, #0]
 80104b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80104b2:	bf00      	nop
 80104b4:	e000ed88 	.word	0xe000ed88

080104b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80104b8:	b480      	push	{r7}
 80104ba:	b085      	sub	sp, #20
 80104bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80104be:	f3ef 8305 	mrs	r3, IPSR
 80104c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2b0f      	cmp	r3, #15
 80104c8:	d915      	bls.n	80104f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80104ca:	4a18      	ldr	r2, [pc, #96]	; (801052c <vPortValidateInterruptPriority+0x74>)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	4413      	add	r3, r2
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80104d4:	4b16      	ldr	r3, [pc, #88]	; (8010530 <vPortValidateInterruptPriority+0x78>)
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	7afa      	ldrb	r2, [r7, #11]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d20b      	bcs.n	80104f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80104de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e2:	b672      	cpsid	i
 80104e4:	f383 8811 	msr	BASEPRI, r3
 80104e8:	f3bf 8f6f 	isb	sy
 80104ec:	f3bf 8f4f 	dsb	sy
 80104f0:	b662      	cpsie	i
 80104f2:	607b      	str	r3, [r7, #4]
 80104f4:	e7fe      	b.n	80104f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80104f6:	4b0f      	ldr	r3, [pc, #60]	; (8010534 <vPortValidateInterruptPriority+0x7c>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80104fe:	4b0e      	ldr	r3, [pc, #56]	; (8010538 <vPortValidateInterruptPriority+0x80>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	429a      	cmp	r2, r3
 8010504:	d90b      	bls.n	801051e <vPortValidateInterruptPriority+0x66>
 8010506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050a:	b672      	cpsid	i
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	b662      	cpsie	i
 801051a:	603b      	str	r3, [r7, #0]
 801051c:	e7fe      	b.n	801051c <vPortValidateInterruptPriority+0x64>
	}
 801051e:	bf00      	nop
 8010520:	3714      	adds	r7, #20
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr
 801052a:	bf00      	nop
 801052c:	e000e3f0 	.word	0xe000e3f0
 8010530:	200004dc 	.word	0x200004dc
 8010534:	e000ed0c 	.word	0xe000ed0c
 8010538:	200004e0 	.word	0x200004e0

0801053c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b08a      	sub	sp, #40	; 0x28
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010544:	2300      	movs	r3, #0
 8010546:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010548:	f7fe ffee 	bl	800f528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801054c:	4b5a      	ldr	r3, [pc, #360]	; (80106b8 <pvPortMalloc+0x17c>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d101      	bne.n	8010558 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010554:	f000 f916 	bl	8010784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010558:	4b58      	ldr	r3, [pc, #352]	; (80106bc <pvPortMalloc+0x180>)
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	4013      	ands	r3, r2
 8010560:	2b00      	cmp	r3, #0
 8010562:	f040 8090 	bne.w	8010686 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d01e      	beq.n	80105aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801056c:	2208      	movs	r2, #8
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4413      	add	r3, r2
 8010572:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f003 0307 	and.w	r3, r3, #7
 801057a:	2b00      	cmp	r3, #0
 801057c:	d015      	beq.n	80105aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f023 0307 	bic.w	r3, r3, #7
 8010584:	3308      	adds	r3, #8
 8010586:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f003 0307 	and.w	r3, r3, #7
 801058e:	2b00      	cmp	r3, #0
 8010590:	d00b      	beq.n	80105aa <pvPortMalloc+0x6e>
 8010592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010596:	b672      	cpsid	i
 8010598:	f383 8811 	msr	BASEPRI, r3
 801059c:	f3bf 8f6f 	isb	sy
 80105a0:	f3bf 8f4f 	dsb	sy
 80105a4:	b662      	cpsie	i
 80105a6:	617b      	str	r3, [r7, #20]
 80105a8:	e7fe      	b.n	80105a8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d06a      	beq.n	8010686 <pvPortMalloc+0x14a>
 80105b0:	4b43      	ldr	r3, [pc, #268]	; (80106c0 <pvPortMalloc+0x184>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d865      	bhi.n	8010686 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80105ba:	4b42      	ldr	r3, [pc, #264]	; (80106c4 <pvPortMalloc+0x188>)
 80105bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80105be:	4b41      	ldr	r3, [pc, #260]	; (80106c4 <pvPortMalloc+0x188>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105c4:	e004      	b.n	80105d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80105c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80105ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	685b      	ldr	r3, [r3, #4]
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d903      	bls.n	80105e2 <pvPortMalloc+0xa6>
 80105da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1f1      	bne.n	80105c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80105e2:	4b35      	ldr	r3, [pc, #212]	; (80106b8 <pvPortMalloc+0x17c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d04c      	beq.n	8010686 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80105ec:	6a3b      	ldr	r3, [r7, #32]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	2208      	movs	r2, #8
 80105f2:	4413      	add	r3, r2
 80105f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80105f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80105fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010600:	685a      	ldr	r2, [r3, #4]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	1ad2      	subs	r2, r2, r3
 8010606:	2308      	movs	r3, #8
 8010608:	005b      	lsls	r3, r3, #1
 801060a:	429a      	cmp	r2, r3
 801060c:	d920      	bls.n	8010650 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801060e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	4413      	add	r3, r2
 8010614:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	f003 0307 	and.w	r3, r3, #7
 801061c:	2b00      	cmp	r3, #0
 801061e:	d00b      	beq.n	8010638 <pvPortMalloc+0xfc>
 8010620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010624:	b672      	cpsid	i
 8010626:	f383 8811 	msr	BASEPRI, r3
 801062a:	f3bf 8f6f 	isb	sy
 801062e:	f3bf 8f4f 	dsb	sy
 8010632:	b662      	cpsie	i
 8010634:	613b      	str	r3, [r7, #16]
 8010636:	e7fe      	b.n	8010636 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	1ad2      	subs	r2, r2, r3
 8010640:	69bb      	ldr	r3, [r7, #24]
 8010642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010646:	687a      	ldr	r2, [r7, #4]
 8010648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801064a:	69b8      	ldr	r0, [r7, #24]
 801064c:	f000 f8fc 	bl	8010848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010650:	4b1b      	ldr	r3, [pc, #108]	; (80106c0 <pvPortMalloc+0x184>)
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	1ad3      	subs	r3, r2, r3
 801065a:	4a19      	ldr	r2, [pc, #100]	; (80106c0 <pvPortMalloc+0x184>)
 801065c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801065e:	4b18      	ldr	r3, [pc, #96]	; (80106c0 <pvPortMalloc+0x184>)
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	4b19      	ldr	r3, [pc, #100]	; (80106c8 <pvPortMalloc+0x18c>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	429a      	cmp	r2, r3
 8010668:	d203      	bcs.n	8010672 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801066a:	4b15      	ldr	r3, [pc, #84]	; (80106c0 <pvPortMalloc+0x184>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4a16      	ldr	r2, [pc, #88]	; (80106c8 <pvPortMalloc+0x18c>)
 8010670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010674:	685a      	ldr	r2, [r3, #4]
 8010676:	4b11      	ldr	r3, [pc, #68]	; (80106bc <pvPortMalloc+0x180>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	431a      	orrs	r2, r3
 801067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	2200      	movs	r2, #0
 8010684:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010686:	f7fe ff5d 	bl	800f544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801068a:	69fb      	ldr	r3, [r7, #28]
 801068c:	f003 0307 	and.w	r3, r3, #7
 8010690:	2b00      	cmp	r3, #0
 8010692:	d00b      	beq.n	80106ac <pvPortMalloc+0x170>
 8010694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010698:	b672      	cpsid	i
 801069a:	f383 8811 	msr	BASEPRI, r3
 801069e:	f3bf 8f6f 	isb	sy
 80106a2:	f3bf 8f4f 	dsb	sy
 80106a6:	b662      	cpsie	i
 80106a8:	60fb      	str	r3, [r7, #12]
 80106aa:	e7fe      	b.n	80106aa <pvPortMalloc+0x16e>
	return pvReturn;
 80106ac:	69fb      	ldr	r3, [r7, #28]
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3728      	adds	r7, #40	; 0x28
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	200040ec 	.word	0x200040ec
 80106bc:	200040f8 	.word	0x200040f8
 80106c0:	200040f0 	.word	0x200040f0
 80106c4:	200040e4 	.word	0x200040e4
 80106c8:	200040f4 	.word	0x200040f4

080106cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b086      	sub	sp, #24
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d04a      	beq.n	8010774 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80106de:	2308      	movs	r3, #8
 80106e0:	425b      	negs	r3, r3
 80106e2:	697a      	ldr	r2, [r7, #20]
 80106e4:	4413      	add	r3, r2
 80106e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	685a      	ldr	r2, [r3, #4]
 80106f0:	4b22      	ldr	r3, [pc, #136]	; (801077c <vPortFree+0xb0>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4013      	ands	r3, r2
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d10b      	bne.n	8010712 <vPortFree+0x46>
 80106fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fe:	b672      	cpsid	i
 8010700:	f383 8811 	msr	BASEPRI, r3
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	f3bf 8f4f 	dsb	sy
 801070c:	b662      	cpsie	i
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	e7fe      	b.n	8010710 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00b      	beq.n	8010732 <vPortFree+0x66>
 801071a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071e:	b672      	cpsid	i
 8010720:	f383 8811 	msr	BASEPRI, r3
 8010724:	f3bf 8f6f 	isb	sy
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	b662      	cpsie	i
 801072e:	60bb      	str	r3, [r7, #8]
 8010730:	e7fe      	b.n	8010730 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	685a      	ldr	r2, [r3, #4]
 8010736:	4b11      	ldr	r3, [pc, #68]	; (801077c <vPortFree+0xb0>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4013      	ands	r3, r2
 801073c:	2b00      	cmp	r3, #0
 801073e:	d019      	beq.n	8010774 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d115      	bne.n	8010774 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	685a      	ldr	r2, [r3, #4]
 801074c:	4b0b      	ldr	r3, [pc, #44]	; (801077c <vPortFree+0xb0>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	43db      	mvns	r3, r3
 8010752:	401a      	ands	r2, r3
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010758:	f7fe fee6 	bl	800f528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	685a      	ldr	r2, [r3, #4]
 8010760:	4b07      	ldr	r3, [pc, #28]	; (8010780 <vPortFree+0xb4>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4413      	add	r3, r2
 8010766:	4a06      	ldr	r2, [pc, #24]	; (8010780 <vPortFree+0xb4>)
 8010768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801076a:	6938      	ldr	r0, [r7, #16]
 801076c:	f000 f86c 	bl	8010848 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010770:	f7fe fee8 	bl	800f544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010774:	bf00      	nop
 8010776:	3718      	adds	r7, #24
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	200040f8 	.word	0x200040f8
 8010780:	200040f0 	.word	0x200040f0

08010784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801078a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801078e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010790:	4b27      	ldr	r3, [pc, #156]	; (8010830 <prvHeapInit+0xac>)
 8010792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f003 0307 	and.w	r3, r3, #7
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00c      	beq.n	80107b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	3307      	adds	r3, #7
 80107a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f023 0307 	bic.w	r3, r3, #7
 80107aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	4a1f      	ldr	r2, [pc, #124]	; (8010830 <prvHeapInit+0xac>)
 80107b4:	4413      	add	r3, r2
 80107b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80107bc:	4a1d      	ldr	r2, [pc, #116]	; (8010834 <prvHeapInit+0xb0>)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80107c2:	4b1c      	ldr	r3, [pc, #112]	; (8010834 <prvHeapInit+0xb0>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	4413      	add	r3, r2
 80107ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80107d0:	2208      	movs	r2, #8
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	1a9b      	subs	r3, r3, r2
 80107d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f023 0307 	bic.w	r3, r3, #7
 80107de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	4a15      	ldr	r2, [pc, #84]	; (8010838 <prvHeapInit+0xb4>)
 80107e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80107e6:	4b14      	ldr	r3, [pc, #80]	; (8010838 <prvHeapInit+0xb4>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2200      	movs	r2, #0
 80107ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107ee:	4b12      	ldr	r3, [pc, #72]	; (8010838 <prvHeapInit+0xb4>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2200      	movs	r2, #0
 80107f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	68fa      	ldr	r2, [r7, #12]
 80107fe:	1ad2      	subs	r2, r2, r3
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010804:	4b0c      	ldr	r3, [pc, #48]	; (8010838 <prvHeapInit+0xb4>)
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	4a0a      	ldr	r2, [pc, #40]	; (801083c <prvHeapInit+0xb8>)
 8010812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	4a09      	ldr	r2, [pc, #36]	; (8010840 <prvHeapInit+0xbc>)
 801081a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801081c:	4b09      	ldr	r3, [pc, #36]	; (8010844 <prvHeapInit+0xc0>)
 801081e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010822:	601a      	str	r2, [r3, #0]
}
 8010824:	bf00      	nop
 8010826:	3714      	adds	r7, #20
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr
 8010830:	200004e4 	.word	0x200004e4
 8010834:	200040e4 	.word	0x200040e4
 8010838:	200040ec 	.word	0x200040ec
 801083c:	200040f4 	.word	0x200040f4
 8010840:	200040f0 	.word	0x200040f0
 8010844:	200040f8 	.word	0x200040f8

08010848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010848:	b480      	push	{r7}
 801084a:	b085      	sub	sp, #20
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010850:	4b28      	ldr	r3, [pc, #160]	; (80108f4 <prvInsertBlockIntoFreeList+0xac>)
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	e002      	b.n	801085c <prvInsertBlockIntoFreeList+0x14>
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	60fb      	str	r3, [r7, #12]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	429a      	cmp	r2, r3
 8010864:	d8f7      	bhi.n	8010856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	68ba      	ldr	r2, [r7, #8]
 8010870:	4413      	add	r3, r2
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	429a      	cmp	r2, r3
 8010876:	d108      	bne.n	801088a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	685a      	ldr	r2, [r3, #4]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	441a      	add	r2, r3
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	68ba      	ldr	r2, [r7, #8]
 8010894:	441a      	add	r2, r3
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	429a      	cmp	r2, r3
 801089c:	d118      	bne.n	80108d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	4b15      	ldr	r3, [pc, #84]	; (80108f8 <prvInsertBlockIntoFreeList+0xb0>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d00d      	beq.n	80108c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	685a      	ldr	r2, [r3, #4]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	441a      	add	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	681a      	ldr	r2, [r3, #0]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	601a      	str	r2, [r3, #0]
 80108c4:	e008      	b.n	80108d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80108c6:	4b0c      	ldr	r3, [pc, #48]	; (80108f8 <prvInsertBlockIntoFreeList+0xb0>)
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	601a      	str	r2, [r3, #0]
 80108ce:	e003      	b.n	80108d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d002      	beq.n	80108e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108e6:	bf00      	nop
 80108e8:	3714      	adds	r7, #20
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	200040e4 	.word	0x200040e4
 80108f8:	200040ec 	.word	0x200040ec

080108fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010900:	2201      	movs	r2, #1
 8010902:	490e      	ldr	r1, [pc, #56]	; (801093c <MX_USB_HOST_Init+0x40>)
 8010904:	480e      	ldr	r0, [pc, #56]	; (8010940 <MX_USB_HOST_Init+0x44>)
 8010906:	f7f8 ff13 	bl	8009730 <USBH_Init>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d001      	beq.n	8010914 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010910:	f7f1 fe22 	bl	8002558 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010914:	490b      	ldr	r1, [pc, #44]	; (8010944 <MX_USB_HOST_Init+0x48>)
 8010916:	480a      	ldr	r0, [pc, #40]	; (8010940 <MX_USB_HOST_Init+0x44>)
 8010918:	f7f8 ffc0 	bl	800989c <USBH_RegisterClass>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d001      	beq.n	8010926 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010922:	f7f1 fe19 	bl	8002558 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010926:	4806      	ldr	r0, [pc, #24]	; (8010940 <MX_USB_HOST_Init+0x44>)
 8010928:	f7f9 f844 	bl	80099b4 <USBH_Start>
 801092c:	4603      	mov	r3, r0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d001      	beq.n	8010936 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010932:	f7f1 fe11 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010936:	bf00      	nop
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	08010949 	.word	0x08010949
 8010940:	200069a4 	.word	0x200069a4
 8010944:	20000050 	.word	0x20000050

08010948 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	460b      	mov	r3, r1
 8010952:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010954:	78fb      	ldrb	r3, [r7, #3]
 8010956:	3b01      	subs	r3, #1
 8010958:	2b04      	cmp	r3, #4
 801095a:	d81f      	bhi.n	801099c <USBH_UserProcess+0x54>
 801095c:	a201      	add	r2, pc, #4	; (adr r2, 8010964 <USBH_UserProcess+0x1c>)
 801095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010962:	bf00      	nop
 8010964:	0801099d 	.word	0x0801099d
 8010968:	08010985 	.word	0x08010985
 801096c:	0801099d 	.word	0x0801099d
 8010970:	08010995 	.word	0x08010995
 8010974:	08010979 	.word	0x08010979
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010978:	4b0b      	ldr	r3, [pc, #44]	; (80109a8 <USBH_UserProcess+0x60>)
 801097a:	2203      	movs	r2, #3
 801097c:	701a      	strb	r2, [r3, #0]
  unmount_usb();
 801097e:	f7f1 fb75 	bl	800206c <unmount_usb>
  break;
 8010982:	e00c      	b.n	801099e <USBH_UserProcess+0x56>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010984:	4b08      	ldr	r3, [pc, #32]	; (80109a8 <USBH_UserProcess+0x60>)
 8010986:	2202      	movs	r2, #2
 8010988:	701a      	strb	r2, [r3, #0]
  mount_usb();
 801098a:	f7f1 fb4f 	bl	800202c <mount_usb>
  check_usb_details();   // check space details
 801098e:	f7f1 fb8b 	bl	80020a8 <check_usb_details>
  break;
 8010992:	e004      	b.n	801099e <USBH_UserProcess+0x56>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010994:	4b04      	ldr	r3, [pc, #16]	; (80109a8 <USBH_UserProcess+0x60>)
 8010996:	2201      	movs	r2, #1
 8010998:	701a      	strb	r2, [r3, #0]

  break;
 801099a:	e000      	b.n	801099e <USBH_UserProcess+0x56>

  default:
  break;
 801099c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801099e:	bf00      	nop
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	200040fc 	.word	0x200040fc

080109ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b08a      	sub	sp, #40	; 0x28
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109b4:	f107 0314 	add.w	r3, r7, #20
 80109b8:	2200      	movs	r2, #0
 80109ba:	601a      	str	r2, [r3, #0]
 80109bc:	605a      	str	r2, [r3, #4]
 80109be:	609a      	str	r2, [r3, #8]
 80109c0:	60da      	str	r2, [r3, #12]
 80109c2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80109cc:	d149      	bne.n	8010a62 <HAL_HCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80109ce:	4b27      	ldr	r3, [pc, #156]	; (8010a6c <HAL_HCD_MspInit+0xc0>)
 80109d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109d2:	4a26      	ldr	r2, [pc, #152]	; (8010a6c <HAL_HCD_MspInit+0xc0>)
 80109d4:	f043 0301 	orr.w	r3, r3, #1
 80109d8:	6313      	str	r3, [r2, #48]	; 0x30
 80109da:	4b24      	ldr	r3, [pc, #144]	; (8010a6c <HAL_HCD_MspInit+0xc0>)
 80109dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109de:	f003 0301 	and.w	r3, r3, #1
 80109e2:	613b      	str	r3, [r7, #16]
 80109e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80109e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80109ec:	2300      	movs	r3, #0
 80109ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109f0:	2300      	movs	r3, #0
 80109f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109f4:	f107 0314 	add.w	r3, r7, #20
 80109f8:	4619      	mov	r1, r3
 80109fa:	481d      	ldr	r0, [pc, #116]	; (8010a70 <HAL_HCD_MspInit+0xc4>)
 80109fc:	f7f2 ff90 	bl	8003920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010a00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a06:	2302      	movs	r3, #2
 8010a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a0e:	2303      	movs	r3, #3
 8010a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010a12:	230a      	movs	r3, #10
 8010a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a16:	f107 0314 	add.w	r3, r7, #20
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	4814      	ldr	r0, [pc, #80]	; (8010a70 <HAL_HCD_MspInit+0xc4>)
 8010a1e:	f7f2 ff7f 	bl	8003920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010a22:	4b12      	ldr	r3, [pc, #72]	; (8010a6c <HAL_HCD_MspInit+0xc0>)
 8010a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a26:	4a11      	ldr	r2, [pc, #68]	; (8010a6c <HAL_HCD_MspInit+0xc0>)
 8010a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a2c:	6353      	str	r3, [r2, #52]	; 0x34
 8010a2e:	4b0f      	ldr	r3, [pc, #60]	; (8010a6c <HAL_HCD_MspInit+0xc0>)
 8010a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a36:	60fb      	str	r3, [r7, #12]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	4b0c      	ldr	r3, [pc, #48]	; (8010a6c <HAL_HCD_MspInit+0xc0>)
 8010a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a3e:	4a0b      	ldr	r2, [pc, #44]	; (8010a6c <HAL_HCD_MspInit+0xc0>)
 8010a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010a44:	6453      	str	r3, [r2, #68]	; 0x44
 8010a46:	4b09      	ldr	r3, [pc, #36]	; (8010a6c <HAL_HCD_MspInit+0xc0>)
 8010a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a4e:	60bb      	str	r3, [r7, #8]
 8010a50:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010a52:	2200      	movs	r2, #0
 8010a54:	2105      	movs	r1, #5
 8010a56:	2043      	movs	r0, #67	; 0x43
 8010a58:	f7f2 ff38 	bl	80038cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010a5c:	2043      	movs	r0, #67	; 0x43
 8010a5e:	f7f2 ff51 	bl	8003904 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010a62:	bf00      	nop
 8010a64:	3728      	adds	r7, #40	; 0x28
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	40023800 	.word	0x40023800
 8010a70:	40020000 	.word	0x40020000

08010a74 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7f9 fc43 	bl	800a30e <USBH_LL_IncTimer>
}
 8010a88:	bf00      	nop
 8010a8a:	3708      	adds	r7, #8
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7f9 fc87 	bl	800a3b2 <USBH_LL_Connect>
}
 8010aa4:	bf00      	nop
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7f9 fc9c 	bl	800a3f8 <USBH_LL_Disconnect>
}
 8010ac0:	bf00      	nop
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	70fb      	strb	r3, [r7, #3]
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7f9 fcd1 	bl	800a486 <USBH_LL_NotifyURBChange>
#endif
}
 8010ae4:	bf00      	nop
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7f9 fc31 	bl	800a362 <USBH_LL_PortEnabled>
}
 8010b00:	bf00      	nop
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7f9 fc3d 	bl	800a396 <USBH_LL_PortDisabled>
}
 8010b1c:	bf00      	nop
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d12a      	bne.n	8010b8c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010b36:	4a18      	ldr	r2, [pc, #96]	; (8010b98 <USBH_LL_Init+0x74>)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	4a15      	ldr	r2, [pc, #84]	; (8010b98 <USBH_LL_Init+0x74>)
 8010b42:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010b46:	4b14      	ldr	r3, [pc, #80]	; (8010b98 <USBH_LL_Init+0x74>)
 8010b48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010b4c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010b4e:	4b12      	ldr	r3, [pc, #72]	; (8010b98 <USBH_LL_Init+0x74>)
 8010b50:	2208      	movs	r2, #8
 8010b52:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010b54:	4b10      	ldr	r3, [pc, #64]	; (8010b98 <USBH_LL_Init+0x74>)
 8010b56:	2201      	movs	r2, #1
 8010b58:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010b5a:	4b0f      	ldr	r3, [pc, #60]	; (8010b98 <USBH_LL_Init+0x74>)
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010b60:	4b0d      	ldr	r3, [pc, #52]	; (8010b98 <USBH_LL_Init+0x74>)
 8010b62:	2202      	movs	r2, #2
 8010b64:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010b66:	4b0c      	ldr	r3, [pc, #48]	; (8010b98 <USBH_LL_Init+0x74>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010b6c:	480a      	ldr	r0, [pc, #40]	; (8010b98 <USBH_LL_Init+0x74>)
 8010b6e:	f7f3 f89a 	bl	8003ca6 <HAL_HCD_Init>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d001      	beq.n	8010b7c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010b78:	f7f1 fcee 	bl	8002558 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010b7c:	4806      	ldr	r0, [pc, #24]	; (8010b98 <USBH_LL_Init+0x74>)
 8010b7e:	f7f3 fc9d 	bl	80044bc <HAL_HCD_GetCurrentFrame>
 8010b82:	4603      	mov	r3, r0
 8010b84:	4619      	mov	r1, r3
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f7f9 fbb2 	bl	800a2f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010b8c:	2300      	movs	r3, #0
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3708      	adds	r7, #8
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	20006d88 	.word	0x20006d88

08010b9c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7f3 fc0a 	bl	80043cc <HAL_HCD_Start>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010bbc:	7bfb      	ldrb	r3, [r7, #15]
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f000 f986 	bl	8010ed0 <USBH_Get_USB_Status>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}

08010bd2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010bd2:	b580      	push	{r7, lr}
 8010bd4:	b084      	sub	sp, #16
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010bde:	2300      	movs	r3, #0
 8010be0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7f3 fc12 	bl	8004412 <HAL_HCD_Stop>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010bf2:	7bfb      	ldrb	r3, [r7, #15]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f000 f96b 	bl	8010ed0 <USBH_Get_USB_Status>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3710      	adds	r7, #16
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010c10:	2301      	movs	r3, #1
 8010c12:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7f3 fc5c 	bl	80044d8 <HAL_HCD_GetCurrentSpeed>
 8010c20:	4603      	mov	r3, r0
 8010c22:	2b01      	cmp	r3, #1
 8010c24:	d007      	beq.n	8010c36 <USBH_LL_GetSpeed+0x2e>
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d302      	bcc.n	8010c30 <USBH_LL_GetSpeed+0x28>
 8010c2a:	2b02      	cmp	r3, #2
 8010c2c:	d006      	beq.n	8010c3c <USBH_LL_GetSpeed+0x34>
 8010c2e:	e008      	b.n	8010c42 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010c30:	2300      	movs	r3, #0
 8010c32:	73fb      	strb	r3, [r7, #15]
    break;
 8010c34:	e008      	b.n	8010c48 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010c36:	2301      	movs	r3, #1
 8010c38:	73fb      	strb	r3, [r7, #15]
    break;
 8010c3a:	e005      	b.n	8010c48 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010c3c:	2302      	movs	r3, #2
 8010c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8010c40:	e002      	b.n	8010c48 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8010c42:	2301      	movs	r3, #1
 8010c44:	73fb      	strb	r3, [r7, #15]
    break;
 8010c46:	bf00      	nop
  }
  return  speed;
 8010c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3710      	adds	r7, #16
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}

08010c52 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b084      	sub	sp, #16
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7f3 fbef 	bl	800444c <HAL_HCD_ResetPort>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c72:	7bfb      	ldrb	r3, [r7, #15]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f000 f92b 	bl	8010ed0 <USBH_Get_USB_Status>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3710      	adds	r7, #16
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	460b      	mov	r3, r1
 8010c92:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c9a:	78fa      	ldrb	r2, [r7, #3]
 8010c9c:	4611      	mov	r1, r2
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7f3 fbf7 	bl	8004492 <HAL_HCD_HC_GetXferCount>
 8010ca4:	4603      	mov	r3, r0
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3708      	adds	r7, #8
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}

08010cae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010cae:	b590      	push	{r4, r7, lr}
 8010cb0:	b089      	sub	sp, #36	; 0x24
 8010cb2:	af04      	add	r7, sp, #16
 8010cb4:	6078      	str	r0, [r7, #4]
 8010cb6:	4608      	mov	r0, r1
 8010cb8:	4611      	mov	r1, r2
 8010cba:	461a      	mov	r2, r3
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	70fb      	strb	r3, [r7, #3]
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	70bb      	strb	r3, [r7, #2]
 8010cc4:	4613      	mov	r3, r2
 8010cc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010cd6:	787c      	ldrb	r4, [r7, #1]
 8010cd8:	78ba      	ldrb	r2, [r7, #2]
 8010cda:	78f9      	ldrb	r1, [r7, #3]
 8010cdc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010cde:	9302      	str	r3, [sp, #8]
 8010ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010cea:	9300      	str	r3, [sp, #0]
 8010cec:	4623      	mov	r3, r4
 8010cee:	f7f3 f83c 	bl	8003d6a <HAL_HCD_HC_Init>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010cf6:	7bfb      	ldrb	r3, [r7, #15]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f000 f8e9 	bl	8010ed0 <USBH_Get_USB_Status>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d02:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3714      	adds	r7, #20
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd90      	pop	{r4, r7, pc}

08010d0c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	460b      	mov	r3, r1
 8010d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d26:	78fa      	ldrb	r2, [r7, #3]
 8010d28:	4611      	mov	r1, r2
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7f3 f8b5 	bl	8003e9a <HAL_HCD_HC_Halt>
 8010d30:	4603      	mov	r3, r0
 8010d32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d34:	7bfb      	ldrb	r3, [r7, #15]
 8010d36:	4618      	mov	r0, r3
 8010d38:	f000 f8ca 	bl	8010ed0 <USBH_Get_USB_Status>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3710      	adds	r7, #16
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}

08010d4a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010d4a:	b590      	push	{r4, r7, lr}
 8010d4c:	b089      	sub	sp, #36	; 0x24
 8010d4e:	af04      	add	r7, sp, #16
 8010d50:	6078      	str	r0, [r7, #4]
 8010d52:	4608      	mov	r0, r1
 8010d54:	4611      	mov	r1, r2
 8010d56:	461a      	mov	r2, r3
 8010d58:	4603      	mov	r3, r0
 8010d5a:	70fb      	strb	r3, [r7, #3]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	70bb      	strb	r3, [r7, #2]
 8010d60:	4613      	mov	r3, r2
 8010d62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d64:	2300      	movs	r3, #0
 8010d66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010d72:	787c      	ldrb	r4, [r7, #1]
 8010d74:	78ba      	ldrb	r2, [r7, #2]
 8010d76:	78f9      	ldrb	r1, [r7, #3]
 8010d78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010d7c:	9303      	str	r3, [sp, #12]
 8010d7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010d80:	9302      	str	r3, [sp, #8]
 8010d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d84:	9301      	str	r3, [sp, #4]
 8010d86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d8a:	9300      	str	r3, [sp, #0]
 8010d8c:	4623      	mov	r3, r4
 8010d8e:	f7f3 f8a7 	bl	8003ee0 <HAL_HCD_HC_SubmitRequest>
 8010d92:	4603      	mov	r3, r0
 8010d94:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010d96:	7bfb      	ldrb	r3, [r7, #15]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f000 f899 	bl	8010ed0 <USBH_Get_USB_Status>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3714      	adds	r7, #20
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd90      	pop	{r4, r7, pc}

08010dac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	460b      	mov	r3, r1
 8010db6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010dbe:	78fa      	ldrb	r2, [r7, #3]
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7f3 fb50 	bl	8004468 <HAL_HCD_HC_GetURBState>
 8010dc8:	4603      	mov	r3, r0
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3708      	adds	r7, #8
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b082      	sub	sp, #8
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	460b      	mov	r3, r1
 8010ddc:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8010dde:	20c8      	movs	r0, #200	; 0xc8
 8010de0:	f7f1 fe1a 	bl	8002a18 <HAL_Delay>
  return USBH_OK;
 8010de4:	2300      	movs	r3, #0
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3708      	adds	r7, #8
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010dee:	b480      	push	{r7}
 8010df0:	b085      	sub	sp, #20
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	6078      	str	r0, [r7, #4]
 8010df6:	460b      	mov	r3, r1
 8010df8:	70fb      	strb	r3, [r7, #3]
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010e04:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010e06:	78fa      	ldrb	r2, [r7, #3]
 8010e08:	68f9      	ldr	r1, [r7, #12]
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	4413      	add	r3, r2
 8010e10:	00db      	lsls	r3, r3, #3
 8010e12:	440b      	add	r3, r1
 8010e14:	333b      	adds	r3, #59	; 0x3b
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00a      	beq.n	8010e32 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010e1c:	78fa      	ldrb	r2, [r7, #3]
 8010e1e:	68f9      	ldr	r1, [r7, #12]
 8010e20:	4613      	mov	r3, r2
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	4413      	add	r3, r2
 8010e26:	00db      	lsls	r3, r3, #3
 8010e28:	440b      	add	r3, r1
 8010e2a:	3350      	adds	r3, #80	; 0x50
 8010e2c:	78ba      	ldrb	r2, [r7, #2]
 8010e2e:	701a      	strb	r2, [r3, #0]
 8010e30:	e009      	b.n	8010e46 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010e32:	78fa      	ldrb	r2, [r7, #3]
 8010e34:	68f9      	ldr	r1, [r7, #12]
 8010e36:	4613      	mov	r3, r2
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	4413      	add	r3, r2
 8010e3c:	00db      	lsls	r3, r3, #3
 8010e3e:	440b      	add	r3, r1
 8010e40:	3351      	adds	r3, #81	; 0x51
 8010e42:	78ba      	ldrb	r2, [r7, #2]
 8010e44:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010e46:	2300      	movs	r3, #0
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3714      	adds	r7, #20
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b085      	sub	sp, #20
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	460b      	mov	r3, r1
 8010e5e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010e60:	2300      	movs	r3, #0
 8010e62:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010e6a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010e6c:	78fa      	ldrb	r2, [r7, #3]
 8010e6e:	68b9      	ldr	r1, [r7, #8]
 8010e70:	4613      	mov	r3, r2
 8010e72:	009b      	lsls	r3, r3, #2
 8010e74:	4413      	add	r3, r2
 8010e76:	00db      	lsls	r3, r3, #3
 8010e78:	440b      	add	r3, r1
 8010e7a:	333b      	adds	r3, #59	; 0x3b
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d00a      	beq.n	8010e98 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010e82:	78fa      	ldrb	r2, [r7, #3]
 8010e84:	68b9      	ldr	r1, [r7, #8]
 8010e86:	4613      	mov	r3, r2
 8010e88:	009b      	lsls	r3, r3, #2
 8010e8a:	4413      	add	r3, r2
 8010e8c:	00db      	lsls	r3, r3, #3
 8010e8e:	440b      	add	r3, r1
 8010e90:	3350      	adds	r3, #80	; 0x50
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	73fb      	strb	r3, [r7, #15]
 8010e96:	e009      	b.n	8010eac <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010e98:	78fa      	ldrb	r2, [r7, #3]
 8010e9a:	68b9      	ldr	r1, [r7, #8]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	009b      	lsls	r3, r3, #2
 8010ea0:	4413      	add	r3, r2
 8010ea2:	00db      	lsls	r3, r3, #3
 8010ea4:	440b      	add	r3, r1
 8010ea6:	3351      	adds	r3, #81	; 0x51
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3714      	adds	r7, #20
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr

08010eba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b082      	sub	sp, #8
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f7f1 fda8 	bl	8002a18 <HAL_Delay>
}
 8010ec8:	bf00      	nop
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b085      	sub	sp, #20
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010eda:	2300      	movs	r3, #0
 8010edc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010ede:	79fb      	ldrb	r3, [r7, #7]
 8010ee0:	2b03      	cmp	r3, #3
 8010ee2:	d817      	bhi.n	8010f14 <USBH_Get_USB_Status+0x44>
 8010ee4:	a201      	add	r2, pc, #4	; (adr r2, 8010eec <USBH_Get_USB_Status+0x1c>)
 8010ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eea:	bf00      	nop
 8010eec:	08010efd 	.word	0x08010efd
 8010ef0:	08010f03 	.word	0x08010f03
 8010ef4:	08010f09 	.word	0x08010f09
 8010ef8:	08010f0f 	.word	0x08010f0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010efc:	2300      	movs	r3, #0
 8010efe:	73fb      	strb	r3, [r7, #15]
    break;
 8010f00:	e00b      	b.n	8010f1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010f02:	2302      	movs	r3, #2
 8010f04:	73fb      	strb	r3, [r7, #15]
    break;
 8010f06:	e008      	b.n	8010f1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010f08:	2301      	movs	r3, #1
 8010f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8010f0c:	e005      	b.n	8010f1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010f0e:	2302      	movs	r3, #2
 8010f10:	73fb      	strb	r3, [r7, #15]
    break;
 8010f12:	e002      	b.n	8010f1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010f14:	2302      	movs	r3, #2
 8010f16:	73fb      	strb	r3, [r7, #15]
    break;
 8010f18:	bf00      	nop
  }
  return usb_status;
 8010f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3714      	adds	r7, #20
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr

08010f28 <__errno>:
 8010f28:	4b01      	ldr	r3, [pc, #4]	; (8010f30 <__errno+0x8>)
 8010f2a:	6818      	ldr	r0, [r3, #0]
 8010f2c:	4770      	bx	lr
 8010f2e:	bf00      	nop
 8010f30:	20000074 	.word	0x20000074

08010f34 <__libc_init_array>:
 8010f34:	b570      	push	{r4, r5, r6, lr}
 8010f36:	4e0d      	ldr	r6, [pc, #52]	; (8010f6c <__libc_init_array+0x38>)
 8010f38:	4c0d      	ldr	r4, [pc, #52]	; (8010f70 <__libc_init_array+0x3c>)
 8010f3a:	1ba4      	subs	r4, r4, r6
 8010f3c:	10a4      	asrs	r4, r4, #2
 8010f3e:	2500      	movs	r5, #0
 8010f40:	42a5      	cmp	r5, r4
 8010f42:	d109      	bne.n	8010f58 <__libc_init_array+0x24>
 8010f44:	4e0b      	ldr	r6, [pc, #44]	; (8010f74 <__libc_init_array+0x40>)
 8010f46:	4c0c      	ldr	r4, [pc, #48]	; (8010f78 <__libc_init_array+0x44>)
 8010f48:	f000 f8f6 	bl	8011138 <_init>
 8010f4c:	1ba4      	subs	r4, r4, r6
 8010f4e:	10a4      	asrs	r4, r4, #2
 8010f50:	2500      	movs	r5, #0
 8010f52:	42a5      	cmp	r5, r4
 8010f54:	d105      	bne.n	8010f62 <__libc_init_array+0x2e>
 8010f56:	bd70      	pop	{r4, r5, r6, pc}
 8010f58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010f5c:	4798      	blx	r3
 8010f5e:	3501      	adds	r5, #1
 8010f60:	e7ee      	b.n	8010f40 <__libc_init_array+0xc>
 8010f62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010f66:	4798      	blx	r3
 8010f68:	3501      	adds	r5, #1
 8010f6a:	e7f2      	b.n	8010f52 <__libc_init_array+0x1e>
 8010f6c:	080112fc 	.word	0x080112fc
 8010f70:	080112fc 	.word	0x080112fc
 8010f74:	080112fc 	.word	0x080112fc
 8010f78:	08011300 	.word	0x08011300

08010f7c <malloc>:
 8010f7c:	4b02      	ldr	r3, [pc, #8]	; (8010f88 <malloc+0xc>)
 8010f7e:	4601      	mov	r1, r0
 8010f80:	6818      	ldr	r0, [r3, #0]
 8010f82:	f000 b86d 	b.w	8011060 <_malloc_r>
 8010f86:	bf00      	nop
 8010f88:	20000074 	.word	0x20000074

08010f8c <free>:
 8010f8c:	4b02      	ldr	r3, [pc, #8]	; (8010f98 <free+0xc>)
 8010f8e:	4601      	mov	r1, r0
 8010f90:	6818      	ldr	r0, [r3, #0]
 8010f92:	f000 b817 	b.w	8010fc4 <_free_r>
 8010f96:	bf00      	nop
 8010f98:	20000074 	.word	0x20000074

08010f9c <memcpy>:
 8010f9c:	b510      	push	{r4, lr}
 8010f9e:	1e43      	subs	r3, r0, #1
 8010fa0:	440a      	add	r2, r1
 8010fa2:	4291      	cmp	r1, r2
 8010fa4:	d100      	bne.n	8010fa8 <memcpy+0xc>
 8010fa6:	bd10      	pop	{r4, pc}
 8010fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fb0:	e7f7      	b.n	8010fa2 <memcpy+0x6>

08010fb2 <memset>:
 8010fb2:	4402      	add	r2, r0
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d100      	bne.n	8010fbc <memset+0xa>
 8010fba:	4770      	bx	lr
 8010fbc:	f803 1b01 	strb.w	r1, [r3], #1
 8010fc0:	e7f9      	b.n	8010fb6 <memset+0x4>
	...

08010fc4 <_free_r>:
 8010fc4:	b538      	push	{r3, r4, r5, lr}
 8010fc6:	4605      	mov	r5, r0
 8010fc8:	2900      	cmp	r1, #0
 8010fca:	d045      	beq.n	8011058 <_free_r+0x94>
 8010fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fd0:	1f0c      	subs	r4, r1, #4
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	bfb8      	it	lt
 8010fd6:	18e4      	addlt	r4, r4, r3
 8010fd8:	f000 f8ac 	bl	8011134 <__malloc_lock>
 8010fdc:	4a1f      	ldr	r2, [pc, #124]	; (801105c <_free_r+0x98>)
 8010fde:	6813      	ldr	r3, [r2, #0]
 8010fe0:	4610      	mov	r0, r2
 8010fe2:	b933      	cbnz	r3, 8010ff2 <_free_r+0x2e>
 8010fe4:	6063      	str	r3, [r4, #4]
 8010fe6:	6014      	str	r4, [r2, #0]
 8010fe8:	4628      	mov	r0, r5
 8010fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fee:	f000 b8a2 	b.w	8011136 <__malloc_unlock>
 8010ff2:	42a3      	cmp	r3, r4
 8010ff4:	d90c      	bls.n	8011010 <_free_r+0x4c>
 8010ff6:	6821      	ldr	r1, [r4, #0]
 8010ff8:	1862      	adds	r2, r4, r1
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	bf04      	itt	eq
 8010ffe:	681a      	ldreq	r2, [r3, #0]
 8011000:	685b      	ldreq	r3, [r3, #4]
 8011002:	6063      	str	r3, [r4, #4]
 8011004:	bf04      	itt	eq
 8011006:	1852      	addeq	r2, r2, r1
 8011008:	6022      	streq	r2, [r4, #0]
 801100a:	6004      	str	r4, [r0, #0]
 801100c:	e7ec      	b.n	8010fe8 <_free_r+0x24>
 801100e:	4613      	mov	r3, r2
 8011010:	685a      	ldr	r2, [r3, #4]
 8011012:	b10a      	cbz	r2, 8011018 <_free_r+0x54>
 8011014:	42a2      	cmp	r2, r4
 8011016:	d9fa      	bls.n	801100e <_free_r+0x4a>
 8011018:	6819      	ldr	r1, [r3, #0]
 801101a:	1858      	adds	r0, r3, r1
 801101c:	42a0      	cmp	r0, r4
 801101e:	d10b      	bne.n	8011038 <_free_r+0x74>
 8011020:	6820      	ldr	r0, [r4, #0]
 8011022:	4401      	add	r1, r0
 8011024:	1858      	adds	r0, r3, r1
 8011026:	4282      	cmp	r2, r0
 8011028:	6019      	str	r1, [r3, #0]
 801102a:	d1dd      	bne.n	8010fe8 <_free_r+0x24>
 801102c:	6810      	ldr	r0, [r2, #0]
 801102e:	6852      	ldr	r2, [r2, #4]
 8011030:	605a      	str	r2, [r3, #4]
 8011032:	4401      	add	r1, r0
 8011034:	6019      	str	r1, [r3, #0]
 8011036:	e7d7      	b.n	8010fe8 <_free_r+0x24>
 8011038:	d902      	bls.n	8011040 <_free_r+0x7c>
 801103a:	230c      	movs	r3, #12
 801103c:	602b      	str	r3, [r5, #0]
 801103e:	e7d3      	b.n	8010fe8 <_free_r+0x24>
 8011040:	6820      	ldr	r0, [r4, #0]
 8011042:	1821      	adds	r1, r4, r0
 8011044:	428a      	cmp	r2, r1
 8011046:	bf04      	itt	eq
 8011048:	6811      	ldreq	r1, [r2, #0]
 801104a:	6852      	ldreq	r2, [r2, #4]
 801104c:	6062      	str	r2, [r4, #4]
 801104e:	bf04      	itt	eq
 8011050:	1809      	addeq	r1, r1, r0
 8011052:	6021      	streq	r1, [r4, #0]
 8011054:	605c      	str	r4, [r3, #4]
 8011056:	e7c7      	b.n	8010fe8 <_free_r+0x24>
 8011058:	bd38      	pop	{r3, r4, r5, pc}
 801105a:	bf00      	nop
 801105c:	20004100 	.word	0x20004100

08011060 <_malloc_r>:
 8011060:	b570      	push	{r4, r5, r6, lr}
 8011062:	1ccd      	adds	r5, r1, #3
 8011064:	f025 0503 	bic.w	r5, r5, #3
 8011068:	3508      	adds	r5, #8
 801106a:	2d0c      	cmp	r5, #12
 801106c:	bf38      	it	cc
 801106e:	250c      	movcc	r5, #12
 8011070:	2d00      	cmp	r5, #0
 8011072:	4606      	mov	r6, r0
 8011074:	db01      	blt.n	801107a <_malloc_r+0x1a>
 8011076:	42a9      	cmp	r1, r5
 8011078:	d903      	bls.n	8011082 <_malloc_r+0x22>
 801107a:	230c      	movs	r3, #12
 801107c:	6033      	str	r3, [r6, #0]
 801107e:	2000      	movs	r0, #0
 8011080:	bd70      	pop	{r4, r5, r6, pc}
 8011082:	f000 f857 	bl	8011134 <__malloc_lock>
 8011086:	4a21      	ldr	r2, [pc, #132]	; (801110c <_malloc_r+0xac>)
 8011088:	6814      	ldr	r4, [r2, #0]
 801108a:	4621      	mov	r1, r4
 801108c:	b991      	cbnz	r1, 80110b4 <_malloc_r+0x54>
 801108e:	4c20      	ldr	r4, [pc, #128]	; (8011110 <_malloc_r+0xb0>)
 8011090:	6823      	ldr	r3, [r4, #0]
 8011092:	b91b      	cbnz	r3, 801109c <_malloc_r+0x3c>
 8011094:	4630      	mov	r0, r6
 8011096:	f000 f83d 	bl	8011114 <_sbrk_r>
 801109a:	6020      	str	r0, [r4, #0]
 801109c:	4629      	mov	r1, r5
 801109e:	4630      	mov	r0, r6
 80110a0:	f000 f838 	bl	8011114 <_sbrk_r>
 80110a4:	1c43      	adds	r3, r0, #1
 80110a6:	d124      	bne.n	80110f2 <_malloc_r+0x92>
 80110a8:	230c      	movs	r3, #12
 80110aa:	6033      	str	r3, [r6, #0]
 80110ac:	4630      	mov	r0, r6
 80110ae:	f000 f842 	bl	8011136 <__malloc_unlock>
 80110b2:	e7e4      	b.n	801107e <_malloc_r+0x1e>
 80110b4:	680b      	ldr	r3, [r1, #0]
 80110b6:	1b5b      	subs	r3, r3, r5
 80110b8:	d418      	bmi.n	80110ec <_malloc_r+0x8c>
 80110ba:	2b0b      	cmp	r3, #11
 80110bc:	d90f      	bls.n	80110de <_malloc_r+0x7e>
 80110be:	600b      	str	r3, [r1, #0]
 80110c0:	50cd      	str	r5, [r1, r3]
 80110c2:	18cc      	adds	r4, r1, r3
 80110c4:	4630      	mov	r0, r6
 80110c6:	f000 f836 	bl	8011136 <__malloc_unlock>
 80110ca:	f104 000b 	add.w	r0, r4, #11
 80110ce:	1d23      	adds	r3, r4, #4
 80110d0:	f020 0007 	bic.w	r0, r0, #7
 80110d4:	1ac3      	subs	r3, r0, r3
 80110d6:	d0d3      	beq.n	8011080 <_malloc_r+0x20>
 80110d8:	425a      	negs	r2, r3
 80110da:	50e2      	str	r2, [r4, r3]
 80110dc:	e7d0      	b.n	8011080 <_malloc_r+0x20>
 80110de:	428c      	cmp	r4, r1
 80110e0:	684b      	ldr	r3, [r1, #4]
 80110e2:	bf16      	itet	ne
 80110e4:	6063      	strne	r3, [r4, #4]
 80110e6:	6013      	streq	r3, [r2, #0]
 80110e8:	460c      	movne	r4, r1
 80110ea:	e7eb      	b.n	80110c4 <_malloc_r+0x64>
 80110ec:	460c      	mov	r4, r1
 80110ee:	6849      	ldr	r1, [r1, #4]
 80110f0:	e7cc      	b.n	801108c <_malloc_r+0x2c>
 80110f2:	1cc4      	adds	r4, r0, #3
 80110f4:	f024 0403 	bic.w	r4, r4, #3
 80110f8:	42a0      	cmp	r0, r4
 80110fa:	d005      	beq.n	8011108 <_malloc_r+0xa8>
 80110fc:	1a21      	subs	r1, r4, r0
 80110fe:	4630      	mov	r0, r6
 8011100:	f000 f808 	bl	8011114 <_sbrk_r>
 8011104:	3001      	adds	r0, #1
 8011106:	d0cf      	beq.n	80110a8 <_malloc_r+0x48>
 8011108:	6025      	str	r5, [r4, #0]
 801110a:	e7db      	b.n	80110c4 <_malloc_r+0x64>
 801110c:	20004100 	.word	0x20004100
 8011110:	20004104 	.word	0x20004104

08011114 <_sbrk_r>:
 8011114:	b538      	push	{r3, r4, r5, lr}
 8011116:	4c06      	ldr	r4, [pc, #24]	; (8011130 <_sbrk_r+0x1c>)
 8011118:	2300      	movs	r3, #0
 801111a:	4605      	mov	r5, r0
 801111c:	4608      	mov	r0, r1
 801111e:	6023      	str	r3, [r4, #0]
 8011120:	f7f1 fbb0 	bl	8002884 <_sbrk>
 8011124:	1c43      	adds	r3, r0, #1
 8011126:	d102      	bne.n	801112e <_sbrk_r+0x1a>
 8011128:	6823      	ldr	r3, [r4, #0]
 801112a:	b103      	cbz	r3, 801112e <_sbrk_r+0x1a>
 801112c:	602b      	str	r3, [r5, #0]
 801112e:	bd38      	pop	{r3, r4, r5, pc}
 8011130:	2000704c 	.word	0x2000704c

08011134 <__malloc_lock>:
 8011134:	4770      	bx	lr

08011136 <__malloc_unlock>:
 8011136:	4770      	bx	lr

08011138 <_init>:
 8011138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801113a:	bf00      	nop
 801113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801113e:	bc08      	pop	{r3}
 8011140:	469e      	mov	lr, r3
 8011142:	4770      	bx	lr

08011144 <_fini>:
 8011144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011146:	bf00      	nop
 8011148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801114a:	bc08      	pop	{r3}
 801114c:	469e      	mov	lr, r3
 801114e:	4770      	bx	lr
