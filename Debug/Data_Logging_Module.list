
Data_Logging_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e84  08005e84  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e8c  08005e8c  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08005e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047c8  200000b8  08005f4c  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004880  08005f4c  00024880  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017888  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036af  00000000  00000000  0003796e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  0003b020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001070  00000000  00000000  0003c218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029fa3  00000000  00000000  0003d288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f2c7  00000000  00000000  0006722b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001000e7  00000000  00000000  000764f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f1  00000000  00000000  001765d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf0  00000000  00000000  001766cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b8 	.word	0x200000b8
 800021c:	00000000 	.word	0x00000000
 8000220:	08005df4 	.word	0x08005df4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000bc 	.word	0x200000bc
 800023c:	08005df4 	.word	0x08005df4

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037e:	f1a4 0401 	sub.w	r4, r4, #1
 8000382:	d1e9      	bne.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_uldivmod>:
 80005b8:	b953      	cbnz	r3, 80005d0 <__aeabi_uldivmod+0x18>
 80005ba:	b94a      	cbnz	r2, 80005d0 <__aeabi_uldivmod+0x18>
 80005bc:	2900      	cmp	r1, #0
 80005be:	bf08      	it	eq
 80005c0:	2800      	cmpeq	r0, #0
 80005c2:	bf1c      	itt	ne
 80005c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005cc:	f000 b974 	b.w	80008b8 <__aeabi_idiv0>
 80005d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80005d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d8:	f000 f806 	bl	80005e8 <__udivmoddi4>
 80005dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005e4:	b004      	add	sp, #16
 80005e6:	4770      	bx	lr

080005e8 <__udivmoddi4>:
 80005e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005ec:	9e08      	ldr	r6, [sp, #32]
 80005ee:	4604      	mov	r4, r0
 80005f0:	4688      	mov	r8, r1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	f040 8085 	bne.w	8000702 <__udivmoddi4+0x11a>
 80005f8:	428a      	cmp	r2, r1
 80005fa:	4615      	mov	r5, r2
 80005fc:	d948      	bls.n	8000690 <__udivmoddi4+0xa8>
 80005fe:	fab2 f282 	clz	r2, r2
 8000602:	b14a      	cbz	r2, 8000618 <__udivmoddi4+0x30>
 8000604:	f1c2 0720 	rsb	r7, r2, #32
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	fa20 f707 	lsr.w	r7, r0, r7
 8000610:	4095      	lsls	r5, r2
 8000612:	ea47 0803 	orr.w	r8, r7, r3
 8000616:	4094      	lsls	r4, r2
 8000618:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	fbb8 f7fe 	udiv	r7, r8, lr
 8000622:	fa1f fc85 	uxth.w	ip, r5
 8000626:	fb0e 8817 	mls	r8, lr, r7, r8
 800062a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800062e:	fb07 f10c 	mul.w	r1, r7, ip
 8000632:	4299      	cmp	r1, r3
 8000634:	d909      	bls.n	800064a <__udivmoddi4+0x62>
 8000636:	18eb      	adds	r3, r5, r3
 8000638:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800063c:	f080 80e3 	bcs.w	8000806 <__udivmoddi4+0x21e>
 8000640:	4299      	cmp	r1, r3
 8000642:	f240 80e0 	bls.w	8000806 <__udivmoddi4+0x21e>
 8000646:	3f02      	subs	r7, #2
 8000648:	442b      	add	r3, r5
 800064a:	1a5b      	subs	r3, r3, r1
 800064c:	b2a4      	uxth	r4, r4
 800064e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000652:	fb0e 3310 	mls	r3, lr, r0, r3
 8000656:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065a:	fb00 fc0c 	mul.w	ip, r0, ip
 800065e:	45a4      	cmp	ip, r4
 8000660:	d909      	bls.n	8000676 <__udivmoddi4+0x8e>
 8000662:	192c      	adds	r4, r5, r4
 8000664:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000668:	f080 80cb 	bcs.w	8000802 <__udivmoddi4+0x21a>
 800066c:	45a4      	cmp	ip, r4
 800066e:	f240 80c8 	bls.w	8000802 <__udivmoddi4+0x21a>
 8000672:	3802      	subs	r0, #2
 8000674:	442c      	add	r4, r5
 8000676:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800067a:	eba4 040c 	sub.w	r4, r4, ip
 800067e:	2700      	movs	r7, #0
 8000680:	b11e      	cbz	r6, 800068a <__udivmoddi4+0xa2>
 8000682:	40d4      	lsrs	r4, r2
 8000684:	2300      	movs	r3, #0
 8000686:	e9c6 4300 	strd	r4, r3, [r6]
 800068a:	4639      	mov	r1, r7
 800068c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000690:	2a00      	cmp	r2, #0
 8000692:	d053      	beq.n	800073c <__udivmoddi4+0x154>
 8000694:	fab2 f282 	clz	r2, r2
 8000698:	2a00      	cmp	r2, #0
 800069a:	f040 80b6 	bne.w	800080a <__udivmoddi4+0x222>
 800069e:	1b49      	subs	r1, r1, r5
 80006a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a4:	fa1f f885 	uxth.w	r8, r5
 80006a8:	2701      	movs	r7, #1
 80006aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80006ae:	0c23      	lsrs	r3, r4, #16
 80006b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80006b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b8:	fb08 f10c 	mul.w	r1, r8, ip
 80006bc:	4299      	cmp	r1, r3
 80006be:	d907      	bls.n	80006d0 <__udivmoddi4+0xe8>
 80006c0:	18eb      	adds	r3, r5, r3
 80006c2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80006c6:	d202      	bcs.n	80006ce <__udivmoddi4+0xe6>
 80006c8:	4299      	cmp	r1, r3
 80006ca:	f200 80ec 	bhi.w	80008a6 <__udivmoddi4+0x2be>
 80006ce:	4684      	mov	ip, r0
 80006d0:	1a59      	subs	r1, r3, r1
 80006d2:	b2a3      	uxth	r3, r4
 80006d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80006d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80006dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80006e0:	fb08 f800 	mul.w	r8, r8, r0
 80006e4:	45a0      	cmp	r8, r4
 80006e6:	d907      	bls.n	80006f8 <__udivmoddi4+0x110>
 80006e8:	192c      	adds	r4, r5, r4
 80006ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006ee:	d202      	bcs.n	80006f6 <__udivmoddi4+0x10e>
 80006f0:	45a0      	cmp	r8, r4
 80006f2:	f200 80dc 	bhi.w	80008ae <__udivmoddi4+0x2c6>
 80006f6:	4618      	mov	r0, r3
 80006f8:	eba4 0408 	sub.w	r4, r4, r8
 80006fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000700:	e7be      	b.n	8000680 <__udivmoddi4+0x98>
 8000702:	428b      	cmp	r3, r1
 8000704:	d908      	bls.n	8000718 <__udivmoddi4+0x130>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d078      	beq.n	80007fc <__udivmoddi4+0x214>
 800070a:	2700      	movs	r7, #0
 800070c:	e9c6 0100 	strd	r0, r1, [r6]
 8000710:	4638      	mov	r0, r7
 8000712:	4639      	mov	r1, r7
 8000714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000718:	fab3 f783 	clz	r7, r3
 800071c:	b97f      	cbnz	r7, 800073e <__udivmoddi4+0x156>
 800071e:	428b      	cmp	r3, r1
 8000720:	d302      	bcc.n	8000728 <__udivmoddi4+0x140>
 8000722:	4282      	cmp	r2, r0
 8000724:	f200 80bd 	bhi.w	80008a2 <__udivmoddi4+0x2ba>
 8000728:	1a84      	subs	r4, r0, r2
 800072a:	eb61 0303 	sbc.w	r3, r1, r3
 800072e:	2001      	movs	r0, #1
 8000730:	4698      	mov	r8, r3
 8000732:	2e00      	cmp	r6, #0
 8000734:	d0a9      	beq.n	800068a <__udivmoddi4+0xa2>
 8000736:	e9c6 4800 	strd	r4, r8, [r6]
 800073a:	e7a6      	b.n	800068a <__udivmoddi4+0xa2>
 800073c:	deff      	udf	#255	; 0xff
 800073e:	f1c7 0520 	rsb	r5, r7, #32
 8000742:	40bb      	lsls	r3, r7
 8000744:	fa22 fc05 	lsr.w	ip, r2, r5
 8000748:	ea4c 0c03 	orr.w	ip, ip, r3
 800074c:	fa01 f407 	lsl.w	r4, r1, r7
 8000750:	fa20 f805 	lsr.w	r8, r0, r5
 8000754:	fa21 f305 	lsr.w	r3, r1, r5
 8000758:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800075c:	ea48 0404 	orr.w	r4, r8, r4
 8000760:	fbb3 f9fe 	udiv	r9, r3, lr
 8000764:	0c21      	lsrs	r1, r4, #16
 8000766:	fb0e 3319 	mls	r3, lr, r9, r3
 800076a:	fa1f f88c 	uxth.w	r8, ip
 800076e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000772:	fb09 fa08 	mul.w	sl, r9, r8
 8000776:	459a      	cmp	sl, r3
 8000778:	fa02 f207 	lsl.w	r2, r2, r7
 800077c:	fa00 f107 	lsl.w	r1, r0, r7
 8000780:	d90b      	bls.n	800079a <__udivmoddi4+0x1b2>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800078a:	f080 8088 	bcs.w	800089e <__udivmoddi4+0x2b6>
 800078e:	459a      	cmp	sl, r3
 8000790:	f240 8085 	bls.w	800089e <__udivmoddi4+0x2b6>
 8000794:	f1a9 0902 	sub.w	r9, r9, #2
 8000798:	4463      	add	r3, ip
 800079a:	eba3 030a 	sub.w	r3, r3, sl
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80007a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f808 	mul.w	r8, r0, r8
 80007b0:	45a0      	cmp	r8, r4
 80007b2:	d908      	bls.n	80007c6 <__udivmoddi4+0x1de>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007bc:	d26b      	bcs.n	8000896 <__udivmoddi4+0x2ae>
 80007be:	45a0      	cmp	r8, r4
 80007c0:	d969      	bls.n	8000896 <__udivmoddi4+0x2ae>
 80007c2:	3802      	subs	r0, #2
 80007c4:	4464      	add	r4, ip
 80007c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007ca:	eba4 0408 	sub.w	r4, r4, r8
 80007ce:	fba0 8902 	umull	r8, r9, r0, r2
 80007d2:	454c      	cmp	r4, r9
 80007d4:	46c6      	mov	lr, r8
 80007d6:	464b      	mov	r3, r9
 80007d8:	d354      	bcc.n	8000884 <__udivmoddi4+0x29c>
 80007da:	d051      	beq.n	8000880 <__udivmoddi4+0x298>
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d069      	beq.n	80008b4 <__udivmoddi4+0x2cc>
 80007e0:	ebb1 020e 	subs.w	r2, r1, lr
 80007e4:	eb64 0403 	sbc.w	r4, r4, r3
 80007e8:	fa04 f505 	lsl.w	r5, r4, r5
 80007ec:	fa22 f307 	lsr.w	r3, r2, r7
 80007f0:	40fc      	lsrs	r4, r7
 80007f2:	431d      	orrs	r5, r3
 80007f4:	e9c6 5400 	strd	r5, r4, [r6]
 80007f8:	2700      	movs	r7, #0
 80007fa:	e746      	b.n	800068a <__udivmoddi4+0xa2>
 80007fc:	4637      	mov	r7, r6
 80007fe:	4630      	mov	r0, r6
 8000800:	e743      	b.n	800068a <__udivmoddi4+0xa2>
 8000802:	4618      	mov	r0, r3
 8000804:	e737      	b.n	8000676 <__udivmoddi4+0x8e>
 8000806:	4607      	mov	r7, r0
 8000808:	e71f      	b.n	800064a <__udivmoddi4+0x62>
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	fa20 f703 	lsr.w	r7, r0, r3
 8000812:	4095      	lsls	r5, r2
 8000814:	fa01 f002 	lsl.w	r0, r1, r2
 8000818:	fa21 f303 	lsr.w	r3, r1, r3
 800081c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000820:	4338      	orrs	r0, r7
 8000822:	0c01      	lsrs	r1, r0, #16
 8000824:	fbb3 f7fe 	udiv	r7, r3, lr
 8000828:	fa1f f885 	uxth.w	r8, r5
 800082c:	fb0e 3317 	mls	r3, lr, r7, r3
 8000830:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000834:	fb07 f308 	mul.w	r3, r7, r8
 8000838:	428b      	cmp	r3, r1
 800083a:	fa04 f402 	lsl.w	r4, r4, r2
 800083e:	d907      	bls.n	8000850 <__udivmoddi4+0x268>
 8000840:	1869      	adds	r1, r5, r1
 8000842:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000846:	d228      	bcs.n	800089a <__udivmoddi4+0x2b2>
 8000848:	428b      	cmp	r3, r1
 800084a:	d926      	bls.n	800089a <__udivmoddi4+0x2b2>
 800084c:	3f02      	subs	r7, #2
 800084e:	4429      	add	r1, r5
 8000850:	1acb      	subs	r3, r1, r3
 8000852:	b281      	uxth	r1, r0
 8000854:	fbb3 f0fe 	udiv	r0, r3, lr
 8000858:	fb0e 3310 	mls	r3, lr, r0, r3
 800085c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000860:	fb00 f308 	mul.w	r3, r0, r8
 8000864:	428b      	cmp	r3, r1
 8000866:	d907      	bls.n	8000878 <__udivmoddi4+0x290>
 8000868:	1869      	adds	r1, r5, r1
 800086a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800086e:	d210      	bcs.n	8000892 <__udivmoddi4+0x2aa>
 8000870:	428b      	cmp	r3, r1
 8000872:	d90e      	bls.n	8000892 <__udivmoddi4+0x2aa>
 8000874:	3802      	subs	r0, #2
 8000876:	4429      	add	r1, r5
 8000878:	1ac9      	subs	r1, r1, r3
 800087a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800087e:	e714      	b.n	80006aa <__udivmoddi4+0xc2>
 8000880:	4541      	cmp	r1, r8
 8000882:	d2ab      	bcs.n	80007dc <__udivmoddi4+0x1f4>
 8000884:	ebb8 0e02 	subs.w	lr, r8, r2
 8000888:	eb69 020c 	sbc.w	r2, r9, ip
 800088c:	3801      	subs	r0, #1
 800088e:	4613      	mov	r3, r2
 8000890:	e7a4      	b.n	80007dc <__udivmoddi4+0x1f4>
 8000892:	4660      	mov	r0, ip
 8000894:	e7f0      	b.n	8000878 <__udivmoddi4+0x290>
 8000896:	4618      	mov	r0, r3
 8000898:	e795      	b.n	80007c6 <__udivmoddi4+0x1de>
 800089a:	4667      	mov	r7, ip
 800089c:	e7d8      	b.n	8000850 <__udivmoddi4+0x268>
 800089e:	4681      	mov	r9, r0
 80008a0:	e77b      	b.n	800079a <__udivmoddi4+0x1b2>
 80008a2:	4638      	mov	r0, r7
 80008a4:	e745      	b.n	8000732 <__udivmoddi4+0x14a>
 80008a6:	f1ac 0c02 	sub.w	ip, ip, #2
 80008aa:	442b      	add	r3, r5
 80008ac:	e710      	b.n	80006d0 <__udivmoddi4+0xe8>
 80008ae:	3802      	subs	r0, #2
 80008b0:	442c      	add	r4, r5
 80008b2:	e721      	b.n	80006f8 <__udivmoddi4+0x110>
 80008b4:	4637      	mov	r7, r6
 80008b6:	e6e8      	b.n	800068a <__udivmoddi4+0xa2>

080008b8 <__aeabi_idiv0>:
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <dlm_init>:

// dlm_init
//  This function will handle power-on behavior, all completely TBD
//  according to everthing else the module does
void dlm_init(CAN_HandleTypeDef* hcan_ptr0, CAN_HandleTypeDef* hcan_ptr1)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
    // init GopherCAN
	dlm_hcan0 = hcan_ptr0;
 80008c6:	4a26      	ldr	r2, [pc, #152]	; (8000960 <dlm_init+0xa4>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6013      	str	r3, [r2, #0]
	dlm_hcan1 = hcan_ptr1;
 80008cc:	4a25      	ldr	r2, [pc, #148]	; (8000964 <dlm_init+0xa8>)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	6013      	str	r3, [r2, #0]

	// initialize CAN
	// NOTE: CAN will also need to be added in CubeMX and code must be generated
	// Check the STM_CAN repo for the file "F0xx CAN Config Settings.pptx" for the correct settings
	if (init_can(dlm_hcan0, DLM_ID)
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <dlm_init+0xa4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f004 fa0d 	bl	8004cf8 <init_can>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d108      	bne.n	80008f6 <dlm_init+0x3a>
			|| init_can(dlm_hcan1, DLM_ID))
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <dlm_init+0xa8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2101      	movs	r1, #1
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fa04 	bl	8004cf8 <init_can>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d000      	beq.n	80008f8 <dlm_init+0x3c>
	{
		// an error has occurred, stay here
		while (1);
 80008f6:	e7fe      	b.n	80008f6 <dlm_init+0x3a>
	}

	// Declare which bus is which using define_can_bus
	define_can_bus(dlm_hcan1, GCAN0, 0);
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <dlm_init+0xa8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f004 ff75 	bl	80057f0 <define_can_bus>
	define_can_bus(dlm_hcan0, GCAN1, 1);
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <dlm_init+0xa4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2201      	movs	r2, #1
 800090c:	2101      	movs	r1, #1
 800090e:	4618      	mov	r0, r3
 8000910:	f004 ff6e 	bl	80057f0 <define_can_bus>

	// enable the tester variables
	u8_tester.update_enabled = TRUE;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <dlm_init+0xac>)
 8000916:	2201      	movs	r2, #1
 8000918:	711a      	strb	r2, [r3, #4]
	u16_tester.update_enabled = TRUE;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <dlm_init+0xb0>)
 800091c:	2201      	movs	r2, #1
 800091e:	711a      	strb	r2, [r3, #4]
	u32_tester.update_enabled = TRUE;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <dlm_init+0xb4>)
 8000922:	2201      	movs	r2, #1
 8000924:	711a      	strb	r2, [r3, #4]
	u64_tester.update_enabled = TRUE;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <dlm_init+0xb8>)
 8000928:	2201      	movs	r2, #1
 800092a:	711a      	strb	r2, [r3, #4]
	s8_tester.update_enabled = TRUE;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <dlm_init+0xbc>)
 800092e:	2201      	movs	r2, #1
 8000930:	711a      	strb	r2, [r3, #4]
	s16_tester.update_enabled = TRUE;
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <dlm_init+0xc0>)
 8000934:	2201      	movs	r2, #1
 8000936:	711a      	strb	r2, [r3, #4]
	s32_tester.update_enabled = TRUE;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <dlm_init+0xc4>)
 800093a:	2201      	movs	r2, #1
 800093c:	711a      	strb	r2, [r3, #4]
	s64_tester.update_enabled = TRUE;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <dlm_init+0xc8>)
 8000940:	2201      	movs	r2, #1
 8000942:	711a      	strb	r2, [r3, #4]
	float_tester.update_enabled = TRUE;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <dlm_init+0xcc>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]

    manage_data_aquisition_init(&ram_data);
 800094a:	4810      	ldr	r0, [pc, #64]	; (800098c <dlm_init+0xd0>)
 800094c:	f000 f854 	bl	80009f8 <manage_data_aquisition_init>
    move_ram_data_to_storage_init(&ram_data);
 8000950:	480e      	ldr	r0, [pc, #56]	; (800098c <dlm_init+0xd0>)
 8000952:	f000 fa93 	bl	8000e7c <move_ram_data_to_storage_init>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200040a8 	.word	0x200040a8
 8000964:	200040ac 	.word	0x200040ac
 8000968:	20004158 	.word	0x20004158
 800096c:	200047ac 	.word	0x200047ac
 8000970:	200047d0 	.word	0x200047d0
 8000974:	20004578 	.word	0x20004578
 8000978:	2000485c 	.word	0x2000485c
 800097c:	200047c0 	.word	0x200047c0
 8000980:	200047a0 	.word	0x200047a0
 8000984:	20004848 	.word	0x20004848
 8000988:	200047dc 	.word	0x200047dc
 800098c:	200000d4 	.word	0x200000d4

08000990 <manage_data_aquisition>:
//
// Call FRQ:
//  This function will need to be called at the maximum parameter
//  request rate the DLM should support.
void manage_data_aquisition()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    request_all_buckets();
 8000994:	f000 f8fc 	bl	8000b90 <request_all_buckets>
    store_new_data();
 8000998:	f000 f93c 	bl	8000c14 <store_new_data>
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <move_ram_data_to_storage>:
//  involve many factors including:
//   - the max amount of lost data that we are willing to take
//   - the size of the RAM buffer and how long that will take to fill up
//   - how many write cycles to the persistent storage we are ok giving up
void move_ram_data_to_storage()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
    // TODO Use some logic to determine when the best time is to write to storage. Right
	// now it just writes every second
	if (counter == 1000)
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <move_ram_data_to_storage+0x2c>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009ac:	d105      	bne.n	80009ba <move_ram_data_to_storage+0x1a>
	{
		write_data_to_storage();
 80009ae:	f000 fa75 	bl	8000e9c <write_data_to_storage>
		counter = 0;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <move_ram_data_to_storage+0x2c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	801a      	strh	r2, [r3, #0]
	else
	{
		counter++;
	}

}
 80009b8:	e005      	b.n	80009c6 <move_ram_data_to_storage+0x26>
		counter++;
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <move_ram_data_to_storage+0x2c>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4b02      	ldr	r3, [pc, #8]	; (80009cc <move_ram_data_to_storage+0x2c>)
 80009c4:	801a      	strh	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000e0 	.word	0x200000e0

080009d0 <can_service_loop>:
//  if it has been recieved
//
// Call FRQ:
//  100us because we can
void can_service_loop()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	//service_can_rx_hardware(dlm_hcan0, CAN_RX_FIFO1);
	//service_can_rx_hardware(dlm_hcan1, CAN_RX_FIFO0);
	//service_can_rx_hardware(dlm_hcan1, CAN_RX_FIFO1);

	// handle each RX message in the buffer
	if (service_can_rx_buffer())
 80009d4:	f004 fc8a 	bl	80052ec <service_can_rx_buffer>
	{
		// an error has occurred
	}

	service_can_tx_hardware(dlm_hcan0);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <can_service_loop+0x20>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fbfb 	bl	80051d8 <service_can_tx_hardware>
	service_can_tx_hardware(dlm_hcan1);
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <can_service_loop+0x24>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 fbf6 	bl	80051d8 <service_can_tx_hardware>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200040a8 	.word	0x200040a8
 80009f4:	200040ac 	.word	0x200040ac

080009f8 <manage_data_aquisition_init>:

// manage_data_aquisition_init
//  Assign the pointer to the head node, set up the CAN commands, and tell the DAMs to start
//  defining their buckets
void manage_data_aquisition_init(DATA_INFO_NODE* ram_data)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af04      	add	r7, sp, #16
 80009fe:	6078      	str	r0, [r7, #4]
    ram_data_head = ram_data;
 8000a00:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <manage_data_aquisition_init+0x48>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]

    // Add the correct CAN command functions
    add_custom_can_func(ADD_PARAM_TO_BUCKET, &add_param_to_bucket, TRUE, NULL);
 8000a06:	2300      	movs	r3, #0
 8000a08:	2201      	movs	r2, #1
 8000a0a:	490e      	ldr	r1, [pc, #56]	; (8000a44 <manage_data_aquisition_init+0x4c>)
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f004 fbb3 	bl	8005178 <add_custom_can_func>
    add_custom_can_func(ASSIGN_BUCKET_TO_FRQ, &assign_bucket_to_frq, TRUE, NULL);
 8000a12:	2300      	movs	r3, #0
 8000a14:	2201      	movs	r2, #1
 8000a16:	490c      	ldr	r1, [pc, #48]	; (8000a48 <manage_data_aquisition_init+0x50>)
 8000a18:	2004      	movs	r0, #4
 8000a1a:	f004 fbad 	bl	8005178 <add_custom_can_func>

    // Send CAN commands to all modules (specifically to the DAMs) that
    // this module is ready to be interacted with to add buckets
    send_can_command(PRIO_HIGH, DAM_ID, SEND_BUCKET_PARAMS, 0, 0, 0, 0);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9302      	str	r3, [sp, #8]
 8000a22:	2300      	movs	r3, #0
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	2300      	movs	r3, #0
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	2102      	movs	r1, #2
 8000a30:	2000      	movs	r0, #0
 8000a32:	f004 fa3f 	bl	8004eb4 <send_can_command>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200040b0 	.word	0x200040b0
 8000a44:	08000a4d 	.word	0x08000a4d
 8000a48:	08000b29 	.word	0x08000b29

08000a4c <add_param_to_bucket>:
//  This function is a CAN command, designed to be activated by the DAM. When
//  called, this will add the param inputted to the correct bucket with the assosiated
//  DAM included. Built to handle a general amount of DAMs, params, and buckets
void add_param_to_bucket(U8 sending_dam, void* UNUSED,
    U8 param_id_msb, U8 param_id_lsb, U8 bucket_id, U8 UNUSED3)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6039      	str	r1, [r7, #0]
 8000a54:	4611      	mov	r1, r2
 8000a56:	461a      	mov	r2, r3
 8000a58:	4603      	mov	r3, r0
 8000a5a:	71fb      	strb	r3, [r7, #7]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	71bb      	strb	r3, [r7, #6]
 8000a60:	4613      	mov	r3, r2
 8000a62:	717b      	strb	r3, [r7, #5]
	BUCKET_NODE* above_bucket_node = &bucket_list_head;
 8000a64:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <add_param_to_bucket+0xd8>)
 8000a66:	617b      	str	r3, [r7, #20]
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8000a68:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <add_param_to_bucket+0xd8>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	613b      	str	r3, [r7, #16]
    U16_LIST_NODE* param_node;
    U16 param_id;

    // create the param_id from the two 8-bit chunks
    param_id = (param_id_msb << BITS_IN_BYTE) | param_id_lsb;
 8000a6e:	79bb      	ldrb	r3, [r7, #6]
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	797b      	ldrb	r3, [r7, #5]
 8000a76:	b21b      	sxth	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	81fb      	strh	r3, [r7, #14]

    // check if there exists a bucket with this ID on this DAM in the bucket list
    while (bucket_node != NULL)
 8000a7e:	e00f      	b.n	8000aa0 <add_param_to_bucket+0x54>
    {
        if ((bucket_node->bucket.dam_id == sending_dam)
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d105      	bne.n	8000a96 <add_param_to_bucket+0x4a>
            && (bucket_node->bucket.bucket_id == bucket_id))
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d008      	beq.n	8000aa8 <add_param_to_bucket+0x5c>
            // This is the correct bucket. Move on to the next step
            break;
        }

        // this is not the correct bucket. Try the next one
        above_bucket_node = bucket_node;
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	617b      	str	r3, [r7, #20]
        bucket_node = bucket_node->next;
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	613b      	str	r3, [r7, #16]
    while (bucket_node != NULL)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1ec      	bne.n	8000a80 <add_param_to_bucket+0x34>
 8000aa6:	e000      	b.n	8000aaa <add_param_to_bucket+0x5e>
            break;
 8000aa8:	bf00      	nop
    }

    // if the bucket does not exist, make a new one and use it
    if (bucket_node == NULL)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d11d      	bne.n	8000aec <add_param_to_bucket+0xa0>
    {
        bucket_node = (BUCKET_NODE*)malloc(sizeof(BUCKET_NODE));
 8000ab0:	2010      	movs	r0, #16
 8000ab2:	f005 f8c1 	bl	8005c38 <malloc>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	613b      	str	r3, [r7, #16]

        // test if malloc failed
        if (bucket_node == NULL)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d02b      	beq.n	8000b18 <add_param_to_bucket+0xcc>
            // TODO handle a malloc error
            return;
        }

        // this is needed to make sure the list knows to stop at the end
        bucket_node->next = NULL;
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
        bucket_node->bucket.param_ids = NULL;
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]

        // set the details of this new bucket
        bucket_node->bucket.dam_id = sending_dam;
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	701a      	strb	r2, [r3, #0]
        bucket_node->bucket.bucket_id = bucket_id;
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ad8:	705a      	strb	r2, [r3, #1]

        // Disable this bucket by setting the ms_between_requests to 0
        bucket_node->bucket.ms_between_requests = 0;
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	2200      	movs	r2, #0
 8000ade:	805a      	strh	r2, [r3, #2]
        bucket_node->bucket.last_request = 0;
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]

        // set the above node to this new node
        above_bucket_node->next = bucket_node;
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	60da      	str	r2, [r3, #12]

    // Check to make sure this parameter is not already in the list
    // TODO

    // malloc some new memory for the U16 node to store the parameter
    param_node = (U16_LIST_NODE*)malloc(sizeof(U16_LIST_NODE));
 8000aec:	200c      	movs	r0, #12
 8000aee:	f005 f8a3 	bl	8005c38 <malloc>
 8000af2:	4603      	mov	r3, r0
 8000af4:	60bb      	str	r3, [r7, #8]

    // test if malloc failed
    if (param_node == NULL)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00f      	beq.n	8000b1c <add_param_to_bucket+0xd0>
        return;
    }

    // add this param to the front of the param linked list. It can be added to
    // the front because order does not matter in this list
    param_node->next = bucket_node->bucket.param_ids;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	605a      	str	r2, [r3, #4]
    bucket_node->bucket.param_ids = param_node;
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	609a      	str	r2, [r3, #8]

    // set the details of the param_node
    param_node->data = param_id;
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	89fa      	ldrh	r2, [r7, #14]
 8000b0e:	801a      	strh	r2, [r3, #0]
    param_node->pending_responce = FALSE;
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2200      	movs	r2, #0
 8000b14:	721a      	strb	r2, [r3, #8]
 8000b16:	e002      	b.n	8000b1e <add_param_to_bucket+0xd2>
            return;
 8000b18:	bf00      	nop
 8000b1a:	e000      	b.n	8000b1e <add_param_to_bucket+0xd2>
        return;
 8000b1c:	bf00      	nop


}
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200000e4 	.word	0x200000e4

08000b28 <assign_bucket_to_frq>:
// assign_bucket_to_frq
//  This will take the inputted DAM and bucket ID and set the time to wait between each request
//  in ms. Designed to be called as a CAN command coming from a DAM
void assign_bucket_to_frq(U8 sending_dam, void* UNUSED,
    U8 bucket_id, U8 ms_between_requests_msb, U8 ms_between_requests_lsb, U8 UNUSED3)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6039      	str	r1, [r7, #0]
 8000b30:	4611      	mov	r1, r2
 8000b32:	461a      	mov	r2, r3
 8000b34:	4603      	mov	r3, r0
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	71bb      	strb	r3, [r7, #6]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	717b      	strb	r3, [r7, #5]
	// Skip the head node when searching
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <assign_bucket_to_frq+0x64>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60fb      	str	r3, [r7, #12]
    U16 ms_between_requests;

    // create the U16 for ms_between_requests out of the 2 U8s
    ms_between_requests = (ms_between_requests_msb << BITS_IN_BYTE) | ms_between_requests_lsb;
 8000b46:	797b      	ldrb	r3, [r7, #5]
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	7e3b      	ldrb	r3, [r7, #24]
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	817b      	strh	r3, [r7, #10]

    // check if there exists a bucket with this ID on this DAM in the bucket list
    while (bucket_node != NULL)
 8000b56:	e010      	b.n	8000b7a <assign_bucket_to_frq+0x52>
    {
        if ((bucket_node->bucket.dam_id == sending_dam)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	79fa      	ldrb	r2, [r7, #7]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d108      	bne.n	8000b74 <assign_bucket_to_frq+0x4c>
            && (bucket_node->bucket.bucket_id == bucket_id))
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d103      	bne.n	8000b74 <assign_bucket_to_frq+0x4c>
        {
            // This is the correct bucket. Assign the ms_between_request variable in the struct as needed
            bucket_node->bucket.ms_between_requests = ms_between_requests;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	897a      	ldrh	r2, [r7, #10]
 8000b70:	805a      	strh	r2, [r3, #2]
            return;
 8000b72:	e005      	b.n	8000b80 <assign_bucket_to_frq+0x58>
        }

        // this is not the correct bucket. Try the next one
        bucket_node = bucket_node->next;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60fb      	str	r3, [r7, #12]
    while (bucket_node != NULL)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1eb      	bne.n	8000b58 <assign_bucket_to_frq+0x30>
    }

    // The correct bucket was not found. Return
}
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200000e4 	.word	0x200000e4

08000b90 <request_all_buckets>:

// request_all_buckets
//  Function to run through the list of buckets and checks if they need to be requested. If they do,
//  request it
void request_all_buckets()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af04      	add	r7, sp, #16
	// Skip the head node
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <request_all_buckets+0x80>)
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	607b      	str	r3, [r7, #4]
    U16_LIST_NODE* param_node;

    while(bucket_node != NULL)
 8000b9c:	e031      	b.n	8000c02 <request_all_buckets+0x72>
    {
        // check if it is the correct time to send a new message. 0ms between requests means the
        // bucket is not fully initialized
        if ((bucket_node->bucket.ms_between_requests != 0)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	885b      	ldrh	r3, [r3, #2]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d02a      	beq.n	8000bfc <request_all_buckets+0x6c>
            && (HAL_GetTick() >= bucket_node->bucket.last_request + bucket_node->bucket.ms_between_requests))
 8000ba6:	f000 fe21 	bl	80017ec <HAL_GetTick>
 8000baa:	4601      	mov	r1, r0
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	8852      	ldrh	r2, [r2, #2]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	d320      	bcc.n	8000bfc <request_all_buckets+0x6c>
        {
            // send the command to request the bucket
            if (send_can_command(PRIO_HIGH, bucket_node->bucket.dam_id,
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7819      	ldrb	r1, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	785a      	ldrb	r2, [r3, #1]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	2206      	movs	r2, #6
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f004 f96e 	bl	8004eb4 <send_can_command>
            {
                // TODO error handling
            }

            // set the pending responce flag for each parameter in this bucket to true
            param_node = bucket_node->bucket.param_ids;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	603b      	str	r3, [r7, #0]
            while (param_node != NULL)
 8000bde:	e005      	b.n	8000bec <request_all_buckets+0x5c>
            {
                param_node->pending_responce = TRUE;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	721a      	strb	r2, [r3, #8]
                param_node = param_node->next;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	603b      	str	r3, [r7, #0]
            while (param_node != NULL)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f6      	bne.n	8000be0 <request_all_buckets+0x50>
            }

            // update the last request tick
            bucket_node->bucket.last_request = HAL_GetTick();
 8000bf2:	f000 fdfb 	bl	80017ec <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	605a      	str	r2, [r3, #4]
        }

        // move on to the next bucket
        bucket_node = bucket_node->next;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	607b      	str	r3, [r7, #4]
    while(bucket_node != NULL)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ca      	bne.n	8000b9e <request_all_buckets+0xe>
    }
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200000e4 	.word	0x200000e4

08000c14 <store_new_data>:
// store_new_data
//  Function to figure out what data stored in the GopherCAN parameters is new
//  based on data in the bucket linked list. If it deturmines the data is new,
//  store that data to the data ring buffer
void store_new_data()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
	// Skip the head node
    BUCKET_NODE* bucket_node = bucket_list_head.next;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <store_new_data+0x78>)
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	60fb      	str	r3, [r7, #12]
    U16_LIST_NODE* param_node;
    CAN_INFO_STRUCT* param_info;

    // For each parameter in each bucket, check if the last time it was
    // recieved is sooner than its bucket was requested and has not been already written
    while (bucket_node != NULL)
 8000c20:	e02e      	b.n	8000c80 <store_new_data+0x6c>
    {
        param_node = bucket_node->bucket.param_ids;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	60bb      	str	r3, [r7, #8]

        // run through each parameter in the bucket
        while (param_node != NULL)
 8000c28:	e024      	b.n	8000c74 <store_new_data+0x60>
        {
            // get the CAN_INFO_STRUCT related to this parameter. Data stores the parameter ID in the node struct
            param_info = (CAN_INFO_STRUCT*)(all_parameter_structs[param_node->data]);
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <store_new_data+0x7c>)
 8000c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c36:	607b      	str	r3, [r7, #4]

            // if the parameter is pending an update and the last RX of the param is after the
            // request was sent, it needs to be added to RAM
            if (param_node->pending_responce == TRUE
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	7a1b      	ldrb	r3, [r3, #8]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d116      	bne.n	8000c6e <store_new_data+0x5a>
                && param_info->last_rx >= bucket_node->bucket.last_request)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d310      	bcc.n	8000c6e <store_new_data+0x5a>
            {
                // add the param data to RAM
                if (add_param_to_ram(param_node, bucket_node))
 8000c4c:	68f9      	ldr	r1, [r7, #12]
 8000c4e:	68b8      	ldr	r0, [r7, #8]
 8000c50:	f000 f822 	bl	8000c98 <add_param_to_ram>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <store_new_data+0x54>
                {
                	// TODO error handling

                	// for now, turn on the onboard LED
                	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <store_new_data+0x80>)
 8000c62:	f001 ff03 	bl	8002a6c <HAL_GPIO_WritePin>

                	return;
 8000c66:	e00e      	b.n	8000c86 <store_new_data+0x72>
                }

                // disable the pending responce flag
                param_node->pending_responce = FALSE;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	721a      	strb	r2, [r3, #8]
            }

            // move on to the next parameter
            param_node = param_node->next;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	60bb      	str	r3, [r7, #8]
        while (param_node != NULL)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1d7      	bne.n	8000c2a <store_new_data+0x16>
        }
        
        // move on to the next bucket
        bucket_node = bucket_node->next;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	60fb      	str	r3, [r7, #12]
    while (bucket_node != NULL)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1cd      	bne.n	8000c22 <store_new_data+0xe>
    }
}
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000e4 	.word	0x200000e4
 8000c90:	20000010 	.word	0x20000010
 8000c94:	40020400 	.word	0x40020400

08000c98 <add_param_to_ram>:


// add_param_to_ram
//  Function to add the data of a specific parameter to the RAM buffer
S8 add_param_to_ram(U16_LIST_NODE* param_node, BUCKET_NODE* bucket_node)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b08f      	sub	sp, #60	; 0x3c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
    //  The size of the data can be obtained using the lookup table in GopherCAN

    DATA_INFO_NODE* data_node;
    CAN_INFO_STRUCT* can_param_struct;

    can_param_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[param_node->data]);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b71      	ldr	r3, [pc, #452]	; (8000e70 <add_param_to_ram+0x1d8>)
 8000caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30

    // Choose the correct type of data node based on the parameter data type, then malloc the memory needed
    switch (parameter_data_types[param_node->data])
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b6f      	ldr	r3, [pc, #444]	; (8000e74 <add_param_to_ram+0x1dc>)
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	f200 80bd 	bhi.w	8000e3c <add_param_to_ram+0x1a4>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <add_param_to_ram+0x30>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000ced 	.word	0x08000ced
 8000ccc:	08000d11 	.word	0x08000d11
 8000cd0:	08000d35 	.word	0x08000d35
 8000cd4:	08000d59 	.word	0x08000d59
 8000cd8:	08000d81 	.word	0x08000d81
 8000cdc:	08000da7 	.word	0x08000da7
 8000ce0:	08000dcd 	.word	0x08000dcd
 8000ce4:	08000df1 	.word	0x08000df1
 8000ce8:	08000e19 	.word	0x08000e19
	{
	case UNSIGNED8: ;
        U8_DATA_NODE* u8_data_node = (U8_DATA_NODE*)malloc(sizeof(U8_DATA_NODE));
 8000cec:	2010      	movs	r0, #16
 8000cee:	f004 ffa3 	bl	8005c38 <malloc>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c

        // check for malloc failure
        if (u8_data_node == NULL)
 8000cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <add_param_to_ram+0x6a>
        {
            return DLM_MALLOC_ERROR;
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d00:	e0b1      	b.n	8000e66 <add_param_to_ram+0x1ce>
        }

		u8_data_node->data = ((U8_CAN_STRUCT*)(can_param_struct))->data;
 8000d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d04:	799a      	ldrb	r2, [r3, #6]
 8000d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d08:	731a      	strb	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u8_data_node;
 8000d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000d0e:	e098      	b.n	8000e42 <add_param_to_ram+0x1aa>

	case UNSIGNED16: ;
		U16_DATA_NODE* u16_data_node = (U16_DATA_NODE*)malloc(sizeof(U16_DATA_NODE));
 8000d10:	2010      	movs	r0, #16
 8000d12:	f004 ff91 	bl	8005c38 <malloc>
 8000d16:	4603      	mov	r3, r0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28

        // check for malloc failure
        if (u16_data_node == NULL)
 8000d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <add_param_to_ram+0x8e>
        {
            return DLM_MALLOC_ERROR;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d24:	e09f      	b.n	8000e66 <add_param_to_ram+0x1ce>
        }

		u16_data_node->data = ((U16_CAN_STRUCT*)(can_param_struct))->data;
 8000d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d28:	88da      	ldrh	r2, [r3, #6]
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	819a      	strh	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u16_data_node;
 8000d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000d32:	e086      	b.n	8000e42 <add_param_to_ram+0x1aa>

	case UNSIGNED32: ;
		U32_DATA_NODE* u32_data_node = (U32_DATA_NODE*)malloc(sizeof(U32_DATA_NODE));
 8000d34:	2010      	movs	r0, #16
 8000d36:	f004 ff7f 	bl	8005c38 <malloc>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24

        // check for malloc failure
        if (u32_data_node == NULL)
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <add_param_to_ram+0xb2>
        {
            return DLM_MALLOC_ERROR;
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d48:	e08d      	b.n	8000e66 <add_param_to_ram+0x1ce>
        }

		u32_data_node->data = ((U32_CAN_STRUCT*)(can_param_struct))->data;
 8000d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)u32_data_node;
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000d56:	e074      	b.n	8000e42 <add_param_to_ram+0x1aa>

	case UNSIGNED64: ;
		U64_DATA_NODE* u64_data_node = (U64_DATA_NODE*)malloc(sizeof(U64_DATA_NODE));
 8000d58:	2018      	movs	r0, #24
 8000d5a:	f004 ff6d 	bl	8005c38 <malloc>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	623b      	str	r3, [r7, #32]

        // check for malloc failure
        if (u64_data_node == NULL)
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <add_param_to_ram+0xd6>
        {
            return DLM_MALLOC_ERROR;
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6c:	e07b      	b.n	8000e66 <add_param_to_ram+0x1ce>
        }

		u64_data_node->data = ((U64_CAN_STRUCT*)(can_param_struct))->data;
 8000d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d70:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000d74:	6a3a      	ldr	r2, [r7, #32]
 8000d76:	e9c2 3404 	strd	r3, r4, [r2, #16]
        data_node = (DATA_INFO_NODE*)u64_data_node;
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000d7e:	e060      	b.n	8000e42 <add_param_to_ram+0x1aa>

	case SIGNED8: ;
		S8_DATA_NODE* s8_data_node = (S8_DATA_NODE*)malloc(sizeof(S8_DATA_NODE));
 8000d80:	2010      	movs	r0, #16
 8000d82:	f004 ff59 	bl	8005c38 <malloc>
 8000d86:	4603      	mov	r3, r0
 8000d88:	61fb      	str	r3, [r7, #28]

        // check for malloc failure
        if (s8_data_node == NULL)
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <add_param_to_ram+0xfe>
        {
            return DLM_MALLOC_ERROR;
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d94:	e067      	b.n	8000e66 <add_param_to_ram+0x1ce>
        }

		s8_data_node->data = ((S8_CAN_STRUCT*)(can_param_struct))->data;
 8000d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d98:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	731a      	strb	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s8_data_node;
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000da4:	e04d      	b.n	8000e42 <add_param_to_ram+0x1aa>

	case SIGNED16: ;
		S16_DATA_NODE* s16_data_node = (S16_DATA_NODE*)malloc(sizeof(S16_DATA_NODE));
 8000da6:	2010      	movs	r0, #16
 8000da8:	f004 ff46 	bl	8005c38 <malloc>
 8000dac:	4603      	mov	r3, r0
 8000dae:	61bb      	str	r3, [r7, #24]

        // check for malloc failure
        if (s16_data_node == NULL)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <add_param_to_ram+0x124>
        {
            return DLM_MALLOC_ERROR;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dba:	e054      	b.n	8000e66 <add_param_to_ram+0x1ce>
        }

		s16_data_node->data = ((S16_CAN_STRUCT*)(can_param_struct))->data;
 8000dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	819a      	strh	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s16_data_node;
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000dca:	e03a      	b.n	8000e42 <add_param_to_ram+0x1aa>

	case SIGNED32: ;
		S32_DATA_NODE* s32_data_node = (S32_DATA_NODE*)malloc(sizeof(S32_DATA_NODE));
 8000dcc:	2010      	movs	r0, #16
 8000dce:	f004 ff33 	bl	8005c38 <malloc>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	617b      	str	r3, [r7, #20]

        // check for malloc failure
        if (s32_data_node == NULL)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <add_param_to_ram+0x14a>
        {
            return DLM_MALLOC_ERROR;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de0:	e041      	b.n	8000e66 <add_param_to_ram+0x1ce>
        }

		s32_data_node->data = ((S32_CAN_STRUCT*)(can_param_struct))->data;
 8000de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)s32_data_node;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000dee:	e028      	b.n	8000e42 <add_param_to_ram+0x1aa>

	case SIGNED64: ;
		S64_DATA_NODE* s64_data_node = (S64_DATA_NODE*)malloc(sizeof(S64_DATA_NODE));
 8000df0:	2018      	movs	r0, #24
 8000df2:	f004 ff21 	bl	8005c38 <malloc>
 8000df6:	4603      	mov	r3, r0
 8000df8:	613b      	str	r3, [r7, #16]

        // check for malloc failure
        if (s64_data_node == NULL)
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <add_param_to_ram+0x16e>
        {
            return DLM_MALLOC_ERROR;
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e04:	e02f      	b.n	8000e66 <add_param_to_ram+0x1ce>
        }

		s64_data_node->data = ((S64_CAN_STRUCT*)(can_param_struct))->data;
 8000e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e08:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	e9c2 3404 	strd	r3, r4, [r2, #16]
        data_node = (DATA_INFO_NODE*)s64_data_node;
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000e16:	e014      	b.n	8000e42 <add_param_to_ram+0x1aa>

	case FLOATING: ;
		FLOAT_DATA_NODE* float_data_node = (FLOAT_DATA_NODE*)malloc(sizeof(FLOAT_DATA_NODE));
 8000e18:	2010      	movs	r0, #16
 8000e1a:	f004 ff0d 	bl	8005c38 <malloc>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60fb      	str	r3, [r7, #12]

        // check for malloc failure
        if (float_data_node == NULL)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <add_param_to_ram+0x196>
        {
            return DLM_MALLOC_ERROR;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e2c:	e01b      	b.n	8000e66 <add_param_to_ram+0x1ce>
        }

		float_data_node->data = ((FLOAT_CAN_STRUCT*)(can_param_struct))->data;
 8000e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	60da      	str	r2, [r3, #12]
        data_node = (DATA_INFO_NODE*)float_data_node;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34

        break;
 8000e3a:	e002      	b.n	8000e42 <add_param_to_ram+0x1aa>

	default:
		// the datatype is not found for some reason
        return DLM_DATATYPE_NOT_FOUND;
 8000e3c:	f06f 0301 	mvn.w	r3, #1
 8000e40:	e011      	b.n	8000e66 <add_param_to_ram+0x1ce>
	}

    // set the time the data was taken as the time is was requested, as there is less
    // TX delay than RX delay
    data_node->data_time = bucket_node->bucket.last_request;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	601a      	str	r2, [r3, #0]

    // the parameter id is stored in the data of the parameter node
    data_node->param = param_node->data;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	809a      	strh	r2, [r3, #4]

    // add the new node to the front of the list, after the head node
    data_node->next = ram_data_head->next;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <add_param_to_ram+0x1e0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e5a:	609a      	str	r2, [r3, #8]
    ram_data_head->next = data_node;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <add_param_to_ram+0x1e0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e62:	609a      	str	r2, [r3, #8]

    return DLM_SUCCESS;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	373c      	adds	r7, #60	; 0x3c
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000010 	.word	0x20000010
 8000e74:	20000040 	.word	0x20000040
 8000e78:	200040b0 	.word	0x200040b0

08000e7c <move_ram_data_to_storage_init>:


// move_ram_data_to_storage_init
//  TODO DOCS
void move_ram_data_to_storage_init(DATA_INFO_NODE* storage_ptr)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    ram_data_head_ptr = storage_ptr;
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <move_ram_data_to_storage_init+0x1c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]

    // TODO file name, metadata, lots of other things im sure
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200040b4 	.word	0x200040b4

08000e9c <write_data_to_storage>:
// write_data_to_storage
//  Function to run through each data node in the ram_data linked list while adding the data
//  to the USB and deleting the node from the list. This function does not need to be thread
//  safe as the STM32 is single threaded
void write_data_to_storage()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
    DATA_INFO_NODE* data_node_above = ram_data_head_ptr;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <write_data_to_storage+0x44>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	613b      	str	r3, [r7, #16]
    DATA_INFO_NODE* data_node = ram_data_head_ptr->next;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <write_data_to_storage+0x44>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	617b      	str	r3, [r7, #20]

    // open the file
    // TODO

    // run through each data node in the RAM LL
    while (data_node != NULL)
 8000eb0:	e00e      	b.n	8000ed0 <write_data_to_storage+0x34>
    {
        // build the data string for this node
        build_data_string(data_point_str, data_node);
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	6979      	ldr	r1, [r7, #20]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f814 	bl	8000ee4 <build_data_string>

        // append the file with this new string
        // TODO

        // remove the pointer from the LL
        data_node_above->next = data_node->next;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	609a      	str	r2, [r3, #8]

        // free the memory for this node
        free_node_memory(data_node);
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f000 f8e5 	bl	8001094 <free_node_memory>

        // move on to the next data node
        data_node = data_node_above->next;
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	617b      	str	r3, [r7, #20]
    while (data_node != NULL)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1ed      	bne.n	8000eb2 <write_data_to_storage+0x16>
    }

    // close the file
    // TODO
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200040b4 	.word	0x200040b4

08000ee4 <build_data_string>:
//  data point will be stored as a 16bit parameter id, 32bit time value representing
//  the ms from DLM startup, and 64bit double for the data value. This string is returned
//  in U8* data_str. This must have 14B of memory available, or else bad things will happen.
//  This function will also remove the data node from the LL
void build_data_string(U8 data_str[], DATA_INFO_NODE* data_node)
{
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    DPF_CONVERTER data_union;
    U8 c;

    // write the parameter to the first 2 bytes
    for (c = 0; c < STORAGE_PARAM_SIZE; c++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75fb      	strb	r3, [r7, #23]
 8000ef2:	e010      	b.n	8000f16 <build_data_string+0x32>
    {
        data_str[c] = (U8)(data_node->param >> (((STORAGE_PARAM_SIZE - 1) - c) * BITS_IN_BYTE));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	889b      	ldrh	r3, [r3, #4]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	f1c3 0301 	rsb	r3, r3, #1
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	fa42 f103 	asr.w	r1, r2, r3
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b2ca      	uxtb	r2, r1
 8000f0e:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < STORAGE_PARAM_SIZE; c++)
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	3301      	adds	r3, #1
 8000f14:	75fb      	strb	r3, [r7, #23]
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d9eb      	bls.n	8000ef4 <build_data_string+0x10>
    }

    // write the timestamp to the next 4 bytes
    for (c = 0; c < TIMESTAMP_SIZE; c++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	75fb      	strb	r3, [r7, #23]
 8000f20:	e010      	b.n	8000f44 <build_data_string+0x60>
    {
        data_str[c + STORAGE_PARAM_SIZE] = (U8)(data_node->data_time >> (((TIMESTAMP_SIZE - 1) - c) * BITS_IN_BYTE));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	f1c3 0303 	rsb	r3, r3, #3
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	fa22 f103 	lsr.w	r1, r2, r3
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	3302      	adds	r3, #2
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < TIMESTAMP_SIZE; c++)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	3301      	adds	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d9eb      	bls.n	8000f22 <build_data_string+0x3e>
    }

    // write the double of the data to the last 8 bytes
    data_union.d = convert_data_to_dpf(data_node);
 8000f4a:	6838      	ldr	r0, [r7, #0]
 8000f4c:	f000 f82c 	bl	8000fa8 <convert_data_to_dpf>
 8000f50:	eeb0 7b40 	vmov.f64	d7, d0
 8000f54:	ed87 7b02 	vstr	d7, [r7, #8]
    for (c = 0; c < DATA_SIZE; c++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	75fb      	strb	r3, [r7, #23]
 8000f5c:	e01c      	b.n	8000f98 <build_data_string+0xb4>
    {
        data_str[c + STORAGE_PARAM_SIZE + TIMESTAMP_SIZE] = (U8)(data_union.u64 >> (((DATA_SIZE - 1) - c) * BITS_IN_BYTE));
 8000f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f62:	7df9      	ldrb	r1, [r7, #23]
 8000f64:	f1c1 0107 	rsb	r1, r1, #7
 8000f68:	00c9      	lsls	r1, r1, #3
 8000f6a:	f1c1 0620 	rsb	r6, r1, #32
 8000f6e:	f1a1 0020 	sub.w	r0, r1, #32
 8000f72:	fa22 f401 	lsr.w	r4, r2, r1
 8000f76:	fa03 f606 	lsl.w	r6, r3, r6
 8000f7a:	4334      	orrs	r4, r6
 8000f7c:	fa23 f000 	lsr.w	r0, r3, r0
 8000f80:	4304      	orrs	r4, r0
 8000f82:	fa23 f501 	lsr.w	r5, r3, r1
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	3306      	adds	r3, #6
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b2e2      	uxtb	r2, r4
 8000f90:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < DATA_SIZE; c++)
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	3301      	adds	r3, #1
 8000f96:	75fb      	strb	r3, [r7, #23]
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	d9df      	bls.n	8000f5e <build_data_string+0x7a>
    }
}
 8000f9e:	bf00      	nop
 8000fa0:	371c      	adds	r7, #28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000fa8 <convert_data_to_dpf>:
// convert_data_to_dpf
//  Function to take in a data node, get the data stored in it, and return
//  the double precision float representation of that value to be stored on
//  the external USB
double convert_data_to_dpf(DATA_INFO_NODE* data_node)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    // switch to get the data out of the data_node
    switch (parameter_data_types[data_node->param])
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	889b      	ldrh	r3, [r3, #4]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <convert_data_to_dpf+0xe8>)
 8000fb8:	5c9b      	ldrb	r3, [r3, r2]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d85b      	bhi.n	8001078 <convert_data_to_dpf+0xd0>
 8000fc0:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <convert_data_to_dpf+0x20>)
 8000fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc6:	bf00      	nop
 8000fc8:	08000fed 	.word	0x08000fed
 8000fcc:	08000ffb 	.word	0x08000ffb
 8000fd0:	08001009 	.word	0x08001009
 8000fd4:	08001017 	.word	0x08001017
 8000fd8:	0800102b 	.word	0x0800102b
 8000fdc:	0800103b 	.word	0x0800103b
 8000fe0:	0800104b 	.word	0x0800104b
 8000fe4:	08001059 	.word	0x08001059
 8000fe8:	0800106d 	.word	0x0800106d
	{
	case UNSIGNED8:
		return (double)(((U8_DATA_NODE*)data_node)->data);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7b1b      	ldrb	r3, [r3, #12]
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ff8:	e040      	b.n	800107c <convert_data_to_dpf+0xd4>

	case UNSIGNED16:
		return (double)(((U16_DATA_NODE*)data_node)->data);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	899b      	ldrh	r3, [r3, #12]
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001006:	e039      	b.n	800107c <convert_data_to_dpf+0xd4>

	case UNSIGNED32:
		return (double)(((U32_DATA_NODE*)data_node)->data);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001014:	e032      	b.n	800107c <convert_data_to_dpf+0xd4>

	case UNSIGNED64:
		return (double)(((U64_DATA_NODE*)data_node)->data);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800101c:	4618      	mov	r0, r3
 800101e:	4621      	mov	r1, r4
 8001020:	f7ff fa94 	bl	800054c <__aeabi_ul2d>
 8001024:	ec41 0b17 	vmov	d7, r0, r1
 8001028:	e028      	b.n	800107c <convert_data_to_dpf+0xd4>

	case SIGNED8:
		return (double)(((S8_DATA_NODE*)data_node)->data);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001038:	e020      	b.n	800107c <convert_data_to_dpf+0xd4>

	case SIGNED16:
		return (double)(((S16_DATA_NODE*)data_node)->data);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001048:	e018      	b.n	800107c <convert_data_to_dpf+0xd4>

	case SIGNED32:
		return (double)(((S32_DATA_NODE*)data_node)->data);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001056:	e011      	b.n	800107c <convert_data_to_dpf+0xd4>

	case SIGNED64:
		return (double)(((S64_DATA_NODE*)data_node)->data);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800105e:	4618      	mov	r0, r3
 8001060:	4621      	mov	r1, r4
 8001062:	f7ff fa7b 	bl	800055c <__aeabi_l2d>
 8001066:	ec41 0b17 	vmov	d7, r0, r1
 800106a:	e007      	b.n	800107c <convert_data_to_dpf+0xd4>

	case FLOATING:
		return (double)(((FLOAT_DATA_NODE*)data_node)->data);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001072:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001076:	e001      	b.n	800107c <convert_data_to_dpf+0xd4>

	default:
        // Something went wrong, just write 0 to data
		return 0;
 8001078:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8001088 <convert_data_to_dpf+0xe0>
	}

    // this coude should not be reached, this is to make the compiler happy
    return 0;
}
 800107c:	eeb0 0b47 	vmov.f64	d0, d7
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bd90      	pop	{r4, r7, pc}
 8001086:	bf00      	nop
	...
 8001090:	20000040 	.word	0x20000040

08001094 <free_node_memory>:
// free_node_memory
//  Function that will free the memory used by each node in the RAM storage LL.
//  If there is a memory leak, blame this function. If there is no memory leak,
//  this function can be removed as it is a single line
void free_node_memory(DATA_INFO_NODE* data_node)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    // Suposidly c is smart enough to know how much data was originally malloced, so
    // freeing should work no matter what type of storage node data_node really is
    free(data_node);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f004 fdd3 	bl	8005c48 <free>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80010bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <vApplicationGetIdleTaskMemory+0x30>)
 80010c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200000f4 	.word	0x200000f4
 80010dc:	20000148 	.word	0x20000148

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f000 fb60 	bl	80017aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 f83d 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f000 f903 	bl	80012f8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80010f2:	f000 f895 	bl	8001220 <MX_CAN1_Init>
  MX_CAN2_Init();
 80010f6:	f000 f8c9 	bl	800128c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  dlm_init(&hcan1, &hcan2);
 80010fa:	4915      	ldr	r1, [pc, #84]	; (8001150 <main+0x70>)
 80010fc:	4815      	ldr	r0, [pc, #84]	; (8001154 <main+0x74>)
 80010fe:	f7ff fbdd 	bl	80008bc <dlm_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of can_loop_task */
  osThreadDef(can_loop_task, can_loop, osPriorityNormal, 0, 128);
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <main+0x78>)
 8001104:	f107 041c 	add.w	r4, r7, #28
 8001108:	461d      	mov	r5, r3
 800110a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001112:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  can_loop_taskHandle = osThreadCreate(osThread(can_loop_task), NULL);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f002 fbe2 	bl	80038e6 <osThreadCreate>
 8001122:	4602      	mov	r2, r0
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <main+0x7c>)
 8001126:	601a      	str	r2, [r3, #0]

  /* definition and creation of dlm_main_loop */
  osThreadDef(dlm_main_loop, dlm_main, osPriorityNormal, 0, 128);
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <main+0x80>)
 800112a:	463c      	mov	r4, r7
 800112c:	461d      	mov	r5, r3
 800112e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001132:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dlm_main_loopHandle = osThreadCreate(osThread(dlm_main_loop), NULL);
 800113a:	463b      	mov	r3, r7
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fbd1 	bl	80038e6 <osThreadCreate>
 8001144:	4602      	mov	r2, r0
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <main+0x84>)
 8001148:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800114a:	f002 fbc5 	bl	80038d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800114e:	e7fe      	b.n	800114e <main+0x6e>
 8001150:	200040b8 	.word	0x200040b8
 8001154:	200040e8 	.word	0x200040e8
 8001158:	08005e1c 	.word	0x08005e1c
 800115c:	200040e4 	.word	0x200040e4
 8001160:	08005e48 	.word	0x08005e48
 8001164:	200040e0 	.word	0x200040e0

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2234      	movs	r2, #52	; 0x34
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f004 fd6e 	bl	8005c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <SystemClock_Config+0xb0>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a21      	ldr	r2, [pc, #132]	; (8001218 <SystemClock_Config+0xb0>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <SystemClock_Config+0xb0>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <SystemClock_Config+0xb4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <SystemClock_Config+0xb4>)
 80011ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <SystemClock_Config+0xb4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	2310      	movs	r3, #16
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 fc63 	bl	8002aa0 <HAL_RCC_OscConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80011e0:	f000 f8e4 	bl	80013ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	230f      	movs	r3, #15
 80011e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fefc 	bl	8002ffc <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800120a:	f000 f8cf 	bl	80013ac <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3750      	adds	r7, #80	; 0x50
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_CAN1_Init+0x64>)
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <MX_CAN1_Init+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_CAN1_Init+0x64>)
 800122c:	2202      	movs	r2, #2
 800122e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_CAN1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_CAN1_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_CAN1_Init+0x64>)
 800123e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001242:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_CAN1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_CAN1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_CAN1_Init+0x64>)
 8001252:	2201      	movs	r2, #1
 8001254:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_CAN1_Init+0x64>)
 8001258:	2201      	movs	r2, #1
 800125a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_CAN1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_CAN1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_CAN1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_CAN1_Init+0x64>)
 8001270:	f000 faf0 	bl	8001854 <HAL_CAN_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800127a:	f000 f897 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200040e8 	.word	0x200040e8
 8001288:	40006400 	.word	0x40006400

0800128c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_CAN2_Init+0x64>)
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <MX_CAN2_Init+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_CAN2_Init+0x64>)
 8001298:	2202      	movs	r2, #2
 800129a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_CAN2_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_CAN2_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_CAN2_Init+0x64>)
 80012aa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80012ae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_CAN2_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_CAN2_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_CAN2_Init+0x64>)
 80012be:	2201      	movs	r2, #1
 80012c0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_CAN2_Init+0x64>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_CAN2_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_CAN2_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_CAN2_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_CAN2_Init+0x64>)
 80012dc:	f000 faba 	bl	8001854 <HAL_CAN_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80012e6:	f000 f861 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200040b8 	.word	0x200040b8
 80012f4:	40006800 	.word	0x40006800

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_GPIO_Init+0x5c>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a10      	ldr	r2, [pc, #64]	; (8001354 <MX_GPIO_Init+0x5c>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_GPIO_Init+0x5c>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132a:	480b      	ldr	r0, [pc, #44]	; (8001358 <MX_GPIO_Init+0x60>)
 800132c:	f001 fb9e 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001334:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_GPIO_Init+0x60>)
 8001348:	f001 f9e6 	bl	8002718 <HAL_GPIO_Init>

}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40020400 	.word	0x40020400

0800135c <can_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_can_loop */
void can_loop(void const * argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  can_service_loop();
 8001364:	f7ff fb34 	bl	80009d0 <can_service_loop>
    osDelay(1);
 8001368:	2001      	movs	r0, #1
 800136a:	f002 fb08 	bl	800397e <osDelay>
  {
 800136e:	e7f9      	b.n	8001364 <can_loop+0x8>

08001370 <dlm_main>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dlm_main */
void dlm_main(void const * argument)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dlm_main */
  /* Infinite loop */
  for(;;)
  {
	  manage_data_aquisition();
 8001378:	f7ff fb0a 	bl	8000990 <manage_data_aquisition>
	  move_ram_data_to_storage();
 800137c:	f7ff fb10 	bl	80009a0 <move_ram_data_to_storage>
    osDelay(1);
 8001380:	2001      	movs	r0, #1
 8001382:	f002 fafc 	bl	800397e <osDelay>
  {
 8001386:	e7f7      	b.n	8001378 <dlm_main+0x8>

08001388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800139a:	f000 fa13 	bl	80017c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40001000 	.word	0x40001000

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <Error_Handler+0x6>

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_MspInit+0x4c>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_MspInit+0x4c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	210f      	movs	r1, #15
 80013ee:	f06f 0001 	mvn.w	r0, #1
 80013f2:	f001 f967 	bl	80026c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08e      	sub	sp, #56	; 0x38
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a53      	ldr	r2, [pc, #332]	; (8001570 <HAL_CAN_MspInit+0x16c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d142      	bne.n	80014ac <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001426:	4b53      	ldr	r3, [pc, #332]	; (8001574 <HAL_CAN_MspInit+0x170>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a51      	ldr	r2, [pc, #324]	; (8001574 <HAL_CAN_MspInit+0x170>)
 800142e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001430:	4b50      	ldr	r3, [pc, #320]	; (8001574 <HAL_CAN_MspInit+0x170>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10b      	bne.n	8001450 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001438:	4b4f      	ldr	r3, [pc, #316]	; (8001578 <HAL_CAN_MspInit+0x174>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a4e      	ldr	r2, [pc, #312]	; (8001578 <HAL_CAN_MspInit+0x174>)
 800143e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <HAL_CAN_MspInit+0x174>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	623b      	str	r3, [r7, #32]
 800144e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_CAN_MspInit+0x174>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a48      	ldr	r2, [pc, #288]	; (8001578 <HAL_CAN_MspInit+0x174>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_CAN_MspInit+0x174>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001468:	f44f 7340 	mov.w	r3, #768	; 0x300
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800147a:	2309      	movs	r3, #9
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	483d      	ldr	r0, [pc, #244]	; (800157c <HAL_CAN_MspInit+0x178>)
 8001486:	f001 f947 	bl	8002718 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2105      	movs	r1, #5
 800148e:	2014      	movs	r0, #20
 8001490:	f001 f918 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001494:	2014      	movs	r0, #20
 8001496:	f001 f931 	bl	80026fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	2015      	movs	r0, #21
 80014a0:	f001 f910 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014a4:	2015      	movs	r0, #21
 80014a6:	f001 f929 	bl	80026fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80014aa:	e05d      	b.n	8001568 <HAL_CAN_MspInit+0x164>
  else if(hcan->Instance==CAN2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a33      	ldr	r2, [pc, #204]	; (8001580 <HAL_CAN_MspInit+0x17c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d158      	bne.n	8001568 <HAL_CAN_MspInit+0x164>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_CAN_MspInit+0x174>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <HAL_CAN_MspInit+0x174>)
 80014bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_CAN_MspInit+0x174>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <HAL_CAN_MspInit+0x174>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a29      	ldr	r2, [pc, #164]	; (8001578 <HAL_CAN_MspInit+0x174>)
 80014d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_CAN_MspInit+0x174>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <HAL_CAN_MspInit+0x170>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <HAL_CAN_MspInit+0x170>)
 80014ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_CAN_MspInit+0x170>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10b      	bne.n	8001510 <HAL_CAN_MspInit+0x10c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <HAL_CAN_MspInit+0x174>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <HAL_CAN_MspInit+0x174>)
 80014fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_CAN_MspInit+0x174>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_CAN_MspInit+0x174>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4a18      	ldr	r2, [pc, #96]	; (8001578 <HAL_CAN_MspInit+0x174>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	6313      	str	r3, [r2, #48]	; 0x30
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_CAN_MspInit+0x174>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001528:	2360      	movs	r3, #96	; 0x60
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001538:	2309      	movs	r3, #9
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <HAL_CAN_MspInit+0x178>)
 8001544:	f001 f8e8 	bl	8002718 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2105      	movs	r1, #5
 800154c:	2040      	movs	r0, #64	; 0x40
 800154e:	f001 f8b9 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001552:	2040      	movs	r0, #64	; 0x40
 8001554:	f001 f8d2 	bl	80026fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2105      	movs	r1, #5
 800155c:	2041      	movs	r0, #65	; 0x41
 800155e:	f001 f8b1 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001562:	2041      	movs	r0, #65	; 0x41
 8001564:	f001 f8ca 	bl	80026fc <HAL_NVIC_EnableIRQ>
}
 8001568:	bf00      	nop
 800156a:	3738      	adds	r7, #56	; 0x38
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40006400 	.word	0x40006400
 8001574:	20000348 	.word	0x20000348
 8001578:	40023800 	.word	0x40023800
 800157c:	40020400 	.word	0x40020400
 8001580:	40006800 	.word	0x40006800

08001584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	; 0x30
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	2036      	movs	r0, #54	; 0x36
 800159a:	f001 f893 	bl	80026c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800159e:	2036      	movs	r0, #54	; 0x36
 80015a0:	f001 f8ac 	bl	80026fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <HAL_InitTick+0x9c>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <HAL_InitTick+0x9c>)
 80015aa:	f043 0310 	orr.w	r3, r3, #16
 80015ae:	6413      	str	r3, [r2, #64]	; 0x40
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_InitTick+0x9c>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015bc:	f107 0210 	add.w	r2, r7, #16
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 fed6 	bl	8003378 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015cc:	f001 fec0 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 80015d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	4a13      	ldr	r2, [pc, #76]	; (8001624 <HAL_InitTick+0xa0>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0c9b      	lsrs	r3, r3, #18
 80015dc:	3b01      	subs	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_InitTick+0xa4>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <HAL_InitTick+0xa8>)
 80015e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_InitTick+0xa4>)
 80015e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_InitTick+0xa4>)
 80015f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_InitTick+0xa4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_InitTick+0xa4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <HAL_InitTick+0xa4>)
 8001602:	f001 feeb 	bl	80033dc <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d104      	bne.n	8001616 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800160c:	4806      	ldr	r0, [pc, #24]	; (8001628 <HAL_InitTick+0xa4>)
 800160e:	f001 ff1b 	bl	8003448 <HAL_TIM_Base_Start_IT>
 8001612:	4603      	mov	r3, r0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3730      	adds	r7, #48	; 0x30
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	431bde83 	.word	0x431bde83
 8001628:	20004110 	.word	0x20004110
 800162c:	40001000 	.word	0x40001000

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <NMI_Handler+0x4>

08001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <CAN1_RX0_IRQHandler+0x10>)
 8001662:	f000 fd93 	bl	800218c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200040e8 	.word	0x200040e8

08001670 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <CAN1_RX1_IRQHandler+0x10>)
 8001676:	f000 fd89 	bl	800218c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200040e8 	.word	0x200040e8

08001684 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <TIM6_DAC_IRQHandler+0x10>)
 800168a:	f001 ff07 	bl	800349c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20004110 	.word	0x20004110

08001698 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <CAN2_RX0_IRQHandler+0x10>)
 800169e:	f000 fd75 	bl	800218c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200040b8 	.word	0x200040b8

080016ac <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <CAN2_RX1_IRQHandler+0x10>)
 80016b2:	f000 fd6b 	bl	800218c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200040b8 	.word	0x200040b8

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f004 fa78 	bl	8005be4 <__errno>
 80016f4:	4602      	mov	r2, r0
 80016f6:	230c      	movs	r3, #12
 80016f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20080000 	.word	0x20080000
 8001720:	00000400 	.word	0x00000400
 8001724:	2000034c 	.word	0x2000034c
 8001728:	20004880 	.word	0x20004880

0800172c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <SystemInit+0x28>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <SystemInit+0x28>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SystemInit+0x28>)
 8001742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001746:	609a      	str	r2, [r3, #8]
#endif
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800175c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800175e:	e003      	b.n	8001768 <LoopCopyDataInit>

08001760 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001762:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001764:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001766:	3104      	adds	r1, #4

08001768 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800176c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800176e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001770:	d3f6      	bcc.n	8001760 <CopyDataInit>
  ldr  r2, =_sbss
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001774:	e002      	b.n	800177c <LoopFillZerobss>

08001776 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001776:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001778:	f842 3b04 	str.w	r3, [r2], #4

0800177c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800177e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001780:	d3f9      	bcc.n	8001776 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001782:	f7ff ffd3 	bl	800172c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001786:	f004 fa33 	bl	8005bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178a:	f7ff fca9 	bl	80010e0 <main>
  bx  lr    
 800178e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001794:	08005e94 	.word	0x08005e94
  ldr  r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800179c:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 80017a0:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 80017a4:	20004880 	.word	0x20004880

080017a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC_IRQHandler>

080017aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f000 ff7d 	bl	80026ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff fee5 	bl	8001584 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80017ba:	f7ff fdfb 	bl	80013b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20004150 	.word	0x20004150

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20004150 	.word	0x20004150

08001804 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_SetTickFreq+0x48>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	429a      	cmp	r2, r3
 800181a:	d012      	beq.n	8001842 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_SetTickFreq+0x48>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_SetTickFreq+0x48>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_SetTickFreq+0x4c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fea9 	bl	8001584 <HAL_InitTick>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 800183c:	4a03      	ldr	r2, [pc, #12]	; (800184c <HAL_SetTickFreq+0x48>)
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000008 	.word	0x20000008
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0ed      	b.n	8001a42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fdc6 	bl	8001404 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0202 	bic.w	r2, r2, #2
 8001886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001888:	f7ff ffb0 	bl	80017ec <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800188e:	e012      	b.n	80018b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001890:	f7ff ffac 	bl	80017ec <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b0a      	cmp	r3, #10
 800189c:	d90b      	bls.n	80018b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2205      	movs	r2, #5
 80018ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0c5      	b.n	8001a42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e5      	bne.n	8001890 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d4:	f7ff ff8a 	bl	80017ec <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018da:	e012      	b.n	8001902 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018dc:	f7ff ff86 	bl	80017ec <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b0a      	cmp	r3, #10
 80018e8:	d90b      	bls.n	8001902 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2205      	movs	r2, #5
 80018fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e09f      	b.n	8001a42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0e5      	beq.n	80018dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d108      	bne.n	800192a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e007      	b.n	800193a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7e5b      	ldrb	r3, [r3, #25]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d108      	bne.n	8001954 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e007      	b.n	8001964 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001962:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7e9b      	ldrb	r3, [r3, #26]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d108      	bne.n	800197e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0220 	orr.w	r2, r2, #32
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e007      	b.n	800198e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0220 	bic.w	r2, r2, #32
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7edb      	ldrb	r3, [r3, #27]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d108      	bne.n	80019a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0210 	bic.w	r2, r2, #16
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e007      	b.n	80019b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0210 	orr.w	r2, r2, #16
 80019b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7f1b      	ldrb	r3, [r3, #28]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0208 	orr.w	r2, r2, #8
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e007      	b.n	80019e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0208 	bic.w	r2, r2, #8
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7f5b      	ldrb	r3, [r3, #29]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0204 	orr.w	r2, r2, #4
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0204 	bic.w	r2, r2, #4
 8001a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	ea42 0103 	orr.w	r1, r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a62:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a64:	7cfb      	ldrb	r3, [r7, #19]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d003      	beq.n	8001a72 <HAL_CAN_ConfigFilter+0x26>
 8001a6a:	7cfb      	ldrb	r3, [r7, #19]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	f040 80c7 	bne.w	8001c00 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a69      	ldr	r2, [pc, #420]	; (8001c1c <HAL_CAN_ConfigFilter+0x1d0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d001      	beq.n	8001a80 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001a7c:	4b68      	ldr	r3, [pc, #416]	; (8001c20 <HAL_CAN_ConfigFilter+0x1d4>)
 8001a7e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	4a63      	ldr	r2, [pc, #396]	; (8001c20 <HAL_CAN_ConfigFilter+0x1d4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d111      	bne.n	8001abc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a9e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d123      	bne.n	8001b2e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	401a      	ands	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3248      	adds	r2, #72	; 0x48
 8001b0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b24:	6979      	ldr	r1, [r7, #20]
 8001b26:	3348      	adds	r3, #72	; 0x48
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d122      	bne.n	8001b7c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3248      	adds	r2, #72	; 0x48
 8001b5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b72:	6979      	ldr	r1, [r7, #20]
 8001b74:	3348      	adds	r3, #72	; 0x48
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b96:	e007      	b.n	8001ba8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001bc2:	e007      	b.n	8001bd4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d107      	bne.n	8001bec <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bf2:	f023 0201 	bic.w	r2, r3, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e006      	b.n	8001c0e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
  }
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40003400 	.word	0x40003400
 8001c20:	40006400 	.word	0x40006400

08001c24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d12e      	bne.n	8001c96 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c50:	f7ff fdcc 	bl	80017ec <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c56:	e012      	b.n	8001c7e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c58:	f7ff fdc8 	bl	80017ec <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b0a      	cmp	r3, #10
 8001c64:	d90b      	bls.n	8001c7e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2205      	movs	r2, #5
 8001c76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e012      	b.n	8001ca4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e5      	bne.n	8001c58 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e006      	b.n	8001ca4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
  }
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d003      	beq.n	8001cd8 <HAL_CAN_AddTxMessage+0x2c>
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	f040 80b8 	bne.w	8001e48 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10a      	bne.n	8001cf8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80a0 	beq.w	8001e38 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	0e1b      	lsrs	r3, r3, #24
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d907      	bls.n	8001d18 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e09e      	b.n	8001e56 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10d      	bne.n	8001d46 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	6809      	ldr	r1, [r1, #0]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3318      	adds	r3, #24
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	440b      	add	r3, r1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e00f      	b.n	8001d66 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d50:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d56:	68f9      	ldr	r1, [r7, #12]
 8001d58:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d5a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3318      	adds	r3, #24
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	440b      	add	r3, r1
 8001d64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6819      	ldr	r1, [r3, #0]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3318      	adds	r3, #24
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	440b      	add	r3, r1
 8001d76:	3304      	adds	r3, #4
 8001d78:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	7d1b      	ldrb	r3, [r3, #20]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d111      	bne.n	8001da6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3318      	adds	r3, #24
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3304      	adds	r3, #4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	6811      	ldr	r1, [r2, #0]
 8001d96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3318      	adds	r3, #24
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	440b      	add	r3, r1
 8001da2:	3304      	adds	r3, #4
 8001da4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3307      	adds	r3, #7
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	061a      	lsls	r2, r3, #24
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3306      	adds	r3, #6
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3305      	adds	r3, #5
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	3204      	adds	r2, #4
 8001dc6:	7812      	ldrb	r2, [r2, #0]
 8001dc8:	4610      	mov	r0, r2
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	6811      	ldr	r1, [r2, #0]
 8001dce:	ea43 0200 	orr.w	r2, r3, r0
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ddc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3303      	adds	r3, #3
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	061a      	lsls	r2, r3, #24
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3302      	adds	r3, #2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	041b      	lsls	r3, r3, #16
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3301      	adds	r3, #1
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	4610      	mov	r0, r2
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	6811      	ldr	r1, [r2, #0]
 8001e04:	ea43 0200 	orr.w	r2, r3, r0
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	440b      	add	r3, r1
 8001e0e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e12:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3318      	adds	r3, #24
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	4413      	add	r3, r2
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	6811      	ldr	r1, [r2, #0]
 8001e26:	f043 0201 	orr.w	r2, r3, #1
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	440b      	add	r3, r1
 8001e32:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e00e      	b.n	8001e56 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e006      	b.n	8001e56 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
  }
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e74:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e76:	7afb      	ldrb	r3, [r7, #11]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d002      	beq.n	8001e82 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001e7c:	7afb      	ldrb	r3, [r7, #11]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d11d      	bne.n	8001ebe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d003      	beq.n	8001ef0 <HAL_CAN_GetRxMessage+0x24>
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	f040 80f3 	bne.w	80020d6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10e      	bne.n	8001f14 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d116      	bne.n	8001f32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0e7      	b.n	80020e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d107      	bne.n	8001f32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0d8      	b.n	80020e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	331b      	adds	r3, #27
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0204 	and.w	r2, r3, #4
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10c      	bne.n	8001f6a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	331b      	adds	r3, #27
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	4413      	add	r3, r2
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0d5b      	lsrs	r3, r3, #21
 8001f60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e00b      	b.n	8001f82 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	331b      	adds	r3, #27
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	4413      	add	r3, r2
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	331b      	adds	r3, #27
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0202 	and.w	r2, r3, #2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	331b      	adds	r3, #27
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 020f 	and.w	r2, r3, #15
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	331b      	adds	r3, #27
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	4413      	add	r3, r2
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	331b      	adds	r3, #27
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0a1a      	lsrs	r2, r3, #8
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0c1a      	lsrs	r2, r3, #16
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3302      	adds	r3, #2
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0e1a      	lsrs	r2, r3, #24
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	3303      	adds	r3, #3
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	4413      	add	r3, r2
 800204e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	3304      	adds	r3, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0a1a      	lsrs	r2, r3, #8
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3305      	adds	r3, #5
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	4413      	add	r3, r2
 8002080:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0c1a      	lsrs	r2, r3, #16
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	3306      	adds	r3, #6
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e1a      	lsrs	r2, r3, #24
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	3307      	adds	r3, #7
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d108      	bne.n	80020c2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0220 	orr.w	r2, r2, #32
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	e007      	b.n	80020d2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0220 	orr.w	r2, r2, #32
 80020d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e006      	b.n	80020e4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002104:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002106:	7afb      	ldrb	r3, [r7, #11]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d002      	beq.n	8002112 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d10f      	bne.n	8002132 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d106      	bne.n	8002126 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e005      	b.n	8002132 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002150:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d002      	beq.n	800215e <HAL_CAN_ActivateNotification+0x1e>
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d109      	bne.n	8002172 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6959      	ldr	r1, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e006      	b.n	8002180 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
  }
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d07c      	beq.n	80022cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d023      	beq.n	8002224 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f003 fb2c 	bl	800584c <HAL_CAN_TxMailbox0CompleteCallback>
 80021f4:	e016      	b.n	8002224 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
 8002208:	e00c      	b.n	8002224 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
 800221c:	e002      	b.n	8002224 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f003 fb35 	bl	800588e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d024      	beq.n	8002278 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002236:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f003 fb0d 	bl	8005862 <HAL_CAN_TxMailbox1CompleteCallback>
 8002248:	e016      	b.n	8002278 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
 800225c:	e00c      	b.n	8002278 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	e002      	b.n	8002278 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f003 fb16 	bl	80058a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d024      	beq.n	80022cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800228a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f003 faee 	bl	8005878 <HAL_CAN_TxMailbox2CompleteCallback>
 800229c:	e016      	b.n	80022cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
 80022b0:	e00c      	b.n	80022cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
 80022c4:	e002      	b.n	80022cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f003 faf7 	bl	80058ba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2210      	movs	r2, #16
 80022ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2208      	movs	r2, #8
 800230a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f8ee 	bl	80024ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f002 fdaa 	bl	8004e84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2210      	movs	r2, #16
 8002352:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2208      	movs	r2, #8
 800236e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f8c6 	bl	8002502 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f002 fd84 	bl	8004e9c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2210      	movs	r2, #16
 80023ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f8b0 	bl	8002516 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00b      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2208      	movs	r2, #8
 80023d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8a9 	bl	800252a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d075      	beq.n	80024ce <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d06c      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002446:	2b00      	cmp	r3, #0
 8002448:	d03d      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002450:	2b00      	cmp	r3, #0
 8002452:	d038      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800245a:	2b30      	cmp	r3, #48	; 0x30
 800245c:	d017      	beq.n	800248e <HAL_CAN_IRQHandler+0x302>
 800245e:	2b30      	cmp	r3, #48	; 0x30
 8002460:	d804      	bhi.n	800246c <HAL_CAN_IRQHandler+0x2e0>
 8002462:	2b10      	cmp	r3, #16
 8002464:	d009      	beq.n	800247a <HAL_CAN_IRQHandler+0x2ee>
 8002466:	2b20      	cmp	r3, #32
 8002468:	d00c      	beq.n	8002484 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800246a:	e024      	b.n	80024b6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800246c:	2b50      	cmp	r3, #80	; 0x50
 800246e:	d018      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x316>
 8002470:	2b60      	cmp	r3, #96	; 0x60
 8002472:	d01b      	beq.n	80024ac <HAL_CAN_IRQHandler+0x320>
 8002474:	2b40      	cmp	r3, #64	; 0x40
 8002476:	d00f      	beq.n	8002498 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002478:	e01d      	b.n	80024b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002482:	e018      	b.n	80024b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	f043 0310 	orr.w	r3, r3, #16
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800248c:	e013      	b.n	80024b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	f043 0320 	orr.w	r3, r3, #32
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002496:	e00e      	b.n	80024b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024a0:	e009      	b.n	80024b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024aa:	e004      	b.n	80024b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2204      	movs	r2, #4
 80024cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f82c 	bl	800253e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024e6:	bf00      	nop
 80024e8:	3728      	adds	r7, #40	; 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	4313      	orrs	r3, r2
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	05fa0000 	.word	0x05fa0000

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ff4c 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d6:	f7ff ff61 	bl	800259c <__NVIC_GetPriorityGrouping>
 80026da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	6978      	ldr	r0, [r7, #20]
 80026e2:	f7ff ffb1 	bl	8002648 <NVIC_EncodePriority>
 80026e6:	4602      	mov	r2, r0
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ff80 	bl	80025f4 <__NVIC_SetPriority>
}
 80026f4:	bf00      	nop
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff54 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e175      	b.n	8002a24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 8164 	bne.w	8002a1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d00b      	beq.n	8002776 <HAL_GPIO_Init+0x5e>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276a:	2b11      	cmp	r3, #17
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b12      	cmp	r3, #18
 8002774:	d130      	bne.n	80027d8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0201 	and.w	r2, r3, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x100>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b12      	cmp	r3, #18
 8002816:	d123      	bne.n	8002860 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	69b9      	ldr	r1, [r7, #24]
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80be 	beq.w	8002a1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_GPIO_Init+0x320>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a64      	ldr	r2, [pc, #400]	; (8002a38 <HAL_GPIO_Init+0x320>)
 80028a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_GPIO_Init+0x320>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028ba:	4a60      	ldr	r2, [pc, #384]	; (8002a3c <HAL_GPIO_Init+0x324>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	3302      	adds	r3, #2
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <HAL_GPIO_Init+0x328>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d037      	beq.n	8002956 <HAL_GPIO_Init+0x23e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a56      	ldr	r2, [pc, #344]	; (8002a44 <HAL_GPIO_Init+0x32c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d031      	beq.n	8002952 <HAL_GPIO_Init+0x23a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a55      	ldr	r2, [pc, #340]	; (8002a48 <HAL_GPIO_Init+0x330>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02b      	beq.n	800294e <HAL_GPIO_Init+0x236>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a54      	ldr	r2, [pc, #336]	; (8002a4c <HAL_GPIO_Init+0x334>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d025      	beq.n	800294a <HAL_GPIO_Init+0x232>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a53      	ldr	r2, [pc, #332]	; (8002a50 <HAL_GPIO_Init+0x338>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <HAL_GPIO_Init+0x22e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_GPIO_Init+0x33c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d019      	beq.n	8002942 <HAL_GPIO_Init+0x22a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a51      	ldr	r2, [pc, #324]	; (8002a58 <HAL_GPIO_Init+0x340>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0x226>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_GPIO_Init+0x344>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00d      	beq.n	800293a <HAL_GPIO_Init+0x222>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	; (8002a60 <HAL_GPIO_Init+0x348>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <HAL_GPIO_Init+0x21e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4e      	ldr	r2, [pc, #312]	; (8002a64 <HAL_GPIO_Init+0x34c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_GPIO_Init+0x21a>
 800292e:	2309      	movs	r3, #9
 8002930:	e012      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002932:	230a      	movs	r3, #10
 8002934:	e010      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002936:	2308      	movs	r3, #8
 8002938:	e00e      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800293a:	2307      	movs	r3, #7
 800293c:	e00c      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800293e:	2306      	movs	r3, #6
 8002940:	e00a      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002942:	2305      	movs	r3, #5
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002946:	2304      	movs	r3, #4
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002956:	2300      	movs	r3, #0
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002968:	4934      	ldr	r1, [pc, #208]	; (8002a3c <HAL_GPIO_Init+0x324>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002976:	4b3c      	ldr	r3, [pc, #240]	; (8002a68 <HAL_GPIO_Init+0x350>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800299a:	4a33      	ldr	r2, [pc, #204]	; (8002a68 <HAL_GPIO_Init+0x350>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_GPIO_Init+0x350>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c4:	4a28      	ldr	r2, [pc, #160]	; (8002a68 <HAL_GPIO_Init+0x350>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_GPIO_Init+0x350>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ee:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <HAL_GPIO_Init+0x350>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <HAL_GPIO_Init+0x350>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a18:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <HAL_GPIO_Init+0x350>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f67f ae86 	bls.w	8002738 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3724      	adds	r7, #36	; 0x24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40013800 	.word	0x40013800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40021400 	.word	0x40021400
 8002a58:	40021800 	.word	0x40021800
 8002a5c:	40021c00 	.word	0x40021c00
 8002a60:	40022000 	.word	0x40022000
 8002a64:	40022400 	.word	0x40022400
 8002a68:	40013c00 	.word	0x40013c00

08002a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a7c:	787b      	ldrb	r3, [r7, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a88:	e003      	b.n	8002a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	041a      	lsls	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	619a      	str	r2, [r3, #24]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e29b      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8087 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac4:	4b96      	ldr	r3, [pc, #600]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d00c      	beq.n	8002aea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad0:	4b93      	ldr	r3, [pc, #588]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d112      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62>
 8002adc:	4b90      	ldr	r3, [pc, #576]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae8:	d10b      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aea:	4b8d      	ldr	r3, [pc, #564]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d06c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x130>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d168      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e275      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x7a>
 8002b0c:	4b84      	ldr	r3, [pc, #528]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a83      	ldr	r2, [pc, #524]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e02e      	b.n	8002b78 <HAL_RCC_OscConfig+0xd8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x9c>
 8002b22:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7e      	ldr	r2, [pc, #504]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b7c      	ldr	r3, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7b      	ldr	r2, [pc, #492]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e01d      	b.n	8002b78 <HAL_RCC_OscConfig+0xd8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0xc0>
 8002b46:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a75      	ldr	r2, [pc, #468]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a72      	ldr	r2, [pc, #456]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0xd8>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6e      	ldr	r2, [pc, #440]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b6c      	ldr	r3, [pc, #432]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6b      	ldr	r2, [pc, #428]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fe34 	bl	80017ec <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fe fe30 	bl	80017ec <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e229      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0xe8>
 8002ba6:	e014      	b.n	8002bd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fe20 	bl	80017ec <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fe fe1c 	bl	80017ec <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e215      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x110>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d069      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bde:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bea:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d11c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x190>
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_RCC_OscConfig+0x17a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e1e9      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	493d      	ldr	r1, [pc, #244]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	e040      	b.n	8002cb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d023      	beq.n	8002c80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a38      	ldr	r2, [pc, #224]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fdd2 	bl	80017ec <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fdce 	bl	80017ec <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1c7      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4929      	ldr	r1, [pc, #164]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
 8002c7e:	e018      	b.n	8002cb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fdae 	bl	80017ec <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe fdaa 	bl	80017ec <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1a3      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d038      	beq.n	8002d30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d019      	beq.n	8002cfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cca:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fd8b 	bl	80017ec <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cda:	f7fe fd87 	bl	80017ec <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e180      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x23a>
 8002cf8:	e01a      	b.n	8002d30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe fd71 	bl	80017ec <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0e:	f7fe fd6d 	bl	80017ec <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d903      	bls.n	8002d24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e166      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
 8002d20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b92      	ldr	r3, [pc, #584]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ee      	bne.n	8002d0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a4 	beq.w	8002e86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3e:	4b8c      	ldr	r3, [pc, #560]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10d      	bne.n	8002d66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	4b89      	ldr	r3, [pc, #548]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4a88      	ldr	r2, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
 8002d56:	4b86      	ldr	r3, [pc, #536]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d66:	4b83      	ldr	r3, [pc, #524]	; (8002f74 <HAL_RCC_OscConfig+0x4d4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d118      	bne.n	8002da4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d72:	4b80      	ldr	r3, [pc, #512]	; (8002f74 <HAL_RCC_OscConfig+0x4d4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7f      	ldr	r2, [pc, #508]	; (8002f74 <HAL_RCC_OscConfig+0x4d4>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fd35 	bl	80017ec <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d86:	f7fe fd31 	bl	80017ec <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e12a      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d98:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCC_OscConfig+0x4d4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x31a>
 8002dac:	4b70      	ldr	r3, [pc, #448]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a6f      	ldr	r2, [pc, #444]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
 8002db8:	e02d      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x33c>
 8002dc2:	4b6b      	ldr	r3, [pc, #428]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a6a      	ldr	r2, [pc, #424]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dce:	4b68      	ldr	r3, [pc, #416]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a67      	ldr	r2, [pc, #412]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	e01c      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d10c      	bne.n	8002dfe <HAL_RCC_OscConfig+0x35e>
 8002de4:	4b62      	ldr	r3, [pc, #392]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a61      	ldr	r2, [pc, #388]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dea:	f043 0304 	orr.w	r3, r3, #4
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	4b5f      	ldr	r3, [pc, #380]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a5e      	ldr	r2, [pc, #376]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	e00b      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
 8002dfe:	4b5c      	ldr	r3, [pc, #368]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	4a5b      	ldr	r2, [pc, #364]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0a:	4b59      	ldr	r3, [pc, #356]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d015      	beq.n	8002e4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe fce5 	bl	80017ec <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7fe fce1 	bl	80017ec <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0d8      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3c:	4b4c      	ldr	r3, [pc, #304]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ee      	beq.n	8002e26 <HAL_RCC_OscConfig+0x386>
 8002e48:	e014      	b.n	8002e74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fccf 	bl	80017ec <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe fccb 	bl	80017ec <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0c2      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e68:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ee      	bne.n	8002e52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d105      	bne.n	8002e86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7a:	4b3d      	ldr	r3, [pc, #244]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80ae 	beq.w	8002fec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e90:	4b37      	ldr	r3, [pc, #220]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d06d      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d14b      	bne.n	8002f3c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea4:	4b32      	ldr	r3, [pc, #200]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a31      	ldr	r2, [pc, #196]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fc9c 	bl	80017ec <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fc98 	bl	80017ec <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e091      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	071b      	lsls	r3, r3, #28
 8002f02:	491b      	ldr	r1, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fc6a 	bl	80017ec <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fc66 	bl	80017ec <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e05f      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x47c>
 8002f3a:	e057      	b.n	8002fec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fc50 	bl	80017ec <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fc4c 	bl	80017ec <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e045      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4b0>
 8002f6e:	e03d      	b.n	8002fec <HAL_RCC_OscConfig+0x54c>
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f78:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <HAL_RCC_OscConfig+0x558>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d030      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d129      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d122      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa8:	4013      	ands	r3, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d119      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d10f      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800

08002ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0d0      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d910      	bls.n	8003044 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 020f 	bic.w	r2, r3, #15
 800302a:	4965      	ldr	r1, [pc, #404]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800305c:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003066:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003074:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800307e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003080:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	494d      	ldr	r1, [pc, #308]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d040      	beq.n	8003120 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d115      	bne.n	80030de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e073      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06b      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4936      	ldr	r1, [pc, #216]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f0:	f7fe fb7c 	bl	80017ec <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fe fb78 	bl	80017ec <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e053      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d210      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 020f 	bic.w	r2, r3, #15
 8003136:	4922      	ldr	r1, [pc, #136]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e032      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4916      	ldr	r1, [pc, #88]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490e      	ldr	r1, [pc, #56]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800318e:	f000 f821 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003192:	4601      	mov	r1, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <HAL_RCC_ClockConfig+0x1cc>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	fa21 f303 	lsr.w	r3, r1, r3
 80031a6:	4a09      	ldr	r2, [pc, #36]	; (80031cc <HAL_RCC_ClockConfig+0x1d0>)
 80031a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_ClockConfig+0x1d4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe f9e8 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023c00 	.word	0x40023c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08005e6c 	.word	0x08005e6c
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031da:	2200      	movs	r2, #0
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	60fa      	str	r2, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	603a      	str	r2, [r7, #0]
  uint32_t sysclockfreq = 0;
 80031e6:	2200      	movs	r2, #0
 80031e8:	60ba      	str	r2, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ea:	4a50      	ldr	r2, [pc, #320]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 80031ec:	6892      	ldr	r2, [r2, #8]
 80031ee:	f002 020c 	and.w	r2, r2, #12
 80031f2:	2a04      	cmp	r2, #4
 80031f4:	d007      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x32>
 80031f6:	2a08      	cmp	r2, #8
 80031f8:	d008      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x38>
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	f040 808e 	bne.w	800331c <HAL_RCC_GetSysClockFreq+0x148>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b4b      	ldr	r3, [pc, #300]	; (8003330 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003202:	60bb      	str	r3, [r7, #8]
      break;
 8003204:	e08d      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x14e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003206:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 8003208:	60bb      	str	r3, [r7, #8]
      break;
 800320a:	e08a      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x14e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4a47      	ldr	r2, [pc, #284]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 800320e:	6852      	ldr	r2, [r2, #4]
 8003210:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003214:	607a      	str	r2, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003216:	4a45      	ldr	r2, [pc, #276]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 8003218:	6852      	ldr	r2, [r2, #4]
 800321a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800321e:	2a00      	cmp	r2, #0
 8003220:	d024      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003222:	4a42      	ldr	r2, [pc, #264]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 8003224:	6852      	ldr	r2, [r2, #4]
 8003226:	0992      	lsrs	r2, r2, #6
 8003228:	4611      	mov	r1, r2
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003232:	f04f 0600 	mov.w	r6, #0
 8003236:	ea01 0305 	and.w	r3, r1, r5
 800323a:	ea02 0406 	and.w	r4, r2, r6
 800323e:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 8003240:	fb02 f104 	mul.w	r1, r2, r4
 8003244:	2200      	movs	r2, #0
 8003246:	fb02 f203 	mul.w	r2, r2, r3
 800324a:	440a      	add	r2, r1
 800324c:	4939      	ldr	r1, [pc, #228]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 800324e:	fba3 0101 	umull	r0, r1, r3, r1
 8003252:	1853      	adds	r3, r2, r1
 8003254:	4619      	mov	r1, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f04f 0400 	mov.w	r4, #0
 800325c:	461a      	mov	r2, r3
 800325e:	4623      	mov	r3, r4
 8003260:	f7fd f9aa 	bl	80005b8 <__aeabi_uldivmod>
 8003264:	4603      	mov	r3, r0
 8003266:	460c      	mov	r4, r1
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e049      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x12c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326c:	4b2f      	ldr	r3, [pc, #188]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	f04f 0400 	mov.w	r4, #0
 8003276:	f240 11ff 	movw	r1, #511	; 0x1ff
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	ea03 0501 	and.w	r5, r3, r1
 8003282:	ea04 0602 	and.w	r6, r4, r2
 8003286:	4629      	mov	r1, r5
 8003288:	4632      	mov	r2, r6
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	f04f 0400 	mov.w	r4, #0
 8003292:	0154      	lsls	r4, r2, #5
 8003294:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003298:	014b      	lsls	r3, r1, #5
 800329a:	4619      	mov	r1, r3
 800329c:	4622      	mov	r2, r4
 800329e:	1b49      	subs	r1, r1, r5
 80032a0:	eb62 0206 	sbc.w	r2, r2, r6
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	0194      	lsls	r4, r2, #6
 80032ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032b2:	018b      	lsls	r3, r1, #6
 80032b4:	1a5b      	subs	r3, r3, r1
 80032b6:	eb64 0402 	sbc.w	r4, r4, r2
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	00e2      	lsls	r2, r4, #3
 80032c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032c8:	00d9      	lsls	r1, r3, #3
 80032ca:	460b      	mov	r3, r1
 80032cc:	4614      	mov	r4, r2
 80032ce:	195b      	adds	r3, r3, r5
 80032d0:	eb46 0404 	adc.w	r4, r6, r4
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	02a2      	lsls	r2, r4, #10
 80032de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032e2:	0299      	lsls	r1, r3, #10
 80032e4:	460b      	mov	r3, r1
 80032e6:	4614      	mov	r4, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	4621      	mov	r1, r4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f04f 0400 	mov.w	r4, #0
 80032f2:	461a      	mov	r2, r3
 80032f4:	4623      	mov	r3, r4
 80032f6:	f7fd f95f 	bl	80005b8 <__aeabi_uldivmod>
 80032fa:	4603      	mov	r3, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <HAL_RCC_GetSysClockFreq+0x158>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	3301      	adds	r3, #1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	60bb      	str	r3, [r7, #8]
      break;
 800331a:	e002      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x14e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <HAL_RCC_GetSysClockFreq+0x15c>)
 800331e:	60bb      	str	r3, [r7, #8]
      break;
 8003320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003322:	68bb      	ldr	r3, [r7, #8]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	00f42400 	.word	0x00f42400
 8003334:	017d7840 	.word	0x017d7840

08003338 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_RCC_GetHCLKFreq+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000000 	.word	0x20000000

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003354:	f7ff fff0 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003358:	4601      	mov	r1, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	0a9b      	lsrs	r3, r3, #10
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4a03      	ldr	r2, [pc, #12]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003366:	5cd3      	ldrb	r3, [r2, r3]
 8003368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	08005e7c 	.word	0x08005e7c

08003378 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	220f      	movs	r2, #15
 8003386:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCC_GetClockConfig+0x5c>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0203 	and.w	r2, r3, #3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_RCC_GetClockConfig+0x5c>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <HAL_RCC_GetClockConfig+0x5c>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_GetClockConfig+0x5c>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	08db      	lsrs	r3, r3, #3
 80033b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCC_GetClockConfig+0x60>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 020f 	and.w	r2, r3, #15
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	601a      	str	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40023c00 	.word	0x40023c00

080033dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e01d      	b.n	800342a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f815 	bl	8003432 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f000 f986 	bl	800372c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <HAL_TIM_Base_Start_IT+0x50>)
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b06      	cmp	r3, #6
 8003470:	d00b      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x42>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003478:	d007      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	00010007 	.word	0x00010007

0800349c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d11b      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0202 	mvn.w	r2, #2
 80034c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f905 	bl	80036ee <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8f7 	bl	80036da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f908 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b04      	cmp	r3, #4
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0204 	mvn.w	r2, #4
 800351c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8db 	bl	80036ee <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8cd 	bl	80036da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f8de 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b08      	cmp	r3, #8
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b08      	cmp	r3, #8
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0208 	mvn.w	r2, #8
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2204      	movs	r2, #4
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8b1 	bl	80036ee <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8a3 	bl	80036da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f8b4 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2208      	movs	r2, #8
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f887 	bl	80036ee <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f879 	bl	80036da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f88a 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10e      	bne.n	8003620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0201 	mvn.w	r2, #1
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd feb4 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d10e      	bne.n	800364c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b80      	cmp	r3, #128	; 0x80
 800363a:	d107      	bne.n	800364c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f91a 	bl	8003880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365a:	d10e      	bne.n	800367a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d107      	bne.n	800367a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f90d 	bl	8003894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d10e      	bne.n	80036a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d107      	bne.n	80036a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800369e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f838 	bl	8003716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d10e      	bne.n	80036d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d107      	bne.n	80036d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f06f 0220 	mvn.w	r2, #32
 80036ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f8cd 	bl	800386c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a40      	ldr	r2, [pc, #256]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d00f      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3d      	ldr	r2, [pc, #244]	; (8003844 <TIM_Base_SetConfig+0x118>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00b      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3c      	ldr	r2, [pc, #240]	; (8003848 <TIM_Base_SetConfig+0x11c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3b      	ldr	r2, [pc, #236]	; (800384c <TIM_Base_SetConfig+0x120>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3a      	ldr	r2, [pc, #232]	; (8003850 <TIM_Base_SetConfig+0x124>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d108      	bne.n	800377e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2f      	ldr	r2, [pc, #188]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d02b      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378c:	d027      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <TIM_Base_SetConfig+0x118>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d023      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <TIM_Base_SetConfig+0x11c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01f      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <TIM_Base_SetConfig+0x120>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01b      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a29      	ldr	r2, [pc, #164]	; (8003850 <TIM_Base_SetConfig+0x124>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d017      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a28      	ldr	r2, [pc, #160]	; (8003854 <TIM_Base_SetConfig+0x128>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a27      	ldr	r2, [pc, #156]	; (8003858 <TIM_Base_SetConfig+0x12c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00f      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a26      	ldr	r2, [pc, #152]	; (800385c <TIM_Base_SetConfig+0x130>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00b      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a25      	ldr	r2, [pc, #148]	; (8003860 <TIM_Base_SetConfig+0x134>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a24      	ldr	r2, [pc, #144]	; (8003864 <TIM_Base_SetConfig+0x138>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d003      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a23      	ldr	r2, [pc, #140]	; (8003868 <TIM_Base_SetConfig+0x13c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d108      	bne.n	80037f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_Base_SetConfig+0xf8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <TIM_Base_SetConfig+0x124>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d103      	bne.n	800382c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	615a      	str	r2, [r3, #20]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40010000 	.word	0x40010000
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40010400 	.word	0x40010400
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800
 8003860:	40001800 	.word	0x40001800
 8003864:	40001c00 	.word	0x40001c00
 8003868:	40002000 	.word	0x40002000

0800386c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <makeFreeRtosPriority>:
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	80fb      	strh	r3, [r7, #6]
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ba:	2b84      	cmp	r3, #132	; 0x84
 80038bc:	d005      	beq.n	80038ca <makeFreeRtosPriority+0x22>
 80038be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4413      	add	r3, r2
 80038c6:	3303      	adds	r3, #3
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <osKernelStart>:
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f000 fae4 	bl	8003ea8 <vTaskStartScheduler>
 80038e0:	2300      	movs	r3, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <osThreadCreate>:
 80038e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e8:	b089      	sub	sp, #36	; 0x24
 80038ea:	af04      	add	r7, sp, #16
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <osThreadCreate+0x54>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01c      	beq.n	800393a <osThreadCreate+0x54>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685c      	ldr	r4, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681d      	ldr	r5, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691e      	ldr	r6, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ffc8 	bl	80038a8 <makeFreeRtosPriority>
 8003918:	4601      	mov	r1, r0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6992      	ldr	r2, [r2, #24]
 8003922:	9202      	str	r2, [sp, #8]
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	9100      	str	r1, [sp, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	4632      	mov	r2, r6
 800392c:	4629      	mov	r1, r5
 800392e:	4620      	mov	r0, r4
 8003930:	f000 f8ed 	bl	8003b0e <xTaskCreateStatic>
 8003934:	4603      	mov	r3, r0
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e01c      	b.n	8003974 <osThreadCreate+0x8e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685c      	ldr	r4, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681d      	ldr	r5, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	b29e      	uxth	r6, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ffaa 	bl	80038a8 <makeFreeRtosPriority>
 8003954:	4602      	mov	r2, r0
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	9200      	str	r2, [sp, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	4632      	mov	r2, r6
 8003962:	4629      	mov	r1, r5
 8003964:	4620      	mov	r0, r4
 8003966:	f000 f932 	bl	8003bce <xTaskCreate>
 800396a:	4603      	mov	r3, r0
 800396c:	2b01      	cmp	r3, #1
 800396e:	d001      	beq.n	8003974 <osThreadCreate+0x8e>
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <osThreadCreate+0x90>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800397e <osDelay>:
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <osDelay+0x16>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	e000      	b.n	8003996 <osDelay+0x18>
 8003994:	2301      	movs	r3, #1
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fa50 	bl	8003e3c <vTaskDelay>
 800399c:	2300      	movs	r3, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f103 0208 	add.w	r2, r3, #8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f103 0208 	add.w	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f103 0208 	add.w	r2, r3, #8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a5e:	d103      	bne.n	8003a68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	e00c      	b.n	8003a82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e002      	b.n	8003a76 <vListInsert+0x2e>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d2f6      	bcs.n	8003a70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6892      	ldr	r2, [r2, #8]
 8003ad0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6852      	ldr	r2, [r2, #4]
 8003ada:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d103      	bne.n	8003aee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	1e5a      	subs	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b08e      	sub	sp, #56	; 0x38
 8003b12:	af04      	add	r7, sp, #16
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10b      	bne.n	8003b3a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	b672      	cpsid	i
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	b662      	cpsie	i
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	e7fe      	b.n	8003b38 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10b      	bne.n	8003b58 <xTaskCreateStatic+0x4a>
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	b672      	cpsid	i
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	b662      	cpsie	i
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	e7fe      	b.n	8003b56 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b58:	2354      	movs	r3, #84	; 0x54
 8003b5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b54      	cmp	r3, #84	; 0x54
 8003b60:	d00b      	beq.n	8003b7a <xTaskCreateStatic+0x6c>
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	b672      	cpsid	i
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	b662      	cpsie	i
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e7fe      	b.n	8003b78 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01e      	beq.n	8003bc0 <xTaskCreateStatic+0xb2>
 8003b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01b      	beq.n	8003bc0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	9303      	str	r3, [sp, #12]
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	9302      	str	r3, [sp, #8]
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f850 	bl	8003c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bba:	f000 f8d5 	bl	8003d68 <prvAddNewTaskToReadyList>
 8003bbe:	e001      	b.n	8003bc4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bc4:	697b      	ldr	r3, [r7, #20]
	}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3728      	adds	r7, #40	; 0x28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b08c      	sub	sp, #48	; 0x30
 8003bd2:	af04      	add	r7, sp, #16
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fea8 	bl	8004938 <pvPortMalloc>
 8003be8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bf0:	2054      	movs	r0, #84	; 0x54
 8003bf2:	f000 fea1 	bl	8004938 <pvPortMalloc>
 8003bf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
 8003c04:	e005      	b.n	8003c12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c06:	6978      	ldr	r0, [r7, #20]
 8003c08:	f000 ff5e 	bl	8004ac8 <vPortFree>
 8003c0c:	e001      	b.n	8003c12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d017      	beq.n	8003c48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c20:	88fa      	ldrh	r2, [r7, #6]
 8003c22:	2300      	movs	r3, #0
 8003c24:	9303      	str	r3, [sp, #12]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	9302      	str	r3, [sp, #8]
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f80e 	bl	8003c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c3c:	69f8      	ldr	r0, [r7, #28]
 8003c3e:	f000 f893 	bl	8003d68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	e002      	b.n	8003c4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
	}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003c70:	440b      	add	r3, r1
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	f023 0307 	bic.w	r3, r3, #7
 8003c7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <prvInitialiseNewTask+0x4a>
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	b672      	cpsid	i
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	b662      	cpsie	i
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e7fe      	b.n	8003ca0 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01f      	beq.n	8003ce8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	e012      	b.n	8003cd4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	7819      	ldrb	r1, [r3, #0]
 8003cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	3334      	adds	r3, #52	; 0x34
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	d9e9      	bls.n	8003cae <prvInitialiseNewTask+0x56>
 8003cda:	e000      	b.n	8003cde <prvInitialiseNewTask+0x86>
			{
				break;
 8003cdc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ce6:	e003      	b.n	8003cf0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	2b06      	cmp	r3, #6
 8003cf4:	d901      	bls.n	8003cfa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cf6:	2306      	movs	r3, #6
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d04:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	2200      	movs	r2, #0
 8003d0a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fe68 	bl	80039e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	3318      	adds	r3, #24
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fe63 	bl	80039e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	f1c3 0207 	rsb	r2, r3, #7
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	2200      	movs	r2, #0
 8003d3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	69b8      	ldr	r0, [r7, #24]
 8003d4a:	f000 fc0b 	bl	8004564 <pxPortInitialiseStack>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d60:	bf00      	nop
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d70:	f000 fd02 	bl	8004778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <prvAddNewTaskToReadyList+0xb8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	4a29      	ldr	r2, [pc, #164]	; (8003e20 <prvAddNewTaskToReadyList+0xb8>)
 8003d7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d7e:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <prvAddNewTaskToReadyList+0xbc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d86:	4a27      	ldr	r2, [pc, #156]	; (8003e24 <prvAddNewTaskToReadyList+0xbc>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <prvAddNewTaskToReadyList+0xb8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d110      	bne.n	8003db6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d94:	f000 fac4 	bl	8004320 <prvInitialiseTaskLists>
 8003d98:	e00d      	b.n	8003db6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <prvAddNewTaskToReadyList+0xc0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <prvAddNewTaskToReadyList+0xbc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d802      	bhi.n	8003db6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003db0:	4a1c      	ldr	r2, [pc, #112]	; (8003e24 <prvAddNewTaskToReadyList+0xbc>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003db6:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <prvAddNewTaskToReadyList+0xc4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <prvAddNewTaskToReadyList+0xc4>)
 8003dbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <prvAddNewTaskToReadyList+0xc8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <prvAddNewTaskToReadyList+0xc8>)
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <prvAddNewTaskToReadyList+0xcc>)
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7ff fe09 	bl	8003a00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dee:	f000 fcf5 	bl	80047dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <prvAddNewTaskToReadyList+0xc0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00e      	beq.n	8003e18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <prvAddNewTaskToReadyList+0xbc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d207      	bcs.n	8003e18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <prvAddNewTaskToReadyList+0xd0>)
 8003e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000450 	.word	0x20000450
 8003e24:	20000350 	.word	0x20000350
 8003e28:	2000045c 	.word	0x2000045c
 8003e2c:	2000046c 	.word	0x2000046c
 8003e30:	20000458 	.word	0x20000458
 8003e34:	20000354 	.word	0x20000354
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d018      	beq.n	8003e80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e4e:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <vTaskDelay+0x64>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <vTaskDelay+0x32>
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	b672      	cpsid	i
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	b662      	cpsie	i
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	e7fe      	b.n	8003e6c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003e6e:	f000 f87d 	bl	8003f6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e72:	2100      	movs	r1, #0
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fb0f 	bl	8004498 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e7a:	f000 f885 	bl	8003f88 <xTaskResumeAll>
 8003e7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d107      	bne.n	8003e96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <vTaskDelay+0x68>)
 8003e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000478 	.word	0x20000478
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003eb6:	463a      	mov	r2, r7
 8003eb8:	1d39      	adds	r1, r7, #4
 8003eba:	f107 0308 	add.w	r3, r7, #8
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fd f8f4 	bl	80010ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	9202      	str	r2, [sp, #8]
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	460a      	mov	r2, r1
 8003ed6:	491f      	ldr	r1, [pc, #124]	; (8003f54 <vTaskStartScheduler+0xac>)
 8003ed8:	481f      	ldr	r0, [pc, #124]	; (8003f58 <vTaskStartScheduler+0xb0>)
 8003eda:	f7ff fe18 	bl	8003b0e <xTaskCreateStatic>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <vTaskStartScheduler+0xb4>)
 8003ee2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <vTaskStartScheduler+0xb4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003eec:	2301      	movs	r3, #1
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e001      	b.n	8003ef6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d117      	bne.n	8003f2c <vTaskStartScheduler+0x84>
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	b672      	cpsid	i
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	b662      	cpsie	i
 8003f10:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <vTaskStartScheduler+0xb8>)
 8003f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f1a:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <vTaskStartScheduler+0xbc>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <vTaskStartScheduler+0xc0>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f26:	f000 fbab 	bl	8004680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f2a:	e00f      	b.n	8003f4c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f32:	d10b      	bne.n	8003f4c <vTaskStartScheduler+0xa4>
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	b672      	cpsid	i
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	b662      	cpsie	i
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	e7fe      	b.n	8003f4a <vTaskStartScheduler+0xa2>
}
 8003f4c:	bf00      	nop
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	08005e64 	.word	0x08005e64
 8003f58:	080042f1 	.word	0x080042f1
 8003f5c:	20000474 	.word	0x20000474
 8003f60:	20000470 	.word	0x20000470
 8003f64:	2000045c 	.word	0x2000045c
 8003f68:	20000454 	.word	0x20000454

08003f6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <vTaskSuspendAll+0x18>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	4a03      	ldr	r2, [pc, #12]	; (8003f84 <vTaskSuspendAll+0x18>)
 8003f78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003f7a:	bf00      	nop
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	20000478 	.word	0x20000478

08003f88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f96:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <xTaskResumeAll+0x118>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <xTaskResumeAll+0x2e>
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	b672      	cpsid	i
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	b662      	cpsie	i
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	e7fe      	b.n	8003fb4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fb6:	f000 fbdf 	bl	8004778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fba:	4b39      	ldr	r3, [pc, #228]	; (80040a0 <xTaskResumeAll+0x118>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	4a37      	ldr	r2, [pc, #220]	; (80040a0 <xTaskResumeAll+0x118>)
 8003fc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc4:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <xTaskResumeAll+0x118>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d161      	bne.n	8004090 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fcc:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <xTaskResumeAll+0x11c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d05d      	beq.n	8004090 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fd4:	e02e      	b.n	8004034 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd6:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <xTaskResumeAll+0x120>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fd69 	bl	8003aba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fd64 	bl	8003aba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <xTaskResumeAll+0x124>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	4a2a      	ldr	r2, [pc, #168]	; (80040ac <xTaskResumeAll+0x124>)
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <xTaskResumeAll+0x128>)
 8004012:	441a      	add	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f7ff fcf0 	bl	8003a00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <xTaskResumeAll+0x12c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <xTaskResumeAll+0x130>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004034:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <xTaskResumeAll+0x120>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1cc      	bne.n	8003fd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004042:	f000 fa09 	bl	8004458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <xTaskResumeAll+0x134>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d010      	beq.n	8004074 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004052:	f000 f837 	bl	80040c4 <xTaskIncrementTick>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <xTaskResumeAll+0x130>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3b01      	subs	r3, #1
 8004066:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f1      	bne.n	8004052 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800406e:	4b13      	ldr	r3, [pc, #76]	; (80040bc <xTaskResumeAll+0x134>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004074:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <xTaskResumeAll+0x130>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800407c:	2301      	movs	r3, #1
 800407e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <xTaskResumeAll+0x138>)
 8004082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004090:	f000 fba4 	bl	80047dc <vPortExitCritical>

	return xAlreadyYielded;
 8004094:	68bb      	ldr	r3, [r7, #8]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000478 	.word	0x20000478
 80040a4:	20000450 	.word	0x20000450
 80040a8:	20000410 	.word	0x20000410
 80040ac:	20000458 	.word	0x20000458
 80040b0:	20000354 	.word	0x20000354
 80040b4:	20000350 	.word	0x20000350
 80040b8:	20000464 	.word	0x20000464
 80040bc:	20000460 	.word	0x20000460
 80040c0:	e000ed04 	.word	0xe000ed04

080040c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ce:	4b4f      	ldr	r3, [pc, #316]	; (800420c <xTaskIncrementTick+0x148>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f040 8089 	bne.w	80041ea <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040d8:	4b4d      	ldr	r3, [pc, #308]	; (8004210 <xTaskIncrementTick+0x14c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040e0:	4a4b      	ldr	r2, [pc, #300]	; (8004210 <xTaskIncrementTick+0x14c>)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d121      	bne.n	8004130 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80040ec:	4b49      	ldr	r3, [pc, #292]	; (8004214 <xTaskIncrementTick+0x150>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <xTaskIncrementTick+0x4a>
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	b672      	cpsid	i
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	b662      	cpsie	i
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	e7fe      	b.n	800410c <xTaskIncrementTick+0x48>
 800410e:	4b41      	ldr	r3, [pc, #260]	; (8004214 <xTaskIncrementTick+0x150>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	4b40      	ldr	r3, [pc, #256]	; (8004218 <xTaskIncrementTick+0x154>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a3e      	ldr	r2, [pc, #248]	; (8004214 <xTaskIncrementTick+0x150>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4a3e      	ldr	r2, [pc, #248]	; (8004218 <xTaskIncrementTick+0x154>)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	4b3e      	ldr	r3, [pc, #248]	; (800421c <xTaskIncrementTick+0x158>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3301      	adds	r3, #1
 8004128:	4a3c      	ldr	r2, [pc, #240]	; (800421c <xTaskIncrementTick+0x158>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	f000 f994 	bl	8004458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004130:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <xTaskIncrementTick+0x15c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	429a      	cmp	r2, r3
 8004138:	d348      	bcc.n	80041cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800413a:	4b36      	ldr	r3, [pc, #216]	; (8004214 <xTaskIncrementTick+0x150>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004144:	4b36      	ldr	r3, [pc, #216]	; (8004220 <xTaskIncrementTick+0x15c>)
 8004146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800414a:	601a      	str	r2, [r3, #0]
					break;
 800414c:	e03e      	b.n	80041cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <xTaskIncrementTick+0x150>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	d203      	bcs.n	800416e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004166:	4a2e      	ldr	r2, [pc, #184]	; (8004220 <xTaskIncrementTick+0x15c>)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800416c:	e02e      	b.n	80041cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	3304      	adds	r3, #4
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fca1 	bl	8003aba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3318      	adds	r3, #24
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fc98 	bl	8003aba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	2201      	movs	r2, #1
 8004190:	409a      	lsls	r2, r3
 8004192:	4b24      	ldr	r3, [pc, #144]	; (8004224 <xTaskIncrementTick+0x160>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	4a22      	ldr	r2, [pc, #136]	; (8004224 <xTaskIncrementTick+0x160>)
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <xTaskIncrementTick+0x164>)
 80041aa:	441a      	add	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f7ff fc24 	bl	8003a00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <xTaskIncrementTick+0x168>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d3b9      	bcc.n	800413a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ca:	e7b6      	b.n	800413a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <xTaskIncrementTick+0x168>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d2:	4915      	ldr	r1, [pc, #84]	; (8004228 <xTaskIncrementTick+0x164>)
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d907      	bls.n	80041f4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e004      	b.n	80041f4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <xTaskIncrementTick+0x16c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3301      	adds	r3, #1
 80041f0:	4a0f      	ldr	r2, [pc, #60]	; (8004230 <xTaskIncrementTick+0x16c>)
 80041f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <xTaskIncrementTick+0x170>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004200:	697b      	ldr	r3, [r7, #20]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000478 	.word	0x20000478
 8004210:	20000454 	.word	0x20000454
 8004214:	20000408 	.word	0x20000408
 8004218:	2000040c 	.word	0x2000040c
 800421c:	20000468 	.word	0x20000468
 8004220:	20000470 	.word	0x20000470
 8004224:	20000458 	.word	0x20000458
 8004228:	20000354 	.word	0x20000354
 800422c:	20000350 	.word	0x20000350
 8004230:	20000460 	.word	0x20000460
 8004234:	20000464 	.word	0x20000464

08004238 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800423e:	4b27      	ldr	r3, [pc, #156]	; (80042dc <vTaskSwitchContext+0xa4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <vTaskSwitchContext+0xa8>)
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800424c:	e040      	b.n	80042d0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <vTaskSwitchContext+0xa8>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004254:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <vTaskSwitchContext+0xac>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	fab3 f383 	clz	r3, r3
 8004260:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f1c3 031f 	rsb	r3, r3, #31
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	491f      	ldr	r1, [pc, #124]	; (80042e8 <vTaskSwitchContext+0xb0>)
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <vTaskSwitchContext+0x5e>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	b672      	cpsid	i
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	b662      	cpsie	i
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	e7fe      	b.n	8004294 <vTaskSwitchContext+0x5c>
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4a11      	ldr	r2, [pc, #68]	; (80042e8 <vTaskSwitchContext+0xb0>)
 80042a2:	4413      	add	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	3308      	adds	r3, #8
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d104      	bne.n	80042c6 <vTaskSwitchContext+0x8e>
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a07      	ldr	r2, [pc, #28]	; (80042ec <vTaskSwitchContext+0xb4>)
 80042ce:	6013      	str	r3, [r2, #0]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	20000478 	.word	0x20000478
 80042e0:	20000464 	.word	0x20000464
 80042e4:	20000458 	.word	0x20000458
 80042e8:	20000354 	.word	0x20000354
 80042ec:	20000350 	.word	0x20000350

080042f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042f8:	f000 f852 	bl	80043a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <prvIdleTask+0x28>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d9f9      	bls.n	80042f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <prvIdleTask+0x2c>)
 8004306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004314:	e7f0      	b.n	80042f8 <prvIdleTask+0x8>
 8004316:	bf00      	nop
 8004318:	20000354 	.word	0x20000354
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	e00c      	b.n	8004346 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <prvInitialiseTaskLists+0x60>)
 8004338:	4413      	add	r3, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fb33 	bl	80039a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3301      	adds	r3, #1
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b06      	cmp	r3, #6
 800434a:	d9ef      	bls.n	800432c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800434c:	480d      	ldr	r0, [pc, #52]	; (8004384 <prvInitialiseTaskLists+0x64>)
 800434e:	f7ff fb2a 	bl	80039a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004352:	480d      	ldr	r0, [pc, #52]	; (8004388 <prvInitialiseTaskLists+0x68>)
 8004354:	f7ff fb27 	bl	80039a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004358:	480c      	ldr	r0, [pc, #48]	; (800438c <prvInitialiseTaskLists+0x6c>)
 800435a:	f7ff fb24 	bl	80039a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800435e:	480c      	ldr	r0, [pc, #48]	; (8004390 <prvInitialiseTaskLists+0x70>)
 8004360:	f7ff fb21 	bl	80039a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004364:	480b      	ldr	r0, [pc, #44]	; (8004394 <prvInitialiseTaskLists+0x74>)
 8004366:	f7ff fb1e 	bl	80039a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <prvInitialiseTaskLists+0x78>)
 800436c:	4a05      	ldr	r2, [pc, #20]	; (8004384 <prvInitialiseTaskLists+0x64>)
 800436e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <prvInitialiseTaskLists+0x7c>)
 8004372:	4a05      	ldr	r2, [pc, #20]	; (8004388 <prvInitialiseTaskLists+0x68>)
 8004374:	601a      	str	r2, [r3, #0]
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000354 	.word	0x20000354
 8004384:	200003e0 	.word	0x200003e0
 8004388:	200003f4 	.word	0x200003f4
 800438c:	20000410 	.word	0x20000410
 8004390:	20000424 	.word	0x20000424
 8004394:	2000043c 	.word	0x2000043c
 8004398:	20000408 	.word	0x20000408
 800439c:	2000040c 	.word	0x2000040c

080043a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a6:	e019      	b.n	80043dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043a8:	f000 f9e6 	bl	8004778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <prvCheckTasksWaitingTermination+0x4c>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fb7e 	bl	8003aba <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <prvCheckTasksWaitingTermination+0x50>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <prvCheckTasksWaitingTermination+0x50>)
 80043c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <prvCheckTasksWaitingTermination+0x54>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <prvCheckTasksWaitingTermination+0x54>)
 80043d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043d2:	f000 fa03 	bl	80047dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f80e 	bl	80043f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <prvCheckTasksWaitingTermination+0x54>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e1      	bne.n	80043a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000424 	.word	0x20000424
 80043f0:	20000450 	.word	0x20000450
 80043f4:	20000438 	.word	0x20000438

080043f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004406:	2b00      	cmp	r3, #0
 8004408:	d108      	bne.n	800441c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fb5a 	bl	8004ac8 <vPortFree>
				vPortFree( pxTCB );
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fb57 	bl	8004ac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800441a:	e019      	b.n	8004450 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004422:	2b01      	cmp	r3, #1
 8004424:	d103      	bne.n	800442e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fb4e 	bl	8004ac8 <vPortFree>
	}
 800442c:	e010      	b.n	8004450 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004434:	2b02      	cmp	r3, #2
 8004436:	d00b      	beq.n	8004450 <prvDeleteTCB+0x58>
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	b672      	cpsid	i
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	b662      	cpsie	i
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e7fe      	b.n	800444e <prvDeleteTCB+0x56>
	}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <prvResetNextTaskUnblockTime+0x38>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <prvResetNextTaskUnblockTime+0x3c>)
 800446a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800446e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004470:	e008      	b.n	8004484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <prvResetNextTaskUnblockTime+0x38>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <prvResetNextTaskUnblockTime+0x3c>)
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	20000408 	.word	0x20000408
 8004494:	20000470 	.word	0x20000470

08004498 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044a2:	4b29      	ldr	r3, [pc, #164]	; (8004548 <prvAddCurrentTaskToDelayedList+0xb0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044a8:	4b28      	ldr	r3, [pc, #160]	; (800454c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fb03 	bl	8003aba <uxListRemove>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	2201      	movs	r2, #1
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43da      	mvns	r2, r3
 80044c8:	4b21      	ldr	r3, [pc, #132]	; (8004550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4013      	ands	r3, r2
 80044ce:	4a20      	ldr	r2, [pc, #128]	; (8004550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044d8:	d10a      	bne.n	80044f0 <prvAddCurrentTaskToDelayedList+0x58>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044e0:	4b1a      	ldr	r3, [pc, #104]	; (800454c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3304      	adds	r3, #4
 80044e6:	4619      	mov	r1, r3
 80044e8:	481a      	ldr	r0, [pc, #104]	; (8004554 <prvAddCurrentTaskToDelayedList+0xbc>)
 80044ea:	f7ff fa89 	bl	8003a00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044ee:	e026      	b.n	800453e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	429a      	cmp	r2, r3
 8004506:	d209      	bcs.n	800451c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <prvAddCurrentTaskToDelayedList+0xc0>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <prvAddCurrentTaskToDelayedList+0xb4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7ff fa97 	bl	8003a48 <vListInsert>
}
 800451a:	e010      	b.n	800453e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <prvAddCurrentTaskToDelayedList+0xc4>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3304      	adds	r3, #4
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f7ff fa8d 	bl	8003a48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	429a      	cmp	r2, r3
 8004536:	d202      	bcs.n	800453e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004538:	4a09      	ldr	r2, [pc, #36]	; (8004560 <prvAddCurrentTaskToDelayedList+0xc8>)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6013      	str	r3, [r2, #0]
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000454 	.word	0x20000454
 800454c:	20000350 	.word	0x20000350
 8004550:	20000458 	.word	0x20000458
 8004554:	2000043c 	.word	0x2000043c
 8004558:	2000040c 	.word	0x2000040c
 800455c:	20000408 	.word	0x20000408
 8004560:	20000470 	.word	0x20000470

08004564 <pxPortInitialiseStack>:
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3b04      	subs	r3, #4
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3b04      	subs	r3, #4
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f023 0201 	bic.w	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3b04      	subs	r3, #4
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	4a0c      	ldr	r2, [pc, #48]	; (80045c8 <pxPortInitialiseStack+0x64>)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3b14      	subs	r3, #20
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3b04      	subs	r3, #4
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f06f 0202 	mvn.w	r2, #2
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3b20      	subs	r3, #32
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	080045cd 	.word	0x080045cd

080045cc <prvTaskExitError>:
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	2300      	movs	r3, #0
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	4b13      	ldr	r3, [pc, #76]	; (8004624 <prvTaskExitError+0x58>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045de:	d00b      	beq.n	80045f8 <prvTaskExitError+0x2c>
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	b672      	cpsid	i
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	b662      	cpsie	i
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e7fe      	b.n	80045f6 <prvTaskExitError+0x2a>
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	b672      	cpsid	i
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	b662      	cpsie	i
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	bf00      	nop
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0fc      	beq.n	8004610 <prvTaskExitError+0x44>
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	2000000c 	.word	0x2000000c
	...

08004630 <SVC_Handler>:
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <pxCurrentTCBConst2>)
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	6808      	ldr	r0, [r1, #0]
 8004636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	f380 8809 	msr	PSP, r0
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8811 	msr	BASEPRI, r0
 800464a:	4770      	bx	lr
 800464c:	f3af 8000 	nop.w

08004650 <pxCurrentTCBConst2>:
 8004650:	20000350 	.word	0x20000350
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <prvPortStartFirstTask>:
 8004658:	4808      	ldr	r0, [pc, #32]	; (800467c <prvPortStartFirstTask+0x24>)
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	6800      	ldr	r0, [r0, #0]
 800465e:	f380 8808 	msr	MSP, r0
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8814 	msr	CONTROL, r0
 800466a:	b662      	cpsie	i
 800466c:	b661      	cpsie	f
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	df00      	svc	0
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e000ed08 	.word	0xe000ed08

08004680 <xPortStartScheduler>:
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	4b36      	ldr	r3, [pc, #216]	; (8004760 <xPortStartScheduler+0xe0>)
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	22ff      	movs	r2, #255	; 0xff
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	70fb      	strb	r3, [r7, #3]
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <xPortStartScheduler+0xe4>)
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <xPortStartScheduler+0xe8>)
 80046b0:	2207      	movs	r2, #7
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e009      	b.n	80046ca <xPortStartScheduler+0x4a>
 80046b6:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <xPortStartScheduler+0xe8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	4a2a      	ldr	r2, [pc, #168]	; (8004768 <xPortStartScheduler+0xe8>)
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	70fb      	strb	r3, [r7, #3]
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b80      	cmp	r3, #128	; 0x80
 80046d4:	d0ef      	beq.n	80046b6 <xPortStartScheduler+0x36>
 80046d6:	4b24      	ldr	r3, [pc, #144]	; (8004768 <xPortStartScheduler+0xe8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1c3 0307 	rsb	r3, r3, #7
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d00b      	beq.n	80046fa <xPortStartScheduler+0x7a>
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	b672      	cpsid	i
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	b662      	cpsie	i
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	e7fe      	b.n	80046f8 <xPortStartScheduler+0x78>
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <xPortStartScheduler+0xe8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <xPortStartScheduler+0xe8>)
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4b18      	ldr	r3, [pc, #96]	; (8004768 <xPortStartScheduler+0xe8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800470c:	4a16      	ldr	r2, [pc, #88]	; (8004768 <xPortStartScheduler+0xe8>)
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <xPortStartScheduler+0xec>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a13      	ldr	r2, [pc, #76]	; (800476c <xPortStartScheduler+0xec>)
 800471e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <xPortStartScheduler+0xec>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a10      	ldr	r2, [pc, #64]	; (800476c <xPortStartScheduler+0xec>)
 800472a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	f000 f8d4 	bl	80048dc <vPortSetupTimerInterrupt>
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <xPortStartScheduler+0xf0>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f000 f8f3 	bl	8004924 <vPortEnableVFP>
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <xPortStartScheduler+0xf4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a0c      	ldr	r2, [pc, #48]	; (8004774 <xPortStartScheduler+0xf4>)
 8004744:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	f7ff ff85 	bl	8004658 <prvPortStartFirstTask>
 800474e:	f7ff fd73 	bl	8004238 <vTaskSwitchContext>
 8004752:	f7ff ff3b 	bl	80045cc <prvTaskExitError>
 8004756:	2300      	movs	r3, #0
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	e000e400 	.word	0xe000e400
 8004764:	2000047c 	.word	0x2000047c
 8004768:	20000480 	.word	0x20000480
 800476c:	e000ed20 	.word	0xe000ed20
 8004770:	2000000c 	.word	0x2000000c
 8004774:	e000ef34 	.word	0xe000ef34

08004778 <vPortEnterCritical>:
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	b672      	cpsid	i
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	b662      	cpsie	i
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <vPortEnterCritical+0x5c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3301      	adds	r3, #1
 800479a:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <vPortEnterCritical+0x5c>)
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <vPortEnterCritical+0x5c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d110      	bne.n	80047c8 <vPortEnterCritical+0x50>
 80047a6:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <vPortEnterCritical+0x60>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00b      	beq.n	80047c8 <vPortEnterCritical+0x50>
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	b672      	cpsid	i
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	b662      	cpsie	i
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	e7fe      	b.n	80047c6 <vPortEnterCritical+0x4e>
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	2000000c 	.word	0x2000000c
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <vPortExitCritical>:
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <vPortExitCritical+0x50>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <vPortExitCritical+0x26>
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	b672      	cpsid	i
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	b662      	cpsie	i
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	e7fe      	b.n	8004800 <vPortExitCritical+0x24>
 8004802:	4b0a      	ldr	r3, [pc, #40]	; (800482c <vPortExitCritical+0x50>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3b01      	subs	r3, #1
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <vPortExitCritical+0x50>)
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	4b07      	ldr	r3, [pc, #28]	; (800482c <vPortExitCritical+0x50>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <vPortExitCritical+0x42>
 8004814:	2300      	movs	r3, #0
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	2000000c 	.word	0x2000000c

08004830 <PendSV_Handler>:
 8004830:	f3ef 8009 	mrs	r0, PSP
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <pxCurrentTCBConst>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	f01e 0f10 	tst.w	lr, #16
 8004840:	bf08      	it	eq
 8004842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484a:	6010      	str	r0, [r2, #0]
 800484c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004854:	b672      	cpsid	i
 8004856:	f380 8811 	msr	BASEPRI, r0
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	b662      	cpsie	i
 8004864:	f7ff fce8 	bl	8004238 <vTaskSwitchContext>
 8004868:	f04f 0000 	mov.w	r0, #0
 800486c:	f380 8811 	msr	BASEPRI, r0
 8004870:	bc09      	pop	{r0, r3}
 8004872:	6819      	ldr	r1, [r3, #0]
 8004874:	6808      	ldr	r0, [r1, #0]
 8004876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487a:	f01e 0f10 	tst.w	lr, #16
 800487e:	bf08      	it	eq
 8004880:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004884:	f380 8809 	msr	PSP, r0
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop

08004890 <pxCurrentTCBConst>:
 8004890:	20000350 	.word	0x20000350
 8004894:	bf00      	nop
 8004896:	bf00      	nop

08004898 <SysTick_Handler>:
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	b672      	cpsid	i
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	b662      	cpsie	i
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	f7ff fc06 	bl	80040c4 <xTaskIncrementTick>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <SysTick_Handler+0x2e>
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <SysTick_Handler+0x40>)
 80048c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <vPortSetupTimerInterrupt>:
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <vPortSetupTimerInterrupt+0x34>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <vPortSetupTimerInterrupt+0x38>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <vPortSetupTimerInterrupt+0x3c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a0a      	ldr	r2, [pc, #40]	; (800491c <vPortSetupTimerInterrupt+0x40>)
 80048f2:	fba2 2303 	umull	r2, r3, r2, r3
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	4a09      	ldr	r2, [pc, #36]	; (8004920 <vPortSetupTimerInterrupt+0x44>)
 80048fa:	3b01      	subs	r3, #1
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	4b04      	ldr	r3, [pc, #16]	; (8004910 <vPortSetupTimerInterrupt+0x34>)
 8004900:	2207      	movs	r2, #7
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	e000e010 	.word	0xe000e010
 8004914:	e000e018 	.word	0xe000e018
 8004918:	20000000 	.word	0x20000000
 800491c:	10624dd3 	.word	0x10624dd3
 8004920:	e000e014 	.word	0xe000e014

08004924 <vPortEnableVFP>:
 8004924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004934 <vPortEnableVFP+0x10>
 8004928:	6801      	ldr	r1, [r0, #0]
 800492a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800492e:	6001      	str	r1, [r0, #0]
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	e000ed88 	.word	0xe000ed88

08004938 <pvPortMalloc>:
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	f7ff fb12 	bl	8003f6c <vTaskSuspendAll>
 8004948:	4b5a      	ldr	r3, [pc, #360]	; (8004ab4 <pvPortMalloc+0x17c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <pvPortMalloc+0x1c>
 8004950:	f000 f916 	bl	8004b80 <prvHeapInit>
 8004954:	4b58      	ldr	r3, [pc, #352]	; (8004ab8 <pvPortMalloc+0x180>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 8090 	bne.w	8004a82 <pvPortMalloc+0x14a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01e      	beq.n	80049a6 <pvPortMalloc+0x6e>
 8004968:	2208      	movs	r2, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4413      	add	r3, r2
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	2b00      	cmp	r3, #0
 8004978:	d015      	beq.n	80049a6 <pvPortMalloc+0x6e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f023 0307 	bic.w	r3, r3, #7
 8004980:	3308      	adds	r3, #8
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <pvPortMalloc+0x6e>
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	b672      	cpsid	i
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	b662      	cpsie	i
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e7fe      	b.n	80049a4 <pvPortMalloc+0x6c>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d06a      	beq.n	8004a82 <pvPortMalloc+0x14a>
 80049ac:	4b43      	ldr	r3, [pc, #268]	; (8004abc <pvPortMalloc+0x184>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d865      	bhi.n	8004a82 <pvPortMalloc+0x14a>
 80049b6:	4b42      	ldr	r3, [pc, #264]	; (8004ac0 <pvPortMalloc+0x188>)
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <pvPortMalloc+0x188>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
 80049c0:	e004      	b.n	80049cc <pvPortMalloc+0x94>
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	623b      	str	r3, [r7, #32]
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d903      	bls.n	80049de <pvPortMalloc+0xa6>
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f1      	bne.n	80049c2 <pvPortMalloc+0x8a>
 80049de:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <pvPortMalloc+0x17c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d04c      	beq.n	8004a82 <pvPortMalloc+0x14a>
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2208      	movs	r2, #8
 80049ee:	4413      	add	r3, r2
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	1ad2      	subs	r2, r2, r3
 8004a02:	2308      	movs	r3, #8
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d920      	bls.n	8004a4c <pvPortMalloc+0x114>
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00b      	beq.n	8004a34 <pvPortMalloc+0xfc>
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	b672      	cpsid	i
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	b662      	cpsie	i
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	e7fe      	b.n	8004a32 <pvPortMalloc+0xfa>
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad2      	subs	r2, r2, r3
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	605a      	str	r2, [r3, #4]
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	69b8      	ldr	r0, [r7, #24]
 8004a48:	f000 f8fc 	bl	8004c44 <prvInsertBlockIntoFreeList>
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <pvPortMalloc+0x184>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	4a19      	ldr	r2, [pc, #100]	; (8004abc <pvPortMalloc+0x184>)
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <pvPortMalloc+0x184>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <pvPortMalloc+0x18c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d203      	bcs.n	8004a6e <pvPortMalloc+0x136>
 8004a66:	4b15      	ldr	r3, [pc, #84]	; (8004abc <pvPortMalloc+0x184>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a16      	ldr	r2, [pc, #88]	; (8004ac4 <pvPortMalloc+0x18c>)
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <pvPortMalloc+0x180>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	605a      	str	r2, [r3, #4]
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	f7ff fa81 	bl	8003f88 <xTaskResumeAll>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00b      	beq.n	8004aa8 <pvPortMalloc+0x170>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	b672      	cpsid	i
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	b662      	cpsie	i
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e7fe      	b.n	8004aa6 <pvPortMalloc+0x16e>
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3728      	adds	r7, #40	; 0x28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	2000408c 	.word	0x2000408c
 8004ab8:	20004098 	.word	0x20004098
 8004abc:	20004090 	.word	0x20004090
 8004ac0:	20004084 	.word	0x20004084
 8004ac4:	20004094 	.word	0x20004094

08004ac8 <vPortFree>:
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04a      	beq.n	8004b70 <vPortFree+0xa8>
 8004ada:	2308      	movs	r3, #8
 8004adc:	425b      	negs	r3, r3
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <vPortFree+0xb0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10b      	bne.n	8004b0e <vPortFree+0x46>
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	b672      	cpsid	i
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	b662      	cpsie	i
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e7fe      	b.n	8004b0c <vPortFree+0x44>
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <vPortFree+0x66>
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	b672      	cpsid	i
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	b662      	cpsie	i
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	e7fe      	b.n	8004b2c <vPortFree+0x64>
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <vPortFree+0xb0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d019      	beq.n	8004b70 <vPortFree+0xa8>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d115      	bne.n	8004b70 <vPortFree+0xa8>
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <vPortFree+0xb0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	401a      	ands	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	605a      	str	r2, [r3, #4]
 8004b54:	f7ff fa0a 	bl	8003f6c <vTaskSuspendAll>
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <vPortFree+0xb4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4413      	add	r3, r2
 8004b62:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <vPortFree+0xb4>)
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	6938      	ldr	r0, [r7, #16]
 8004b68:	f000 f86c 	bl	8004c44 <prvInsertBlockIntoFreeList>
 8004b6c:	f7ff fa0c 	bl	8003f88 <xTaskResumeAll>
 8004b70:	bf00      	nop
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20004098 	.word	0x20004098
 8004b7c:	20004090 	.word	0x20004090

08004b80 <prvHeapInit>:
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	4b27      	ldr	r3, [pc, #156]	; (8004c2c <prvHeapInit+0xac>)
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <prvHeapInit+0x34>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3307      	adds	r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0307 	bic.w	r3, r3, #7
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <prvHeapInit+0xac>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	4a1d      	ldr	r2, [pc, #116]	; (8004c30 <prvHeapInit+0xb0>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <prvHeapInit+0xb0>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	605a      	str	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0307 	bic.w	r3, r3, #7
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <prvHeapInit+0xb4>)
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <prvHeapInit+0xb4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <prvHeapInit+0xb4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	1ad2      	subs	r2, r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <prvHeapInit+0xb4>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <prvHeapInit+0xb8>)
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <prvHeapInit+0xbc>)
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <prvHeapInit+0xc0>)
 8004c1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	20000484 	.word	0x20000484
 8004c30:	20004084 	.word	0x20004084
 8004c34:	2000408c 	.word	0x2000408c
 8004c38:	20004094 	.word	0x20004094
 8004c3c:	20004090 	.word	0x20004090
 8004c40:	20004098 	.word	0x20004098

08004c44 <prvInsertBlockIntoFreeList>:
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <prvInsertBlockIntoFreeList+0xac>)
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e002      	b.n	8004c58 <prvInsertBlockIntoFreeList+0x14>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d8f7      	bhi.n	8004c52 <prvInsertBlockIntoFreeList+0xe>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d108      	bne.n	8004c86 <prvInsertBlockIntoFreeList+0x42>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	441a      	add	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	441a      	add	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d118      	bne.n	8004ccc <prvInsertBlockIntoFreeList+0x88>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d00d      	beq.n	8004cc2 <prvInsertBlockIntoFreeList+0x7e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e008      	b.n	8004cd4 <prvInsertBlockIntoFreeList+0x90>
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e003      	b.n	8004cd4 <prvInsertBlockIntoFreeList+0x90>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d002      	beq.n	8004ce2 <prvInsertBlockIntoFreeList+0x9e>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20004084 	.word	0x20004084
 8004cf4:	2000408c 	.word	0x2000408c

08004cf8 <init_can>:
// params:
//  MODULE_ID module_id: what module this is (ex. PDM_ID, ACM_ID)
// returns:
//  error codes specified in GopherCAN.h
S8 init_can(CAN_HandleTypeDef* hcan, MODULE_ID module_id)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
	U8 c;
	CAN_INFO_STRUCT* data_struct;

	// set the current module
	this_module_id = module_id;
 8004d04:	4a41      	ldr	r2, [pc, #260]	; (8004e0c <init_can+0x114>)
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	7013      	strb	r3, [r2, #0]

	// init HAL_GetTick()
	HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	f7fc fd7a 	bl	8001804 <HAL_SetTickFreq>

	// setup the two buffers
	init_buffer(&rx_buffer, rx_buffer_mem, RX_BUFFER_SIZE);
 8004d10:	2220      	movs	r2, #32
 8004d12:	493f      	ldr	r1, [pc, #252]	; (8004e10 <init_can+0x118>)
 8004d14:	483f      	ldr	r0, [pc, #252]	; (8004e14 <init_can+0x11c>)
 8004d16:	f000 feb3 	bl	8005a80 <init_buffer>
	init_buffer(&tx_buffer, tx_buffer_mem, TX_BUFFER_SIZE);
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	493e      	ldr	r1, [pc, #248]	; (8004e18 <init_can+0x120>)
 8004d1e:	483f      	ldr	r0, [pc, #252]	; (8004e1c <init_can+0x124>)
 8004d20:	f000 feae 	bl	8005a80 <init_buffer>

	// if there are more CAN busses, set up the additional TX buffers
#ifdef MULTI_BUS
#if NUM_OF_BUSSES > 1
	init_buffer(&tx_buffer_1, tx_buffer_mem_1, TX_BUFFER_SIZE);
 8004d24:	2220      	movs	r2, #32
 8004d26:	493e      	ldr	r1, [pc, #248]	; (8004e20 <init_can+0x128>)
 8004d28:	483e      	ldr	r0, [pc, #248]	; (8004e24 <init_can+0x12c>)
 8004d2a:	f000 fea9 	bl	8005a80 <init_buffer>
	init_buffer(&tx_buffer_2, tx_buffer_mem_2, TX_BUFFER_SIZE);
#endif
#endif

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
 8004d32:	e010      	b.n	8004d56 <init_can+0x5e>
	{
		data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[c]);
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	4a3c      	ldr	r2, [pc, #240]	; (8004e28 <init_can+0x130>)
 8004d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3c:	60bb      	str	r3, [r7, #8]

		data_struct->last_rx = 0;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
		data_struct->update_enabled = FALSE;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2200      	movs	r2, #0
 8004d48:	711a      	strb	r2, [r3, #4]
		data_struct->pending_response = FALSE;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	715a      	strb	r2, [r3, #5]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	3301      	adds	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b0b      	cmp	r3, #11
 8004d5a:	d9eb      	bls.n	8004d34 <init_can+0x3c>
	}

	// set each function pointer to the do_nothing() function
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e01f      	b.n	8004da2 <init_can+0xaa>
	{
		cust_funcs[c].func_ptr = &do_nothing;
 8004d62:	7bfa      	ldrb	r2, [r7, #15]
 8004d64:	4931      	ldr	r1, [pc, #196]	; (8004e2c <init_can+0x134>)
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	4a2f      	ldr	r2, [pc, #188]	; (8004e30 <init_can+0x138>)
 8004d72:	601a      	str	r2, [r3, #0]
		cust_funcs[c].func_enabled = FALSE;
 8004d74:	7bfa      	ldrb	r2, [r7, #15]
 8004d76:	492d      	ldr	r1, [pc, #180]	; (8004e2c <init_can+0x134>)
 8004d78:	4613      	mov	r3, r2
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	3304      	adds	r3, #4
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
		cust_funcs[c].param_ptr = NULL;
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	4928      	ldr	r1, [pc, #160]	; (8004e2c <init_can+0x134>)
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	3308      	adds	r3, #8
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b06      	cmp	r3, #6
 8004da6:	d9dc      	bls.n	8004d62 <init_can+0x6a>

	}

	if (init_filters(hcan))
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f843 	bl	8004e34 <init_filters>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <init_can+0xc2>
	{
		return FILTER_SET_FAILED;
 8004db4:	f06f 0304 	mvn.w	r3, #4
 8004db8:	e024      	b.n	8004e04 <init_can+0x10c>
	}

	// Setup the rx interrupt function to interrupt on any pending message
	// will call methods following the format HAL_CAN_xxxCallback()
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK
 8004dba:	2102      	movs	r1, #2
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fd f9bf 	bl	8002140 <HAL_CAN_ActivateNotification>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <init_can+0xde>
			|| HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8004dc8:	2110      	movs	r1, #16
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fd f9b8 	bl	8002140 <HAL_CAN_ActivateNotification>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <init_can+0xe4>
	{
		return IRQ_SET_FAILED;
 8004dd6:	f06f 0305 	mvn.w	r3, #5
 8004dda:	e013      	b.n	8004e04 <init_can+0x10c>
	}

	// The F7xx includes interrupts for when a message is complete. Activate them here
#if TARGET == F7XX
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8004ddc:	2101      	movs	r1, #1
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fd f9ae 	bl	8002140 <HAL_CAN_ActivateNotification>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <init_can+0xf8>
	{
		return IRQ_SET_FAILED;
 8004dea:	f06f 0305 	mvn.w	r3, #5
 8004dee:	e009      	b.n	8004e04 <init_can+0x10c>
	}
#endif

	// start can!
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fc ff17 	bl	8001c24 <HAL_CAN_Start>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <init_can+0x10a>
	{
		return CAN_START_FAILED;
 8004dfc:	f06f 0306 	mvn.w	r3, #6
 8004e00:	e000      	b.n	8004e04 <init_can+0x10c>
	}

	return CAN_SUCCESS;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20004858 	.word	0x20004858
 8004e10:	2000436c 	.word	0x2000436c
 8004e14:	20004590 	.word	0x20004590
 8004e18:	20004598 	.word	0x20004598
 8004e1c:	20004798 	.word	0x20004798
 8004e20:	20004160 	.word	0x20004160
 8004e24:	200047e8 	.word	0x200047e8
 8004e28:	20000010 	.word	0x20000010
 8004e2c:	200047f0 	.word	0x200047f0
 8004e30:	08005a5d 	.word	0x08005a5d

08004e34 <init_filters>:


// init_filters
//  function called within init() that sets up all of the filters
static S8 init_filters(CAN_HandleTypeDef* hcan)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08c      	sub	sp, #48	; 0x30
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filterConfig;

#ifdef CAN_ROUTER
	// Accept all messages on the CAN router
	filterConfig.FilterBank = 0;                                      // Modify bank 0 (of 13)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;                // enable the filter
 8004e40:	2301      	movs	r3, #1
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 8004e44:	2300      	movs	r3, #0
 8004e46:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;                  // Use mask mode to filter
 8004e48:	2300      	movs	r3, #0
 8004e4a:	623b      	str	r3, [r7, #32]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;                 // 32 bit mask
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterIdLow = 0;                                     // Low bound of accepted values
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterIdHigh = 0xFFFF;                               // High bound of accepted values
 8004e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e58:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0;                                 // Which bits matter when filtering (high)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMaskIdHigh = 0;                                // Which bits matter when filtering (low)
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8004e62:	f107 0308 	add.w	r3, r7, #8
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fc fdef 	bl	8001a4c <HAL_CAN_ConfigFilter>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <init_filters+0x46>
	{
		return FILTER_SET_FAILED;
 8004e74:	f06f 0304 	mvn.w	r3, #4
 8004e78:	e000      	b.n	8004e7c <init_filters+0x48>
	{
		return FILTER_SET_FAILED;
	}
#endif

	return CAN_SUCCESS;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3730      	adds	r7, #48	; 0x30
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_CAN_RxFifo0MsgPendingCallback>:


// HAL_CAN_RxFifo0MsgPendingCallback
//  ISR called when CAN_RX_FIFO0 has a pending message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	service_can_rx_hardware(hcan, CAN_RX_FIFO0);
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f9e6 	bl	8005260 <service_can_rx_hardware>
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_CAN_RxFifo1MsgPendingCallback>:


// HAL_CAN_RxFifo1MsgPendingCallback
//  ISR called when CAN_RX_FIFO1 has a pending message
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	service_can_rx_hardware(hcan, CAN_RX_FIFO1);
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f9da 	bl	8005260 <service_can_rx_hardware>
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <send_can_command>:
//  U8 command_param_3:     parameter 3
// returns:
//  error codes specified in GopherCAN.h
S8 send_can_command(PRIORITY priority, MODULE_ID dest_module, GCAN_COMMAND command_id,
	U8 command_param_0, U8 command_param_1, U8 command_param_2, U8 command_param_3)
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b089      	sub	sp, #36	; 0x24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	71fb      	strb	r3, [r7, #7]
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	71bb      	strb	r3, [r7, #6]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	717b      	strb	r3, [r7, #5]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	713b      	strb	r3, [r7, #4]
	CAN_MSG message;
	CAN_ID id;

	if (dest_module < 0 || dest_module >= NUM_OF_MODULES)
 8004ed2:	79bb      	ldrb	r3, [r7, #6]
 8004ed4:	2b06      	cmp	r3, #6
 8004ed6:	d902      	bls.n	8004ede <send_can_command+0x2a>
	{
		return BAD_MODULE_ID;
 8004ed8:	f06f 0301 	mvn.w	r3, #1
 8004edc:	e02f      	b.n	8004f3e <send_can_command+0x8a>
	}

	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8004ede:	797b      	ldrb	r3, [r7, #5]
 8004ee0:	2b06      	cmp	r3, #6
 8004ee2:	d902      	bls.n	8004eea <send_can_command+0x36>
	{
		return BAD_COMMAND_ID;
 8004ee4:	f06f 0303 	mvn.w	r3, #3
 8004ee8:	e029      	b.n	8004f3e <send_can_command+0x8a>
	}

	id.priority = priority;
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	723b      	strb	r3, [r7, #8]
	id.dest_module = dest_module;
 8004eee:	79bb      	ldrb	r3, [r7, #6]
 8004ef0:	727b      	strb	r3, [r7, #9]
	id.source_module = this_module_id;
 8004ef2:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <send_can_command+0x94>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	72bb      	strb	r3, [r7, #10]
	id.error = FALSE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	72fb      	strb	r3, [r7, #11]
	id.parameter = CAN_COMMAND_ID;
 8004efc:	2300      	movs	r3, #0
 8004efe:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &id);
 8004f00:	f107 0208 	add.w	r2, r7, #8
 8004f04:	f107 0310 	add.w	r3, r7, #16
 8004f08:	4611      	mov	r1, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fbaa 	bl	8005664 <build_message_id>

	// set the RTR bit to be a data message
	message.rtr_bit = DATA_MESSAGE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	753b      	strb	r3, [r7, #20]

	message.dlc = COMMAND_SIZE;
 8004f14:	2305      	movs	r3, #5
 8004f16:	757b      	strb	r3, [r7, #21]

	message.data[0] = command_id;
 8004f18:	797b      	ldrb	r3, [r7, #5]
 8004f1a:	75bb      	strb	r3, [r7, #22]
	message.data[1] = command_param_0;
 8004f1c:	793b      	ldrb	r3, [r7, #4]
 8004f1e:	75fb      	strb	r3, [r7, #23]
	message.data[2] = command_param_1;
 8004f20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f24:	763b      	strb	r3, [r7, #24]
	message.data[3] = command_param_2;
 8004f26:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f2a:	767b      	strb	r3, [r7, #25]
	message.data[4] = command_param_3;
 8004f2c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004f30:	76bb      	strb	r3, [r7, #26]

	return tx_can_message(&message);
 8004f32:	f107 0310 	add.w	r3, r7, #16
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f9f4 	bl	8005324 <tx_can_message>
 8004f3c:	4603      	mov	r3, r0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3724      	adds	r7, #36	; 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20004858 	.word	0x20004858

08004f4c <send_parameter>:
//  MODULE_ID dest_module: what module to send the parameter to
//  GCAN_PARAM parameter:  what parameter to send
// returns:
//  error codes specified in GopherCAN.h
S8 send_parameter(PRIORITY priority, MODULE_ID dest_module, GCAN_PARAM parameter)
{
 8004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f50:	b093      	sub	sp, #76	; 0x4c
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	4603      	mov	r3, r0
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	77bb      	strb	r3, [r7, #30]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	777b      	strb	r3, [r7, #29]
	CAN_ID id;
	CAN_MSG message;
	U64 data = 0;
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	f04f 0400 	mov.w	r4, #0
 8004f68:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	S8 c;
	FLOAT_CONVERTER float_con;

	// make sure the parameter is valid
	if (parameter <= CAN_COMMAND_ID || parameter >= NUM_OF_PARAMETERS)
 8004f6c:	7f7b      	ldrb	r3, [r7, #29]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <send_parameter+0x2c>
 8004f72:	7f7b      	ldrb	r3, [r7, #29]
 8004f74:	2b0b      	cmp	r3, #11
 8004f76:	d902      	bls.n	8004f7e <send_parameter+0x32>
	{
		return BAD_PARAMETER_ID;
 8004f78:	f06f 0302 	mvn.w	r3, #2
 8004f7c:	e0f1      	b.n	8005162 <send_parameter+0x216>
	}

	// make sure the parameter is enabled
	if (!((CAN_INFO_STRUCT*)(all_parameter_structs[parameter]))->update_enabled)
 8004f7e:	7f7b      	ldrb	r3, [r7, #29]
 8004f80:	4a7a      	ldr	r2, [pc, #488]	; (800516c <send_parameter+0x220>)
 8004f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f86:	791b      	ldrb	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <send_parameter+0x46>
	{
		return NOT_ENABLED_ERR;
 8004f8c:	f06f 030a 	mvn.w	r3, #10
 8004f90:	e0e7      	b.n	8005162 <send_parameter+0x216>
	}

	// build the return message ID
	id.priority = priority;
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
 8004f94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	id.dest_module = dest_module;
 8004f98:	7fbb      	ldrb	r3, [r7, #30]
 8004f9a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	id.source_module = this_module_id;
 8004f9e:	4b74      	ldr	r3, [pc, #464]	; (8005170 <send_parameter+0x224>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	id.error = FALSE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	id.parameter = parameter;
 8004fac:	7f7b      	ldrb	r3, [r7, #29]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	87bb      	strh	r3, [r7, #60]	; 0x3c

	build_message_id(&message, &id);
 8004fb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004fb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f000 fb51 	bl	8005664 <build_message_id>

	// set the RTR bit to data type
	message.rtr_bit = DATA_MESSAGE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	// get the value of the data on this module and build the CAN message
	if (parameter_data_types[parameter] == UNSIGNED8
 8004fc8:	7f7b      	ldrb	r3, [r7, #29]
 8004fca:	4a6a      	ldr	r2, [pc, #424]	; (8005174 <send_parameter+0x228>)
 8004fcc:	5cd3      	ldrb	r3, [r2, r3]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d004      	beq.n	8004fdc <send_parameter+0x90>
		|| parameter_data_types[parameter] == SIGNED8)
 8004fd2:	7f7b      	ldrb	r3, [r7, #29]
 8004fd4:	4a67      	ldr	r2, [pc, #412]	; (8005174 <send_parameter+0x228>)
 8004fd6:	5cd3      	ldrb	r3, [r2, r3]
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	d117      	bne.n	800500c <send_parameter+0xc0>
	{
		data |= ((U8_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8004fdc:	7f7b      	ldrb	r3, [r7, #29]
 8004fde:	4a63      	ldr	r2, [pc, #396]	; (800516c <send_parameter+0x220>)
 8004fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe4:	799b      	ldrb	r3, [r3, #6]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f04f 0400 	mov.w	r4, #0
 8004fec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004ff0:	ea41 0003 	orr.w	r0, r1, r3
 8004ff4:	6138      	str	r0, [r7, #16]
 8004ff6:	ea42 0304 	orr.w	r3, r2, r4
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005000:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		message.dlc = sizeof(U8);
 8005004:	2301      	movs	r3, #1
 8005006:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800500a:	e077      	b.n	80050fc <send_parameter+0x1b0>
	}

	else if (parameter_data_types[parameter] == UNSIGNED16
 800500c:	7f7b      	ldrb	r3, [r7, #29]
 800500e:	4a59      	ldr	r2, [pc, #356]	; (8005174 <send_parameter+0x228>)
 8005010:	5cd3      	ldrb	r3, [r2, r3]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d004      	beq.n	8005020 <send_parameter+0xd4>
		|| parameter_data_types[parameter] == SIGNED16)
 8005016:	7f7b      	ldrb	r3, [r7, #29]
 8005018:	4a56      	ldr	r2, [pc, #344]	; (8005174 <send_parameter+0x228>)
 800501a:	5cd3      	ldrb	r3, [r2, r3]
 800501c:	2b06      	cmp	r3, #6
 800501e:	d117      	bne.n	8005050 <send_parameter+0x104>
	{
		data |= ((U16_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8005020:	7f7b      	ldrb	r3, [r7, #29]
 8005022:	4a52      	ldr	r2, [pc, #328]	; (800516c <send_parameter+0x220>)
 8005024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005028:	88db      	ldrh	r3, [r3, #6]
 800502a:	b29b      	uxth	r3, r3
 800502c:	f04f 0400 	mov.w	r4, #0
 8005030:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005034:	ea41 0003 	orr.w	r0, r1, r3
 8005038:	60b8      	str	r0, [r7, #8]
 800503a:	ea42 0304 	orr.w	r3, r2, r4
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005044:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		message.dlc = sizeof(U16);
 8005048:	2302      	movs	r3, #2
 800504a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800504e:	e055      	b.n	80050fc <send_parameter+0x1b0>
	}

	else if (parameter_data_types[parameter] == UNSIGNED32
 8005050:	7f7b      	ldrb	r3, [r7, #29]
 8005052:	4a48      	ldr	r2, [pc, #288]	; (8005174 <send_parameter+0x228>)
 8005054:	5cd3      	ldrb	r3, [r2, r3]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d004      	beq.n	8005064 <send_parameter+0x118>
		|| parameter_data_types[parameter] == SIGNED32)
 800505a:	7f7b      	ldrb	r3, [r7, #29]
 800505c:	4a45      	ldr	r2, [pc, #276]	; (8005174 <send_parameter+0x228>)
 800505e:	5cd3      	ldrb	r3, [r2, r3]
 8005060:	2b07      	cmp	r3, #7
 8005062:	d116      	bne.n	8005092 <send_parameter+0x146>
	{
		data |= ((U32_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8005064:	7f7b      	ldrb	r3, [r7, #29]
 8005066:	4a41      	ldr	r2, [pc, #260]	; (800516c <send_parameter+0x220>)
 8005068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f04f 0400 	mov.w	r4, #0
 8005072:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005076:	ea41 0003 	orr.w	r0, r1, r3
 800507a:	6038      	str	r0, [r7, #0]
 800507c:	ea42 0304 	orr.w	r3, r2, r4
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005086:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		message.dlc = sizeof(U32);
 800508a:	2304      	movs	r3, #4
 800508c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005090:	e034      	b.n	80050fc <send_parameter+0x1b0>
	}

	else if (parameter_data_types[parameter] == UNSIGNED64
 8005092:	7f7b      	ldrb	r3, [r7, #29]
 8005094:	4a37      	ldr	r2, [pc, #220]	; (8005174 <send_parameter+0x228>)
 8005096:	5cd3      	ldrb	r3, [r2, r3]
 8005098:	2b04      	cmp	r3, #4
 800509a:	d004      	beq.n	80050a6 <send_parameter+0x15a>
		|| parameter_data_types[parameter] == SIGNED64)
 800509c:	7f7b      	ldrb	r3, [r7, #29]
 800509e:	4a35      	ldr	r2, [pc, #212]	; (8005174 <send_parameter+0x228>)
 80050a0:	5cd3      	ldrb	r3, [r2, r3]
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d111      	bne.n	80050ca <send_parameter+0x17e>
	{
		data |= ((U64_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 80050a6:	7f7b      	ldrb	r3, [r7, #29]
 80050a8:	4a30      	ldr	r2, [pc, #192]	; (800516c <send_parameter+0x220>)
 80050aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ae:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80050b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80050b6:	ea41 0a03 	orr.w	sl, r1, r3
 80050ba:	ea42 0b04 	orr.w	fp, r2, r4
 80050be:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
		message.dlc = sizeof(U64);
 80050c2:	2308      	movs	r3, #8
 80050c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80050c8:	e018      	b.n	80050fc <send_parameter+0x1b0>
	}

	else if (parameter_data_types[parameter] == FLOATING)
 80050ca:	7f7b      	ldrb	r3, [r7, #29]
 80050cc:	4a29      	ldr	r2, [pc, #164]	; (8005174 <send_parameter+0x228>)
 80050ce:	5cd3      	ldrb	r3, [r2, r3]
 80050d0:	2b09      	cmp	r3, #9
 80050d2:	d113      	bne.n	80050fc <send_parameter+0x1b0>
	{
		// Union to get the bitwise data of the float
		float_con.f = ((FLOAT_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 80050d4:	7f7b      	ldrb	r3, [r7, #29]
 80050d6:	4a25      	ldr	r2, [pc, #148]	; (800516c <send_parameter+0x220>)
 80050d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	627b      	str	r3, [r7, #36]	; 0x24

		data |= float_con.u32;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	f04f 0400 	mov.w	r4, #0
 80050e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80050ea:	ea41 0803 	orr.w	r8, r1, r3
 80050ee:	ea42 0904 	orr.w	r9, r2, r4
 80050f2:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
		message.dlc = sizeof(float);
 80050f6:	2304      	movs	r3, #4
 80050f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	}

	// build the data in the message (big endian)
	for (c = message.dlc - 1; c >= 0; c--)
 80050fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005100:	3b01      	subs	r3, #1
 8005102:	b2db      	uxtb	r3, r3
 8005104:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005108:	e021      	b.n	800514e <send_parameter+0x202>
	{
		message.data[c] = (U8)(data >> (c * BITS_IN_BYTE));
 800510a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800510e:	00da      	lsls	r2, r3, #3
 8005110:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005114:	f1c2 0020 	rsb	r0, r2, #32
 8005118:	f1a2 0120 	sub.w	r1, r2, #32
 800511c:	fa23 f502 	lsr.w	r5, r3, r2
 8005120:	fa04 f000 	lsl.w	r0, r4, r0
 8005124:	4305      	orrs	r5, r0
 8005126:	fa24 f101 	lsr.w	r1, r4, r1
 800512a:	430d      	orrs	r5, r1
 800512c:	fa24 f602 	lsr.w	r6, r4, r2
 8005130:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005134:	b2ea      	uxtb	r2, r5
 8005136:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800513a:	440b      	add	r3, r1
 800513c:	f803 2c1a 	strb.w	r2, [r3, #-26]
	for (c = message.dlc - 1; c >= 0; c--)
 8005140:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005144:	b2db      	uxtb	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800514e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005152:	2b00      	cmp	r3, #0
 8005154:	dad9      	bge.n	800510a <send_parameter+0x1be>
	}

	// send the built CAN message
	return tx_can_message(&message);
 8005156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800515a:	4618      	mov	r0, r3
 800515c:	f000 f8e2 	bl	8005324 <tx_can_message>
 8005160:	4603      	mov	r3, r0
}
 8005162:	4618      	mov	r0, r3
 8005164:	374c      	adds	r7, #76	; 0x4c
 8005166:	46bd      	mov	sp, r7
 8005168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516c:	20000010 	.word	0x20000010
 8005170:	20004858 	.word	0x20004858
 8005174:	20000040 	.word	0x20000040

08005178 <add_custom_can_func>:
//                                                       data type (including NULL) as long as it is casted correctly
// returns:
//  error codes specified in GopherCAN.h
S8 add_custom_can_func(GCAN_COMMAND command_id, void (*func_ptr)(MODULE_ID, void*, U8, U8, U8, U8),
	U8 init_state, void* param_ptr)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	4603      	mov	r3, r0
 8005184:	73fb      	strb	r3, [r7, #15]
 8005186:	4613      	mov	r3, r2
 8005188:	73bb      	strb	r3, [r7, #14]
	CUST_FUNC* new_cust_func;

	// make sure the ID is valid
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b06      	cmp	r3, #6
 800518e:	d902      	bls.n	8005196 <add_custom_can_func+0x1e>
	{
		return BAD_COMMAND_ID;
 8005190:	f06f 0303 	mvn.w	r3, #3
 8005194:	e017      	b.n	80051c6 <add_custom_can_func+0x4e>
	}

	new_cust_func = &(cust_funcs[command_id]);
 8005196:	7bfa      	ldrb	r2, [r7, #15]
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4a0c      	ldr	r2, [pc, #48]	; (80051d4 <add_custom_can_func+0x5c>)
 80051a2:	4413      	add	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

	// set all of the values of the struct accordingly
	new_cust_func->func_ptr       = func_ptr;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	601a      	str	r2, [r3, #0]
	new_cust_func->func_enabled   = !!init_state;
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf14      	ite	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	2300      	moveq	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	711a      	strb	r2, [r3, #4]
	new_cust_func->param_ptr      = param_ptr;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	609a      	str	r2, [r3, #8]

	return CAN_SUCCESS;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	200047f0 	.word	0x200047f0

080051d8 <service_can_tx_hardware>:
//  Method to interact directly with the CAN registers through the HAL_CAN commands.
//  then will fill as many tx mailboxes as possible from the tx_message_buffer
//
//  designed to be called at high priority on 1ms loop
void service_can_tx_hardware(CAN_HandleTypeDef* hcan)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08c      	sub	sp, #48	; 0x30
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	CAN_MSG* message;
	CAN_MSG_RING_BUFFER* buffer;

	// With multiple busses, choose the correct bus buffer to be working with
#ifdef MULTI_BUS
	buffer = choose_tx_buffer_from_hcan(hcan);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fb75 	bl	80058d0 <choose_tx_buffer_from_hcan>
 80051e6:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
	buffer = &tx_buffer;
#endif

	// add messages to the the TX mailboxes until they are full
	while (!is_empty(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 80051e8:	e026      	b.n	8005238 <service_can_tx_hardware+0x60>
	{
		U32 tx_mailbox_num;

		// get the next CAN message from the TX buffer (FIFO)
		message = get_from_buffer(buffer, 0);
 80051ea:	2100      	movs	r1, #0
 80051ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051ee:	f000 fc84 	bl	8005afa <get_from_buffer>
 80051f2:	62b8      	str	r0, [r7, #40]	; 0x28

		// configure the settings/params of the CAN message
		tx_header.IDE = CAN_ID_EXT;                                          // 29 bit id
 80051f4:	2304      	movs	r3, #4
 80051f6:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime = DISABLE;                              // do not send a timestamp
 80051f8:	2300      	movs	r3, #0
 80051fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		tx_header.ExtId = message->id;
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	617b      	str	r3, [r7, #20]
		tx_header.RTR = message->rtr_bit;
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	791b      	ldrb	r3, [r3, #4]
 8005208:	61fb      	str	r3, [r7, #28]
		tx_header.DLC = message->dlc;
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	795b      	ldrb	r3, [r3, #5]
 800520e:	623b      	str	r3, [r7, #32]

		// add the message to the sending list
		if (HAL_CAN_AddTxMessage(hcan, &tx_header, message->data, &tx_mailbox_num) != HAL_OK)
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	1d9a      	adds	r2, r3, #6
 8005214:	f107 030c 	add.w	r3, r7, #12
 8005218:	f107 0110 	add.w	r1, r7, #16
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fc fd45 	bl	8001cac <HAL_CAN_AddTxMessage>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <service_can_tx_hardware+0x5a>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	4a0b      	ldr	r2, [pc, #44]	; (800525c <service_can_tx_hardware+0x84>)
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	e010      	b.n	8005254 <service_can_tx_hardware+0x7c>
			return;
		}

		// move the head now that the first element has been removed
		remove_from_front(buffer);
 8005232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005234:	f000 fc7d 	bl	8005b32 <remove_from_front>
	while (!is_empty(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8005238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800523a:	f000 fc4d 	bl	8005ad8 <is_empty>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <service_can_tx_hardware+0x7a>
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fc fe0c 	bl	8001e62 <HAL_CAN_GetTxMailboxesFreeLevel>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1cc      	bne.n	80051ea <service_can_tx_hardware+0x12>
	}

	return;
 8005250:	bf00      	nop
 8005252:	bf00      	nop
}
 8005254:	3730      	adds	r7, #48	; 0x30
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	2000409c 	.word	0x2000409c

08005260 <service_can_rx_hardware>:
//  U32 rx_mailbox: the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//    Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	; 0x28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (!is_full(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 800526a:	e02b      	b.n	80052c4 <service_can_rx_hardware+0x64>
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = get_from_buffer(&rx_buffer, rx_buffer.fill_level);
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <service_can_rx_hardware+0x84>)
 800526e:	799b      	ldrb	r3, [r3, #6]
 8005270:	4619      	mov	r1, r3
 8005272:	481c      	ldr	r0, [pc, #112]	; (80052e4 <service_can_rx_hardware+0x84>)
 8005274:	f000 fc41 	bl	8005afa <get_from_buffer>
 8005278:	6278      	str	r0, [r7, #36]	; 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	3306      	adds	r3, #6
 800527e:	f107 0208 	add.w	r2, r7, #8
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7fc fe21 	bl	8001ecc <HAL_CAN_GetRxMessage>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <service_can_rx_hardware+0x3a>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	4a14      	ldr	r2, [pc, #80]	; (80052e8 <service_can_rx_hardware+0x88>)
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e021      	b.n	80052de <service_can_rx_hardware+0x7e>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rx_buffer.fill_level++;
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <service_can_rx_hardware+0x84>)
 800529c:	799b      	ldrb	r3, [r3, #6]
 800529e:	3301      	adds	r3, #1
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <service_can_rx_hardware+0x84>)
 80052a4:	719a      	strb	r2, [r3, #6]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->rtr_bit = rx_header.RTR;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	711a      	strb	r2, [r3, #4]
		message->id = rx_header.ExtId;
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	601a      	str	r2, [r3, #0]
		message->dlc = rx_header.DLC;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	715a      	strb	r2, [r3, #5]

#ifdef CAN_ROUTER
		// router specific functionality that directly adds messages that need to be routed
		//  directly to the correct TX buffer (if needed, that decision is made within the function)
		rout_can_message(hcan, message);
 80052bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fb62 	bl	8005988 <rout_can_message>
	while (!is_full(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 80052c4:	4807      	ldr	r0, [pc, #28]	; (80052e4 <service_can_rx_hardware+0x84>)
 80052c6:	f000 fbf4 	bl	8005ab2 <is_full>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <service_can_rx_hardware+0x7e>
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc ff0c 	bl	80020f0 <HAL_CAN_GetRxFifoFillLevel>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1c6      	bne.n	800526c <service_can_rx_hardware+0xc>
#endif
	}
}
 80052de:	3728      	adds	r7, #40	; 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20004590 	.word	0x20004590
 80052e8:	2000409c 	.word	0x2000409c

080052ec <service_can_rx_buffer>:
//   parameter requests. The request will not be completed and the other module will have to
//   send a new request
//
//  call in a 1 ms or faster loop
S8 service_can_rx_buffer(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
	CAN_MSG* current_message;

	// run through each message in the RX buffer and service it with service_can_rx_message() (FIFO)
	while (!is_empty(&rx_buffer))
 80052f2:	e00a      	b.n	800530a <service_can_rx_buffer+0x1e>
	{
		// get the message at the head of the array
		current_message = get_from_buffer(&rx_buffer, 0);
 80052f4:	2100      	movs	r1, #0
 80052f6:	480a      	ldr	r0, [pc, #40]	; (8005320 <service_can_rx_buffer+0x34>)
 80052f8:	f000 fbff 	bl	8005afa <get_from_buffer>
 80052fc:	6078      	str	r0, [r7, #4]

		// WARNING: CAN errors from other modules are not handled in this version. The message is just discarded
		// Use a CAN bus analyzer to see what the message is for debugging
		service_can_rx_message(current_message);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f836 	bl	8005370 <service_can_rx_message>

		// move the head now that the first element has been removed
		remove_from_front(&rx_buffer);
 8005304:	4806      	ldr	r0, [pc, #24]	; (8005320 <service_can_rx_buffer+0x34>)
 8005306:	f000 fc14 	bl	8005b32 <remove_from_front>
	while (!is_empty(&rx_buffer))
 800530a:	4805      	ldr	r0, [pc, #20]	; (8005320 <service_can_rx_buffer+0x34>)
 800530c:	f000 fbe4 	bl	8005ad8 <is_empty>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0ee      	beq.n	80052f4 <service_can_rx_buffer+0x8>
	}

	return CAN_SUCCESS;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20004590 	.word	0x20004590

08005324 <tx_can_message>:


// tx_can_message
//  Takes in a CAN_MSG struct, adds it to the TX buffer
static S8 tx_can_message(CAN_MSG* message_to_add)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	CAN_MSG_RING_BUFFER* buffer;

#ifdef MULTI_BUS
	// Handle the case of the message being sent to all of the busses (ID 0)
	if (GET_ID_DEST(message_to_add->id) == ALL_MODULES_ID)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0d9b      	lsrs	r3, r3, #22
 8005332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <tx_can_message+0x20>
	{
		send_message_to_all_busses(message_to_add);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fb04 	bl	8005948 <send_message_to_all_busses>
		return CAN_SUCCESS;
 8005340:	2300      	movs	r3, #0
 8005342:	e011      	b.n	8005368 <tx_can_message+0x44>
	}

	// If there are multiple busses, choose the correct bus based on the routing table
	buffer = choose_tx_buffer_from_dest_module(message_to_add);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fadb 	bl	8005900 <choose_tx_buffer_from_dest_module>
 800534a:	60f8      	str	r0, [r7, #12]
#else
	buffer = &tx_buffer;
#endif

	// check to make sure the buffer is not full, then add it to the back of the TX buffer
	if (is_full(buffer))
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 fbb0 	bl	8005ab2 <is_full>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <tx_can_message+0x3a>
	{
		return TX_BUFFER_FULL;
 8005358:	f06f 0307 	mvn.w	r3, #7
 800535c:	e004      	b.n	8005368 <tx_can_message+0x44>
	}

	add_message_to_back(buffer, message_to_add);
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fc08 	bl	8005b76 <add_message_to_back>

	return CAN_SUCCESS;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <service_can_rx_message>:
//  CAN message bus interrupt function this will update all
//  the global variables or trigger the CAN functions if needed.
//  Designed to be called by service_can_rx_software to loop perform
//  this task for each pending CAN message
static S8 service_can_rx_message(CAN_MSG* message)
{
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	CAN_ID id;
	CAN_INFO_STRUCT* data_struct = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
	FLOAT_CONVERTER float_con;
	U64 recieved_data = 0;
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	e9c7 2308 	strd	r2, r3, [r7, #32]
	S8 c;

	get_message_id(&id, message);
 8005388:	f107 0310 	add.w	r3, r7, #16
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f9c8 	bl	8005724 <get_message_id>

	// A double check to make sure this message is actually for this module (most useful in the CAN router)
	if (id.dest_module != this_module_id && id.dest_module != ALL_MODULES_ID)
 8005394:	7c7a      	ldrb	r2, [r7, #17]
 8005396:	4b73      	ldr	r3, [pc, #460]	; (8005564 <service_can_rx_message+0x1f4>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d005      	beq.n	80053aa <service_can_rx_message+0x3a>
 800539e:	7c7b      	ldrb	r3, [r7, #17]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <service_can_rx_message+0x3a>
	{
		// This is not for this module. Do not process this message
		return WRONG_DEST_ERR;
 80053a4:	f06f 030c 	mvn.w	r3, #12
 80053a8:	e0d8      	b.n	800555c <service_can_rx_message+0x1ec>
	}

	// if the message received has the error flag high, put the details into the last_error struct, then return
	if (id.error)
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d014      	beq.n	80053da <service_can_rx_message+0x6a>
	{
		// this could possibly be changed into a ring buffer
		last_error.last_rx = HAL_GetTick();
 80053b0:	f7fc fa1c 	bl	80017ec <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b6c      	ldr	r3, [pc, #432]	; (8005568 <service_can_rx_message+0x1f8>)
 80053b8:	601a      	str	r2, [r3, #0]
		last_error.source_module = id.source_module;
 80053ba:	7cba      	ldrb	r2, [r7, #18]
 80053bc:	4b6a      	ldr	r3, [pc, #424]	; (8005568 <service_can_rx_message+0x1f8>)
 80053be:	711a      	strb	r2, [r3, #4]
		last_error.parameter = id.parameter;
 80053c0:	8aba      	ldrh	r2, [r7, #20]
 80053c2:	4b69      	ldr	r3, [pc, #420]	; (8005568 <service_can_rx_message+0x1f8>)
 80053c4:	80da      	strh	r2, [r3, #6]
		if (message->dlc > 0)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	795b      	ldrb	r3, [r3, #5]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <service_can_rx_message+0x66>
		{
			last_error.error_id = message->data[0];
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	799a      	ldrb	r2, [r3, #6]
 80053d2:	4b65      	ldr	r3, [pc, #404]	; (8005568 <service_can_rx_message+0x1f8>)
 80053d4:	721a      	strb	r2, [r3, #8]
		}

		// return success because the problem is not with the RX
		return CAN_SUCCESS;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e0c0      	b.n	800555c <service_can_rx_message+0x1ec>
	}

	// error checking on the parameter requested
	if (id.parameter < 0 || id.parameter >= NUM_OF_PARAMETERS)
 80053da:	8abb      	ldrh	r3, [r7, #20]
 80053dc:	2b0b      	cmp	r3, #11
 80053de:	d908      	bls.n	80053f2 <service_can_rx_message+0x82>
	{
		send_error_message(&id, ID_NOT_FOUND);
 80053e0:	f107 0310 	add.w	r3, r7, #16
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 f9d4 	bl	8005794 <send_error_message>

		return NOT_FOUND_ERR;
 80053ec:	f06f 0309 	mvn.w	r3, #9
 80053f0:	e0b4      	b.n	800555c <service_can_rx_message+0x1ec>
	}
	
	// get the associated data struct and set last_rx
	data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[id.parameter]);
 80053f2:	8abb      	ldrh	r3, [r7, #20]
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b5d      	ldr	r3, [pc, #372]	; (800556c <service_can_rx_message+0x1fc>)
 80053f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fc:	61bb      	str	r3, [r7, #24]
	data_struct->last_rx = HAL_GetTick();
 80053fe:	f7fc f9f5 	bl	80017ec <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	601a      	str	r2, [r3, #0]

    // run command: run the command specified by the CAN message on this module
	if (parameter_data_types[id.parameter] == COMMAND)
 8005408:	8abb      	ldrh	r3, [r7, #20]
 800540a:	461a      	mov	r2, r3
 800540c:	4b58      	ldr	r3, [pc, #352]	; (8005570 <service_can_rx_message+0x200>)
 800540e:	5c9b      	ldrb	r3, [r3, r2]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d107      	bne.n	8005424 <service_can_rx_message+0xb4>
	{
		return run_can_command(message, &id);
 8005414:	f107 0310 	add.w	r3, r7, #16
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8d8 	bl	80055d0 <run_can_command>
 8005420:	4603      	mov	r3, r0
 8005422:	e09b      	b.n	800555c <service_can_rx_message+0x1ec>
	}

	// Check the update_enabled flag (if it is not a CAN command)
	if (!(data_struct->update_enabled))
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	791b      	ldrb	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d108      	bne.n	800543e <service_can_rx_message+0xce>
	{
		send_error_message(&id, PARAM_NOT_ENABLED);
 800542c:	f107 0310 	add.w	r3, r7, #16
 8005430:	2102      	movs	r1, #2
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f9ae 	bl	8005794 <send_error_message>
		return NOT_ENABLED_ERR;
 8005438:	f06f 030a 	mvn.w	r3, #10
 800543c:	e08e      	b.n	800555c <service_can_rx_message+0x1ec>
	}

	// request parameter: return a CAN message with the data taken from this module
	if (message->rtr_bit)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	791b      	ldrb	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <service_can_rx_message+0xe6>
	{
		return parameter_requested(message, &id);
 8005446:	f107 0310 	add.w	r3, r7, #16
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f891 	bl	8005574 <parameter_requested>
 8005452:	4603      	mov	r3, r0
 8005454:	e082      	b.n	800555c <service_can_rx_message+0x1ec>
	}

	// this code should only be reached if the message is a data message

	// build the data U64 (big endian)
	for (c = (message->dlc - 1); c >= 0; c--)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	795b      	ldrb	r3, [r3, #5]
 800545a:	3b01      	subs	r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e01b      	b.n	800549a <service_can_rx_message+0x12a>
	{
		recieved_data |= message->data[c] << (c * BITS_IN_BYTE);
 8005462:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	4413      	add	r3, r2
 800546a:	799b      	ldrb	r3, [r3, #6]
 800546c:	461a      	mov	r2, r3
 800546e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	461a      	mov	r2, r3
 800547a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800547e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005482:	ea40 0402 	orr.w	r4, r0, r2
 8005486:	ea41 0503 	orr.w	r5, r1, r3
 800548a:	e9c7 4508 	strd	r4, r5, [r7, #32]
	for (c = (message->dlc - 1); c >= 0; c--)
 800548e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b2db      	uxtb	r3, r3
 8005498:	77fb      	strb	r3, [r7, #31]
 800549a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	dadf      	bge.n	8005462 <service_can_rx_message+0xf2>
	}

	// Switch the pending_response flag
	data_struct->pending_response = FALSE;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2200      	movs	r2, #0
 80054a6:	715a      	strb	r2, [r3, #5]

	// this switch will handle all of the different possible data types
	// that can be sent over CAN
	switch (parameter_data_types[id.parameter])
 80054a8:	8abb      	ldrh	r3, [r7, #20]
 80054aa:	461a      	mov	r2, r3
 80054ac:	4b30      	ldr	r3, [pc, #192]	; (8005570 <service_can_rx_message+0x200>)
 80054ae:	5c9b      	ldrb	r3, [r3, r2]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d84a      	bhi.n	800554c <service_can_rx_message+0x1dc>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <service_can_rx_message+0x14c>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080054ed 	.word	0x080054ed
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	08005501 	.word	0x08005501
 80054cc:	0800550f 	.word	0x0800550f
 80054d0:	0800551b 	.word	0x0800551b
 80054d4:	08005527 	.word	0x08005527
 80054d8:	08005531 	.word	0x08005531
 80054dc:	0800553f 	.word	0x0800553f
	{
	case UNSIGNED8:
		((U8_CAN_STRUCT*)(data_struct))->data = (U8)recieved_data;
 80054e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	719a      	strb	r2, [r3, #6]
		return CAN_SUCCESS;
 80054e8:	2300      	movs	r3, #0
 80054ea:	e037      	b.n	800555c <service_can_rx_message+0x1ec>

	case UNSIGNED16:
		((U16_CAN_STRUCT*)(data_struct))->data = (U16)recieved_data;
 80054ec:	8c3a      	ldrh	r2, [r7, #32]
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	80da      	strh	r2, [r3, #6]
		return CAN_SUCCESS;
 80054f2:	2300      	movs	r3, #0
 80054f4:	e032      	b.n	800555c <service_can_rx_message+0x1ec>

	case UNSIGNED32:
		((U32_CAN_STRUCT*)(data_struct))->data = (U32)recieved_data;
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 80054fc:	2300      	movs	r3, #0
 80054fe:	e02d      	b.n	800555c <service_can_rx_message+0x1ec>

	case UNSIGNED64:
		((U64_CAN_STRUCT*)(data_struct))->data = (U64)recieved_data;
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005506:	e9c2 3402 	strd	r3, r4, [r2, #8]
		return CAN_SUCCESS;
 800550a:	2300      	movs	r3, #0
 800550c:	e026      	b.n	800555c <service_can_rx_message+0x1ec>

	case SIGNED8:
		((S8_CAN_STRUCT*)(data_struct))->data = (S8)recieved_data;
 800550e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	719a      	strb	r2, [r3, #6]
		return CAN_SUCCESS;
 8005516:	2300      	movs	r3, #0
 8005518:	e020      	b.n	800555c <service_can_rx_message+0x1ec>

	case SIGNED16:
		((S16_CAN_STRUCT*)(data_struct))->data = (S16)recieved_data;
 800551a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	80da      	strh	r2, [r3, #6]
		return CAN_SUCCESS;
 8005522:	2300      	movs	r3, #0
 8005524:	e01a      	b.n	800555c <service_can_rx_message+0x1ec>

	case SIGNED32:
		((S32_CAN_STRUCT*)(data_struct))->data = (S32)recieved_data;
 8005526:	6a3a      	ldr	r2, [r7, #32]
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 800552c:	2300      	movs	r3, #0
 800552e:	e015      	b.n	800555c <service_can_rx_message+0x1ec>

	case SIGNED64:
		((S64_CAN_STRUCT*)(data_struct))->data = (S64)recieved_data;
 8005530:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	e9c2 3402 	strd	r3, r4, [r2, #8]
		return CAN_SUCCESS;
 800553a:	2300      	movs	r3, #0
 800553c:	e00e      	b.n	800555c <service_can_rx_message+0x1ec>

	case FLOATING:
		// Union to get the bitwise data of the float
		float_con.u32 = (U32)recieved_data;
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	60fb      	str	r3, [r7, #12]

		((FLOAT_CAN_STRUCT*)(data_struct))->data = float_con.f;
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 8005548:	2300      	movs	r3, #0
 800554a:	e007      	b.n	800555c <service_can_rx_message+0x1ec>

	default:
		send_error_message(&id, DATATYPE_NOT_FOUND);
 800554c:	f107 0310 	add.w	r3, r7, #16
 8005550:	2104      	movs	r1, #4
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f91e 	bl	8005794 <send_error_message>
		return NOT_FOUND_ERR;
 8005558:	f06f 0309 	mvn.w	r3, #9
	}

	return CAN_SUCCESS;
}
 800555c:	4618      	mov	r0, r3
 800555e:	3728      	adds	r7, #40	; 0x28
 8005560:	46bd      	mov	sp, r7
 8005562:	bdb0      	pop	{r4, r5, r7, pc}
 8005564:	20004858 	.word	0x20004858
 8005568:	20004360 	.word	0x20004360
 800556c:	20000010 	.word	0x20000010
 8005570:	20000040 	.word	0x20000040

08005574 <parameter_requested>:


// parameter_requested
//  return a CAN message with the data taken from this module
static S8 parameter_requested(CAN_MSG* message, CAN_ID* id)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
	if (message->dlc != REQ_PARAM_SIZE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	795b      	ldrb	r3, [r3, #5]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d006      	beq.n	8005594 <parameter_requested+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 8005586:	2103      	movs	r1, #3
 8005588:	6838      	ldr	r0, [r7, #0]
 800558a:	f000 f903 	bl	8005794 <send_error_message>

		return SIZE_ERR;
 800558e:	f06f 030b 	mvn.w	r3, #11
 8005592:	e019      	b.n	80055c8 <parameter_requested+0x54>
	}

	// the requested parameter is stored in id->parameter of the received CAN message
	if (id->parameter <= CAN_COMMAND_ID || id->parameter >= NUM_OF_PARAMETERS)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	889b      	ldrh	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <parameter_requested+0x30>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	889b      	ldrh	r3, [r3, #4]
 80055a0:	2b0b      	cmp	r3, #11
 80055a2:	d906      	bls.n	80055b2 <parameter_requested+0x3e>
	{
		send_error_message(id, ID_NOT_FOUND);
 80055a4:	2100      	movs	r1, #0
 80055a6:	6838      	ldr	r0, [r7, #0]
 80055a8:	f000 f8f4 	bl	8005794 <send_error_message>

		return NOT_FOUND_ERR;
 80055ac:	f06f 0309 	mvn.w	r3, #9
 80055b0:	e00a      	b.n	80055c8 <parameter_requested+0x54>
	}

	// send the parameter data to the module that requested
	return send_parameter(id->priority, id->source_module, id->parameter);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	7818      	ldrb	r0, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	7899      	ldrb	r1, [r3, #2]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	889b      	ldrh	r3, [r3, #4]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	f7ff fcc3 	bl	8004f4c <send_parameter>
 80055c6:	4603      	mov	r3, r0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <run_can_command>:


// run_can_command
//  run the command specified by the CAN message on this module
static S8 run_can_command(CAN_MSG* message, CAN_ID* id)
{
 80055d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
	GCAN_COMMAND command_id;
	CUST_FUNC* this_function;

	// DLC error checking
	if (message->dlc != COMMAND_SIZE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	795b      	ldrb	r3, [r3, #5]
 80055de:	2b05      	cmp	r3, #5
 80055e0:	d006      	beq.n	80055f0 <run_can_command+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 80055e2:	2103      	movs	r1, #3
 80055e4:	6838      	ldr	r0, [r7, #0]
 80055e6:	f000 f8d5 	bl	8005794 <send_error_message>

		return SIZE_ERR;
 80055ea:	f06f 030b 	mvn.w	r3, #11
 80055ee:	e033      	b.n	8005658 <run_can_command+0x88>
	}

	// error checking on the command ID
	command_id = message->data[COMMAND_ID_POS];
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	799b      	ldrb	r3, [r3, #6]
 80055f4:	73fb      	strb	r3, [r7, #15]
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b06      	cmp	r3, #6
 80055fa:	d906      	bls.n	800560a <run_can_command+0x3a>
	{
		send_error_message(id, COMMAND_ID_NOT_FOUND);
 80055fc:	2101      	movs	r1, #1
 80055fe:	6838      	ldr	r0, [r7, #0]
 8005600:	f000 f8c8 	bl	8005794 <send_error_message>

		return NOT_FOUND_ERR;
 8005604:	f06f 0309 	mvn.w	r3, #9
 8005608:	e026      	b.n	8005658 <run_can_command+0x88>
	}

	this_function = &(cust_funcs[command_id]);
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	4613      	mov	r3, r2
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4a12      	ldr	r2, [pc, #72]	; (8005660 <run_can_command+0x90>)
 8005616:	4413      	add	r3, r2
 8005618:	60bb      	str	r3, [r7, #8]

	// check if the function is enabled
	if (!this_function->func_enabled)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	791b      	ldrb	r3, [r3, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <run_can_command+0x60>
	{
		send_error_message(id, COMMAND_NOT_ENABLED);
 8005622:	2105      	movs	r1, #5
 8005624:	6838      	ldr	r0, [r7, #0]
 8005626:	f000 f8b5 	bl	8005794 <send_error_message>

		return NOT_ENABLED_ERR;
 800562a:	f06f 030a 	mvn.w	r3, #10
 800562e:	e013      	b.n	8005658 <run_can_command+0x88>
	}

	// run the function
	(*(this_function->func_ptr))(id->source_module, this_function->param_ptr,
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	681c      	ldr	r4, [r3, #0]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	7898      	ldrb	r0, [r3, #2]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6899      	ldr	r1, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	79dd      	ldrb	r5, [r3, #7]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	7a1e      	ldrb	r6, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	7a5b      	ldrb	r3, [r3, #9]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	7a92      	ldrb	r2, [r2, #10]
 800564c:	9201      	str	r2, [sp, #4]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	4633      	mov	r3, r6
 8005652:	462a      	mov	r2, r5
 8005654:	47a0      	blx	r4
		message->data[COMMAND_PARAM_0], message->data[COMMAND_PARAM_1],
		message->data[COMMAND_PARAM_2], message->data[COMMAND_PARAM_3]);

	return CAN_SUCCESS;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005660:	200047f0 	.word	0x200047f0

08005664 <build_message_id>:

// build_can_id
//  this function will fill in the id of msg when called.
//  No error checking is preformed in this function besides masking
static void build_message_id(CAN_MSG* msg, CAN_ID* id)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
	U32 temp;

	msg->id = 0;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

	// priority bit
	temp = !!id->priority;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PRIORITY_POS - PRIORITY_SIZE);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	071b      	lsls	r3, r3, #28
 8005688:	60fb      	str	r3, [r7, #12]
	temp &= PRIORITY_MASK;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005690:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]

	// destination bits
	temp = id->dest_module;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - DEST_POS - DEST_SIZE);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	059b      	lsls	r3, r3, #22
 80056a8:	60fb      	str	r3, [r7, #12]
	temp &= DEST_MASK;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f003 637c 	and.w	r3, r3, #264241152	; 0xfc00000
 80056b0:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]

    // source bits
	temp = id->source_module;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	789b      	ldrb	r3, [r3, #2]
 80056c2:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - SOURCE_POS - SOURCE_SIZE);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	60fb      	str	r3, [r7, #12]
	temp &= SOURCE_MASK;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80056d0:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	601a      	str	r2, [r3, #0]

	// error bit
	temp = id->error;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	78db      	ldrb	r3, [r3, #3]
 80056e2:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - ERROR_POS - ERROR_SIZE);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	03db      	lsls	r3, r3, #15
 80056e8:	60fb      	str	r3, [r7, #12]
	temp &= ERROR_MASK;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056f0:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]

	// parameter bits
	temp = id->parameter;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	889b      	ldrh	r3, [r3, #4]
 8005702:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PARAM_POS - PARAM_SIZE);
	temp &= PARAM_MASK;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800570a:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]
}
 8005718:	bf00      	nop
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <get_message_id>:

// get_message_id
//  this function will take in a CAN message and convert it to
//  a CAN id struct. No error checking is performed
static void get_message_id(CAN_ID* id, CAN_MSG* message)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
	id->priority = GET_ID_PRIO(message->id);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	0f1b      	lsrs	r3, r3, #28
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	701a      	strb	r2, [r3, #0]
	id->dest_module = GET_ID_DEST(message->id);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	0d9b      	lsrs	r3, r3, #22
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800574c:	b2da      	uxtb	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	705a      	strb	r2, [r3, #1]
	id->source_module = GET_ID_SOURCE(message->id);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	0c1b      	lsrs	r3, r3, #16
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800575e:	b2da      	uxtb	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	709a      	strb	r2, [r3, #2]
	id->error = GET_ID_ERROR(message->id);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	0bdb      	lsrs	r3, r3, #15
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	b2da      	uxtb	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	70da      	strb	r2, [r3, #3]
	id->parameter = GET_ID_PARAM(message->id);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005780:	b29a      	uxth	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	809a      	strh	r2, [r3, #4]
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <send_error_message>:


// send_error_message
//  Sends a return message to the original sender with the ID specified
static S8 send_error_message(CAN_ID* rx_id, U8 error_id)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	70fb      	strb	r3, [r7, #3]
	CAN_MSG message;
	CAN_ID tx_id;

	// create the CAN ID for the error message
	tx_id.priority = rx_id->priority;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	723b      	strb	r3, [r7, #8]
	tx_id.dest_module = rx_id->source_module;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	789b      	ldrb	r3, [r3, #2]
 80057aa:	727b      	strb	r3, [r7, #9]
	tx_id.source_module = this_module_id;
 80057ac:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <send_error_message+0x58>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	72bb      	strb	r3, [r7, #10]
	tx_id.error = TRUE;
 80057b2:	2301      	movs	r3, #1
 80057b4:	72fb      	strb	r3, [r7, #11]
	tx_id.parameter = rx_id->parameter;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	889b      	ldrh	r3, [r3, #4]
 80057ba:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &tx_id);
 80057bc:	f107 0208 	add.w	r2, r7, #8
 80057c0:	f107 0310 	add.w	r3, r7, #16
 80057c4:	4611      	mov	r1, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff ff4c 	bl	8005664 <build_message_id>

	// set the RTR bit to a data message
	message.rtr_bit = DATA_MESSAGE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	753b      	strb	r3, [r7, #20]

	// set the DLC and data
	message.dlc = sizeof(error_id);
 80057d0:	2301      	movs	r3, #1
 80057d2:	757b      	strb	r3, [r7, #21]
	message.data[0] = error_id;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	75bb      	strb	r3, [r7, #22]

	// send the CAN message
	return tx_can_message(&message);
 80057d8:	f107 0310 	add.w	r3, r7, #16
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff fda1 	bl	8005324 <tx_can_message>
 80057e2:	4603      	mov	r3, r0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20004858 	.word	0x20004858

080057f0 <define_can_bus>:
//
// WARNING: if MULTI_BUS is defined, this function must be called as part of the initialization step,
//           right after init() has been called for all active busses
#ifdef MULTI_BUS
void define_can_bus(CAN_HandleTypeDef* hcan, U8 gophercan_bus_id, U8 bus_number)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
 80057fc:	4613      	mov	r3, r2
 80057fe:	70bb      	strb	r3, [r7, #2]
	switch (bus_number)
 8005800:	78bb      	ldrb	r3, [r7, #2]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d109      	bne.n	800581a <define_can_bus+0x2a>
		break;
#endif

#if NUM_OF_BUSSES > 1
	case 1:
		gbus1.tx_buffer = &tx_buffer_1;
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <define_can_bus+0x4c>)
 8005808:	4a0d      	ldr	r2, [pc, #52]	; (8005840 <define_can_bus+0x50>)
 800580a:	601a      	str	r2, [r3, #0]
		gbus1.hcan = hcan;
 800580c:	4a0b      	ldr	r2, [pc, #44]	; (800583c <define_can_bus+0x4c>)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6053      	str	r3, [r2, #4]
		gbus1.gopher_can_id = gophercan_bus_id;
 8005812:	4a0a      	ldr	r2, [pc, #40]	; (800583c <define_can_bus+0x4c>)
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	7213      	strb	r3, [r2, #8]
		break;
 8005818:	e009      	b.n	800582e <define_can_bus+0x3e>
#endif

	default:
		gbus0.tx_buffer = &tx_buffer;
 800581a:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <define_can_bus+0x54>)
 800581c:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <define_can_bus+0x58>)
 800581e:	601a      	str	r2, [r3, #0]
		gbus0.hcan = hcan;
 8005820:	4a08      	ldr	r2, [pc, #32]	; (8005844 <define_can_bus+0x54>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6053      	str	r3, [r2, #4]
		gbus0.gopher_can_id = gophercan_bus_id;
 8005826:	4a07      	ldr	r2, [pc, #28]	; (8005844 <define_can_bus+0x54>)
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	7213      	strb	r3, [r2, #8]
		break;
 800582c:	bf00      	nop
	}
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20004864 	.word	0x20004864
 8005840:	200047e8 	.word	0x200047e8
 8005844:	200047b4 	.word	0x200047b4
 8005848:	20004798 	.word	0x20004798

0800584c <HAL_CAN_TxMailbox0CompleteCallback>:


// the F7xx has ISRs for available TX mailboxes having an opening. All callbacks should service the TX hardware
#if TARGET == F7XX
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff fcbf 	bl	80051d8 <service_can_tx_hardware>
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff fcb4 	bl	80051d8 <service_can_tx_hardware>
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fca9 	bl	80051d8 <service_can_tx_hardware>
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef* hcan)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fc9e 	bl	80051d8 <service_can_tx_hardware>
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef* hcan)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fc93 	bl	80051d8 <service_can_tx_hardware>
}
 80058b2:	bf00      	nop
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef* hcan)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff fc88 	bl	80051d8 <service_can_tx_hardware>
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <choose_tx_buffer_from_hcan>:
// choose_tx_buffer_from_hcan
//  Chooses what buffer the hcan pointer inputed is referring to based on the function define_can_bus().
//  If the hcan pointer is not found, defaults to module bus 0
#ifdef MULTI_BUS
static CAN_MSG_RING_BUFFER* choose_tx_buffer_from_hcan(CAN_HandleTypeDef* hcan)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	{
		return gbus2.tx_buffer;
	}
#endif
#if NUM_OF_BUSSES > 1
	if (hcan == gbus1.hcan)
 80058d8:	4b07      	ldr	r3, [pc, #28]	; (80058f8 <choose_tx_buffer_from_hcan+0x28>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d102      	bne.n	80058e8 <choose_tx_buffer_from_hcan+0x18>
	{
		return gbus1.tx_buffer;
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <choose_tx_buffer_from_hcan+0x28>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	e001      	b.n	80058ec <choose_tx_buffer_from_hcan+0x1c>
	}
#endif
	return gbus0.tx_buffer;
 80058e8:	4b04      	ldr	r3, [pc, #16]	; (80058fc <choose_tx_buffer_from_hcan+0x2c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	20004864 	.word	0x20004864
 80058fc:	200047b4 	.word	0x200047b4

08005900 <choose_tx_buffer_from_dest_module>:
// choose_tx_buffer_from_dest_module
//  Chooses which buffer the the dest_module in message_to_add is on
//  If the module is not found, defaults to module bus 0
#ifdef MULTI_BUS
static CAN_MSG_RING_BUFFER* choose_tx_buffer_from_dest_module(CAN_MSG* message_to_add)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	MODULE_ID dest_module;
	dest_module = GET_ID_DEST(message_to_add->id);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	0d9b      	lsrs	r3, r3, #22
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005914:	73fb      	strb	r3, [r7, #15]
		return gbus2.tx_buffer;
	}
	else
#endif
#if NUM_OF_BUSSES > 1
	if (module_bus_number[dest_module] == gbus1.gopher_can_id)
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	4a08      	ldr	r2, [pc, #32]	; (800593c <choose_tx_buffer_from_dest_module+0x3c>)
 800591a:	5cd2      	ldrb	r2, [r2, r3]
 800591c:	4b08      	ldr	r3, [pc, #32]	; (8005940 <choose_tx_buffer_from_dest_module+0x40>)
 800591e:	7a1b      	ldrb	r3, [r3, #8]
 8005920:	429a      	cmp	r2, r3
 8005922:	d102      	bne.n	800592a <choose_tx_buffer_from_dest_module+0x2a>
	{
		return gbus1.tx_buffer;
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <choose_tx_buffer_from_dest_module+0x40>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	e001      	b.n	800592e <choose_tx_buffer_from_dest_module+0x2e>
	}
	else
#endif
	return gbus0.tx_buffer;
 800592a:	4b06      	ldr	r3, [pc, #24]	; (8005944 <choose_tx_buffer_from_dest_module+0x44>)
 800592c:	681b      	ldr	r3, [r3, #0]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	2000004c 	.word	0x2000004c
 8005940:	20004864 	.word	0x20004864
 8005944:	200047b4 	.word	0x200047b4

08005948 <send_message_to_all_busses>:

// send_message_to_all_busses
//  This function will add the message to all of the TX buffers active
#ifdef MULTI_BUS
static void send_message_to_all_busses(CAN_MSG* message_to_add)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
		add_message_to_back(&tx_buffer_2, message_to_add);
	}
#endif
#if NUM_OF_BUSSES > 1
	// check to make sure the buffer is not full
	if (!is_full(&tx_buffer_1))
 8005950:	480b      	ldr	r0, [pc, #44]	; (8005980 <send_message_to_all_busses+0x38>)
 8005952:	f000 f8ae 	bl	8005ab2 <is_full>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d103      	bne.n	8005964 <send_message_to_all_busses+0x1c>
	{
		add_message_to_back(&tx_buffer_1, message_to_add);
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4808      	ldr	r0, [pc, #32]	; (8005980 <send_message_to_all_busses+0x38>)
 8005960:	f000 f909 	bl	8005b76 <add_message_to_back>
	}
#endif
	// check to make sure the buffer is not full
	if (!is_full(&tx_buffer))
 8005964:	4807      	ldr	r0, [pc, #28]	; (8005984 <send_message_to_all_busses+0x3c>)
 8005966:	f000 f8a4 	bl	8005ab2 <is_full>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <send_message_to_all_busses+0x30>
	{
		add_message_to_back(&tx_buffer, message_to_add);
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	4804      	ldr	r0, [pc, #16]	; (8005984 <send_message_to_all_busses+0x3c>)
 8005974:	f000 f8ff 	bl	8005b76 <add_message_to_back>
	}
}
 8005978:	bf00      	nop
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	200047e8 	.word	0x200047e8
 8005984:	20004798 	.word	0x20004798

08005988 <rout_can_message>:
// rout_can_message
//  Function to be called in service_can_rx_hardware() that will take messages that are
//  destined for modules on another bus and put that message into the correct TX buffer
#ifdef CAN_ROUTER
static void rout_can_message(CAN_HandleTypeDef* hcan, CAN_MSG* message)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
	CAN_MSG_RING_BUFFER* buffer;
	MODULE_ID dest_module;
	dest_module = GET_ID_DEST(message->id);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	0d9b      	lsrs	r3, r3, #22
 8005998:	b2db      	uxtb	r3, r3
 800599a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800599e:	73fb      	strb	r3, [r7, #15]

	// Get the buffer this message should go on if it needs to be routed
	buffer = choose_tx_buffer_from_dest_module(message);
 80059a0:	6838      	ldr	r0, [r7, #0]
 80059a2:	f7ff ffad 	bl	8005900 <choose_tx_buffer_from_dest_module>
 80059a6:	60b8      	str	r0, [r7, #8]

	// Handle the special case of a message that needs to be sent out to all busses (ID 0)
	if (dest_module == ALL_MODULES_ID)
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d122      	bne.n	80059f4 <rout_can_message+0x6c>
			add_message_to_back(&tx_buffer_2, message);
		}
#endif
#if NUM_OF_BUSSES > 1
		// check to make sure the buffer is not full and the message did not come from this buffer
		if (!is_full(&tx_buffer_1)
 80059ae:	4827      	ldr	r0, [pc, #156]	; (8005a4c <rout_can_message+0xc4>)
 80059b0:	f000 f87f 	bl	8005ab2 <is_full>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <rout_can_message+0x48>
				&& &tx_buffer_1 != choose_tx_buffer_from_hcan(hcan))
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff ff88 	bl	80058d0 <choose_tx_buffer_from_hcan>
 80059c0:	4602      	mov	r2, r0
 80059c2:	4b22      	ldr	r3, [pc, #136]	; (8005a4c <rout_can_message+0xc4>)
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d003      	beq.n	80059d0 <rout_can_message+0x48>
		{
			add_message_to_back(&tx_buffer_1, message);
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	4820      	ldr	r0, [pc, #128]	; (8005a4c <rout_can_message+0xc4>)
 80059cc:	f000 f8d3 	bl	8005b76 <add_message_to_back>
		}
#endif
		// check to make sure the buffer is not full and the message did not come from this buffer
		if (!is_full(&tx_buffer)
 80059d0:	481f      	ldr	r0, [pc, #124]	; (8005a50 <rout_can_message+0xc8>)
 80059d2:	f000 f86e 	bl	8005ab2 <is_full>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d12f      	bne.n	8005a3c <rout_can_message+0xb4>
				&& &tx_buffer != choose_tx_buffer_from_hcan(hcan))
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ff77 	bl	80058d0 <choose_tx_buffer_from_hcan>
 80059e2:	4602      	mov	r2, r0
 80059e4:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <rout_can_message+0xc8>)
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d028      	beq.n	8005a3c <rout_can_message+0xb4>
		{
			add_message_to_back(&tx_buffer, message);
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	4818      	ldr	r0, [pc, #96]	; (8005a50 <rout_can_message+0xc8>)
 80059ee:	f000 f8c2 	bl	8005b76 <add_message_to_back>
		}

		return;
 80059f2:	e023      	b.n	8005a3c <rout_can_message+0xb4>
	}

	// Make sure this message isn't for the module that is acting as the router
	if (dest_module == this_module_id)
 80059f4:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <rout_can_message+0xcc>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	7bfa      	ldrb	r2, [r7, #15]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d020      	beq.n	8005a40 <rout_can_message+0xb8>
		// This message is for the router module. Return and process the message as normal
		return;
	}

	// Determine if this message needs to be routed (if the destination module is on another bus)
	if (buffer == choose_tx_buffer_from_hcan(hcan))
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff ff66 	bl	80058d0 <choose_tx_buffer_from_hcan>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d01b      	beq.n	8005a44 <rout_can_message+0xbc>
		// This message does not need to be routed. It came from the bus it should be on
		return;
	}

	// check to make sure the buffer is not full. If it is, the message will be discarded
	if (is_full(buffer))
 8005a0c:	68b8      	ldr	r0, [r7, #8]
 8005a0e:	f000 f850 	bl	8005ab2 <is_full>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <rout_can_message+0x9e>
	{
		rx_buffer.fill_level--;
 8005a18:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <rout_can_message+0xd0>)
 8005a1a:	799b      	ldrb	r3, [r3, #6]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <rout_can_message+0xd0>)
 8005a22:	719a      	strb	r2, [r3, #6]
		return;
 8005a24:	e00f      	b.n	8005a46 <rout_can_message+0xbe>
	}

	// Add the message to the selected TX buffer
	add_message_to_back(buffer, message);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	68b8      	ldr	r0, [r7, #8]
 8005a2a:	f000 f8a4 	bl	8005b76 <add_message_to_back>

	// Remove the message from the RX buffer, it is now on a TX buffer
	rx_buffer.fill_level--;
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <rout_can_message+0xd0>)
 8005a30:	799b      	ldrb	r3, [r3, #6]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <rout_can_message+0xd0>)
 8005a38:	719a      	strb	r2, [r3, #6]
 8005a3a:	e004      	b.n	8005a46 <rout_can_message+0xbe>
		return;
 8005a3c:	bf00      	nop
 8005a3e:	e002      	b.n	8005a46 <rout_can_message+0xbe>
		return;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <rout_can_message+0xbe>
		return;
 8005a44:	bf00      	nop
}
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200047e8 	.word	0x200047e8
 8005a50:	20004798 	.word	0x20004798
 8005a54:	20004858 	.word	0x20004858
 8005a58:	20004590 	.word	0x20004590

08005a5c <do_nothing>:
// do_nothing
//  this exists to give a default function pointer to all of the CAN commands
//  to avoid errors from bad function pointers
void do_nothing(U8 sending_module, void* param,
	U8 remote_param0, U8 remote_param1, U8 remote_param2, U8 remote_param3)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6039      	str	r1, [r7, #0]
 8005a64:	4611      	mov	r1, r2
 8005a66:	461a      	mov	r2, r3
 8005a68:	4603      	mov	r3, r0
 8005a6a:	71fb      	strb	r3, [r7, #7]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	71bb      	strb	r3, [r7, #6]
 8005a70:	4613      	mov	r3, r2
 8005a72:	717b      	strb	r3, [r7, #5]
	// this function has successfully done nothing
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <init_buffer>:


// init_buffer
//  initialize the buffer with the values passed in as parameters
void init_buffer(CAN_MSG_RING_BUFFER* buffer, CAN_MSG buffer_memory_ptr[], U8 buffer_size)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	71fb      	strb	r3, [r7, #7]
	buffer->head = 0;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	715a      	strb	r2, [r3, #5]
	buffer->fill_level = 0;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	719a      	strb	r2, [r3, #6]
	buffer->size = buffer_size;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	79fa      	ldrb	r2, [r7, #7]
 8005a9e:	711a      	strb	r2, [r3, #4]
	buffer->message_buffer = buffer_memory_ptr;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	601a      	str	r2, [r3, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <is_full>:


// is_full
//  return true if the buffer is full, false otherwise
boolean is_full(CAN_MSG_RING_BUFFER* buffer)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
	if (buffer->fill_level >= buffer->size)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	799a      	ldrb	r2, [r3, #6]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	791b      	ldrb	r3, [r3, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d301      	bcc.n	8005aca <is_full+0x18>
	{
		return TRUE;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <is_full+0x1a>
	}

	return FALSE;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <is_empty>:


// is_empty
//  return true if the buffer has no elements, false otherwise
boolean is_empty(CAN_MSG_RING_BUFFER* buffer)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
	if (buffer->fill_level > 0)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	799b      	ldrb	r3, [r3, #6]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <is_empty+0x14>
	{
		return FALSE;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e000      	b.n	8005aee <is_empty+0x16>
	}

	return TRUE;
 8005aec:	2301      	movs	r3, #1
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <get_from_buffer>:


// get_from_buffer
//  gets the message at index as if it was a normal array
CAN_MSG* get_from_buffer(CAN_MSG_RING_BUFFER* buffer, U8 index)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	70fb      	strb	r3, [r7, #3]
	return buffer->message_buffer + ((buffer->head + index) % buffer->size);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6819      	ldr	r1, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	795b      	ldrb	r3, [r3, #5]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	4413      	add	r3, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	7912      	ldrb	r2, [r2, #4]
 8005b18:	fb93 f0f2 	sdiv	r0, r3, r2
 8005b1c:	fb02 f200 	mul.w	r2, r2, r0
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	440b      	add	r3, r1
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <remove_from_front>:


// remove_from_front
//  will remove the first element of the ring buffer. If the buffer is empty it will do nothing
void remove_from_front(CAN_MSG_RING_BUFFER* buffer)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
	// don't do anything if the buffer is empty
	if (is_empty(buffer))
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff ffcc 	bl	8005ad8 <is_empty>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d113      	bne.n	8005b6e <remove_from_front+0x3c>
	{
		return;
	}

	// move the head to the next element
	buffer->head = (buffer->head + 1) % buffer->size;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	795b      	ldrb	r3, [r3, #5]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	7912      	ldrb	r2, [r2, #4]
 8005b50:	fb93 f1f2 	sdiv	r1, r3, r2
 8005b54:	fb02 f201 	mul.w	r2, r2, r1
 8005b58:	1a9b      	subs	r3, r3, r2
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	715a      	strb	r2, [r3, #5]

	// decrement the fill level
	buffer->fill_level--;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	799b      	ldrb	r3, [r3, #6]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	719a      	strb	r2, [r3, #6]
 8005b6c:	e000      	b.n	8005b70 <remove_from_front+0x3e>
		return;
 8005b6e:	bf00      	nop
}
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <add_message_to_back>:
// add_message_to_back
//  This function will add message to the first open slot in the ring buffer. Note no
//  error checking is done in this function, so it will need to be done somewhere else
//  before calling this function
void add_message_to_back(CAN_MSG_RING_BUFFER* buffer, CAN_MSG* message)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
	CAN_MSG* buffer_message;
	U8 c;

	// set the message in the next open element in the buffer to message_to_add (by value, not by reference)
	buffer_message = get_from_buffer(buffer, buffer->fill_level);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	799b      	ldrb	r3, [r3, #6]
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff ffb7 	bl	8005afa <get_from_buffer>
 8005b8c:	60b8      	str	r0, [r7, #8]

	buffer_message->id = message->id;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	601a      	str	r2, [r3, #0]
	buffer_message->dlc = message->dlc;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	795a      	ldrb	r2, [r3, #5]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	715a      	strb	r2, [r3, #5]
	buffer_message->rtr_bit = message->rtr_bit;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	791a      	ldrb	r2, [r3, #4]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	711a      	strb	r2, [r3, #4]

	for (c = 0; c < buffer_message->dlc; c++)
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
 8005baa:	e00b      	b.n	8005bc4 <add_message_to_back+0x4e>
	{
		buffer_message->data[c] = message->data[c];
 8005bac:	7bfa      	ldrb	r2, [r7, #15]
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	7991      	ldrb	r1, [r2, #6]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	460a      	mov	r2, r1
 8005bbc:	719a      	strb	r2, [r3, #6]
	for (c = 0; c < buffer_message->dlc; c++)
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	73fb      	strb	r3, [r7, #15]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	795b      	ldrb	r3, [r3, #5]
 8005bc8:	7bfa      	ldrb	r2, [r7, #15]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d3ee      	bcc.n	8005bac <add_message_to_back+0x36>
	}

	// adjust the fill_level to reflect the new message added
	buffer->fill_level++;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	799b      	ldrb	r3, [r3, #6]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	719a      	strb	r2, [r3, #6]
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <__errno>:
 8005be4:	4b01      	ldr	r3, [pc, #4]	; (8005bec <__errno+0x8>)
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000054 	.word	0x20000054

08005bf0 <__libc_init_array>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4d0d      	ldr	r5, [pc, #52]	; (8005c28 <__libc_init_array+0x38>)
 8005bf4:	4c0d      	ldr	r4, [pc, #52]	; (8005c2c <__libc_init_array+0x3c>)
 8005bf6:	1b64      	subs	r4, r4, r5
 8005bf8:	10a4      	asrs	r4, r4, #2
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	42a6      	cmp	r6, r4
 8005bfe:	d109      	bne.n	8005c14 <__libc_init_array+0x24>
 8005c00:	4d0b      	ldr	r5, [pc, #44]	; (8005c30 <__libc_init_array+0x40>)
 8005c02:	4c0c      	ldr	r4, [pc, #48]	; (8005c34 <__libc_init_array+0x44>)
 8005c04:	f000 f8f6 	bl	8005df4 <_init>
 8005c08:	1b64      	subs	r4, r4, r5
 8005c0a:	10a4      	asrs	r4, r4, #2
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	42a6      	cmp	r6, r4
 8005c10:	d105      	bne.n	8005c1e <__libc_init_array+0x2e>
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
 8005c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c18:	4798      	blx	r3
 8005c1a:	3601      	adds	r6, #1
 8005c1c:	e7ee      	b.n	8005bfc <__libc_init_array+0xc>
 8005c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c22:	4798      	blx	r3
 8005c24:	3601      	adds	r6, #1
 8005c26:	e7f2      	b.n	8005c0e <__libc_init_array+0x1e>
 8005c28:	08005e8c 	.word	0x08005e8c
 8005c2c:	08005e8c 	.word	0x08005e8c
 8005c30:	08005e8c 	.word	0x08005e8c
 8005c34:	08005e90 	.word	0x08005e90

08005c38 <malloc>:
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <malloc+0xc>)
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f000 b861 	b.w	8005d04 <_malloc_r>
 8005c42:	bf00      	nop
 8005c44:	20000054 	.word	0x20000054

08005c48 <free>:
 8005c48:	4b02      	ldr	r3, [pc, #8]	; (8005c54 <free+0xc>)
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	f000 b80b 	b.w	8005c68 <_free_r>
 8005c52:	bf00      	nop
 8005c54:	20000054 	.word	0x20000054

08005c58 <memset>:
 8005c58:	4402      	add	r2, r0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d100      	bne.n	8005c62 <memset+0xa>
 8005c60:	4770      	bx	lr
 8005c62:	f803 1b01 	strb.w	r1, [r3], #1
 8005c66:	e7f9      	b.n	8005c5c <memset+0x4>

08005c68 <_free_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	d045      	beq.n	8005cfc <_free_r+0x94>
 8005c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c74:	1f0c      	subs	r4, r1, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bfb8      	it	lt
 8005c7a:	18e4      	addlt	r4, r4, r3
 8005c7c:	f000 f8ac 	bl	8005dd8 <__malloc_lock>
 8005c80:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <_free_r+0x98>)
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	4610      	mov	r0, r2
 8005c86:	b933      	cbnz	r3, 8005c96 <_free_r+0x2e>
 8005c88:	6063      	str	r3, [r4, #4]
 8005c8a:	6014      	str	r4, [r2, #0]
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c92:	f000 b8a7 	b.w	8005de4 <__malloc_unlock>
 8005c96:	42a3      	cmp	r3, r4
 8005c98:	d90c      	bls.n	8005cb4 <_free_r+0x4c>
 8005c9a:	6821      	ldr	r1, [r4, #0]
 8005c9c:	1862      	adds	r2, r4, r1
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	bf04      	itt	eq
 8005ca2:	681a      	ldreq	r2, [r3, #0]
 8005ca4:	685b      	ldreq	r3, [r3, #4]
 8005ca6:	6063      	str	r3, [r4, #4]
 8005ca8:	bf04      	itt	eq
 8005caa:	1852      	addeq	r2, r2, r1
 8005cac:	6022      	streq	r2, [r4, #0]
 8005cae:	6004      	str	r4, [r0, #0]
 8005cb0:	e7ec      	b.n	8005c8c <_free_r+0x24>
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	b10a      	cbz	r2, 8005cbc <_free_r+0x54>
 8005cb8:	42a2      	cmp	r2, r4
 8005cba:	d9fa      	bls.n	8005cb2 <_free_r+0x4a>
 8005cbc:	6819      	ldr	r1, [r3, #0]
 8005cbe:	1858      	adds	r0, r3, r1
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d10b      	bne.n	8005cdc <_free_r+0x74>
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	4401      	add	r1, r0
 8005cc8:	1858      	adds	r0, r3, r1
 8005cca:	4282      	cmp	r2, r0
 8005ccc:	6019      	str	r1, [r3, #0]
 8005cce:	d1dd      	bne.n	8005c8c <_free_r+0x24>
 8005cd0:	6810      	ldr	r0, [r2, #0]
 8005cd2:	6852      	ldr	r2, [r2, #4]
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	4401      	add	r1, r0
 8005cd8:	6019      	str	r1, [r3, #0]
 8005cda:	e7d7      	b.n	8005c8c <_free_r+0x24>
 8005cdc:	d902      	bls.n	8005ce4 <_free_r+0x7c>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	e7d3      	b.n	8005c8c <_free_r+0x24>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	1821      	adds	r1, r4, r0
 8005ce8:	428a      	cmp	r2, r1
 8005cea:	bf04      	itt	eq
 8005cec:	6811      	ldreq	r1, [r2, #0]
 8005cee:	6852      	ldreq	r2, [r2, #4]
 8005cf0:	6062      	str	r2, [r4, #4]
 8005cf2:	bf04      	itt	eq
 8005cf4:	1809      	addeq	r1, r1, r0
 8005cf6:	6021      	streq	r1, [r4, #0]
 8005cf8:	605c      	str	r4, [r3, #4]
 8005cfa:	e7c7      	b.n	8005c8c <_free_r+0x24>
 8005cfc:	bd38      	pop	{r3, r4, r5, pc}
 8005cfe:	bf00      	nop
 8005d00:	200040a0 	.word	0x200040a0

08005d04 <_malloc_r>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	1ccd      	adds	r5, r1, #3
 8005d08:	f025 0503 	bic.w	r5, r5, #3
 8005d0c:	3508      	adds	r5, #8
 8005d0e:	2d0c      	cmp	r5, #12
 8005d10:	bf38      	it	cc
 8005d12:	250c      	movcc	r5, #12
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	4606      	mov	r6, r0
 8005d18:	db01      	blt.n	8005d1e <_malloc_r+0x1a>
 8005d1a:	42a9      	cmp	r1, r5
 8005d1c:	d903      	bls.n	8005d26 <_malloc_r+0x22>
 8005d1e:	230c      	movs	r3, #12
 8005d20:	6033      	str	r3, [r6, #0]
 8005d22:	2000      	movs	r0, #0
 8005d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d26:	f000 f857 	bl	8005dd8 <__malloc_lock>
 8005d2a:	4921      	ldr	r1, [pc, #132]	; (8005db0 <_malloc_r+0xac>)
 8005d2c:	680a      	ldr	r2, [r1, #0]
 8005d2e:	4614      	mov	r4, r2
 8005d30:	b99c      	cbnz	r4, 8005d5a <_malloc_r+0x56>
 8005d32:	4f20      	ldr	r7, [pc, #128]	; (8005db4 <_malloc_r+0xb0>)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	b923      	cbnz	r3, 8005d42 <_malloc_r+0x3e>
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f000 f83c 	bl	8005db8 <_sbrk_r>
 8005d40:	6038      	str	r0, [r7, #0]
 8005d42:	4629      	mov	r1, r5
 8005d44:	4630      	mov	r0, r6
 8005d46:	f000 f837 	bl	8005db8 <_sbrk_r>
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	d123      	bne.n	8005d96 <_malloc_r+0x92>
 8005d4e:	230c      	movs	r3, #12
 8005d50:	6033      	str	r3, [r6, #0]
 8005d52:	4630      	mov	r0, r6
 8005d54:	f000 f846 	bl	8005de4 <__malloc_unlock>
 8005d58:	e7e3      	b.n	8005d22 <_malloc_r+0x1e>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	1b5b      	subs	r3, r3, r5
 8005d5e:	d417      	bmi.n	8005d90 <_malloc_r+0x8c>
 8005d60:	2b0b      	cmp	r3, #11
 8005d62:	d903      	bls.n	8005d6c <_malloc_r+0x68>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	441c      	add	r4, r3
 8005d68:	6025      	str	r5, [r4, #0]
 8005d6a:	e004      	b.n	8005d76 <_malloc_r+0x72>
 8005d6c:	6863      	ldr	r3, [r4, #4]
 8005d6e:	42a2      	cmp	r2, r4
 8005d70:	bf0c      	ite	eq
 8005d72:	600b      	streq	r3, [r1, #0]
 8005d74:	6053      	strne	r3, [r2, #4]
 8005d76:	4630      	mov	r0, r6
 8005d78:	f000 f834 	bl	8005de4 <__malloc_unlock>
 8005d7c:	f104 000b 	add.w	r0, r4, #11
 8005d80:	1d23      	adds	r3, r4, #4
 8005d82:	f020 0007 	bic.w	r0, r0, #7
 8005d86:	1ac2      	subs	r2, r0, r3
 8005d88:	d0cc      	beq.n	8005d24 <_malloc_r+0x20>
 8005d8a:	1a1b      	subs	r3, r3, r0
 8005d8c:	50a3      	str	r3, [r4, r2]
 8005d8e:	e7c9      	b.n	8005d24 <_malloc_r+0x20>
 8005d90:	4622      	mov	r2, r4
 8005d92:	6864      	ldr	r4, [r4, #4]
 8005d94:	e7cc      	b.n	8005d30 <_malloc_r+0x2c>
 8005d96:	1cc4      	adds	r4, r0, #3
 8005d98:	f024 0403 	bic.w	r4, r4, #3
 8005d9c:	42a0      	cmp	r0, r4
 8005d9e:	d0e3      	beq.n	8005d68 <_malloc_r+0x64>
 8005da0:	1a21      	subs	r1, r4, r0
 8005da2:	4630      	mov	r0, r6
 8005da4:	f000 f808 	bl	8005db8 <_sbrk_r>
 8005da8:	3001      	adds	r0, #1
 8005daa:	d1dd      	bne.n	8005d68 <_malloc_r+0x64>
 8005dac:	e7cf      	b.n	8005d4e <_malloc_r+0x4a>
 8005dae:	bf00      	nop
 8005db0:	200040a0 	.word	0x200040a0
 8005db4:	200040a4 	.word	0x200040a4

08005db8 <_sbrk_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4c06      	ldr	r4, [pc, #24]	; (8005dd4 <_sbrk_r+0x1c>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	f7fb fc7c 	bl	80016c0 <_sbrk>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_sbrk_r+0x1a>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_sbrk_r+0x1a>
 8005dd0:	602b      	str	r3, [r5, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	20004870 	.word	0x20004870

08005dd8 <__malloc_lock>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	; (8005de0 <__malloc_lock+0x8>)
 8005dda:	f000 b809 	b.w	8005df0 <__retarget_lock_acquire_recursive>
 8005dde:	bf00      	nop
 8005de0:	20004878 	.word	0x20004878

08005de4 <__malloc_unlock>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__malloc_unlock+0x8>)
 8005de6:	f000 b804 	b.w	8005df2 <__retarget_lock_release_recursive>
 8005dea:	bf00      	nop
 8005dec:	20004878 	.word	0x20004878

08005df0 <__retarget_lock_acquire_recursive>:
 8005df0:	4770      	bx	lr

08005df2 <__retarget_lock_release_recursive>:
 8005df2:	4770      	bx	lr

08005df4 <_init>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr

08005e00 <_fini>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr
